import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int17 = dateTimeField15.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.lang.String str42 = dateTimeField15.getAsShortText(1L, locale39);
        java.util.Set<java.lang.Character> charSet43 = locale39.getExtensionKeys();
        int int44 = property12.getMaximumShortTextLength(locale39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        int int6 = mutableDateTime1.getMonthOfYear();
        int int7 = mutableDateTime1.getDayOfWeek();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        mutableDateTime9.addHours(59);
        org.joda.time.Chronology chronology14 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology14.getZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime17.set(dateTimeFieldType21, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        int int25 = mutableDateTime17.get(dateTimeFieldType24);
        int int26 = mutableDateTime17.getWeekOfWeekyear();
        org.joda.time.Instant instant27 = mutableDateTime17.toInstant();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime17.weekyear();
        int int29 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime1.setZoneRetainFields(dateTimeZone15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and instant27", (mutableDateTime17.compareTo(instant27) == 0) == mutableDateTime17.equals(instant27));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        mutableDateTime35.addHours(59);
        org.joda.time.Chronology chronology40 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology40.getZone();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime43.set(dateTimeFieldType47, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        int int51 = mutableDateTime43.get(dateTimeFieldType50);
        int int52 = mutableDateTime43.getWeekOfWeekyear();
        org.joda.time.Instant instant53 = mutableDateTime43.toInstant();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime43.weekyear();
        int int55 = dateTimeZone41.getOffset((org.joda.time.ReadableInstant) mutableDateTime43);
        mutableDateTime33.setZoneRetainFields(dateTimeZone41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant53", (mutableDateTime1.compareTo(instant53) == 0) == mutableDateTime1.equals(instant53));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DurationField durationField11 = chronology9.eras();
        org.joda.time.DurationField durationField12 = chronology9.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField12, and durationField11", !(durationField11.compareTo(durationField12) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField12.compareTo(durationField11))));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DurationField durationField11 = chronology9.eras();
        org.joda.time.DurationField durationField12 = chronology9.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField12, and durationField11", !(durationField11.compareTo(durationField12) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField12.compareTo(durationField11))));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        int int5 = mutableDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime2.set(dateTimeFieldType6, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        int int10 = mutableDateTime2.get(dateTimeFieldType9);
        int int11 = mutableDateTime2.getWeekOfWeekyear();
        org.joda.time.Instant instant12 = mutableDateTime2.toInstant();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.dayOfWeek();
        boolean boolean14 = locale0.equals((java.lang.Object) property13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and instant12", (mutableDateTime2.compareTo(instant12) == 0) == mutableDateTime2.equals(instant12));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.weekyear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = mutableDateTime14.toDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        mutableDateTime25.addYears(0);
        mutableDateTime14.setDate((org.joda.time.ReadableInstant) mutableDateTime25);
        mutableDateTime14.addMillis((int) (byte) 0);
        int int34 = mutableDateTime14.getEra();
        boolean boolean35 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime23", (instant11.compareTo(dateTime23) == 0) == instant11.equals(dateTime23));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        int int15 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime18.set(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = mutableDateTime18.get(dateTimeFieldType25);
        org.joda.time.Instant instant27 = mutableDateTime18.toInstant();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.DateTime dateTime29 = mutableDateTime1.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime18", (instant11.compareTo(mutableDateTime18) == 0) == instant11.equals(mutableDateTime18));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        mutableDateTime14.addHours(730);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime20 and mutableDateTime33", (mutableDateTime20.compareTo(mutableDateTime33) == 0) == mutableDateTime20.equals(mutableDateTime33));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        int int9 = mutableDateTime6.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime6.set(dateTimeFieldType10, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        int int14 = mutableDateTime6.get(dateTimeFieldType13);
        int int15 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.Instant instant16 = mutableDateTime6.toInstant();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime6.dayOfWeek();
        mutableDateTime6.addWeekyears(796);
        int int20 = mutableDateTime6.getYearOfEra();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime6.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        int int31 = mutableDateTime23.get(dateTimeFieldType30);
        org.joda.time.Instant instant32 = mutableDateTime23.toInstant();
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime23);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant16", (mutableDateTime6.compareTo(instant16) == 0) == mutableDateTime6.equals(instant16));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone12);
        org.joda.time.Chronology chronology16 = mutableDateTime1.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime18.set(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime18.getZone();
        long long27 = dateTimeZone25.nextTransition((long) 59);
        java.lang.String str29 = dateTimeZone25.getName((long) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        mutableDateTime31.addHours(59);
        org.joda.time.Chronology chronology36 = mutableDateTime31.getChronology();
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime31.toMutableDateTime();
        int int38 = mutableDateTime31.getYear();
        int int39 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale42, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket45.getZone();
        long long48 = dateTimeParserBucket45.computeMillis(true);
        org.joda.time.Chronology chronology49 = dateTimeParserBucket45.getChronology();
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime31.toMutableDateTime(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        int int55 = mutableDateTime52.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime52.set(dateTimeFieldType56, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.year();
        int int60 = mutableDateTime52.get(dateTimeFieldType59);
        org.joda.time.DateTime dateTime61 = mutableDateTime52.toDateTime();
        java.util.Locale locale62 = null;
        java.util.Calendar calendar63 = mutableDateTime52.toCalendar(locale62);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.DateTime dateTime66 = mutableDateTime52.toDateTime(dateTimeZone65);
        boolean boolean67 = mutableDateTime50.isBefore((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean68 = mutableDateTime1.equals((java.lang.Object) dateTime66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime31 and mutableDateTime50", (mutableDateTime31.compareTo(mutableDateTime50) == 0) == mutableDateTime31.equals(mutableDateTime50));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        int int15 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime18.set(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = mutableDateTime18.get(dateTimeFieldType25);
        org.joda.time.Instant instant27 = mutableDateTime18.toInstant();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime18);
        mutableDateTime1.addMonths(17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime18", (instant11.compareTo(mutableDateTime18) == 0) == instant11.equals(mutableDateTime18));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        int int4 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        int int9 = mutableDateTime6.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime6.set(dateTimeFieldType10, (int) 'a');
        org.joda.time.Instant instant13 = mutableDateTime6.toInstant();
        boolean boolean14 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) instant13);
        int int15 = mutableDateTime1.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant13", (mutableDateTime6.compareTo(instant13) == 0) == mutableDateTime6.equals(instant13));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime8.toMutableDateTime();
        int int22 = mutableDateTime21.getEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and instant18", (mutableDateTime8.compareTo(instant18) == 0) == mutableDateTime8.equals(instant18));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.weekyear();
        java.lang.String str13 = property12.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime8.toMutableDateTime();
        java.lang.Class<?> wildcardClass22 = mutableDateTime21.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and instant18", (mutableDateTime8.compareTo(instant18) == 0) == mutableDateTime8.equals(instant18));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial47 = null;
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology51, locale52, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeParserBucket55.getZone();
        org.joda.time.Chronology chronology57 = dateTimeParserBucket55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.hourOfHalfday();
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.lang.String str60 = locale59.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology57, locale59, (java.lang.Integer) 2022);
        java.util.Locale locale63 = locale59.stripExtensions();
        java.lang.String str64 = locale63.getISO3Language();
        java.lang.String str65 = dateTimeField46.getAsText(readablePartial47, 842, locale63);
        int int66 = mutableDateTime33.get(dateTimeField46);
        long long69 = dateTimeField46.addWrapField((long) 34822499, 395);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime8.toMutableDateTime();
        int int22 = mutableDateTime8.getDayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and mutableDateTime21", (instant18.compareTo(mutableDateTime21) == 0) == instant18.equals(mutableDateTime21));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getDurationField();
        boolean boolean5 = dateTimeField2.isLeap((long) (short) -1);
        boolean boolean7 = dateTimeField2.isLeap((long) 34815457);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime10.set(dateTimeFieldType14, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        int int18 = mutableDateTime10.get(dateTimeFieldType17);
        int int19 = mutableDateTime10.getWeekOfWeekyear();
        org.joda.time.Instant instant20 = mutableDateTime10.toInstant();
        int int21 = mutableDateTime10.getMinuteOfHour();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        java.lang.Object obj30 = dateTimeParserBucket28.saveState();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        int int35 = mutableDateTime32.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        boolean boolean37 = mutableDateTime32.isSupported(dateTimeFieldType36);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale42, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket45.getZone();
        org.joda.time.Chronology chronology47 = dateTimeParserBucket45.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.hourOfHalfday();
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology47, locale49, (java.lang.Integer) 2022);
        java.util.Locale locale53 = locale49.stripExtensions();
        dateTimeParserBucket28.saveField(dateTimeFieldType36, "", locale49);
        java.lang.String str55 = mutableDateTime10.toString("32", locale49);
        java.lang.String str56 = dateTimeField2.getAsText((long) 34818666, locale49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and instant20", (mutableDateTime10.compareTo(instant20) == 0) == mutableDateTime10.equals(instant20));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.millis();
        java.lang.String str22 = durationFieldType21.toString();
        mutableDateTime0.add(durationFieldType21, 670);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and instant18", (mutableDateTime8.compareTo(instant18) == 0) == mutableDateTime8.equals(instant18));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime8.toMutableDateTime();
        int int22 = mutableDateTime8.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and mutableDateTime21", (instant18.compareTo(mutableDateTime21) == 0) == instant18.equals(mutableDateTime21));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime15.addMillis(369);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.addHours((int) (short) 0);
        mutableDateTime31.addWeekyears((int) 'a');
        java.lang.String str37 = mutableDateTime31.toString("0");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        int int42 = mutableDateTime39.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime39.set(dateTimeFieldType43, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        int int47 = mutableDateTime39.get(dateTimeFieldType46);
        int int48 = mutableDateTime39.getWeekOfWeekyear();
        org.joda.time.Instant instant49 = mutableDateTime39.toInstant();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime39.dayOfWeek();
        boolean boolean51 = mutableDateTime31.isAfter((org.joda.time.ReadableInstant) mutableDateTime39);
        boolean boolean52 = mutableDateTime15.isEqual((org.joda.time.ReadableInstant) mutableDateTime39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant49", (mutableDateTime1.compareTo(instant49) == 0) == mutableDateTime1.equals(instant49));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        mutableDateTime22.addHours(59);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.minuteOfHour();
        int int28 = mutableDateTime22.getSecondOfDay();
        mutableDateTime22.setSecondOfDay((int) (byte) 0);
        mutableDateTime22.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.addHours((int) (short) 0);
        mutableDateTime33.addWeekyears((int) 'a');
        java.lang.String str39 = mutableDateTime33.toString("0");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        int int44 = mutableDateTime41.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime41.set(dateTimeFieldType45, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        int int49 = mutableDateTime41.get(dateTimeFieldType48);
        mutableDateTime33.set(dateTimeFieldType48, 5);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime22.property(dateTimeFieldType48);
        mutableDateTime22.addYears(796);
        boolean boolean55 = mutableDateTime22.isBeforeNow();
        boolean boolean56 = mutableDateTime0.isEqual((org.joda.time.ReadableInstant) mutableDateTime22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and instant18", (mutableDateTime8.compareTo(instant18) == 0) == mutableDateTime8.equals(instant18));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        int int3 = mutableDateTime2.getDayOfWeek();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket9.getZone();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.minuteOfHour();
        long long20 = chronology11.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.DurationField durationField21 = chronology11.weeks();
        org.joda.time.DateTime dateTime22 = mutableDateTime2.toDateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField23 = chronology11.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime22", (mutableDateTime1.compareTo(dateTime22) == 0) == mutableDateTime1.equals(dateTime22));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = mutableDateTime24.toString(dateTimeFormatter27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.weekOfWeekyear();
        org.joda.time.Chronology chronology30 = mutableDateTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime14.toMutableDateTime(chronology30);
        mutableDateTime32.addMonths(74416135);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfWeek();
        mutableDateTime36.setYear(74411);
        int int40 = mutableDateTime36.getMinuteOfHour();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        mutableDateTime42.addYears(0);
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        mutableDateTime42.setZoneRetainFields(dateTimeZone54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        boolean boolean59 = mutableDateTime57.isEqual(readableInstant58);
        int int60 = mutableDateTime57.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        boolean boolean62 = mutableDateTime57.isSupported(dateTimeFieldType61);
        int int63 = mutableDateTime42.get(dateTimeFieldType61);
        mutableDateTime42.setWeekyear(74419);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale68, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone72 = dateTimeParserBucket71.getZone();
        long long74 = dateTimeParserBucket71.computeMillis(true);
        org.joda.time.Chronology chronology75 = dateTimeParserBucket71.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.clockhourOfDay();
        org.joda.time.DurationField durationField77 = chronology75.years();
        org.joda.time.MutableDateTime mutableDateTime78 = mutableDateTime42.toMutableDateTime(chronology75);
        boolean boolean79 = mutableDateTime36.isAfter((org.joda.time.ReadableInstant) mutableDateTime42);
        boolean boolean81 = mutableDateTime42.isAfter(779L);
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) mutableDateTime42);
        int int83 = mutableDateTime32.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime42 and mutableDateTime78", (mutableDateTime42.compareTo(mutableDateTime78) == 0) == mutableDateTime42.equals(mutableDateTime78));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        java.lang.Integer int7 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField11 = chronology8.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField11, and durationField9", !(durationField9.compareTo(durationField11) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField11.compareTo(durationField9))));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.weekyear();
        int int21 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime9);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone7.getName((long) 34824879, locale23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and instant19", (mutableDateTime9.compareTo(instant19) == 0) == mutableDateTime9.equals(instant19));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        int int22 = dateTimeField21.getMaximumValue();
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale24.getISO3Country();
        java.lang.String str26 = dateTimeField21.getAsShortText(0L, locale24);
        boolean boolean27 = dateTimeField21.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime31.set(dateTimeFieldType35, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        int int39 = mutableDateTime31.get(dateTimeFieldType38);
        int int40 = mutableDateTime31.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.yearOfEra();
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar44 = mutableDateTime41.toCalendar(locale43);
        java.util.Calendar calendar45 = mutableDateTime31.toCalendar(locale43);
        java.lang.String str46 = dateTimeField21.getAsShortText(readablePartial28, (int) ' ', locale43);
        int int47 = dateTimeField18.getMaximumShortTextLength(locale43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar45", (calendar12.compareTo(calendar45) == 0) == calendar12.equals(calendar45));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        java.lang.Integer int7 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField10, and durationField9", !(durationField9.compareTo(durationField10) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField10.compareTo(durationField9))));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        java.lang.Integer int7 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField11 = chronology8.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField11, and durationField9", !(durationField9.compareTo(durationField11) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField11.compareTo(durationField9))));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.hourOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.Chronology chronology24 = null;
        mutableDateTime23.setChronology(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = mutableDateTime27.toString(dateTimeFormatter30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.weekOfWeekyear();
        org.joda.time.Chronology chronology33 = mutableDateTime27.getChronology();
        mutableDateTime23.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.addMinutes((int) 'u');
        org.joda.time.Chronology chronology37 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTime dateTime39 = mutableDateTime1.toDateTime(chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        int int44 = mutableDateTime41.getHourOfDay();
        mutableDateTime41.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean48 = mutableDateTime41.isSupported(dateTimeFieldType47);
        mutableDateTime41.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime53 = mutableDateTime41.toDateTime(dateTimeZone52);
        org.joda.time.Chronology chronology54 = chronology37.withZone(dateTimeZone52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime41 and dateTime53", (mutableDateTime41.compareTo(dateTime53) == 0) == mutableDateTime41.equals(dateTime53));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.weekyear();
        int int21 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime9);
        boolean boolean23 = dateTimeZone7.isStandardOffset((long) 100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and instant19", (mutableDateTime9.compareTo(instant19) == 0) == mutableDateTime9.equals(instant19));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = mutableDateTime24.toString(dateTimeFormatter27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.weekOfWeekyear();
        org.joda.time.Chronology chronology30 = mutableDateTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime14.toMutableDateTime(chronology30);
        mutableDateTime32.addMonths(74416135);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfWeek();
        mutableDateTime36.setYear(74411);
        int int40 = mutableDateTime36.getMinuteOfHour();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        mutableDateTime42.addYears(0);
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        mutableDateTime42.setZoneRetainFields(dateTimeZone54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        boolean boolean59 = mutableDateTime57.isEqual(readableInstant58);
        int int60 = mutableDateTime57.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        boolean boolean62 = mutableDateTime57.isSupported(dateTimeFieldType61);
        int int63 = mutableDateTime42.get(dateTimeFieldType61);
        mutableDateTime42.setWeekyear(74419);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale68, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone72 = dateTimeParserBucket71.getZone();
        long long74 = dateTimeParserBucket71.computeMillis(true);
        org.joda.time.Chronology chronology75 = dateTimeParserBucket71.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.clockhourOfDay();
        org.joda.time.DurationField durationField77 = chronology75.years();
        org.joda.time.MutableDateTime mutableDateTime78 = mutableDateTime42.toMutableDateTime(chronology75);
        boolean boolean79 = mutableDateTime36.isAfter((org.joda.time.ReadableInstant) mutableDateTime42);
        boolean boolean81 = mutableDateTime42.isAfter(779L);
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.Instant instant83 = mutableDateTime32.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime42 and mutableDateTime78", (mutableDateTime42.compareTo(mutableDateTime78) == 0) == mutableDateTime42.equals(mutableDateTime78));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = mutableDateTime8.toString(dateTimeFormatter11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) (byte) 0);
        mutableDateTime8.setZoneRetainFields(dateTimeZone19);
        mutableDateTime1.setZone(dateTimeZone19);
        java.util.TimeZone timeZone24 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long29 = dateTimeZone25.convertLocalToUTC((long) 10, false, (long) 598);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.dayOfWeek();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        mutableDateTime34.addHours(59);
        int int39 = mutableDateTime34.getMillisOfSecond();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology41, locale42, (java.lang.Integer) 9, 59);
        java.lang.Object obj46 = dateTimeParserBucket45.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket45.saveField(dateTimeFieldType47, 59);
        boolean boolean50 = mutableDateTime34.isSupported(dateTimeFieldType47);
        int int51 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) mutableDateTime34);
        int int52 = mutableDateTime34.getMillisOfDay();
        int int53 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTime dateTime54 = mutableDateTime34.toDateTime();
        org.joda.time.Instant instant55 = mutableDateTime34.toInstant();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutableDateTime34.add(readablePeriod56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant55", (mutableDateTime1.compareTo(instant55) == 0) == mutableDateTime1.equals(instant55));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology13 = mutableDateTime1.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        int int15 = mutableDateTime1.getYearOfEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        boolean boolean22 = mutableDateTime17.isSupported(dateTimeFieldType21);
        int int23 = mutableDateTime17.getYearOfEra();
        mutableDateTime17.setMillisOfSecond((int) '#');
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int31 = dateTimeField30.getMaximumValue();
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale33.getISO3Country();
        java.lang.String str35 = dateTimeField30.getAsShortText(0L, locale33);
        boolean boolean36 = dateTimeField30.isLenient();
        org.joda.time.ReadablePartial readablePartial37 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        int int43 = mutableDateTime40.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime40.set(dateTimeFieldType44, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        int int48 = mutableDateTime40.get(dateTimeFieldType47);
        int int49 = mutableDateTime40.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.yearOfEra();
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar53 = mutableDateTime50.toCalendar(locale52);
        java.util.Calendar calendar54 = mutableDateTime40.toCalendar(locale52);
        java.lang.String str55 = dateTimeField30.getAsShortText(readablePartial37, (int) ' ', locale52);
        int int56 = property27.getMaximumShortTextLength(locale52);
        org.joda.time.MutableDateTime mutableDateTime57 = property27.roundCeiling();
        mutableDateTime17.setMillis((org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        boolean boolean60 = mutableDateTime17.isEqual(readableInstant59);
        mutableDateTime1.setMillis(readableInstant59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime40", (instant11.compareTo(mutableDateTime40) == 0) == instant11.equals(mutableDateTime40));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        int int15 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime18.set(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = mutableDateTime18.get(dateTimeFieldType25);
        org.joda.time.Instant instant27 = mutableDateTime18.toInstant();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime18);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset((long) 7);
        mutableDateTime1.setZone(dateTimeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime18", (instant11.compareTo(mutableDateTime18) == 0) == instant11.equals(mutableDateTime18));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        int int4 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        int int9 = mutableDateTime6.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime6.set(dateTimeFieldType10, (int) 'a');
        org.joda.time.Instant instant13 = mutableDateTime6.toInstant();
        boolean boolean14 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        mutableDateTime16.addYears(0);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        boolean boolean36 = mutableDateTime31.isSupported(dateTimeFieldType35);
        int int37 = mutableDateTime16.get(dateTimeFieldType35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        mutableDateTime39.addHours(59);
        org.joda.time.Chronology chronology44 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = chronology44.getZone();
        boolean boolean46 = dateTimeFieldType35.isSupported(chronology44);
        org.joda.time.DateTime dateTime47 = mutableDateTime1.toDateTime(chronology44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant13", (mutableDateTime6.compareTo(instant13) == 0) == mutableDateTime6.equals(instant13));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int9 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        int int19 = mutableDateTime11.get(dateTimeFieldType18);
        java.util.Date date20 = mutableDateTime11.toDate();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime11.getZone();
        mutableDateTime0.setZoneRetainFields(dateTimeZone21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        int int32 = mutableDateTime24.get(dateTimeFieldType31);
        int int33 = mutableDateTime24.getWeekOfWeekyear();
        org.joda.time.Instant instant34 = mutableDateTime24.toInstant();
        int int35 = mutableDateTime24.getMinuteOfHour();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        java.lang.Object obj44 = dateTimeParserBucket42.saveState();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        int int49 = mutableDateTime46.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        boolean boolean51 = mutableDateTime46.isSupported(dateTimeFieldType50);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeParserBucket59.getZone();
        org.joda.time.Chronology chronology61 = dateTimeParserBucket59.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.hourOfHalfday();
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.lang.String str64 = locale63.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology61, locale63, (java.lang.Integer) 2022);
        java.util.Locale locale67 = locale63.stripExtensions();
        dateTimeParserBucket42.saveField(dateTimeFieldType50, "", locale63);
        java.lang.String str69 = mutableDateTime24.toString("32", locale63);
        java.util.Calendar calendar70 = mutableDateTime0.toCalendar(locale63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and instant34", (mutableDateTime11.compareTo(instant34) == 0) == mutableDateTime11.equals(instant34));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        org.joda.time.DurationField durationField34 = chronology32.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        int int30 = mutableDateTime23.getEra();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime23.dayOfMonth();
        mutableDateTime23.setMinuteOfDay(5);
        int int34 = mutableDateTime23.getWeekyear();
        boolean boolean35 = mutableDateTime21.isEqual((org.joda.time.ReadableInstant) mutableDateTime23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and instant18", (mutableDateTime8.compareTo(instant18) == 0) == mutableDateTime8.equals(instant18));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime1.add(readablePeriod15, (int) (short) 0);
        org.joda.time.DateTime dateTime18 = mutableDateTime1.toDateTimeISO();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        boolean boolean27 = dateTime18.isSupported(dateTimeFieldType24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime20", (instant11.compareTo(mutableDateTime20) == 0) == instant11.equals(mutableDateTime20));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime17 = mutableDateTime8.toDateTime();
        int int18 = dateTime17.getMinuteOfHour();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime17.toDateTime(chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter2.withChronology(chronology26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and dateTime29", (mutableDateTime8.compareTo(dateTime29) == 0) == mutableDateTime8.equals(dateTime29));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology7);
        mutableDateTime9.setWeekyear(17);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime13.set(dateTimeFieldType17, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        int int21 = mutableDateTime13.get(dateTimeFieldType20);
        int int22 = mutableDateTime13.getWeekOfWeekyear();
        org.joda.time.Instant instant23 = mutableDateTime13.toInstant();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime13.dayOfWeek();
        mutableDateTime13.addWeekyears(796);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.addHours((int) (short) 0);
        mutableDateTime31.addWeekyears((int) 'a');
        java.lang.String str37 = mutableDateTime31.toString("0");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        int int42 = mutableDateTime39.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime39.set(dateTimeFieldType43, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        int int47 = mutableDateTime39.get(dateTimeFieldType46);
        mutableDateTime31.set(dateTimeFieldType46, 5);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime28.property(dateTimeFieldType46);
        boolean boolean51 = mutableDateTime13.isSupported(dateTimeFieldType46);
        mutableDateTime9.set(dateTimeFieldType46, 41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and mutableDateTime39", (instant23.compareTo(mutableDateTime39) == 0) == instant23.equals(mutableDateTime39));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime16.set(dateTimeFieldType20, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = mutableDateTime16.get(dateTimeFieldType23);
        int int25 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.Instant instant26 = mutableDateTime16.toInstant();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime16.dayOfWeek();
        mutableDateTime16.addWeekyears(796);
        int int30 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfMinute();
        mutableDateTime16.set(dateTimeFieldType31, 9);
        boolean boolean34 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant26", (dateTime10.compareTo(instant26) == 0) == dateTime10.equals(instant26));
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial11 = null;
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale17 = builder16.build();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfYear();
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.dayOfWeek();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property31.getAsText(locale32);
        java.util.Locale locale34 = null;
        int int35 = property31.getMaximumTextLength(locale34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        mutableDateTime37.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType43.getField(chronology44);
        int int46 = dateTimeField45.getMaximumValue();
        mutableDateTime37.setRounding(dateTimeField45);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = dateTimeField45.getAsShortText((int) (byte) 1, locale49);
        java.lang.String str51 = property31.getAsShortText(locale49);
        java.lang.String str52 = dateTimeField26.getAsShortText(readablePartial27, (int) (short) -1, locale49);
        org.joda.time.ReadablePartial readablePartial53 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        int int59 = mutableDateTime56.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime56.set(dateTimeFieldType60, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.year();
        int int64 = mutableDateTime56.get(dateTimeFieldType63);
        int int65 = mutableDateTime56.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.yearOfEra();
        java.util.Locale locale68 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar69 = mutableDateTime66.toCalendar(locale68);
        java.util.Calendar calendar70 = mutableDateTime56.toCalendar(locale68);
        java.lang.String str71 = dateTimeField26.getAsText(readablePartial53, 306, locale68);
        java.util.Locale locale72 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale72);
        java.lang.String str74 = locale68.getDisplayName(locale72);
        java.util.Locale.Builder builder75 = builder16.setLocale(locale68);
        java.lang.String str76 = dateTimeField10.getAsText(readablePartial11, 89, locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and mutableDateTime30", (mutableDateTime9.compareTo(mutableDateTime30) == 0) == mutableDateTime9.equals(mutableDateTime30));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.setVariant("2022");
        java.util.Locale locale5 = builder4.build();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getMonthOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        int int17 = mutableDateTime12.getMillisOfSecond();
        mutableDateTime12.setMillisOfDay(10);
        boolean boolean20 = mutableDateTime7.isEqual((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Instant instant21 = mutableDateTime7.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int26 = dateTimeField25.getMaximumValue();
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale28.getISO3Country();
        java.lang.String str30 = dateTimeField25.getAsShortText(0L, locale28);
        boolean boolean31 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial32 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        int int38 = mutableDateTime35.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime35.set(dateTimeFieldType39, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        int int43 = mutableDateTime35.get(dateTimeFieldType42);
        int int44 = mutableDateTime35.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.yearOfEra();
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar48 = mutableDateTime45.toCalendar(locale47);
        java.util.Calendar calendar49 = mutableDateTime35.toCalendar(locale47);
        java.lang.String str50 = dateTimeField25.getAsShortText(readablePartial32, (int) ' ', locale47);
        java.lang.String str51 = mutableDateTime7.toString("23", locale47);
        java.util.Locale.Builder builder52 = builder4.setLocale(locale47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and instant21", (mutableDateTime7.compareTo(instant21) == 0) == mutableDateTime7.equals(instant21));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        int int38 = mutableDateTime35.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime35.set(dateTimeFieldType39, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        int int43 = mutableDateTime35.get(dateTimeFieldType42);
        org.joda.time.DateTime dateTime44 = mutableDateTime35.toDateTime();
        java.util.Locale locale45 = null;
        java.util.Calendar calendar46 = mutableDateTime35.toCalendar(locale45);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.DateTime dateTime49 = mutableDateTime35.toDateTime(dateTimeZone48);
        boolean boolean50 = mutableDateTime33.isBefore((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        int int34 = mutableDateTime33.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(0);
        mutableDateTime33.setZone(dateTimeZone36);
        java.util.TimeZone timeZone38 = dateTimeZone36.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = mutableDateTime8.toString(dateTimeFormatter11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) (byte) 0);
        mutableDateTime8.setZoneRetainFields(dateTimeZone19);
        mutableDateTime1.setZone(dateTimeZone19);
        java.util.TimeZone timeZone24 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long29 = dateTimeZone25.convertLocalToUTC((long) 10, false, (long) 598);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.dayOfWeek();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        mutableDateTime34.addHours(59);
        int int39 = mutableDateTime34.getMillisOfSecond();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology41, locale42, (java.lang.Integer) 9, 59);
        java.lang.Object obj46 = dateTimeParserBucket45.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket45.saveField(dateTimeFieldType47, 59);
        boolean boolean50 = mutableDateTime34.isSupported(dateTimeFieldType47);
        int int51 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) mutableDateTime34);
        int int52 = mutableDateTime34.getMillisOfDay();
        int int53 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTime dateTime54 = mutableDateTime34.toDateTime();
        org.joda.time.Instant instant55 = mutableDateTime34.toInstant();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime34.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant55", (mutableDateTime1.compareTo(instant55) == 0) == mutableDateTime1.equals(instant55));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DurationField durationField23 = chronology19.eras();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withChronology(chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField20 and durationField23", Math.signum(durationField20.compareTo(durationField23)) == -Math.signum(durationField23.compareTo(durationField20)));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addWeeks(19);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getHourOfDay();
        mutableDateTime7.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean14 = mutableDateTime7.isSupported(dateTimeFieldType13);
        mutableDateTime7.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime19 = mutableDateTime7.toDateTime(dateTimeZone18);
        mutableDateTime1.setZone(dateTimeZone18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and dateTime19", (mutableDateTime7.compareTo(dateTime19) == 0) == mutableDateTime7.equals(dateTime19));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        int int29 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Instant instant30 = mutableDateTime1.toInstant();
        int int31 = mutableDateTime1.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and instant30", (mutableDateTime15.compareTo(instant30) == 0) == mutableDateTime15.equals(instant30));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeParserBucket34.getZone();
        java.lang.String str36 = dateTimeZone35.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        mutableDateTime1.setZoneRetainFields(dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime1.copy();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        int int44 = mutableDateTime41.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime41.set(dateTimeFieldType45, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        int int49 = mutableDateTime41.get(dateTimeFieldType48);
        int int50 = mutableDateTime41.getWeekOfWeekyear();
        org.joda.time.Instant instant51 = mutableDateTime41.toInstant();
        int int52 = mutableDateTime41.getWeekOfWeekyear();
        int int53 = mutableDateTime39.compareTo((org.joda.time.ReadableInstant) mutableDateTime41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant51", (mutableDateTime1.compareTo(instant51) == 0) == mutableDateTime1.equals(instant51));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        int int29 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Instant instant30 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime1.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and instant30", (mutableDateTime15.compareTo(instant30) == 0) == mutableDateTime15.equals(instant30));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        mutableDateTime14.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        int int23 = dateTimeField22.getMaximumValue();
        mutableDateTime14.setRounding(dateTimeField22);
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = dateTimeField22.getAsShortText((int) (byte) 1, locale26);
        java.util.Calendar calendar28 = mutableDateTime12.toCalendar(locale26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        java.lang.Integer int8 = dateTimeParserBucket6.getPivotYear();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.hourOfHalfday();
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int18 = dateTimeField16.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfWeek();
        java.util.Locale locale23 = null;
        java.lang.String str24 = property22.getAsText(locale23);
        java.util.Locale locale25 = null;
        int int26 = property22.getMaximumTextLength(locale25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        mutableDateTime28.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        int int37 = dateTimeField36.getMaximumValue();
        mutableDateTime28.setRounding(dateTimeField36);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = dateTimeField36.getAsShortText((int) (byte) 1, locale40);
        java.lang.String str42 = property22.getAsShortText(locale40);
        java.lang.String str43 = dateTimeField16.getAsShortText(1L, locale40);
        int int44 = dateTimeField16.getMaximumValue();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(0L, chronology46, locale47, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeParserBucket50.getZone();
        org.joda.time.Chronology chronology52 = dateTimeParserBucket50.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.days();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.dayOfYear();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField57 = chronology52.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial58 = null;
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(0L, chronology62, locale63, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone67 = dateTimeParserBucket66.getZone();
        org.joda.time.Chronology chronology68 = dateTimeParserBucket66.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.hourOfHalfday();
        java.util.Locale locale70 = java.util.Locale.FRENCH;
        java.lang.String str71 = locale70.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology68, locale70, (java.lang.Integer) 2022);
        java.util.Locale locale74 = locale70.stripExtensions();
        java.lang.String str75 = locale74.getISO3Language();
        java.lang.String str76 = dateTimeField57.getAsText(readablePartial58, 842, locale74);
        int int77 = dateTimeField16.getMaximumShortTextLength(locale74);
        java.util.Locale.setDefault(category12, locale74);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology9, locale74, (java.lang.Integer) 74432089);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField53", Math.signum(durationField10.compareTo(durationField53)) == -Math.signum(durationField53.compareTo(durationField10)));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        int int11 = dateTime10.getMinuteOfHour();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime10.toDateTime(chronology19);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.hourOfHalfday();
        org.joda.time.DurationField durationField32 = chronology30.centuries();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology30.getZone();
        org.joda.time.DurationField durationField34 = chronology30.weeks();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.year();
        org.joda.time.DateTime dateTime36 = dateTime10.toDateTime(chronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime22", (mutableDateTime1.compareTo(dateTime22) == 0) == mutableDateTime1.equals(dateTime22));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.millisOfDay();
        boolean boolean7 = property6.isLeap();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        java.util.Locale locale13 = null;
        java.util.Calendar calendar14 = mutableDateTime9.toCalendar(locale13);
        int int15 = mutableDateTime9.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime9.toMutableDateTime();
        long long17 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar14", (calendar3.compareTo(calendar14) == 0) == calendar3.equals(calendar14));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        mutableDateTime1.setMillis((long) 232);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.secondOfDay();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        long long23 = dateTimeParserBucket20.computeMillis(true);
        org.joda.time.Chronology chronology24 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        java.lang.String str30 = dateTimeZone27.getName((long) 2);
        java.util.TimeZone timeZone31 = dateTimeZone27.toTimeZone();
        org.joda.time.Chronology chronology32 = chronology24.withZone(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(chronology24);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        mutableDateTime35.addHours(59);
        org.joda.time.Chronology chronology40 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology40.getZone();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime33.toMutableDateTime(chronology40);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime33 and mutableDateTime42", (mutableDateTime33.compareTo(mutableDateTime42) == 0) == mutableDateTime33.equals(mutableDateTime42));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        mutableDateTime1.add((long) 993);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfWeek();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime12.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime12.toMutableDateTimeISO();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime1.addYears(280);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        int int28 = mutableDateTime20.get(dateTimeFieldType27);
        int int29 = mutableDateTime20.getWeekOfWeekyear();
        org.joda.time.Instant instant30 = mutableDateTime20.toInstant();
        int int31 = mutableDateTime20.getMinuteOfHour();
        int int32 = mutableDateTime20.getWeekyear();
        org.joda.time.DateTime dateTime33 = mutableDateTime20.toDateTime();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and dateTime33", (instant30.compareTo(dateTime33) == 0) == instant30.equals(dateTime33));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.weekyear();
        org.joda.time.DurationField durationField13 = property12.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        int int15 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.addWeeks(74411);
        org.joda.time.Instant instant18 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime20.getZone();
        long long29 = dateTimeZone27.nextTransition((long) 59);
        java.lang.String str31 = dateTimeZone27.getName((long) (short) 0);
        java.lang.String str32 = dateTimeZone27.getID();
        long long34 = dateTimeZone27.nextTransition((long) (byte) 0);
        boolean boolean36 = dateTimeZone27.isStandardOffset((long) 580);
        mutableDateTime1.setZoneRetainFields(dateTimeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime20", (instant11.compareTo(mutableDateTime20) == 0) == instant11.equals(mutableDateTime20));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        mutableDateTime18.addHours(59);
        org.joda.time.Chronology chronology23 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology23.getZone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime26.set(dateTimeFieldType30, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        int int34 = mutableDateTime26.get(dateTimeFieldType33);
        int int35 = mutableDateTime26.getWeekOfWeekyear();
        org.joda.time.Instant instant36 = mutableDateTime26.toInstant();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.weekyear();
        int int38 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime26.property(dateTimeFieldType39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime1.property(dateTimeFieldType39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant36", (dateTime10.compareTo(instant36) == 0) == dateTime10.equals(instant36));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology8.eras();
        org.joda.time.DurationField durationField16 = chronology8.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField15, durationField16, and durationField15", !(durationField15.compareTo(durationField16) == 0) || (Math.signum(durationField15.compareTo(durationField15)) == Math.signum(durationField16.compareTo(durationField15))));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime1.add(readablePeriod15, (int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.halfdayOfDay();
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology25.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        int int39 = dateTimeField38.getMaximumValue();
        int int42 = dateTimeField38.getDifference((long) 10, (long) 'a');
        int int44 = dateTimeField38.getMaximumValue((long) (byte) 1);
        java.lang.String str46 = dateTimeField38.getAsShortText((long) 5);
        org.joda.time.ReadablePartial readablePartial47 = null;
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        org.joda.time.Chronology chronology55 = dateTimeParserBucket53.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.days();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.dayOfYear();
        org.joda.time.ReadablePartial readablePartial58 = null;
        int[] intArray64 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int65 = dateTimeField57.getMinimumValue(readablePartial58, intArray64);
        int int66 = dateTimeField38.getMaximumValue(readablePartial47, intArray64);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType68.getField(chronology69);
        int int71 = dateTimeField70.getMaximumValue();
        java.util.Locale locale73 = java.util.Locale.FRENCH;
        java.lang.String str74 = locale73.getISO3Country();
        java.lang.String str75 = dateTimeField70.getAsShortText(0L, locale73);
        boolean boolean76 = dateTimeField70.isLenient();
        org.joda.time.ReadablePartial readablePartial77 = null;
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableDateTime mutableDateTime80 = new org.joda.time.MutableDateTime(chronology79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        boolean boolean82 = mutableDateTime80.isEqual(readableInstant81);
        int int83 = mutableDateTime80.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime80.set(dateTimeFieldType84, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.year();
        int int88 = mutableDateTime80.get(dateTimeFieldType87);
        int int89 = mutableDateTime80.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime90 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime90.yearOfEra();
        java.util.Locale locale92 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar93 = mutableDateTime90.toCalendar(locale92);
        java.util.Calendar calendar94 = mutableDateTime80.toCalendar(locale92);
        java.lang.String str95 = dateTimeField70.getAsShortText(readablePartial77, (int) ' ', locale92);
        java.lang.String str96 = dateTimeField38.getAsShortText(1644788463784L, locale92);
        java.util.Locale locale97 = locale92.stripExtensions();
        java.util.Set<java.lang.Character> charSet98 = locale92.getExtensionKeys();
        java.lang.String str99 = dateTimeField34.getAsText(48, locale92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime80", (instant11.compareTo(mutableDateTime80) == 0) == instant11.equals(mutableDateTime80));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.days();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.dayOfMonth();
        org.joda.time.DurationField durationField32 = chronology27.centuries();
        org.joda.time.DateTimeField dateTimeField33 = chronology27.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime1.toMutableDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField35 = chronology27.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime34", (mutableDateTime1.compareTo(mutableDateTime34) == 0) == mutableDateTime1.equals(mutableDateTime34));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DurationField durationField11 = chronology9.years();
        org.joda.time.DurationField durationField12 = chronology9.weekyears();
        org.joda.time.DurationField durationField13 = chronology9.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField13 and durationField12", (durationField13.compareTo(durationField12) == 0) == durationField13.equals(durationField12));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        long long17 = dateTimeParserBucket14.computeMillis(true);
        org.joda.time.Chronology chronology18 = dateTimeParserBucket14.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime21", (mutableDateTime1.compareTo(mutableDateTime21) == 0) == mutableDateTime1.equals(mutableDateTime21));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.lang.String str15 = dateTimeZone12.getName((long) 2);
        java.util.TimeZone timeZone16 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology17 = chronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        org.joda.time.Chronology chronology25 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime18.toMutableDateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and mutableDateTime27", (mutableDateTime18.compareTo(mutableDateTime27) == 0) == mutableDateTime18.equals(mutableDateTime27));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMonthOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        mutableDateTime6.addHours(59);
        int int11 = mutableDateTime6.getMillisOfSecond();
        mutableDateTime6.setMillisOfDay(10);
        boolean boolean14 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.Instant instant15 = mutableDateTime1.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        int int20 = dateTimeField19.getMaximumValue();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getISO3Country();
        java.lang.String str24 = dateTimeField19.getAsShortText(0L, locale22);
        boolean boolean25 = dateTimeField19.isLenient();
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime29.set(dateTimeFieldType33, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        int int37 = mutableDateTime29.get(dateTimeFieldType36);
        int int38 = mutableDateTime29.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.yearOfEra();
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar42 = mutableDateTime39.toCalendar(locale41);
        java.util.Calendar calendar43 = mutableDateTime29.toCalendar(locale41);
        java.lang.String str44 = dateTimeField19.getAsShortText(readablePartial26, (int) ' ', locale41);
        java.lang.String str45 = mutableDateTime1.toString("23", locale41);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime1.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and mutableDateTime39", (instant15.compareTo(mutableDateTime39) == 0) == instant15.equals(mutableDateTime39));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        int int15 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime18.set(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = mutableDateTime18.get(dateTimeFieldType25);
        org.joda.time.Instant instant27 = mutableDateTime18.toInstant();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime18.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime23.getZone();
        long long32 = dateTimeZone30.nextTransition((long) 59);
        java.lang.String str34 = dateTimeZone30.getName((long) (short) 0);
        java.lang.String str35 = dateTimeZone30.getID();
        long long37 = dateTimeZone30.nextTransition((long) (byte) 0);
        boolean boolean38 = dateTimeZone30.isFixed();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime8, dateTimeZone30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and mutableDateTime21", (instant18.compareTo(mutableDateTime21) == 0) == instant18.equals(mutableDateTime21));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        java.lang.String str21 = mutableDateTime0.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and instant18", (mutableDateTime8.compareTo(instant18) == 0) == mutableDateTime8.equals(instant18));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        long long17 = dateTimeParserBucket14.computeMillis(true);
        org.joda.time.Chronology chronology18 = dateTimeParserBucket14.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime21", (mutableDateTime1.compareTo(mutableDateTime21) == 0) == mutableDateTime1.equals(mutableDateTime21));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        int int8 = mutableDateTime1.getCenturyOfEra();
        mutableDateTime1.setSecondOfDay(969);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.DurationField durationField21 = chronology19.centuries();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology19.getZone();
        org.joda.time.DurationField durationField23 = chronology19.weeks();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.year();
        java.util.Locale locale25 = java.util.Locale.US;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 906, chronology19, locale25);
        org.joda.time.DateTime dateTime27 = mutableDateTime1.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField28 = chronology19.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime27", (mutableDateTime1.compareTo(dateTime27) == 0) == mutableDateTime1.equals(dateTime27));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        int int5 = mutableDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime2.set(dateTimeFieldType6, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        int int10 = mutableDateTime2.get(dateTimeFieldType9);
        int int11 = mutableDateTime2.getWeekOfWeekyear();
        org.joda.time.Instant instant12 = mutableDateTime2.toInstant();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.dayOfWeek();
        mutableDateTime2.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, (int) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.halfdayOfDay();
        mutableDateTime2.setChronology(chronology26);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology26.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        org.joda.time.DurationField durationField39 = dateTimeField38.getDurationField();
        boolean boolean41 = dateTimeField38.isLeap((long) (short) -1);
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = dateTimeField38.getAsText((long) (-1), locale43);
        org.joda.time.ReadablePartial readablePartial45 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType47.getField(chronology48);
        int int50 = dateTimeField49.getMaximumValue();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = locale52.getISO3Country();
        java.lang.String str54 = dateTimeField49.getAsShortText(0L, locale52);
        boolean boolean55 = dateTimeField49.isLenient();
        org.joda.time.ReadablePartial readablePartial56 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        boolean boolean61 = mutableDateTime59.isEqual(readableInstant60);
        int int62 = mutableDateTime59.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime59.set(dateTimeFieldType63, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.year();
        int int67 = mutableDateTime59.get(dateTimeFieldType66);
        int int68 = mutableDateTime59.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime69.yearOfEra();
        java.util.Locale locale71 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar72 = mutableDateTime69.toCalendar(locale71);
        java.util.Calendar calendar73 = mutableDateTime59.toCalendar(locale71);
        java.lang.String str74 = dateTimeField49.getAsShortText(readablePartial56, (int) ' ', locale71);
        java.lang.String str75 = locale71.getDisplayCountry();
        java.lang.String str76 = dateTimeField38.getAsShortText(readablePartial45, 34812148, locale71);
        long long79 = dateTimeField38.add((long) 779, 928);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime(chronology80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        boolean boolean83 = mutableDateTime81.isEqual(readableInstant82);
        int int84 = mutableDateTime81.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime81.set(dateTimeFieldType85, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.year();
        int int89 = mutableDateTime81.get(dateTimeFieldType88);
        int int90 = mutableDateTime81.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime91 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property92 = mutableDateTime91.yearOfEra();
        java.util.Locale locale93 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar94 = mutableDateTime91.toCalendar(locale93);
        java.util.Calendar calendar95 = mutableDateTime81.toCalendar(locale93);
        int int96 = dateTimeField38.getMaximumTextLength(locale93);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket98 = new org.joda.time.format.DateTimeParserBucket((long) 712, chronology34, locale93, (java.lang.Integer) 2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime59", (instant12.compareTo(mutableDateTime59) == 0) == instant12.equals(mutableDateTime59));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        int int34 = mutableDateTime33.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(0);
        mutableDateTime33.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        org.joda.time.Chronology chronology45 = dateTimeParserBucket43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfHalfday();
        org.joda.time.DurationField durationField47 = chronology45.days();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.millisOfSecond();
        org.joda.time.DateTime dateTime49 = mutableDateTime33.toDateTime(chronology45);
        org.joda.time.DateTimeField dateTimeField50 = chronology45.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        int int34 = mutableDateTime33.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(0);
        mutableDateTime33.setZone(dateTimeZone36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int43 = dateTimeField41.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.dayOfWeek();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property47.getAsText(locale48);
        java.util.Locale locale50 = null;
        int int51 = property47.getMaximumTextLength(locale50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        boolean boolean55 = mutableDateTime53.isEqual(readableInstant54);
        int int56 = mutableDateTime53.getHourOfDay();
        mutableDateTime53.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType59.getField(chronology60);
        int int62 = dateTimeField61.getMaximumValue();
        mutableDateTime53.setRounding(dateTimeField61);
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        java.lang.String str66 = dateTimeField61.getAsShortText((int) (byte) 1, locale65);
        java.lang.String str67 = property47.getAsShortText(locale65);
        java.lang.String str68 = dateTimeField41.getAsShortText(1L, locale65);
        java.lang.String str69 = locale65.getCountry();
        java.util.Locale.setDefault(locale65);
        java.lang.String str71 = locale65.getDisplayVariant();
        java.lang.String str72 = dateTimeZone36.getShortName((long) 292278993, locale65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        long long17 = dateTimeParserBucket14.computeMillis(true);
        org.joda.time.Chronology chronology18 = dateTimeParserBucket14.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime21", (mutableDateTime1.compareTo(mutableDateTime21) == 0) == mutableDateTime1.equals(mutableDateTime21));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        int int15 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime18.set(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = mutableDateTime18.get(dateTimeFieldType25);
        org.joda.time.Instant instant27 = mutableDateTime18.toInstant();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime18.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        int int34 = mutableDateTime33.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(0);
        mutableDateTime33.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        org.joda.time.Chronology chronology45 = dateTimeParserBucket43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfHalfday();
        org.joda.time.DurationField durationField47 = chronology45.days();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.millisOfSecond();
        org.joda.time.DateTime dateTime49 = mutableDateTime33.toDateTime(chronology45);
        int int50 = dateTime49.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DurationField durationField10 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.clockhourOfDay();
        org.joda.time.DurationField durationField12 = chronology7.eras();
        java.lang.String str13 = chronology7.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField12", Math.signum(durationField10.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField10)));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        int int34 = mutableDateTime33.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(0);
        mutableDateTime33.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        org.joda.time.Chronology chronology45 = dateTimeParserBucket43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfHalfday();
        org.joda.time.DurationField durationField47 = chronology45.days();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.millisOfSecond();
        org.joda.time.DateTime dateTime49 = mutableDateTime33.toDateTime(chronology45);
        org.joda.time.DateTimeField dateTimeField50 = chronology45.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        int int34 = mutableDateTime33.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(0);
        mutableDateTime33.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        org.joda.time.Chronology chronology45 = dateTimeParserBucket43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfHalfday();
        org.joda.time.DurationField durationField47 = chronology45.days();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.millisOfSecond();
        org.joda.time.DateTime dateTime49 = mutableDateTime33.toDateTime(chronology45);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        int int4 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        int int9 = mutableDateTime6.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime6.set(dateTimeFieldType10, (int) 'a');
        org.joda.time.Instant instant13 = mutableDateTime6.toInstant();
        boolean boolean14 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) instant13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant13", (mutableDateTime6.compareTo(instant13) == 0) == mutableDateTime6.equals(instant13));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime1 = mutableDateTime0.toDateTime();
        int int2 = dateTime1.getHourOfDay();
        int int3 = dateTime1.getMinuteOfDay();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket10.getZone();
        org.joda.time.Chronology chronology12 = dateTimeParserBucket10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology12, locale14, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField18 = chronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology12.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime1.toMutableDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone22 = chronology12.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and mutableDateTime21", (mutableDateTime0.compareTo(mutableDateTime21) == 0) == mutableDateTime0.equals(mutableDateTime21));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        int int34 = mutableDateTime33.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(0);
        mutableDateTime33.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        org.joda.time.Chronology chronology45 = dateTimeParserBucket43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfHalfday();
        org.joda.time.DurationField durationField47 = chronology45.days();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.millisOfSecond();
        org.joda.time.DateTime dateTime49 = mutableDateTime33.toDateTime(chronology45);
        mutableDateTime33.addMillis(613);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and dateTime49", (mutableDateTime14.compareTo(dateTime49) == 0) == mutableDateTime14.equals(dateTime49));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology7.add(readablePeriod9, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = mutableDateTime13.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = chronology21.millisOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = null;
        org.joda.time.format.DateTimeParser dateTimeParser28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter27, dateTimeParser28);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter29.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser31 = dateTimeFormatter29.getParser();
        boolean boolean32 = dateTimeFormatter29.isParser();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        boolean boolean34 = locale33.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter29.withLocale(locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter29.withPivotYear(34821173);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        int int42 = dateTimeField40.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.dayOfWeek();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property46.getAsText(locale47);
        java.util.Locale locale49 = null;
        int int50 = property46.getMaximumTextLength(locale49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        int int55 = mutableDateTime52.getHourOfDay();
        mutableDateTime52.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType58.getField(chronology59);
        int int61 = dateTimeField60.getMaximumValue();
        mutableDateTime52.setRounding(dateTimeField60);
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = dateTimeField60.getAsShortText((int) (byte) 1, locale64);
        java.lang.String str66 = property46.getAsShortText(locale64);
        java.lang.String str67 = dateTimeField40.getAsShortText(1L, locale64);
        java.lang.String str68 = locale64.getISO3Country();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter29.withLocale(locale64);
        java.lang.String str70 = locale64.getDisplayName();
        java.util.Locale locale71 = java.util.Locale.UK;
        java.lang.String str72 = locale64.getDisplayLanguage(locale71);
        java.lang.String str73 = dateTimeField25.getAsText(300, locale64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime13 and mutableDateTime45", (mutableDateTime13.compareTo(mutableDateTime45) == 0) == mutableDateTime13.equals(mutableDateTime45));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        boolean boolean21 = mutableDateTime16.isSupported(dateTimeFieldType20);
        int int22 = mutableDateTime1.get(dateTimeFieldType20);
        mutableDateTime1.setWeekyear(74419);
        mutableDateTime1.addWeekyears(34818666);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        mutableDateTime28.addDays(0);
        int int34 = mutableDateTime28.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime28.weekyear();
        int int36 = mutableDateTime28.getMonthOfYear();
        mutableDateTime28.addDays(5);
        boolean boolean40 = mutableDateTime28.isAfter((long) '#');
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime42.set(dateTimeFieldType46, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        int int50 = mutableDateTime42.get(dateTimeFieldType49);
        org.joda.time.DateTime dateTime51 = mutableDateTime42.toDateTime();
        java.util.Locale locale52 = null;
        java.util.Calendar calendar53 = mutableDateTime42.toCalendar(locale52);
        org.joda.time.DateTimeZone dateTimeZone54 = mutableDateTime42.getZone();
        mutableDateTime28.setMillis((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.days();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.dayOfYear();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField68 = chronology64.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField69 = chronology64.minuteOfHour();
        org.joda.time.Chronology chronology70 = chronology64.withUTC();
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType56.getField(chronology70);
        mutableDateTime28.setChronology(chronology70);
        mutableDateTime1.setChronology(chronology70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime28 and mutableDateTime42", (mutableDateTime28.compareTo(mutableDateTime42) == 0) == mutableDateTime28.equals(mutableDateTime42));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        long long17 = dateTimeParserBucket14.computeMillis(true);
        org.joda.time.Chronology chronology18 = dateTimeParserBucket14.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.Instant instant22 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.minuteOfHour();
        long long39 = chronology30.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.DurationField durationField40 = chronology30.weeks();
        org.joda.time.DateTime dateTime41 = mutableDateTime1.toDateTime(chronology30);
        org.joda.time.DurationField durationField42 = chronology30.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime21", (mutableDateTime1.compareTo(mutableDateTime21) == 0) == mutableDateTime1.equals(mutableDateTime21));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        mutableDateTime9.addHours(59);
        int int14 = mutableDateTime9.getMillisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = mutableDateTime16.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) (byte) 0);
        mutableDateTime16.setZoneRetainFields(dateTimeZone27);
        mutableDateTime9.setZone(dateTimeZone27);
        java.util.TimeZone timeZone32 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long37 = dateTimeZone33.convertLocalToUTC((long) 10, false, (long) 598);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.dayOfWeek();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        mutableDateTime42.addHours(59);
        int int47 = mutableDateTime42.getMillisOfSecond();
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology49, locale50, (java.lang.Integer) 9, 59);
        java.lang.Object obj54 = dateTimeParserBucket53.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket53.saveField(dateTimeFieldType55, 59);
        boolean boolean58 = mutableDateTime42.isSupported(dateTimeFieldType55);
        int int59 = mutableDateTime39.compareTo((org.joda.time.ReadableInstant) mutableDateTime42);
        int int60 = mutableDateTime42.getMillisOfDay();
        int int61 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.Instant instant62 = mutableDateTime42.toInstant();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) instant62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType64.getField(chronology65);
        int int67 = dateTimeField66.getMaximumValue();
        java.util.Locale locale69 = java.util.Locale.FRENCH;
        java.lang.String str70 = locale69.getISO3Country();
        java.lang.String str71 = dateTimeField66.getAsShortText(0L, locale69);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(chronology73);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime74.dayOfWeek();
        java.util.Locale locale76 = null;
        java.lang.String str77 = property75.getAsText(locale76);
        java.util.Locale locale78 = null;
        int int79 = property75.getMaximumTextLength(locale78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime(chronology80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        boolean boolean83 = mutableDateTime81.isEqual(readableInstant82);
        int int84 = mutableDateTime81.getHourOfDay();
        mutableDateTime81.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.DateTimeField dateTimeField89 = dateTimeFieldType87.getField(chronology88);
        int int90 = dateTimeField89.getMaximumValue();
        mutableDateTime81.setRounding(dateTimeField89);
        java.util.Locale locale93 = java.util.Locale.FRENCH;
        java.lang.String str94 = dateTimeField89.getAsShortText((int) (byte) 1, locale93);
        java.lang.String str95 = property75.getAsShortText(locale93);
        java.lang.String str96 = dateTimeField66.getAsShortText(10L, locale93);
        java.lang.String str97 = dateTimeField66.getName();
        int int98 = mutableDateTime1.get(dateTimeField66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and instant62", (mutableDateTime9.compareTo(instant62) == 0) == mutableDateTime9.equals(instant62));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = mutableDateTime24.toString(dateTimeFormatter27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.weekOfWeekyear();
        org.joda.time.Chronology chronology30 = mutableDateTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime14.toMutableDateTime(chronology30);
        mutableDateTime32.addMonths(74416135);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfWeek();
        mutableDateTime36.setYear(74411);
        int int40 = mutableDateTime36.getMinuteOfHour();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        mutableDateTime42.addYears(0);
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        mutableDateTime42.setZoneRetainFields(dateTimeZone54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        boolean boolean59 = mutableDateTime57.isEqual(readableInstant58);
        int int60 = mutableDateTime57.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        boolean boolean62 = mutableDateTime57.isSupported(dateTimeFieldType61);
        int int63 = mutableDateTime42.get(dateTimeFieldType61);
        mutableDateTime42.setWeekyear(74419);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale68, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone72 = dateTimeParserBucket71.getZone();
        long long74 = dateTimeParserBucket71.computeMillis(true);
        org.joda.time.Chronology chronology75 = dateTimeParserBucket71.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.clockhourOfDay();
        org.joda.time.DurationField durationField77 = chronology75.years();
        org.joda.time.MutableDateTime mutableDateTime78 = mutableDateTime42.toMutableDateTime(chronology75);
        boolean boolean79 = mutableDateTime36.isAfter((org.joda.time.ReadableInstant) mutableDateTime42);
        boolean boolean81 = mutableDateTime42.isAfter(779L);
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) mutableDateTime42);
        int int83 = mutableDateTime42.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime32 and mutableDateTime78", (mutableDateTime32.compareTo(mutableDateTime78) == 0) == mutableDateTime32.equals(mutableDateTime78));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        int int19 = mutableDateTime14.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = mutableDateTime14.isSupported(dateTimeFieldType20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime14.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime14.toMutableDateTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime23.add(readablePeriod24);
        boolean boolean26 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Instant instant27 = mutableDateTime23.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.minuteOfHour();
        mutableDateTime4.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.addWrapField(0);
        boolean boolean16 = mutableDateTime4.isAfter((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DurationField durationField26 = chronology24.centuries();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology24.getZone();
        org.joda.time.DurationField durationField28 = chronology24.weeks();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.year();
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime4.toMutableDateTime(chronology24);
        boolean boolean31 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str33 = durationFieldType32.toString();
        org.joda.time.Chronology chronology34 = null;
        boolean boolean35 = durationFieldType32.isSupported(chronology34);
        mutableDateTime1.add(durationFieldType32, 425);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and mutableDateTime30", (mutableDateTime4.compareTo(mutableDateTime30) == 0) == mutableDateTime4.equals(mutableDateTime30));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField14 = chronology8.halfdays();
        org.joda.time.DurationField durationField15 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField18 = chronology8.minutes();
        org.joda.time.DurationField durationField19 = chronology8.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField19, durationField14, and durationField15", !(durationField19.compareTo(durationField14) == 0) || (Math.signum(durationField19.compareTo(durationField15)) == Math.signum(durationField14.compareTo(durationField15))));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField26 = chronology19.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        java.util.Locale locale33 = null;
        java.util.Calendar calendar34 = mutableDateTime29.toCalendar(locale33);
        int int35 = mutableDateTime29.getCenturyOfEra();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket41.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey((long) (byte) 0);
        mutableDateTime29.setZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = mutableDateTime27.toDateTime(dateTimeZone42);
        int int47 = mutableDateTime27.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar34", (calendar3.compareTo(calendar34) == 0) == calendar3.equals(calendar34));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        mutableDateTime23.addHours(59);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.minuteOfHour();
        mutableDateTime23.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.addWrapField(0);
        boolean boolean35 = mutableDateTime23.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime37.set(dateTimeFieldType41, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime37.getZone();
        long long46 = dateTimeZone44.nextTransition((long) 59);
        java.util.TimeZone timeZone47 = dateTimeZone44.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime23, dateTimeZone44);
        mutableDateTime8.setZone(dateTimeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and mutableDateTime21", (instant18.compareTo(mutableDateTime21) == 0) == instant18.equals(mutableDateTime21));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        int int8 = mutableDateTime7.getEra();
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime7.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType10.getDurationType();
        mutableDateTime7.add(durationFieldType12, 665);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        mutableDateTime16.addHours(59);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.minuteOfHour();
        mutableDateTime16.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.addWrapField(0);
        boolean boolean28 = mutableDateTime16.isAfter((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeParserBucket34.getZone();
        org.joda.time.Chronology chronology36 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfHalfday();
        org.joda.time.DurationField durationField38 = chronology36.centuries();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology36.getZone();
        org.joda.time.DurationField durationField40 = chronology36.weeks();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.year();
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime16.toMutableDateTime(chronology36);
        org.joda.time.DurationField durationField43 = durationFieldType12.getField(chronology36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime16 and mutableDateTime42", (mutableDateTime16.compareTo(mutableDateTime42) == 0) == mutableDateTime16.equals(mutableDateTime42));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        int int3 = mutableDateTime2.getDayOfWeek();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket9.getZone();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.minuteOfHour();
        long long20 = chronology11.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.DurationField durationField21 = chronology11.weeks();
        org.joda.time.DateTime dateTime22 = mutableDateTime2.toDateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField23 = chronology11.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime22", (mutableDateTime1.compareTo(dateTime22) == 0) == mutableDateTime1.equals(dateTime22));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 9, 59);
        int int6 = dateTimeParserBucket5.getOffset();
        java.lang.Integer int7 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.DurationField durationField10 = chronology8.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField10, and durationField9", !(durationField9.compareTo(durationField10) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField10.compareTo(durationField9))));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        mutableDateTime0.setWeekyear(74416135);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime0.copy();
        org.joda.time.Instant instant8 = mutableDateTime0.toInstant();
        java.lang.String str9 = mutableDateTime0.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and instant8", (mutableDateTime7.compareTo(instant8) == 0) == mutableDateTime7.equals(instant8));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        java.lang.String str7 = mutableDateTime1.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        mutableDateTime9.addDays(0);
        int int15 = mutableDateTime9.getCenturyOfEra();
        org.joda.time.DateTime dateTime16 = mutableDateTime9.toDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime18.set(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = mutableDateTime18.get(dateTimeFieldType25);
        org.joda.time.Instant instant27 = mutableDateTime18.toInstant();
        mutableDateTime18.addDays((int) ' ');
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.millis();
        java.lang.String str31 = durationFieldType30.toString();
        java.lang.String str32 = durationFieldType30.getName();
        mutableDateTime18.add(durationFieldType30, 20);
        mutableDateTime9.add(durationFieldType30, 34812903);
        mutableDateTime1.add(durationFieldType30, 34837044);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        int int43 = mutableDateTime40.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime40.set(dateTimeFieldType44, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        int int48 = mutableDateTime40.get(dateTimeFieldType47);
        org.joda.time.DateTime dateTime49 = mutableDateTime40.toDateTime();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        mutableDateTime51.addYears(0);
        mutableDateTime40.setDate((org.joda.time.ReadableInstant) mutableDateTime51);
        int int58 = mutableDateTime40.getEra();
        int int59 = mutableDateTime40.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = mutableDateTime40.toString(dateTimeFormatter60);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime40.minuteOfHour();
        mutableDateTime40.addYears(237);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        boolean boolean68 = mutableDateTime66.isEqual(readableInstant67);
        int int69 = mutableDateTime66.getHourOfDay();
        mutableDateTime66.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType72.getField(chronology73);
        int int75 = dateTimeField74.getMaximumValue();
        mutableDateTime66.setRounding(dateTimeField74);
        java.util.Locale locale78 = java.util.Locale.FRENCH;
        java.lang.String str79 = dateTimeField74.getAsShortText((int) (byte) 1, locale78);
        java.util.Calendar calendar80 = mutableDateTime40.toCalendar(locale78);
        org.joda.time.DateTimeZone dateTimeZone81 = mutableDateTime40.getZone();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        boolean boolean85 = mutableDateTime83.isEqual(readableInstant84);
        int int86 = mutableDateTime83.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime83.set(dateTimeFieldType87, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone90 = mutableDateTime83.getZone();
        long long92 = dateTimeZone90.nextTransition((long) 59);
        java.lang.String str94 = dateTimeZone90.getName((long) (short) 0);
        java.lang.String str95 = dateTimeZone90.getID();
        mutableDateTime40.setZone(dateTimeZone90);
        org.joda.time.MutableDateTime mutableDateTime97 = mutableDateTime1.toMutableDateTime(dateTimeZone90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and dateTime49", (instant27.compareTo(dateTime49) == 0) == instant27.equals(dateTime49));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        java.util.Date date10 = mutableDateTime1.toDate();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.secondOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = mutableDateTime14.toDateTime();
        int int24 = dateTime23.getMinuteOfHour();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime23.toDateTime(chronology32);
        mutableDateTime1.setChronology(chronology32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and dateTime35", (mutableDateTime14.compareTo(dateTime35) == 0) == mutableDateTime14.equals(dateTime35));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(74415006L, chronology8);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        long long20 = dateTimeParserBucket17.computeMillis(true);
        org.joda.time.Chronology chronology21 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        java.lang.String str27 = dateTimeZone24.getName((long) 2);
        java.util.TimeZone timeZone28 = dateTimeZone24.toTimeZone();
        org.joda.time.Chronology chronology29 = chronology21.withZone(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(chronology21);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        mutableDateTime32.addHours(59);
        org.joda.time.Chronology chronology37 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology37.getZone();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime30.toMutableDateTime(chronology37);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime30 and mutableDateTime39", (mutableDateTime30.compareTo(mutableDateTime39) == 0) == mutableDateTime30.equals(mutableDateTime39));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        boolean boolean21 = mutableDateTime16.isSupported(dateTimeFieldType20);
        int int22 = mutableDateTime1.get(dateTimeFieldType20);
        mutableDateTime1.setWeekyear(74419);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        long long33 = dateTimeParserBucket30.computeMillis(true);
        org.joda.time.Chronology chronology34 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.DurationField durationField36 = chronology34.years();
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime1.toMutableDateTime(chronology34);
        java.lang.String str38 = chronology34.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime37", (mutableDateTime1.compareTo(mutableDateTime37) == 0) == mutableDateTime1.equals(mutableDateTime37));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfCeiling();
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        java.util.Locale locale17 = null;
        java.util.Calendar calendar18 = mutableDateTime13.toCalendar(locale17);
        int int19 = mutableDateTime13.getCenturyOfEra();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey((long) (byte) 0);
        mutableDateTime13.setZoneRetainFields(dateTimeZone26);
        org.joda.time.Chronology chronology30 = mutableDateTime13.getChronology();
        org.joda.time.DateTime dateTime31 = dateTime11.toDateTime(chronology30);
        int int32 = dateTime11.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar18", (calendar3.compareTo(calendar18) == 0) == calendar3.equals(calendar18));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        mutableDateTime1.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime13", (mutableDateTime1.compareTo(dateTime13) == 0) == mutableDateTime1.equals(dateTime13));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        mutableDateTime1.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(dateTimeZone12);
        int int14 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.dayOfMonth();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology23.add(readablePeriod25, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(chronology23);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.DateTime dateTime40 = mutableDateTime29.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField41 = chronology37.millisOfDay();
        org.joda.time.DurationField durationField42 = chronology37.seconds();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime1.toMutableDateTime(chronology37);
        org.joda.time.Chronology chronology44 = mutableDateTime1.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and mutableDateTime43", (dateTime13.compareTo(mutableDateTime43) == 0) == dateTime13.equals(mutableDateTime43));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.dayOfYear();
        org.joda.time.ReadablePartial readablePartial20 = null;
        int int21 = dateTimeField19.getMinimumValue(readablePartial20);
        mutableDateTime1.setRounding(dateTimeField19);
        long long23 = mutableDateTime1.getMillis();
        int int24 = mutableDateTime1.getSecondOfMinute();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getMonthOfYear();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology38, locale40, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField44 = chronology38.halfdays();
        org.joda.time.DurationField durationField45 = chronology38.weekyears();
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(chronology38);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.DateTime dateTime48 = mutableDateTime26.toDateTime(chronology38);
        mutableDateTime1.setChronology(chronology38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime26 and mutableDateTime46", (mutableDateTime26.compareTo(mutableDateTime46) == 0) == mutableDateTime26.equals(mutableDateTime46));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        long long17 = dateTimeParserBucket14.computeMillis(true);
        org.joda.time.Chronology chronology18 = dateTimeParserBucket14.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = chronology19.add(readablePeriod22, (long) 761, 74475);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime21", (mutableDateTime1.compareTo(mutableDateTime21) == 0) == mutableDateTime1.equals(mutableDateTime21));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        java.lang.Object obj7 = dateTimeParserBucket5.saveState();
        long long8 = dateTimeParserBucket5.computeMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getRangeDurationType();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType10.getField(chronology11);
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) durationField12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        org.joda.time.DurationField durationField17 = dateTimeField16.getDurationField();
        boolean boolean19 = dateTimeField16.isLeap((long) (short) -1);
        int int20 = dateTimeField16.getMaximumValue();
        java.lang.String str21 = dateTimeField16.toString();
        dateTimeParserBucket5.saveField(dateTimeField16, 213);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField12 and durationField17", Math.signum(durationField12.compareTo(durationField17)) == -Math.signum(durationField17.compareTo(durationField12)));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.monthOfYear();
        org.joda.time.DurationField durationField10 = chronology7.days();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant12 = null;
        mutableDateTime11.setMillis(readableInstant12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        mutableDateTime15.addDays((int) (byte) 0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        int int33 = mutableDateTime30.getHourOfDay();
        mutableDateTime30.addDays(0);
        int int36 = mutableDateTime30.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime30.weekyear();
        mutableDateTime30.add((long) 993);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.yearOfEra();
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar43 = mutableDateTime40.toCalendar(locale42);
        mutableDateTime40.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int49 = mutableDateTime40.getDayOfMonth();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        mutableDateTime51.addHours(59);
        org.joda.time.Chronology chronology56 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = chronology56.getZone();
        mutableDateTime40.setZone(dateTimeZone57);
        mutableDateTime30.setZone(dateTimeZone57);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime15.toMutableDateTime(dateTimeZone57);
        mutableDateTime11.setMillis((org.joda.time.ReadableInstant) mutableDateTime60);
        int int62 = mutableDateTime60.getEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and mutableDateTime15", (mutableDateTime11.compareTo(mutableDateTime15) == 0) == mutableDateTime11.equals(mutableDateTime15));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        int int19 = mutableDateTime14.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = mutableDateTime14.isSupported(dateTimeFieldType20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime14.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime14.toMutableDateTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime23.add(readablePeriod24);
        boolean boolean26 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Instant instant27 = mutableDateTime23.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.minuteOfHour();
        org.joda.time.Chronology chronology43 = chronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType29.getField(chronology43);
        mutableDateTime1.setChronology(chronology43);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime15", (mutableDateTime1.compareTo(mutableDateTime15) == 0) == mutableDateTime1.equals(mutableDateTime15));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.minuteOfDay();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        org.joda.time.DurationField durationField12 = chronology7.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField12, and durationField11", !(durationField11.compareTo(durationField12) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField12.compareTo(durationField11))));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.minuteOfHour();
        org.joda.time.Chronology chronology43 = chronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType29.getField(chronology43);
        mutableDateTime1.setChronology(chronology43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        long long49 = chronology43.add(readablePeriod46, (long) 653, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime15", (mutableDateTime1.compareTo(mutableDateTime15) == 0) == mutableDateTime1.equals(mutableDateTime15));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.getMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property11.getFieldType();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        mutableDateTime15.addHours(59);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.minuteOfHour();
        int int21 = mutableDateTime15.getSecondOfDay();
        mutableDateTime15.addSeconds((-292275054));
        int int24 = mutableDateTime15.getMinuteOfHour();
        mutableDateTime15.setMillisOfSecond(395);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime28.set(dateTimeFieldType32, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime28.getZone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        mutableDateTime37.addYears(0);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale45, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket48.getZone();
        mutableDateTime37.setZoneRetainFields(dateTimeZone49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        int int55 = mutableDateTime52.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        boolean boolean57 = mutableDateTime52.isSupported(dateTimeFieldType56);
        int int58 = mutableDateTime37.get(dateTimeFieldType56);
        boolean boolean59 = mutableDateTime28.isSupported(dateTimeFieldType56);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime15.property(dateTimeFieldType56);
        int int61 = property11.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Chronology chronology63 = null;
        java.util.Locale locale64 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(0L, chronology63, locale64, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone68 = dateTimeParserBucket67.getZone();
        org.joda.time.Chronology chronology69 = dateTimeParserBucket67.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        long long74 = chronology69.add(readablePeriod71, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime75 = org.joda.time.MutableDateTime.now(chronology69);
        org.joda.time.DateTimeField dateTimeField76 = chronology69.secondOfMinute();
        org.joda.time.DurationField durationField77 = chronology69.halfdays();
        org.joda.time.MutableDateTime mutableDateTime78 = mutableDateTime15.toMutableDateTime(chronology69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime37 and mutableDateTime75", (mutableDateTime37.compareTo(mutableDateTime75) == 0) == mutableDateTime37.equals(mutableDateTime75));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        int int13 = mutableDateTime12.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        long long10 = dateTimeParserBucket7.computeMillis(true);
        org.joda.time.Chronology chronology11 = dateTimeParserBucket7.getChronology();
        org.joda.time.Chronology chronology12 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.yearOfEra();
        boolean boolean14 = durationFieldType1.isSupported(chronology11);
        java.lang.String str15 = durationFieldType1.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket22.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.minuteOfHour();
        org.joda.time.Chronology chronology30 = chronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType16.getField(chronology30);
        boolean boolean32 = durationFieldType1.isSupported(chronology30);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale35, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeParserBucket38.getZone();
        org.joda.time.Chronology chronology40 = dateTimeParserBucket38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.DurationField durationField43 = chronology40.hours();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.clockhourOfDay();
        org.joda.time.DurationField durationField45 = durationFieldType1.getField(chronology40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField45, durationField25, and durationField43", !(durationField45.compareTo(durationField25) == 0) || (Math.signum(durationField45.compareTo(durationField43)) == Math.signum(durationField25.compareTo(durationField43))));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = mutableDateTime1.toDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology28, locale30, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField34 = chronology28.halfdays();
        org.joda.time.DurationField durationField35 = chronology28.millis();
        org.joda.time.DateTimeField dateTimeField36 = chronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology28.hourOfHalfday();
        mutableDateTime1.setChronology(chronology28);
        org.joda.time.DurationField durationField39 = chronology28.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime18", (mutableDateTime1.compareTo(dateTime18) == 0) == mutableDateTime1.equals(dateTime18));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int5 = property3.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundCeiling();
        java.util.GregorianCalendar gregorianCalendar7 = mutableDateTime6.toGregorianCalendar();
        org.joda.time.Instant instant8 = mutableDateTime6.toInstant();
        int int9 = mutableDateTime6.getRoundingMode();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant8", (mutableDateTime6.compareTo(instant8) == 0) == mutableDateTime6.equals(instant8));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime8.toMutableDateTime();
        int int22 = mutableDateTime21.getRoundingMode();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and instant18", (mutableDateTime8.compareTo(instant18) == 0) == mutableDateTime8.equals(instant18));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField26 = chronology19.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        java.util.Locale locale33 = null;
        java.util.Calendar calendar34 = mutableDateTime29.toCalendar(locale33);
        int int35 = mutableDateTime29.getCenturyOfEra();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket41.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey((long) (byte) 0);
        mutableDateTime29.setZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = mutableDateTime27.toDateTime(dateTimeZone42);
        mutableDateTime27.addMonths(635);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar34", (calendar3.compareTo(calendar34) == 0) == calendar3.equals(calendar34));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = mutableDateTime24.toString(dateTimeFormatter27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.weekOfWeekyear();
        org.joda.time.Chronology chronology30 = mutableDateTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime14.toMutableDateTime(chronology30);
        mutableDateTime32.addMonths(74416135);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfWeek();
        mutableDateTime36.setYear(74411);
        int int40 = mutableDateTime36.getMinuteOfHour();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        mutableDateTime42.addYears(0);
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        mutableDateTime42.setZoneRetainFields(dateTimeZone54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        boolean boolean59 = mutableDateTime57.isEqual(readableInstant58);
        int int60 = mutableDateTime57.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        boolean boolean62 = mutableDateTime57.isSupported(dateTimeFieldType61);
        int int63 = mutableDateTime42.get(dateTimeFieldType61);
        mutableDateTime42.setWeekyear(74419);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale68, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone72 = dateTimeParserBucket71.getZone();
        long long74 = dateTimeParserBucket71.computeMillis(true);
        org.joda.time.Chronology chronology75 = dateTimeParserBucket71.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.clockhourOfDay();
        org.joda.time.DurationField durationField77 = chronology75.years();
        org.joda.time.MutableDateTime mutableDateTime78 = mutableDateTime42.toMutableDateTime(chronology75);
        boolean boolean79 = mutableDateTime36.isAfter((org.joda.time.ReadableInstant) mutableDateTime42);
        boolean boolean81 = mutableDateTime42.isAfter(779L);
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.DateTime dateTime83 = mutableDateTime42.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime32 and mutableDateTime78", (mutableDateTime32.compareTo(mutableDateTime78) == 0) == mutableDateTime32.equals(mutableDateTime78));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.Chronology chronology3 = null;
        mutableDateTime2.setChronology(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = mutableDateTime6.toString(dateTimeFormatter9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.Chronology chronology12 = mutableDateTime6.getChronology();
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) mutableDateTime6);
        mutableDateTime6.addMinutes((int) 'u');
        org.joda.time.Chronology chronology16 = mutableDateTime6.getChronology();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.hours();
        org.joda.time.DurationField durationField30 = durationFieldType18.getField(chronology26);
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder31.clearExtensions();
        java.util.Locale.Builder builder34 = builder32.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale35 = builder34.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 2818, chronology26, locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 653, chronology16, locale35, (java.lang.Integer) 959);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and mutableDateTime28", (mutableDateTime2.compareTo(mutableDateTime28) == 0) == mutableDateTime2.equals(mutableDateTime28));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial47 = null;
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology51, locale52, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeParserBucket55.getZone();
        org.joda.time.Chronology chronology57 = dateTimeParserBucket55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.hourOfHalfday();
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.lang.String str60 = locale59.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology57, locale59, (java.lang.Integer) 2022);
        java.util.Locale locale63 = locale59.stripExtensions();
        java.lang.String str64 = locale63.getISO3Language();
        java.lang.String str65 = dateTimeField46.getAsText(readablePartial47, 842, locale63);
        int int66 = mutableDateTime33.get(dateTimeField46);
        java.util.Locale locale67 = null;
        int int68 = dateTimeField46.getMaximumTextLength(locale67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        long long17 = dateTimeParserBucket14.computeMillis(true);
        org.joda.time.Chronology chronology18 = dateTimeParserBucket14.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.Instant instant22 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        org.joda.time.Chronology chronology31 = dateTimeParserBucket29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfHalfday();
        java.util.Locale locale35 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale36 = locale35.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 380, chronology31, locale36, (java.lang.Integer) 390);
        org.joda.time.DurationField durationField39 = chronology31.minutes();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(chronology31);
        boolean boolean41 = instant22.isAfter((org.joda.time.ReadableInstant) mutableDateTime40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime21", (mutableDateTime1.compareTo(mutableDateTime21) == 0) == mutableDateTime1.equals(mutableDateTime21));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        int int29 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Instant instant30 = mutableDateTime1.toInstant();
        int int31 = mutableDateTime1.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and instant30", (mutableDateTime15.compareTo(instant30) == 0) == mutableDateTime15.equals(instant30));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DurationField durationField10 = chronology7.hours();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime12.getZone();
        long long21 = dateTimeZone19.nextTransition((long) 59);
        java.lang.String str23 = dateTimeZone19.getName((long) (short) 0);
        java.lang.String str24 = dateTimeZone19.getID();
        long long26 = dateTimeZone19.nextTransition((long) (byte) 0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        mutableDateTime33.addHours(59);
        org.joda.time.Chronology chronology38 = mutableDateTime33.getChronology();
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime33.toMutableDateTime();
        int int40 = mutableDateTime33.getMinuteOfHour();
        mutableDateTime33.addDays(831);
        boolean boolean43 = mutableDateTime29.isBefore((org.joda.time.ReadableInstant) mutableDateTime33);
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Calendar calendar45 = mutableDateTime33.toCalendar(locale44);
        java.lang.String str46 = dateTimeZone19.getShortName((-41907196800000L), locale44);
        java.util.TimeZone timeZone47 = dateTimeZone19.toTimeZone();
        org.joda.time.Chronology chronology48 = chronology7.withZone(dateTimeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and mutableDateTime29", (mutableDateTime9.compareTo(mutableDateTime29) == 0) == mutableDateTime9.equals(mutableDateTime29));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField26 = chronology19.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        java.util.Locale locale33 = null;
        java.util.Calendar calendar34 = mutableDateTime29.toCalendar(locale33);
        int int35 = mutableDateTime29.getCenturyOfEra();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket41.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey((long) (byte) 0);
        mutableDateTime29.setZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = mutableDateTime27.toDateTime(dateTimeZone42);
        int int47 = dateTime46.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar34", (calendar3.compareTo(calendar34) == 0) == calendar3.equals(calendar34));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        int int12 = property10.getMinimumValueOverall();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        int int21 = mutableDateTime14.getEra();
        boolean boolean22 = mutableDateTime14.isEqualNow();
        int int23 = property10.getDifference((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.MutableDateTime mutableDateTime25 = property10.add(1);
        mutableDateTime25.addWeeks(34815457);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        long long36 = dateTimeParserBucket33.computeMillis(true);
        org.joda.time.Chronology chronology37 = dateTimeParserBucket33.getChronology();
        org.joda.time.Chronology chronology38 = chronology37.withUTC();
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime25.toMutableDateTime(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and mutableDateTime39", (mutableDateTime9.compareTo(mutableDateTime39) == 0) == mutableDateTime9.equals(mutableDateTime39));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime1.addMillis((int) (byte) 0);
        int int21 = mutableDateTime1.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.property(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getRangeDurationType();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.dayOfMonth();
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology33, locale38);
        org.joda.time.DateTimeField dateTimeField40 = chronology33.secondOfDay();
        org.joda.time.DurationField durationField41 = durationFieldType24.getField(chronology33);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        mutableDateTime43.addHours(59);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime43.minuteOfHour();
        int int49 = mutableDateTime43.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime43.set(dateTimeFieldType50, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime53 = mutableDateTime43.toMutableDateTime();
        int int54 = mutableDateTime43.getDayOfMonth();
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.hourOfHalfday();
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = locale66.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology64, locale66, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField70 = chronology64.halfdays();
        org.joda.time.DurationField durationField71 = chronology64.millis();
        org.joda.time.DateTimeField dateTimeField72 = chronology64.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType73.getField(chronology74);
        int int76 = dateTimeField75.getMaximumValue();
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        java.lang.String str79 = dateTimeField75.getAsText((long) 319, locale78);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 100, chronology64, locale78);
        org.joda.time.DateTimeField dateTimeField81 = chronology64.secondOfMinute();
        org.joda.time.DateTime dateTime82 = mutableDateTime43.toDateTime(chronology64);
        org.joda.time.DurationField durationField83 = durationFieldType24.getField(chronology64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime43 and dateTime82", (mutableDateTime43.compareTo(dateTime82) == 0) == mutableDateTime43.equals(dateTime82));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        int int34 = mutableDateTime33.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(0);
        mutableDateTime33.setZone(dateTimeZone36);
        java.lang.String str39 = dateTimeZone36.getName((long) 74416135);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.lang.String str3 = property2.getName();
        org.joda.time.DurationField durationField4 = property2.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property2.getFieldType();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getRangeDurationType();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        org.joda.time.Chronology chronology14 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology14);
        org.joda.time.DurationField durationField17 = durationFieldType6.getField(chronology14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime16", (mutableDateTime1.compareTo(mutableDateTime16) == 0) == mutableDateTime1.equals(mutableDateTime16));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        boolean boolean10 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        java.util.Calendar calendar28 = mutableDateTime14.toCalendar(locale26);
        java.lang.String str29 = dateTimeField4.getAsShortText(readablePartial11, (int) ' ', locale26);
        int int30 = property1.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = property1.roundCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        int int35 = dateTimeField34.getMaximumValue();
        int int38 = dateTimeField34.getDifference((long) 10, (long) 'a');
        int int40 = dateTimeField34.getLeapAmount((-1L));
        java.util.Locale locale42 = java.util.Locale.ITALY;
        java.lang.String str43 = dateTimeField34.getAsText((long) 340, locale42);
        java.util.Locale locale45 = java.util.Locale.UK;
        java.lang.String str46 = dateTimeField34.getAsShortText((int) '4', locale45);
        java.util.Calendar calendar47 = mutableDateTime31.toCalendar(locale45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        org.joda.time.DurationField durationField51 = dateTimeField50.getDurationField();
        boolean boolean53 = dateTimeField50.isLeap((long) (short) -1);
        java.lang.String str55 = dateTimeField50.getAsShortText((long) 390);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        boolean boolean59 = mutableDateTime57.isEqual(readableInstant58);
        int int60 = mutableDateTime57.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime57.set(dateTimeFieldType61, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        int int65 = mutableDateTime57.get(dateTimeFieldType64);
        org.joda.time.DateTime dateTime66 = mutableDateTime57.toDateTime();
        org.joda.time.Chronology chronology69 = null;
        java.util.Locale locale70 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket(0L, chronology69, locale70, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone74 = dateTimeParserBucket73.getZone();
        org.joda.time.Chronology chronology75 = dateTimeParserBucket73.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.hourOfHalfday();
        java.util.Locale locale77 = java.util.Locale.FRENCH;
        java.lang.String str78 = locale77.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology75, locale77, (java.lang.Integer) 2022);
        java.util.Locale locale81 = locale77.stripExtensions();
        java.lang.String str82 = locale81.getScript();
        java.lang.String str83 = locale81.getISO3Language();
        java.util.Calendar calendar84 = dateTime66.toCalendar(locale81);
        int int85 = dateTimeField50.getMaximumTextLength(locale81);
        int int86 = mutableDateTime31.get(dateTimeField50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar28 and calendar84", (calendar28.compareTo(calendar84) == 0) == calendar28.equals(calendar84));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        int int7 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Instant instant8 = mutableDateTime1.toInstant();
        mutableDateTime1.addWeekyears(280);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        int int17 = mutableDateTime12.getMillisOfSecond();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = mutableDateTime19.toString(dateTimeFormatter22);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (byte) 0);
        mutableDateTime19.setZoneRetainFields(dateTimeZone30);
        mutableDateTime12.setZone(dateTimeZone30);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        int int40 = dateTimeField38.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.dayOfWeek();
        java.util.Locale locale45 = null;
        java.lang.String str46 = property44.getAsText(locale45);
        java.util.Locale locale47 = null;
        int int48 = property44.getMaximumTextLength(locale47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        int int53 = mutableDateTime50.getHourOfDay();
        mutableDateTime50.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        int int59 = dateTimeField58.getMaximumValue();
        mutableDateTime50.setRounding(dateTimeField58);
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.lang.String str63 = dateTimeField58.getAsShortText((int) (byte) 1, locale62);
        java.lang.String str64 = property44.getAsShortText(locale62);
        java.lang.String str65 = dateTimeField38.getAsShortText(1L, locale62);
        java.util.Set<java.lang.Character> charSet66 = locale62.getExtensionKeys();
        java.lang.String str67 = dateTimeZone30.getShortName((long) 6, locale62);
        org.joda.time.DateTime dateTime68 = mutableDateTime1.toDateTime(dateTimeZone30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime19", (instant8.compareTo(mutableDateTime19) == 0) == instant8.equals(mutableDateTime19));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeFormatter14.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser16 = dateTimeFormatter14.getParser();
        boolean boolean17 = dateTimeFormatter14.isParser();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = chronology25.add(readablePeriod27, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter14.withChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType11.getField(chronology25);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType11.getRangeDurationType();
        int int34 = instant10.get(dateTimeFieldType11);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket40.getZone();
        org.joda.time.Chronology chronology42 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        long long47 = chronology42.add(readablePeriod44, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now(chronology42);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(0L, chronology50, locale51, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeParserBucket54.getZone();
        org.joda.time.Chronology chronology56 = dateTimeParserBucket54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(chronology56);
        org.joda.time.DateTime dateTime59 = mutableDateTime48.toDateTime(chronology56);
        org.joda.time.DateTimeField dateTimeField60 = chronology56.millisOfDay();
        boolean boolean61 = dateTimeFieldType11.isSupported(chronology56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant10", (mutableDateTime1.compareTo(instant10) == 0) == mutableDateTime1.equals(instant10));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType5.getDurationType();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.Chronology chronology16 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.Chronology chronology19 = chronology16.withUTC();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 755, chronology19);
        org.joda.time.DurationField durationField21 = chronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.clockhourOfDay();
        org.joda.time.DurationField durationField23 = durationFieldType8.getField(chronology19);
        org.joda.time.DurationField durationField24 = chronology19.halfdays();
        org.joda.time.DurationField durationField25 = chronology19.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField25, durationField21, and durationField23", !(durationField25.compareTo(durationField21) == 0) || (Math.signum(durationField25.compareTo(durationField23)) == Math.signum(durationField21.compareTo(durationField23))));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        mutableDateTime1.addMinutes(135);
        int int9 = mutableDateTime1.getYearOfEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.yearOfEra();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar20 = mutableDateTime17.toCalendar(locale19);
        mutableDateTime17.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime17.millisOfDay();
        int int24 = mutableDateTime17.getDayOfWeek();
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime17.setMillisOfDay(0);
        int int28 = mutableDateTime17.getCenturyOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        mutableDateTime30.addHours(59);
        int int35 = mutableDateTime30.getMillisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = mutableDateTime37.toString(dateTimeFormatter40);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        java.lang.String str50 = dateTimeZone48.getNameKey((long) (byte) 0);
        mutableDateTime37.setZoneRetainFields(dateTimeZone48);
        mutableDateTime30.setZone(dateTimeZone48);
        long long54 = dateTimeZone48.previousTransition((long) 852);
        mutableDateTime17.setZoneRetainFields(dateTimeZone48);
        long long57 = dateTimeZone48.previousTransition(1644572474616L);
        mutableDateTime1.setZone(dateTimeZone48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar20", (calendar6.compareTo(calendar20) == 0) == calendar6.equals(calendar20));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial47 = null;
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology51, locale52, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeParserBucket55.getZone();
        org.joda.time.Chronology chronology57 = dateTimeParserBucket55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.hourOfHalfday();
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.lang.String str60 = locale59.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology57, locale59, (java.lang.Integer) 2022);
        java.util.Locale locale63 = locale59.stripExtensions();
        java.lang.String str64 = locale63.getISO3Language();
        java.lang.String str65 = dateTimeField46.getAsText(readablePartial47, 842, locale63);
        int int66 = mutableDateTime33.get(dateTimeField46);
        int int68 = dateTimeField46.getLeapAmount((-350874189298L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addDays((int) ' ');
        java.util.Date date13 = mutableDateTime1.toDate();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = durationFieldType14.isSupported(chronology15);
        mutableDateTime1.add(durationFieldType14, 902);
        int int19 = mutableDateTime1.getYearOfCentury();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        mutableDateTime24.addHours((int) (short) 0);
        mutableDateTime24.addWeekyears((int) 'a');
        java.lang.String str30 = mutableDateTime24.toString("0");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        int int35 = mutableDateTime32.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime32.set(dateTimeFieldType36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        int int40 = mutableDateTime32.get(dateTimeFieldType39);
        mutableDateTime24.set(dateTimeFieldType39, 5);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime21.property(dateTimeFieldType39);
        org.joda.time.MutableDateTime mutableDateTime45 = property43.addWrapField(10);
        boolean boolean46 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime32", (instant10.compareTo(mutableDateTime32) == 0) == instant10.equals(mutableDateTime32));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.addWeeks(678);
        boolean boolean22 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getCenturyOfEra();
        mutableDateTime18.setYear(672);
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime18.add(readableDuration26);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.clockhourOfHalfday();
        mutableDateTime18.setChronology(chronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime37", (mutableDateTime1.compareTo(mutableDateTime37) == 0) == mutableDateTime1.equals(mutableDateTime37));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime1.set(dateTimeFieldType8, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        int int12 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale24.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology22, locale24, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField28 = chronology22.halfdays();
        org.joda.time.DurationField durationField29 = chronology22.millis();
        org.joda.time.DateTimeField dateTimeField30 = chronology22.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        int int34 = dateTimeField33.getMaximumValue();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = dateTimeField33.getAsText((long) 319, locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 100, chronology22, locale36);
        org.joda.time.DateTimeField dateTimeField39 = chronology22.secondOfMinute();
        org.joda.time.DateTime dateTime40 = mutableDateTime1.toDateTime(chronology22);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime42.set(dateTimeFieldType46, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        int int50 = mutableDateTime42.get(dateTimeFieldType49);
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(0L, chronology52, locale53, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone57 = dateTimeParserBucket56.getZone();
        java.lang.String str58 = dateTimeZone57.toString();
        org.joda.time.DateTime dateTime59 = mutableDateTime42.toDateTime(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = mutableDateTime1.toDateTime(dateTimeZone57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and dateTime40", (mutableDateTime11.compareTo(dateTime40) == 0) == mutableDateTime11.equals(dateTime40));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.addHours((int) (short) 0);
        mutableDateTime4.addWeekyears((int) 'a');
        java.lang.String str10 = mutableDateTime4.toString("0");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        int int20 = mutableDateTime12.get(dateTimeFieldType19);
        mutableDateTime4.set(dateTimeFieldType19, 5);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.property(dateTimeFieldType19);
        org.joda.time.MutableDateTime mutableDateTime25 = property23.addWrapField(10);
        org.joda.time.DateTimeField dateTimeField26 = property23.getField();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime28.set(dateTimeFieldType32, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        int int36 = mutableDateTime28.get(dateTimeFieldType35);
        int int37 = mutableDateTime28.getWeekOfWeekyear();
        org.joda.time.Instant instant38 = mutableDateTime28.toInstant();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = mutableDateTime28.toCalendar(locale39);
        int int41 = dateTimeField26.getMaximumTextLength(locale39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime12 and instant38", (mutableDateTime12.compareTo(instant38) == 0) == mutableDateTime12.equals(instant38));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        mutableDateTime1.addMinutes(0);
        boolean boolean12 = mutableDateTime1.isBeforeNow();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology19.getZone();
        java.lang.String str21 = dateTimeZone20.getID();
        boolean boolean23 = dateTimeZone20.isStandardOffset((long) 930);
        org.joda.time.DateTime dateTime24 = mutableDateTime1.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.days();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.secondOfMinute();
        long long42 = chronology32.add(1835L, (long) 693, 12);
        org.joda.time.DateTime dateTime43 = mutableDateTime1.toDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField44 = chronology32.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime43", (mutableDateTime1.compareTo(dateTime43) == 0) == mutableDateTime1.equals(dateTime43));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.DurationField durationField25 = chronology22.hours();
        org.joda.time.DurationField durationField26 = durationFieldType14.getField(chronology22);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(chronology22);
        org.joda.time.DateTime dateTime28 = mutableDateTime1.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField29 = chronology22.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime28", (mutableDateTime1.compareTo(dateTime28) == 0) == mutableDateTime1.equals(dateTime28));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime33.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        java.lang.String str11 = chronology7.toString();
        org.joda.time.DurationField durationField12 = chronology7.weeks();
        java.lang.String str13 = chronology7.toString();
        org.joda.time.DurationField durationField14 = chronology7.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField10, and durationField12", !(durationField14.compareTo(durationField10) == 0) || (Math.signum(durationField14.compareTo(durationField12)) == Math.signum(durationField10.compareTo(durationField12))));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.minuteOfDay();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        java.lang.String str12 = chronology7.toString();
        org.joda.time.DurationField durationField13 = chronology7.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField13, and durationField11", !(durationField11.compareTo(durationField13) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField13.compareTo(durationField11))));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(98374L);
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        java.lang.Integer int9 = dateTimeParserBucket7.getPivotYear();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.weekyear();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(chronology10);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology21);
        int int24 = mutableDateTime23.getYear();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfWeek();
        java.lang.String str34 = chronology32.toString();
        org.joda.time.DurationField durationField35 = chronology32.millis();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket41.getZone();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket41.getZone();
        boolean boolean44 = dateTimeZone43.isFixed();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        boolean boolean49 = mutableDateTime47.isEqual(readableInstant48);
        int int50 = mutableDateTime47.getHourOfDay();
        mutableDateTime47.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType53.getField(chronology54);
        int int56 = dateTimeField55.getMaximumValue();
        mutableDateTime47.setRounding(dateTimeField55);
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.lang.String str60 = dateTimeField55.getAsShortText((int) (byte) 1, locale59);
        java.lang.String str61 = dateTimeZone43.getName(10930L, locale59);
        org.joda.time.Chronology chronology62 = chronology32.withZone(dateTimeZone43);
        mutableDateTime23.setZoneRetainFields(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime13, dateTimeZone43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField35", Math.signum(durationField11.compareTo(durationField35)) == -Math.signum(durationField35.compareTo(durationField11)));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType5.getDurationType();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.Chronology chronology16 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.Chronology chronology19 = chronology16.withUTC();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 755, chronology19);
        org.joda.time.DurationField durationField21 = chronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.clockhourOfDay();
        org.joda.time.DurationField durationField23 = durationFieldType8.getField(chronology19);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        long long32 = dateTimeParserBucket29.computeMillis(true);
        org.joda.time.Chronology chronology33 = dateTimeParserBucket29.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.DurationField durationField35 = chronology33.years();
        boolean boolean36 = durationFieldType8.isSupported(chronology33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField21 and durationField35", (durationField21.compareTo(durationField35) == 0) == durationField21.equals(durationField35));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        java.lang.Integer int7 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyear();
        org.joda.time.DurationField durationField11 = chronology8.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField11, and durationField9", !(durationField9.compareTo(durationField11) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField11.compareTo(durationField9))));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.minuteOfDay();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        java.lang.String str12 = chronology7.toString();
        org.joda.time.DurationField durationField13 = chronology7.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField13, and durationField11", !(durationField11.compareTo(durationField13) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField13.compareTo(durationField11))));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfWeek();
        org.joda.time.DurationField durationField10 = chronology6.days();
        org.joda.time.DurationField durationField11 = chronology6.eras();
        org.joda.time.DurationField durationField12 = chronology6.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField11", Math.signum(durationField10.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField10)));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        java.lang.Integer int9 = dateTimeParserBucket6.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.hours();
        org.joda.time.DurationField durationField12 = durationFieldType0.getField(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField11, and durationField12", !(durationField13.compareTo(durationField11) == 0) || (Math.signum(durationField13.compareTo(durationField12)) == Math.signum(durationField11.compareTo(durationField12))));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        int int6 = mutableDateTime0.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.secondOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        java.util.Locale locale13 = null;
        java.util.Calendar calendar14 = mutableDateTime9.toCalendar(locale13);
        mutableDateTime9.addMinutes(135);
        int int17 = mutableDateTime9.getYearOfEra();
        org.joda.time.DateTime dateTime18 = mutableDateTime9.toDateTimeISO();
        int int19 = dateTime18.getDayOfWeek();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar14", (calendar3.compareTo(calendar14) == 0) == calendar3.equals(calendar14));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        mutableDateTime1.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(dateTimeZone12);
        int int14 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.dayOfMonth();
        int int16 = property15.getMinimumValueOverall();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime13", (mutableDateTime1.compareTo(dateTime13) == 0) == mutableDateTime1.equals(dateTime13));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        mutableDateTime1.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(dateTimeZone12);
        int int14 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.dayOfMonth();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology23.add(readablePeriod25, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(chronology23);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.DateTime dateTime40 = mutableDateTime29.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField41 = chronology37.millisOfDay();
        org.joda.time.DurationField durationField42 = chronology37.seconds();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime1.toMutableDateTime(chronology37);
        org.joda.time.DurationField durationField44 = chronology37.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime13", (mutableDateTime1.compareTo(dateTime13) == 0) == mutableDateTime1.equals(dateTime13));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField26 = chronology19.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        java.util.Locale locale33 = null;
        java.util.Calendar calendar34 = mutableDateTime29.toCalendar(locale33);
        int int35 = mutableDateTime29.getCenturyOfEra();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket41.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey((long) (byte) 0);
        mutableDateTime29.setZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = mutableDateTime27.toDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime47 = null;
        boolean boolean48 = dateTimeZone42.isLocalDateTimeGap(localDateTime47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar34", (calendar3.compareTo(calendar34) == 0) == calendar3.equals(calendar34));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField8 and durationField11", Math.signum(durationField8.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField8)));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.centuryOfEra();
        org.joda.time.DurationField durationField12 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField12", Math.signum(durationField10.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField10)));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withDefaultYear(40870750);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        org.joda.time.Chronology chronology20 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.minuteOfHour();
        org.joda.time.Chronology chronology26 = chronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = chronology20.hourOfDay();
        org.joda.time.DurationField durationField28 = chronology20.weeks();
        org.joda.time.DateTimeField dateTimeField29 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology20.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter10.withChronology(chronology20);
        org.joda.time.DurationField durationField32 = chronology20.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField32, durationField21, and durationField28", !(durationField32.compareTo(durationField21) == 0) || (Math.signum(durationField32.compareTo(durationField28)) == Math.signum(durationField21.compareTo(durationField28))));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.monthOfYear();
        org.joda.time.DurationField durationField10 = chronology7.days();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant12 = null;
        mutableDateTime11.setMillis(readableInstant12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        mutableDateTime15.addDays((int) (byte) 0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        int int33 = mutableDateTime30.getHourOfDay();
        mutableDateTime30.addDays(0);
        int int36 = mutableDateTime30.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime30.weekyear();
        mutableDateTime30.add((long) 993);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.yearOfEra();
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar43 = mutableDateTime40.toCalendar(locale42);
        mutableDateTime40.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int49 = mutableDateTime40.getDayOfMonth();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        mutableDateTime51.addHours(59);
        org.joda.time.Chronology chronology56 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = chronology56.getZone();
        mutableDateTime40.setZone(dateTimeZone57);
        mutableDateTime30.setZone(dateTimeZone57);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime15.toMutableDateTime(dateTimeZone57);
        mutableDateTime11.setMillis((org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        mutableDateTime11.add(readableDuration62);
        int int64 = mutableDateTime11.getEra();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        boolean boolean68 = mutableDateTime66.isEqual(readableInstant67);
        int int69 = mutableDateTime66.getHourOfDay();
        java.util.Locale locale70 = null;
        java.util.Calendar calendar71 = mutableDateTime66.toCalendar(locale70);
        mutableDateTime66.setDayOfYear(7);
        java.lang.String str74 = mutableDateTime66.toString();
        int int75 = mutableDateTime66.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration76 = null;
        mutableDateTime66.add(readableDuration76);
        boolean boolean78 = mutableDateTime11.isEqual((org.joda.time.ReadableInstant) mutableDateTime66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar43 and calendar71", (calendar43.compareTo(calendar71) == 0) == calendar43.equals(calendar71));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        long long9 = dateTimeParserBucket6.computeMillis(true);
        org.joda.time.Chronology chronology10 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.DurationField durationField12 = chronology10.years();
        org.joda.time.DurationField durationField13 = chronology10.weekyears();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int17 = dateTimeField16.getMaximumValue();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.yearOfCentury();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        int int24 = property22.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int28 = dateTimeField27.getMaximumValue();
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getISO3Country();
        java.lang.String str32 = dateTimeField27.getAsShortText(0L, locale30);
        int int33 = property22.getMaximumTextLength(locale30);
        java.lang.String str34 = dateTimeField16.getAsShortText(0L, locale30);
        java.lang.String str35 = locale30.getLanguage();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        mutableDateTime43.addHours(59);
        org.joda.time.Chronology chronology48 = mutableDateTime43.getChronology();
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime43.toMutableDateTime();
        int int50 = mutableDateTime43.getMinuteOfHour();
        mutableDateTime43.addDays(831);
        boolean boolean53 = mutableDateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime43);
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Calendar calendar55 = mutableDateTime43.toCalendar(locale54);
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 232, chronology37, locale54, (java.lang.Integer) 74432, 74451560);
        java.lang.String str60 = locale30.getDisplayName(locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 74479, chronology10, locale30, (java.lang.Integer) 34942682, 1644572477);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField12 and durationField13", (durationField12.compareTo(durationField13) == 0) == durationField12.equals(durationField13));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField26 = chronology19.dayOfWeek();
        org.joda.time.DurationField durationField27 = chronology19.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField20, and durationField24", !(durationField27.compareTo(durationField20) == 0) || (Math.signum(durationField27.compareTo(durationField24)) == Math.signum(durationField20.compareTo(durationField24))));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.millis();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = mutableDateTime3.isEqual(readableInstant4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = mutableDateTime3.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) (byte) 0);
        mutableDateTime3.setZoneRetainFields(dateTimeZone14);
        org.joda.time.Chronology chronology18 = mutableDateTime3.getChronology();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        int int23 = dateTimeZone20.getOffsetFromLocal((long) 865);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        int int26 = dateTimeZone20.getOffsetFromLocal((long) 161);
        long long28 = dateTimeZone20.nextTransition((long) 34833543);
        org.joda.time.Chronology chronology29 = chronology18.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField30 = chronology18.eras();
        org.joda.time.DurationField durationField31 = durationFieldType0.getField(chronology18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField30, durationField31, and durationField30", !(durationField30.compareTo(durationField31) == 0) || (Math.signum(durationField30.compareTo(durationField30)) == Math.signum(durationField31.compareTo(durationField30))));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        java.lang.Integer int7 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        org.joda.time.Chronology chronology20 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.DurationField durationField23 = chronology20.hours();
        org.joda.time.DurationField durationField24 = durationFieldType12.getField(chronology20);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder25.clearExtensions();
        java.util.Locale.Builder builder28 = builder26.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale29 = builder28.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 2818, chronology20, locale29);
        java.util.Locale locale31 = locale29.stripExtensions();
        int int32 = dateTimeField10.getMaximumTextLength(locale29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField23", Math.signum(durationField9.compareTo(durationField23)) == -Math.signum(durationField23.compareTo(durationField9)));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.minuteOfDay();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        org.joda.time.DurationField durationField12 = chronology7.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField12, and durationField11", !(durationField11.compareTo(durationField12) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField12.compareTo(durationField11))));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology7.centuries();
        java.lang.String str13 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.era();
        long long17 = dateTimeField15.remainder((long) 74521429);
        org.joda.time.DurationField durationField18 = dateTimeField15.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField8, and durationField12", !(durationField18.compareTo(durationField8) == 0) || (Math.signum(durationField18.compareTo(durationField12)) == Math.signum(durationField8.compareTo(durationField12))));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        boolean boolean10 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        java.util.Calendar calendar28 = mutableDateTime14.toCalendar(locale26);
        java.lang.String str29 = dateTimeField4.getAsShortText(readablePartial11, (int) ' ', locale26);
        int int30 = property1.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = property1.roundCeiling();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime33.toString(dateTimeFormatter36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        java.lang.String str47 = dateTimeZone44.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime33.toMutableDateTime(dateTimeZone44);
        boolean boolean49 = mutableDateTime31.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime51.set(dateTimeFieldType55, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        int int59 = mutableDateTime51.get(dateTimeFieldType58);
        org.joda.time.DateTime dateTime60 = mutableDateTime51.toDateTime();
        java.util.Locale locale61 = null;
        java.util.Calendar calendar62 = mutableDateTime51.toCalendar(locale61);
        mutableDateTime51.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime51.millisOfDay();
        mutableDateTime51.setMillisOfDay(457);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        mutableDateTime51.add(readablePeriod68);
        int int70 = mutableDateTime51.getHourOfDay();
        mutableDateTime48.setDate((org.joda.time.ReadableInstant) mutableDateTime51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar28 and calendar62", (calendar28.compareTo(calendar62) == 0) == calendar28.equals(calendar62));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DurationField durationField11 = chronology9.eras();
        java.lang.String str12 = chronology9.toString();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.secondOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        long long23 = dateTimeParserBucket20.computeMillis(true);
        org.joda.time.Chronology chronology24 = dateTimeParserBucket20.getChronology();
        org.joda.time.Chronology chronology25 = chronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.dayOfYear();
        org.joda.time.ReadablePartial readablePartial38 = null;
        int[] intArray44 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int45 = dateTimeField37.getMinimumValue(readablePartial38, intArray44);
        int int46 = dateTimeField26.getMaximumValue(readablePartial27, intArray44);
        int int47 = dateTimeField13.getMinimumValue(readablePartial14, intArray44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField36", Math.signum(durationField11.compareTo(durationField36)) == -Math.signum(durationField36.compareTo(durationField11)));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DurationField durationField11 = chronology9.eras();
        java.lang.String str12 = chronology9.toString();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.DurationField durationField14 = chronology9.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField14, and durationField11", !(durationField11.compareTo(durationField14) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField14.compareTo(durationField11))));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime13 = mutableDateTime12.toDateTime();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime12.millisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        mutableDateTime16.addHours(59);
        int int21 = mutableDateTime16.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int23 = mutableDateTime16.get(dateTimeFieldType22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime16.minuteOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.dayOfWeek();
        java.util.Locale locale28 = null;
        java.lang.String str29 = property27.getAsText(locale28);
        java.util.Locale locale30 = null;
        int int31 = property27.getMaximumTextLength(locale30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        int int36 = mutableDateTime33.getHourOfDay();
        mutableDateTime33.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int42 = dateTimeField41.getMaximumValue();
        mutableDateTime33.setRounding(dateTimeField41);
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = dateTimeField41.getAsShortText((int) (byte) 1, locale45);
        java.lang.String str47 = property27.getAsShortText(locale45);
        java.util.Calendar calendar48 = mutableDateTime16.toCalendar(locale45);
        int int49 = property14.getMaximumShortTextLength(locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 34824000, chronology8, locale45, (java.lang.Integer) 664);
        java.util.Locale locale52 = dateTimeParserBucket51.getLocale();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = mutableDateTime54.isEqual(readableInstant55);
        int int57 = mutableDateTime54.getHourOfDay();
        mutableDateTime54.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean61 = mutableDateTime54.isSupported(dateTimeFieldType60);
        mutableDateTime54.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime66 = mutableDateTime54.toDateTime(dateTimeZone65);
        int int67 = mutableDateTime54.getWeekyear();
        boolean boolean68 = mutableDateTime54.isEqualNow();
        boolean boolean69 = dateTimeParserBucket51.restoreState((java.lang.Object) mutableDateTime54);
        long long72 = dateTimeParserBucket51.computeMillis(true, "2022-02-11T09:41:37.842-00:00:00.001");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime54 and dateTime66", (mutableDateTime54.compareTo(dateTime66) == 0) == mutableDateTime54.equals(dateTime66));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        mutableDateTime1.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(dateTimeZone12);
        int int14 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.dayOfMonth();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology23.add(readablePeriod25, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(chronology23);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.DateTime dateTime40 = mutableDateTime29.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField41 = chronology37.millisOfDay();
        org.joda.time.DurationField durationField42 = chronology37.seconds();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime1.toMutableDateTime(chronology37);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime13", (mutableDateTime1.compareTo(dateTime13) == 0) == mutableDateTime1.equals(dateTime13));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.centuryOfEra();
        org.joda.time.DurationField durationField12 = chronology7.eras();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField12", Math.signum(durationField10.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField10)));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DurationField durationField10 = chronology7.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.ReadablePartial readablePartial12 = null;
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        long long22 = dateTimeParserBucket19.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.yearOfEra();
        boolean boolean25 = dateTimeParserBucket19.restoreState((java.lang.Object) property24);
        org.joda.time.DurationField durationField26 = property24.getDurationField();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        mutableDateTime28.addHours(59);
        org.joda.time.Chronology chronology33 = mutableDateTime28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime28.toMutableDateTime();
        mutableDateTime34.setTime((long) 381);
        long long37 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        int int42 = dateTimeField40.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.dayOfWeek();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property46.getAsText(locale47);
        java.util.Locale locale49 = null;
        int int50 = property46.getMaximumTextLength(locale49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        int int55 = mutableDateTime52.getHourOfDay();
        mutableDateTime52.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType58.getField(chronology59);
        int int61 = dateTimeField60.getMaximumValue();
        mutableDateTime52.setRounding(dateTimeField60);
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = dateTimeField60.getAsShortText((int) (byte) 1, locale64);
        java.lang.String str66 = property46.getAsShortText(locale64);
        java.lang.String str67 = dateTimeField40.getAsShortText(1L, locale64);
        java.lang.String str68 = locale64.getISO3Country();
        boolean boolean69 = locale64.hasExtensions();
        java.lang.String str70 = locale64.getDisplayLanguage();
        java.lang.String str71 = locale64.getDisplayScript();
        java.lang.String str72 = property24.getAsShortText(locale64);
        java.lang.String str73 = dateTimeField11.getAsShortText(readablePartial12, 29248, locale64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField10 and durationField26", (durationField10.compareTo(durationField26) == 0) == durationField10.equals(durationField26));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfCeiling();
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        java.util.Locale locale17 = null;
        java.util.Calendar calendar18 = mutableDateTime13.toCalendar(locale17);
        int int19 = mutableDateTime13.getCenturyOfEra();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey((long) (byte) 0);
        mutableDateTime13.setZoneRetainFields(dateTimeZone26);
        org.joda.time.Chronology chronology30 = mutableDateTime13.getChronology();
        org.joda.time.DateTime dateTime31 = dateTime11.toDateTime(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.yearOfEra();
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar35 = mutableDateTime32.toCalendar(locale34);
        mutableDateTime32.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime32.millisOfDay();
        int int39 = mutableDateTime32.getDayOfWeek();
        mutableDateTime32.addWeekyears(0);
        int int42 = dateTime31.compareTo((org.joda.time.ReadableInstant) mutableDateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar18", (calendar3.compareTo(calendar18) == 0) == calendar3.equals(calendar18));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DurationField durationField11 = chronology9.eras();
        java.lang.String str12 = chronology9.toString();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.DurationField durationField14 = chronology9.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField14, and durationField11", !(durationField11.compareTo(durationField14) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField14.compareTo(durationField11))));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        mutableDateTime1.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(dateTimeZone12);
        int int14 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.dayOfMonth();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology23.add(readablePeriod25, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(chronology23);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.DateTime dateTime40 = mutableDateTime29.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField41 = chronology37.millisOfDay();
        org.joda.time.DurationField durationField42 = chronology37.seconds();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime1.toMutableDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField44 = chronology37.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime13", (mutableDateTime1.compareTo(dateTime13) == 0) == mutableDateTime1.equals(dateTime13));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DurationField durationField11 = chronology9.eras();
        java.lang.String str12 = chronology9.toString();
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.DurationField durationField14 = chronology13.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField14, and durationField11", !(durationField11.compareTo(durationField14) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField14.compareTo(durationField11))));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        int int3 = mutableDateTime2.getDayOfWeek();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket9.getZone();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.minuteOfHour();
        long long20 = chronology11.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.DurationField durationField21 = chronology11.weeks();
        org.joda.time.DateTime dateTime22 = mutableDateTime2.toDateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField23 = chronology11.year();
        java.util.Locale locale27 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale28 = locale27.stripExtensions();
        java.lang.String str29 = locale27.getScript();
        java.lang.String str30 = dateTimeField23.getAsShortText(34, locale27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime22", (mutableDateTime1.compareTo(dateTime22) == 0) == mutableDateTime1.equals(dateTime22));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.setYear(74411);
        int int5 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getHourOfDay();
        mutableDateTime7.addYears(0);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        mutableDateTime7.setZoneRetainFields(dateTimeZone19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        boolean boolean27 = mutableDateTime22.isSupported(dateTimeFieldType26);
        int int28 = mutableDateTime7.get(dateTimeFieldType26);
        mutableDateTime7.setWeekyear(74419);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        long long39 = dateTimeParserBucket36.computeMillis(true);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.DurationField durationField42 = chronology40.years();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime7.toMutableDateTime(chronology40);
        boolean boolean44 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        int int45 = mutableDateTime1.getSecondOfDay();
        java.lang.String str46 = mutableDateTime1.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and mutableDateTime43", (mutableDateTime7.compareTo(mutableDateTime43) == 0) == mutableDateTime7.equals(mutableDateTime43));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        long long17 = dateTimeParserBucket14.computeMillis(true);
        org.joda.time.Chronology chronology18 = dateTimeParserBucket14.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.Instant instant22 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.minuteOfHour();
        long long39 = chronology30.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.DurationField durationField40 = chronology30.weeks();
        org.joda.time.DateTime dateTime41 = mutableDateTime1.toDateTime(chronology30);
        int int42 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.yearOfEra();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar46 = mutableDateTime43.toCalendar(locale45);
        mutableDateTime43.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int52 = mutableDateTime43.getDayOfMonth();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = mutableDateTime54.isEqual(readableInstant55);
        int int57 = mutableDateTime54.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime54.set(dateTimeFieldType58, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        int int62 = mutableDateTime54.get(dateTimeFieldType61);
        java.util.Date date63 = mutableDateTime54.toDate();
        org.joda.time.DateTimeZone dateTimeZone64 = mutableDateTime54.getZone();
        mutableDateTime43.setZoneRetainFields(dateTimeZone64);
        int int67 = dateTimeZone64.getOffsetFromLocal((long) 34835);
        mutableDateTime1.setZoneRetainFields(dateTimeZone64);
        int int69 = mutableDateTime1.getYearOfEra();
        org.joda.time.Chronology chronology70 = mutableDateTime1.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime21", (mutableDateTime1.compareTo(mutableDateTime21) == 0) == mutableDateTime1.equals(mutableDateTime21));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        int int7 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.setMillisOfSecond((int) '#');
        int int10 = mutableDateTime1.getMinuteOfDay();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology12, locale13, (java.lang.Integer) 9, 59);
        java.lang.Object obj17 = dateTimeParserBucket16.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket16.saveField(dateTimeFieldType18, 59);
        java.lang.String str21 = dateTimeFieldType18.getName();
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = null;
        org.joda.time.format.DateTimeParser dateTimeParser23 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter22, dateTimeParser23);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter24.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser26 = dateTimeFormatter24.getParser();
        boolean boolean27 = dateTimeFormatter24.isParser();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        long long40 = chronology35.add(readablePeriod37, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter24.withChronology(chronology35);
        org.joda.time.DurationField durationField42 = chronology35.seconds();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType18.getField(chronology35);
        mutableDateTime1.setChronology(chronology35);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime1.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        org.joda.time.DurationField durationField49 = dateTimeField48.getDurationField();
        boolean boolean51 = dateTimeField48.isLeap((long) (short) -1);
        java.lang.String str53 = dateTimeField48.getAsShortText(0L);
        org.joda.time.ReadablePartial readablePartial54 = null;
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.hourOfHalfday();
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = locale66.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology64, locale66, (java.lang.Integer) 2022);
        java.lang.String str70 = locale66.getDisplayLanguage();
        java.lang.String str71 = dateTimeField48.getAsShortText(readablePartial54, 34883740, locale66);
        java.lang.String str72 = property45.getAsText(locale66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField42 and durationField49", (durationField42.compareTo(durationField49) == 0) == durationField42.equals(durationField49));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        int int21 = mutableDateTime0.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and instant18", (mutableDateTime8.compareTo(instant18) == 0) == mutableDateTime8.equals(instant18));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.minuteOfHour();
        long long17 = chronology8.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale39.getDisplayScript(locale42);
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = locale39.getDisplayLanguage(locale45);
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        org.joda.time.Chronology chronology55 = dateTimeParserBucket53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfHalfday();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = locale57.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology55, locale57, (java.lang.Integer) 2022);
        java.util.Locale locale61 = locale57.stripExtensions();
        java.lang.String str62 = locale61.getScript();
        java.lang.String str63 = locale61.getISO3Language();
        java.lang.String str64 = locale39.getDisplayScript(locale61);
        java.lang.String str65 = locale61.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) 34810005, chronology8, locale61);
        long long68 = dateTimeParserBucket66.computeMillis(false);
        org.joda.time.Chronology chronology70 = null;
        java.util.Locale locale71 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket(0L, chronology70, locale71, (java.lang.Integer) 1, (int) '#');
        long long77 = dateTimeParserBucket74.computeMillis(true, "ven.");
        java.util.Locale locale78 = dateTimeParserBucket74.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.Chronology chronology81 = null;
        java.util.Locale locale82 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket(0L, chronology81, locale82, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone86 = dateTimeParserBucket85.getZone();
        org.joda.time.Chronology chronology87 = dateTimeParserBucket85.getChronology();
        org.joda.time.DurationField durationField88 = chronology87.days();
        org.joda.time.DateTimeField dateTimeField89 = chronology87.dayOfYear();
        org.joda.time.DateTimeField dateTimeField90 = chronology87.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField91 = chronology87.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField92 = chronology87.minuteOfHour();
        org.joda.time.Chronology chronology93 = chronology87.withUTC();
        org.joda.time.DateTimeField dateTimeField94 = dateTimeFieldType79.getField(chronology93);
        dateTimeParserBucket74.saveField(dateTimeFieldType79, 145);
        dateTimeParserBucket66.saveField(dateTimeFieldType79, 457);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and mutableDateTime20", (mutableDateTime18.compareTo(mutableDateTime20) == 0) == mutableDateTime18.equals(mutableDateTime20));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 9, 59);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket5.saveField(dateTimeFieldType7, 59);
        long long11 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket5.getChronology();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology12.add(readablePeriod13, (long) 74425676, 747);
        org.joda.time.DurationField durationField17 = chronology12.minutes();
        org.joda.time.DurationField durationField18 = chronology12.eras();
        org.joda.time.Chronology chronology19 = chronology12.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField17 and durationField18", Math.signum(durationField17.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField17)));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        int int13 = mutableDateTime12.getEra();
        int int14 = mutableDateTime12.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = mutableDateTime1.toDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology28, locale30, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField34 = chronology28.halfdays();
        org.joda.time.DurationField durationField35 = chronology28.millis();
        org.joda.time.DateTimeField dateTimeField36 = chronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology28.hourOfHalfday();
        mutableDateTime1.setChronology(chronology28);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime1.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.yearOfEra();
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar43 = mutableDateTime40.toCalendar(locale42);
        mutableDateTime40.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime40.dayOfYear();
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology51, locale52, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeParserBucket55.getZone();
        org.joda.time.Chronology chronology57 = dateTimeParserBucket55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = chronology57.add(readablePeriod59, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime63 = org.joda.time.MutableDateTime.now(chronology57);
        boolean boolean64 = mutableDateTime63.isEqualNow();
        int int65 = mutableDateTime40.compareTo((org.joda.time.ReadableInstant) mutableDateTime63);
        int int66 = property39.compareTo((org.joda.time.ReadableInstant) mutableDateTime63);
        mutableDateTime63.addWeeks(194);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime18", (mutableDateTime1.compareTo(dateTime18) == 0) == mutableDateTime1.equals(dateTime18));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.setYear(74411);
        int int5 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getHourOfDay();
        mutableDateTime7.addYears(0);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        mutableDateTime7.setZoneRetainFields(dateTimeZone19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        boolean boolean27 = mutableDateTime22.isSupported(dateTimeFieldType26);
        int int28 = mutableDateTime7.get(dateTimeFieldType26);
        mutableDateTime7.setWeekyear(74419);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        long long39 = dateTimeParserBucket36.computeMillis(true);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.DurationField durationField42 = chronology40.years();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime7.toMutableDateTime(chronology40);
        boolean boolean44 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        boolean boolean46 = mutableDateTime7.isAfter(779L);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        mutableDateTime48.addHours(59);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime48.minuteOfHour();
        boolean boolean54 = mutableDateTime7.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        int int55 = mutableDateTime48.getWeekOfWeekyear();
        int int56 = mutableDateTime48.getDayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and mutableDateTime43", (mutableDateTime7.compareTo(mutableDateTime43) == 0) == mutableDateTime7.equals(mutableDateTime43));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekyear();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime1.add(readablePeriod6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.yearOfEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        int int16 = mutableDateTime11.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean18 = mutableDateTime11.isSupported(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int22 = mutableDateTime20.get(dateTimeFieldType21);
        int int23 = mutableDateTime20.getEra();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        org.joda.time.Chronology chronology31 = dateTimeParserBucket29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfHalfday();
        org.joda.time.DurationField durationField33 = chronology31.centuries();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.era();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology31.getZone();
        mutableDateTime20.setZone(dateTimeZone35);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime1.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and mutableDateTime20", (mutableDateTime11.compareTo(mutableDateTime20) == 0) == mutableDateTime11.equals(mutableDateTime20));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(98374L);
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        java.lang.Integer int9 = dateTimeParserBucket7.getPivotYear();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.weekyear();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = chronology10.getZone();
        org.joda.time.DurationField durationField15 = chronology10.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime13", (mutableDateTime1.compareTo(dateTime13) == 0) == mutableDateTime1.equals(dateTime13));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        int int9 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        int int18 = mutableDateTime11.getEra();
        mutableDateTime11.setMillisOfDay(411);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime11);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.hourOfHalfday();
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology32, locale34, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField38 = chronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology32.yearOfCentury();
        java.util.Locale locale40 = java.util.Locale.UK;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfWeek();
        java.util.Locale locale44 = null;
        java.lang.String str45 = property43.getAsText(locale44);
        java.util.Locale locale46 = null;
        int int47 = property43.getMaximumTextLength(locale46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = mutableDateTime49.isEqual(readableInstant50);
        int int52 = mutableDateTime49.getHourOfDay();
        mutableDateTime49.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType55.getField(chronology56);
        int int58 = dateTimeField57.getMaximumValue();
        mutableDateTime49.setRounding(dateTimeField57);
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.lang.String str62 = dateTimeField57.getAsShortText((int) (byte) 1, locale61);
        java.lang.String str63 = property43.getAsShortText(locale61);
        java.util.Locale locale64 = java.util.Locale.TAIWAN;
        java.lang.String str65 = locale64.getScript();
        java.lang.String str66 = locale61.getDisplayScript(locale64);
        java.util.Locale locale67 = java.util.Locale.US;
        java.lang.String str68 = locale61.getDisplayLanguage(locale67);
        java.lang.String str69 = locale40.getDisplayCountry(locale67);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) 232, chronology32, locale67);
        org.joda.time.DurationField durationField71 = chronology32.millis();
        org.joda.time.MutableDateTime mutableDateTime72 = mutableDateTime1.toMutableDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField73 = chronology32.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime72", (mutableDateTime1.compareTo(mutableDateTime72) == 0) == mutableDateTime1.equals(mutableDateTime72));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.centuryOfEra();
        int int18 = mutableDateTime1.getYearOfCentury();
        boolean boolean20 = mutableDateTime1.isEqual((long) 74411);
        org.joda.time.Chronology chronology21 = mutableDateTime1.getChronology();
        java.lang.String str22 = mutableDateTime1.toString();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = chronology30.add(readablePeriod32, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(chronology30);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.DateTime dateTime47 = mutableDateTime36.toDateTime(chronology44);
        org.joda.time.DateTime dateTime48 = mutableDateTime1.toDateTime(chronology44);
        org.joda.time.Instant instant49 = dateTime48.toInstant();
        int int50 = dateTime48.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant49", (mutableDateTime1.compareTo(instant49) == 0) == mutableDateTime1.equals(instant49));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 9, 59);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket5.saveField(dateTimeFieldType7, 59);
        long long11 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket5.getChronology();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology12.add(readablePeriod13, (long) 74425676, 747);
        org.joda.time.DurationField durationField17 = chronology12.minutes();
        org.joda.time.DurationField durationField18 = chronology12.eras();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField17 and durationField18", Math.signum(durationField17.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField17)));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.minuteOfHour();
        long long17 = chronology8.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale39.getDisplayScript(locale42);
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = locale39.getDisplayLanguage(locale45);
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        org.joda.time.Chronology chronology55 = dateTimeParserBucket53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfHalfday();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = locale57.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology55, locale57, (java.lang.Integer) 2022);
        java.util.Locale locale61 = locale57.stripExtensions();
        java.lang.String str62 = locale61.getScript();
        java.lang.String str63 = locale61.getISO3Language();
        java.lang.String str64 = locale39.getDisplayScript(locale61);
        java.lang.String str65 = locale61.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) 34810005, chronology8, locale61);
        java.lang.String str67 = locale61.getCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and mutableDateTime20", (mutableDateTime18.compareTo(mutableDateTime20) == 0) == mutableDateTime18.equals(mutableDateTime20));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime8.toMutableDateTime();
        int int22 = mutableDateTime21.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and instant18", (mutableDateTime8.compareTo(instant18) == 0) == mutableDateTime8.equals(instant18));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutableDateTime4.add(readablePeriod5);
        org.joda.time.Instant instant7 = mutableDateTime4.toInstant();
        mutableDateTime4.setSecondOfDay(521);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant7", (mutableDateTime1.compareTo(instant7) == 0) == mutableDateTime1.equals(instant7));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.weekyear();
        int int21 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime9.minuteOfDay();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime9.add(readableDuration23, 4);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        java.util.Locale locale31 = null;
        java.util.Calendar calendar32 = mutableDateTime27.toCalendar(locale31);
        mutableDateTime27.setDayOfYear(7);
        org.joda.time.DateTime dateTime35 = mutableDateTime27.toDateTime();
        java.util.GregorianCalendar gregorianCalendar36 = mutableDateTime27.toGregorianCalendar();
        mutableDateTime27.setSecondOfDay(74420);
        boolean boolean39 = mutableDateTime9.isAfter((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.addMonths(664);
        java.util.Date date42 = mutableDateTime27.toDate();
        mutableDateTime27.addWeeks(240);
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime27.add(readableDuration45, 590);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and instant19", (mutableDateTime9.compareTo(instant19) == 0) == mutableDateTime9.equals(instant19));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(678);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withZone(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.Chronology chronology16 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone17);
        long long21 = dateTimeZone7.getMillisKeepLocal(dateTimeZone17, (long) 620);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime19", (mutableDateTime8.compareTo(mutableDateTime19) == 0) == mutableDateTime8.equals(mutableDateTime19));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        mutableDateTime0.setWeekyear(74416135);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime0.copy();
        org.joda.time.Instant instant8 = mutableDateTime0.toInstant();
        int int9 = mutableDateTime0.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and instant8", (mutableDateTime7.compareTo(instant8) == 0) == mutableDateTime7.equals(instant8));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.addDays(22);
        mutableDateTime1.setYear(59);
        int int9 = mutableDateTime1.getMonthOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        int int19 = mutableDateTime11.get(dateTimeFieldType18);
        int int20 = mutableDateTime11.getWeekOfWeekyear();
        org.joda.time.Instant instant21 = mutableDateTime11.toInstant();
        int int22 = mutableDateTime11.getWeekOfWeekyear();
        int int23 = mutableDateTime11.getDayOfYear();
        boolean boolean24 = mutableDateTime11.isBeforeNow();
        boolean boolean25 = mutableDateTime1.equals((java.lang.Object) boolean24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and instant21", (mutableDateTime11.compareTo(instant21) == 0) == mutableDateTime11.equals(instant21));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        int int4 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        int int9 = mutableDateTime6.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime6.set(dateTimeFieldType10, (int) 'a');
        org.joda.time.Instant instant13 = mutableDateTime6.toInstant();
        boolean boolean14 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) instant13);
        int int15 = mutableDateTime1.getHourOfDay();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant13", (mutableDateTime6.compareTo(instant13) == 0) == mutableDateTime6.equals(instant13));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(100);
        org.joda.time.MutableDateTime mutableDateTime5 = property1.addWrapField(10);
        mutableDateTime5.setMillis((long) 779);
        long long8 = mutableDateTime5.getMillis();
        mutableDateTime5.addDays(35651);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology18.centuries();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.era();
        org.joda.time.DateTime dateTime22 = mutableDateTime5.toDateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime22", (mutableDateTime0.compareTo(dateTime22) == 0) == mutableDateTime0.equals(dateTime22));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.addHours((int) (short) 0);
        mutableDateTime4.addWeekyears((int) 'a');
        java.lang.String str10 = mutableDateTime4.toString("0");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        int int20 = mutableDateTime12.get(dateTimeFieldType19);
        mutableDateTime4.set(dateTimeFieldType19, 5);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.property(dateTimeFieldType19);
        org.joda.time.MutableDateTime mutableDateTime25 = property23.addWrapField(10);
        org.joda.time.DateTimeField dateTimeField26 = property23.getField();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        mutableDateTime28.addHours(59);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime28.minuteOfHour();
        int int34 = mutableDateTime28.getSecondOfDay();
        mutableDateTime28.addMinutes(59);
        int int37 = mutableDateTime28.getYear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = mutableDateTime39.toString(dateTimeFormatter42);
        int int44 = mutableDateTime39.getMonthOfYear();
        mutableDateTime28.setMillis((org.joda.time.ReadableInstant) mutableDateTime39);
        boolean boolean47 = mutableDateTime39.isBefore((long) 74413);
        int int48 = property23.compareTo((org.joda.time.ReadableInstant) mutableDateTime39);
        java.lang.String str49 = property23.getAsString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        mutableDateTime51.addHours(59);
        org.joda.time.Chronology chronology56 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = chronology56.getZone();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        boolean boolean61 = mutableDateTime59.isEqual(readableInstant60);
        int int62 = mutableDateTime59.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime59.set(dateTimeFieldType63, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.year();
        int int67 = mutableDateTime59.get(dateTimeFieldType66);
        int int68 = mutableDateTime59.getWeekOfWeekyear();
        org.joda.time.Instant instant69 = mutableDateTime59.toInstant();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime59.weekyear();
        int int71 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) mutableDateTime59);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime59.property(dateTimeFieldType72);
        org.joda.time.MutableDateTime mutableDateTime74 = property73.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime75 = property73.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime76 = property73.roundFloor();
        mutableDateTime76.addMinutes(68);
        int int79 = property23.compareTo((org.joda.time.ReadableInstant) mutableDateTime76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime12 and instant69", (mutableDateTime12.compareTo(instant69) == 0) == mutableDateTime12.equals(instant69));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.addWrapField(0);
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket10.getZone();
        org.joda.time.Chronology chronology12 = dateTimeParserBucket10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology12, locale14, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField18 = chronology12.halfdays();
        org.joda.time.DurationField durationField19 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology12.minuteOfDay();
        mutableDateTime3.setChronology(chronology12);
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = mutableDateTime25.toString(dateTimeFormatter28);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        java.lang.String str37 = dateTimeZone36.getID();
        java.lang.String str39 = dateTimeZone36.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime25.toMutableDateTime(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(obj23, dateTimeZone36);
        mutableDateTime41.setSecondOfDay(870);
        int int44 = mutableDateTime41.getYear();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.DateTime dateTime46 = mutableDateTime3.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and mutableDateTime41", (mutableDateTime3.compareTo(mutableDateTime41) == 0) == mutableDateTime3.equals(mutableDateTime41));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        java.util.Date date10 = mutableDateTime1.toDate();
        mutableDateTime1.addDays((int) (byte) -1);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        java.lang.Integer int20 = dateTimeParserBucket18.getPivotYear();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        dateTimeParserBucket18.saveField(dateTimeFieldType22, "2022-02-11T09:40:23.419Z", locale24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.property(dateTimeFieldType22);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.DurationField durationField36 = chronology34.centuries();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology34.getZone();
        java.lang.String str39 = dateTimeZone37.getName((long) 34817966);
        int int41 = dateTimeZone37.getOffset(580L);
        java.lang.String str43 = dateTimeZone37.getNameKey(1644572521484L);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime1.toMutableDateTime(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime48 = mutableDateTime47.toDateTime();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        mutableDateTime50.addHours(59);
        org.joda.time.Chronology chronology55 = mutableDateTime50.getChronology();
        mutableDateTime47.setChronology(chronology55);
        java.util.Locale locale59 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale60 = locale59.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 598, chronology55, locale59);
        java.lang.String str62 = dateTimeZone37.getName(35001L, locale59);
        long long66 = dateTimeZone37.convertLocalToUTC((long) 669147, true, 1100565903272400000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime44", (mutableDateTime1.compareTo(mutableDateTime44) == 0) == mutableDateTime1.equals(mutableDateTime44));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.joda.time.Chronology chronology13 = chronology7.withUTC();
        org.joda.time.DurationField durationField14 = chronology7.seconds();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology7.getZone();
        org.joda.time.DurationField durationField16 = chronology7.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField8, and durationField14", !(durationField16.compareTo(durationField8) == 0) || (Math.signum(durationField16.compareTo(durationField14)) == Math.signum(durationField8.compareTo(durationField14))));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket22.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.dayOfYear();
        org.joda.time.ReadablePartial readablePartial31 = null;
        int int32 = dateTimeField30.getMinimumValue(readablePartial31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        int int38 = mutableDateTime35.getMonthOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        mutableDateTime40.addHours(59);
        int int45 = mutableDateTime40.getMillisOfSecond();
        mutableDateTime40.setMillisOfDay(10);
        boolean boolean48 = mutableDateTime35.isEqual((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.Instant instant49 = mutableDateTime35.toInstant();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime51.set(dateTimeFieldType55, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        int int59 = mutableDateTime51.get(dateTimeFieldType58);
        org.joda.time.DateTime dateTime60 = mutableDateTime51.toDateTime();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime51.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime62 = property61.getMutableDateTime();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime64.dayOfWeek();
        java.util.Locale locale66 = null;
        java.lang.String str67 = property65.getAsText(locale66);
        java.util.Locale locale68 = null;
        int int69 = property65.getMaximumTextLength(locale68);
        int int70 = property65.getMaximumValueOverall();
        int int71 = property65.get();
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime74 = mutableDateTime73.toDateTime();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        boolean boolean78 = mutableDateTime76.isEqual(readableInstant77);
        mutableDateTime76.addHours(59);
        org.joda.time.Chronology chronology81 = mutableDateTime76.getChronology();
        mutableDateTime73.setChronology(chronology81);
        java.util.Locale locale85 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale86 = locale85.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket87 = new org.joda.time.format.DateTimeParserBucket((long) 598, chronology81, locale85);
        java.lang.String str88 = property65.getAsShortText(locale85);
        java.lang.String str89 = property61.getAsText(locale85);
        java.util.Calendar calendar90 = mutableDateTime35.toCalendar(locale85);
        java.lang.String str91 = dateTimeField30.getAsShortText((long) 74426, locale85);
        java.lang.String str92 = dateTimeField15.getAsText(34817903, locale85);
        boolean boolean93 = locale85.hasExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime35 and instant49", (mutableDateTime35.compareTo(instant49) == 0) == mutableDateTime35.equals(instant49));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        java.lang.Integer int7 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField11 = chronology8.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField11, and durationField9", !(durationField9.compareTo(durationField11) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField11.compareTo(durationField9))));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        int int5 = mutableDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime2.set(dateTimeFieldType6, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        int int10 = mutableDateTime2.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = mutableDateTime2.toDateTime();
        java.util.Locale locale12 = null;
        java.util.Calendar calendar13 = mutableDateTime2.toCalendar(locale12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime2.toDateTime(dateTimeZone15);
        java.lang.String str17 = dateTimeZone15.getID();
        long long20 = dateTimeZone15.adjustOffset((long) 158, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(27320L, dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime22.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) 13);
        org.joda.time.DateTime dateTime28 = mutableDateTime23.toDateTime(dateTimeZone25);
        int int29 = mutableDateTime23.getHourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime22 and dateTime28", (mutableDateTime22.compareTo(dateTime28) == 0) == mutableDateTime22.equals(dateTime28));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime16.set(dateTimeFieldType20, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = mutableDateTime16.get(dateTimeFieldType23);
        org.joda.time.DateTime dateTime25 = mutableDateTime16.toDateTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime16.addMillis((int) (byte) 0);
        int int36 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime16.property(dateTimeFieldType37);
        dateTimeParserBucket14.saveField(dateTimeFieldType37, 426);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) 13);
        java.lang.String str45 = dateTimeZone42.toString();
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        org.joda.time.Chronology chronology55 = dateTimeParserBucket53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfHalfday();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = locale57.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology55, locale57, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField61 = chronology55.secondOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology55.yearOfCentury();
        java.util.Locale locale63 = java.util.Locale.UK;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(chronology64);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime65.dayOfWeek();
        java.util.Locale locale67 = null;
        java.lang.String str68 = property66.getAsText(locale67);
        java.util.Locale locale69 = null;
        int int70 = property66.getMaximumTextLength(locale69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        boolean boolean74 = mutableDateTime72.isEqual(readableInstant73);
        int int75 = mutableDateTime72.getHourOfDay();
        mutableDateTime72.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType78.getField(chronology79);
        int int81 = dateTimeField80.getMaximumValue();
        mutableDateTime72.setRounding(dateTimeField80);
        java.util.Locale locale84 = java.util.Locale.FRENCH;
        java.lang.String str85 = dateTimeField80.getAsShortText((int) (byte) 1, locale84);
        java.lang.String str86 = property66.getAsShortText(locale84);
        java.util.Locale locale87 = java.util.Locale.TAIWAN;
        java.lang.String str88 = locale87.getScript();
        java.lang.String str89 = locale84.getDisplayScript(locale87);
        java.util.Locale locale90 = java.util.Locale.US;
        java.lang.String str91 = locale84.getDisplayLanguage(locale90);
        java.lang.String str92 = locale63.getDisplayCountry(locale90);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket93 = new org.joda.time.format.DateTimeParserBucket((long) 232, chronology55, locale90);
        org.joda.time.DateTimeZone dateTimeZone94 = dateTimeParserBucket93.getZone();
        long long96 = dateTimeZone42.getMillisKeepLocal(dateTimeZone94, (long) 74420121);
        org.joda.time.MutableDateTime mutableDateTime97 = org.joda.time.MutableDateTime.now(dateTimeZone42);
        dateTimeParserBucket14.setZone(dateTimeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime27 and mutableDateTime97", (mutableDateTime27.compareTo(mutableDateTime97) == 0) == mutableDateTime27.equals(mutableDateTime97));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket22.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.dayOfYear();
        org.joda.time.ReadablePartial readablePartial31 = null;
        int int32 = dateTimeField30.getMinimumValue(readablePartial31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        int int38 = mutableDateTime35.getMonthOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        mutableDateTime40.addHours(59);
        int int45 = mutableDateTime40.getMillisOfSecond();
        mutableDateTime40.setMillisOfDay(10);
        boolean boolean48 = mutableDateTime35.isEqual((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.Instant instant49 = mutableDateTime35.toInstant();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime51.set(dateTimeFieldType55, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        int int59 = mutableDateTime51.get(dateTimeFieldType58);
        org.joda.time.DateTime dateTime60 = mutableDateTime51.toDateTime();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime51.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime62 = property61.getMutableDateTime();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime64.dayOfWeek();
        java.util.Locale locale66 = null;
        java.lang.String str67 = property65.getAsText(locale66);
        java.util.Locale locale68 = null;
        int int69 = property65.getMaximumTextLength(locale68);
        int int70 = property65.getMaximumValueOverall();
        int int71 = property65.get();
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime74 = mutableDateTime73.toDateTime();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        boolean boolean78 = mutableDateTime76.isEqual(readableInstant77);
        mutableDateTime76.addHours(59);
        org.joda.time.Chronology chronology81 = mutableDateTime76.getChronology();
        mutableDateTime73.setChronology(chronology81);
        java.util.Locale locale85 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale86 = locale85.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket87 = new org.joda.time.format.DateTimeParserBucket((long) 598, chronology81, locale85);
        java.lang.String str88 = property65.getAsShortText(locale85);
        java.lang.String str89 = property61.getAsText(locale85);
        java.util.Calendar calendar90 = mutableDateTime35.toCalendar(locale85);
        java.lang.String str91 = dateTimeField30.getAsShortText((long) 74426, locale85);
        java.lang.String str92 = dateTimeField15.getAsText(34817903, locale85);
        long long95 = dateTimeField15.add((long) 857, 987);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime35 and instant49", (mutableDateTime35.compareTo(instant49) == 0) == mutableDateTime35.equals(instant49));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone14);
        int int19 = dateTimeZone14.getOffsetFromLocal((long) 253);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone14.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        int int36 = mutableDateTime33.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime33.set(dateTimeFieldType37, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        int int41 = mutableDateTime33.get(dateTimeFieldType40);
        org.joda.time.DateTime dateTime42 = mutableDateTime33.toDateTime();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        int int47 = mutableDateTime44.getHourOfDay();
        mutableDateTime44.addYears(0);
        mutableDateTime33.setDate((org.joda.time.ReadableInstant) mutableDateTime44);
        boolean boolean51 = mutableDateTime31.isBefore((org.joda.time.ReadableInstant) mutableDateTime44);
        int int52 = mutableDateTime44.getCenturyOfEra();
        org.joda.time.Instant instant53 = mutableDateTime44.toInstant();
        int int54 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) instant53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType55.getDurationType();
        java.lang.String str57 = durationFieldType56.toString();
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone64 = dateTimeParserBucket63.getZone();
        long long66 = dateTimeParserBucket63.computeMillis(true);
        org.joda.time.Chronology chronology67 = dateTimeParserBucket63.getChronology();
        org.joda.time.Chronology chronology68 = chronology67.withUTC();
        boolean boolean69 = durationFieldType56.isSupported(chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.secondOfDay();
        int int72 = dateTimeField70.getMinimumValue((long) 97840);
        int int73 = instant53.get(dateTimeField70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime31", (mutableDateTime1.compareTo(mutableDateTime31) == 0) == mutableDateTime1.equals(mutableDateTime31));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone14);
        int int19 = dateTimeZone14.getOffsetFromLocal((long) 253);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.add(100);
        org.joda.time.MutableDateTime mutableDateTime25 = property21.addWrapField(10);
        mutableDateTime25.setMillis((long) 779);
        long long28 = mutableDateTime25.getMillis();
        mutableDateTime25.addDays(35651);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        org.joda.time.DurationField durationField40 = chronology38.centuries();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.era();
        org.joda.time.DateTime dateTime42 = mutableDateTime25.toDateTime(chronology38);
        int int43 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) mutableDateTime25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime25 and dateTime42", (mutableDateTime25.compareTo(dateTime42) == 0) == mutableDateTime25.equals(dateTime42));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = mutableDateTime3.isEqual(readableInstant4);
        mutableDateTime3.addHours(59);
        org.joda.time.Chronology chronology8 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology8.getZone();
        java.lang.String str10 = dateTimeZone9.getID();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        org.joda.time.Chronology chronology20 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.dayOfMonth();
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology20, locale25);
        org.joda.time.DurationField durationField27 = chronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = chronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField31 = chronology20.weekyear();
        boolean boolean32 = mutableDateTime11.equals((java.lang.Object) chronology20);
        boolean boolean33 = durationFieldType1.isSupported(chronology20);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DurationField durationField35 = durationFieldType1.getField(chronology34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField35, durationField21, and durationField27", !(durationField35.compareTo(durationField21) == 0) || (Math.signum(durationField35.compareTo(durationField27)) == Math.signum(durationField21.compareTo(durationField27))));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.addWrapField(0);
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfEra();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar8 = mutableDateTime5.toCalendar(locale7);
        mutableDateTime5.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime5.weekyear();
        int int15 = property14.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.minuteOfHour();
        int int18 = mutableDateTime16.getSecondOfMinute();
        int int19 = property1.compareTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.MutableDateTime mutableDateTime21 = property1.add((long) 437);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime23.getZone();
        org.joda.time.Chronology chronology31 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(390, 13);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone34.isLocalDateTimeGap(localDateTime36);
        org.joda.time.Chronology chronology38 = chronology31.withZone(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime21.toMutableDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and mutableDateTime39", (mutableDateTime0.compareTo(mutableDateTime39) == 0) == mutableDateTime0.equals(mutableDateTime39));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        int int13 = mutableDateTime1.getYearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = mutableDateTime1.getRoundingField();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.secondOfDay();
        java.util.Locale locale18 = new java.util.Locale("32", "74409");
        java.lang.String str19 = locale18.toLanguageTag();
        java.lang.String str20 = property15.getAsShortText(locale18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = dateTimeField2.getAsShortText(0L, locale5);
        org.joda.time.DurationField durationField8 = dateTimeField2.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = dateTimeField2.getType();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getRangeDurationType();
        java.lang.String str11 = durationFieldType10.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        mutableDateTime13.setMinuteOfHour((int) (short) 1);
        int int18 = mutableDateTime13.getMillisOfSecond();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        int int28 = mutableDateTime20.get(dateTimeFieldType27);
        org.joda.time.Instant instant29 = mutableDateTime20.toInstant();
        mutableDateTime20.addDays((int) ' ');
        java.util.Date date32 = mutableDateTime20.toDate();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology34 = null;
        boolean boolean35 = durationFieldType33.isSupported(chronology34);
        mutableDateTime20.add(durationFieldType33, 902);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeParserBucket44.getZone();
        org.joda.time.Chronology chronology46 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.hourOfHalfday();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.lang.String str49 = locale48.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology46, locale48, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField52 = chronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField53 = chronology46.millisOfSecond();
        org.joda.time.DurationField durationField54 = chronology46.minutes();
        boolean boolean55 = durationFieldType33.isSupported(chronology46);
        org.joda.time.DateTimeField dateTimeField56 = chronology46.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField57 = chronology46.hourOfDay();
        mutableDateTime13.setChronology(chronology46);
        boolean boolean59 = durationFieldType10.isSupported(chronology46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField8 and durationField54", (durationField8.compareTo(durationField54) == 0) == durationField8.equals(durationField54));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int8 = mutableDateTime1.get(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.era();
        int int11 = mutableDateTime1.get(dateTimeFieldType10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableDateTime1.add(readablePeriod12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        mutableDateTime17.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean24 = mutableDateTime17.isSupported(dateTimeFieldType23);
        int int25 = mutableDateTime17.getCenturyOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime27.set(dateTimeFieldType31, (int) 'a');
        int int34 = mutableDateTime27.getEra();
        mutableDateTime27.setMillisOfDay(411);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime27);
        mutableDateTime17.setTime((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology42, locale43, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeParserBucket46.getZone();
        org.joda.time.Chronology chronology48 = dateTimeParserBucket46.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfHalfday();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = locale50.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology48, locale50, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField54 = chronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.yearOfCentury();
        java.util.Locale locale56 = java.util.Locale.UK;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(chronology57);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime58.dayOfWeek();
        java.util.Locale locale60 = null;
        java.lang.String str61 = property59.getAsText(locale60);
        java.util.Locale locale62 = null;
        int int63 = property59.getMaximumTextLength(locale62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        boolean boolean67 = mutableDateTime65.isEqual(readableInstant66);
        int int68 = mutableDateTime65.getHourOfDay();
        mutableDateTime65.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType71.getField(chronology72);
        int int74 = dateTimeField73.getMaximumValue();
        mutableDateTime65.setRounding(dateTimeField73);
        java.util.Locale locale77 = java.util.Locale.FRENCH;
        java.lang.String str78 = dateTimeField73.getAsShortText((int) (byte) 1, locale77);
        java.lang.String str79 = property59.getAsShortText(locale77);
        java.util.Locale locale80 = java.util.Locale.TAIWAN;
        java.lang.String str81 = locale80.getScript();
        java.lang.String str82 = locale77.getDisplayScript(locale80);
        java.util.Locale locale83 = java.util.Locale.US;
        java.lang.String str84 = locale77.getDisplayLanguage(locale83);
        java.lang.String str85 = locale56.getDisplayCountry(locale83);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((long) 232, chronology48, locale83);
        org.joda.time.DurationField durationField87 = chronology48.millis();
        org.joda.time.MutableDateTime mutableDateTime88 = mutableDateTime17.toMutableDateTime(chronology48);
        org.joda.time.DurationField durationField89 = durationFieldType15.getField(chronology48);
        org.joda.time.DateTime dateTime90 = mutableDateTime1.toDateTime(chronology48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and mutableDateTime88", (mutableDateTime17.compareTo(mutableDateTime88) == 0) == mutableDateTime17.equals(mutableDateTime88));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:41:03.518Z", "728", "2022-02-11T09:42:01.232Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        int int8 = mutableDateTime5.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime5.set(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        int int13 = mutableDateTime5.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = mutableDateTime5.toDateTime();
        int int15 = mutableDateTime5.getSecondOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        boolean boolean22 = mutableDateTime17.isSupported(dateTimeFieldType21);
        mutableDateTime17.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime26.set(dateTimeFieldType30, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        int int34 = mutableDateTime26.get(dateTimeFieldType33);
        org.joda.time.DateTime dateTime35 = mutableDateTime26.toDateTime();
        java.util.Locale locale36 = null;
        java.util.Calendar calendar37 = mutableDateTime26.toCalendar(locale36);
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime26.getZone();
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime42.set(dateTimeFieldType46, (int) 'a');
        mutableDateTime42.setMillis(5L);
        int int51 = mutableDateTime42.getWeekOfWeekyear();
        mutableDateTime42.addYears(34830);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        boolean boolean57 = mutableDateTime55.isEqual(readableInstant56);
        int int58 = mutableDateTime55.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime55.set(dateTimeFieldType59, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone62 = mutableDateTime55.getZone();
        long long64 = dateTimeZone62.nextTransition((long) 59);
        java.lang.String str66 = dateTimeZone62.getName((long) (short) 0);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        boolean boolean70 = mutableDateTime68.isEqual(readableInstant69);
        mutableDateTime68.addHours(59);
        org.joda.time.Chronology chronology73 = mutableDateTime68.getChronology();
        org.joda.time.MutableDateTime mutableDateTime74 = mutableDateTime68.toMutableDateTime();
        int int75 = mutableDateTime68.getYear();
        int int76 = dateTimeZone62.getOffset((org.joda.time.ReadableInstant) mutableDateTime68);
        org.joda.time.Chronology chronology78 = null;
        java.util.Locale locale79 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket(0L, chronology78, locale79, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone83 = dateTimeParserBucket82.getZone();
        long long85 = dateTimeParserBucket82.computeMillis(true);
        org.joda.time.Chronology chronology86 = dateTimeParserBucket82.getChronology();
        org.joda.time.MutableDateTime mutableDateTime87 = mutableDateTime68.toMutableDateTime(chronology86);
        mutableDateTime42.setMillis((org.joda.time.ReadableInstant) mutableDateTime87);
        int int89 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) mutableDateTime87);
        org.joda.time.DateTime dateTime90 = mutableDateTime5.toDateTime(dateTimeZone38);
        boolean boolean92 = dateTimeZone38.equals((java.lang.Object) 537000L);
        boolean boolean93 = locale3.equals((java.lang.Object) boolean92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime42 and mutableDateTime87", (mutableDateTime42.compareTo(mutableDateTime87) == 0) == mutableDateTime42.equals(mutableDateTime87));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField8 and durationField11", Math.signum(durationField8.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField8)));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfCentury();
        long long11 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DateTimeField dateTimeField12 = property6.getField();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial36 = null;
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeParserBucket44.getZone();
        org.joda.time.Chronology chronology46 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.hourOfHalfday();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.lang.String str49 = locale48.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology46, locale48, (java.lang.Integer) 2022);
        java.util.Locale locale52 = locale48.stripExtensions();
        java.lang.String str53 = locale52.getISO3Language();
        java.lang.String str54 = dateTimeField35.getAsText(readablePartial36, 842, locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology21, locale52, (java.lang.Integer) 237);
        org.joda.time.DateTimeZone dateTimeZone57 = chronology21.getZone();
        long long59 = dateTimeZone57.convertUTCToLocal((long) 34864317);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(dateTimeZone57);
        boolean boolean61 = property6.equals((java.lang.Object) mutableDateTime60);
        org.joda.time.MutableDateTime mutableDateTime62 = property6.roundCeiling();
        boolean boolean64 = mutableDateTime62.isBefore(1644788687170L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime60", (mutableDateTime8.compareTo(mutableDateTime60) == 0) == mutableDateTime8.equals(mutableDateTime60));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test226");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.addWeeks(678);
        boolean boolean22 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getCenturyOfEra();
        mutableDateTime18.setYear(672);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime18.toMutableDateTime();
        int int27 = mutableDateTime18.getMonthOfYear();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.minuteOfHour();
        org.joda.time.Chronology chronology41 = chronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology35.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime18.toMutableDateTime(chronology35);
        org.joda.time.DurationField durationField44 = chronology35.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and mutableDateTime43", (mutableDateTime18.compareTo(mutableDateTime43) == 0) == mutableDateTime18.equals(mutableDateTime43));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test227");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long7 = dateTimeParserBucket5.computeMillis();
        dateTimeParserBucket5.setOffset(360);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 74462);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add(100);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.weekyear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime18.set(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = mutableDateTime18.get(dateTimeFieldType25);
        int int27 = mutableDateTime18.getWeekOfWeekyear();
        org.joda.time.Instant instant28 = mutableDateTime18.toInstant();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime18.dayOfWeek();
        mutableDateTime18.addWeekyears(796);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        mutableDateTime36.addHours((int) (short) 0);
        mutableDateTime36.addWeekyears((int) 'a');
        java.lang.String str42 = mutableDateTime36.toString("0");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        int int47 = mutableDateTime44.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime44.set(dateTimeFieldType48, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        int int52 = mutableDateTime44.get(dateTimeFieldType51);
        mutableDateTime36.set(dateTimeFieldType51, 5);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime33.property(dateTimeFieldType51);
        boolean boolean56 = mutableDateTime18.isSupported(dateTimeFieldType51);
        mutableDateTime15.set(dateTimeFieldType51, 34909);
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(0L, chronology62, locale63, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone67 = dateTimeParserBucket66.getZone();
        org.joda.time.Chronology chronology68 = dateTimeParserBucket66.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.hourOfHalfday();
        org.joda.time.DurationField durationField70 = chronology68.centuries();
        org.joda.time.DateTimeZone dateTimeZone71 = chronology68.getZone();
        org.joda.time.DurationField durationField72 = chronology68.weeks();
        org.joda.time.DateTimeField dateTimeField73 = chronology68.year();
        java.util.Locale locale74 = java.util.Locale.US;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) 906, chronology68, locale74);
        dateTimeParserBucket5.saveField(dateTimeFieldType51, "2022-02-11T00:01:37.210Z", locale74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and mutableDateTime44", (instant28.compareTo(mutableDateTime44) == 0) == instant28.equals(mutableDateTime44));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test228");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableDateTime1.add(readablePeriod10, 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableDateTime14.add(readablePeriod19, (-292275054));
        boolean boolean22 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        mutableDateTime24.addHours(59);
        org.joda.time.Chronology chronology29 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology29.getZone();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        int int35 = mutableDateTime32.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime32.set(dateTimeFieldType36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        int int40 = mutableDateTime32.get(dateTimeFieldType39);
        int int41 = mutableDateTime32.getWeekOfWeekyear();
        org.joda.time.Instant instant42 = mutableDateTime32.toInstant();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime32.weekyear();
        int int44 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime32.minuteOfDay();
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        org.joda.time.Chronology chronology53 = dateTimeParserBucket51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.monthOfYear();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.weekyear();
        org.joda.time.DurationField durationField56 = chronology53.halfdays();
        org.joda.time.DurationField durationField57 = chronology53.days();
        mutableDateTime32.setChronology(chronology53);
        int int59 = mutableDateTime32.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        mutableDateTime32.add(readablePeriod60);
        mutableDateTime32.setDayOfYear(10);
        int int64 = mutableDateTime14.compareTo((org.joda.time.ReadableInstant) mutableDateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant42", (mutableDateTime1.compareTo(instant42) == 0) == mutableDateTime1.equals(instant42));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test229");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        int int5 = mutableDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime2.set(dateTimeFieldType6, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        int int10 = mutableDateTime2.get(dateTimeFieldType9);
        int int11 = mutableDateTime2.getWeekOfWeekyear();
        org.joda.time.Instant instant12 = mutableDateTime2.toInstant();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.dayOfWeek();
        mutableDateTime2.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, (int) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.halfdayOfDay();
        mutableDateTime2.setChronology(chronology26);
        long long36 = chronology26.add((long) 69, (long) 138, 86399);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        int int41 = dateTimeField40.getMaximumValue();
        int int44 = dateTimeField40.getDifference((long) 10, (long) 'a');
        int int46 = dateTimeField40.getLeapAmount((-1L));
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.lang.String str49 = dateTimeField40.getAsText((long) 340, locale48);
        java.util.Locale locale51 = java.util.Locale.UK;
        java.lang.String str52 = dateTimeField40.getAsShortText((int) '4', locale51);
        org.joda.time.ReadablePartial readablePartial53 = null;
        java.util.Locale locale55 = java.util.Locale.UK;
        java.lang.String str56 = dateTimeField40.getAsText(readablePartial53, 292278993, locale55);
        java.util.Locale locale57 = locale55.stripExtensions();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime59.dayOfWeek();
        java.util.Locale locale61 = null;
        java.lang.String str62 = property60.getAsText(locale61);
        java.util.Locale locale63 = null;
        int int64 = property60.getMaximumTextLength(locale63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        boolean boolean68 = mutableDateTime66.isEqual(readableInstant67);
        int int69 = mutableDateTime66.getHourOfDay();
        mutableDateTime66.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType72.getField(chronology73);
        int int75 = dateTimeField74.getMaximumValue();
        mutableDateTime66.setRounding(dateTimeField74);
        java.util.Locale locale78 = java.util.Locale.FRENCH;
        java.lang.String str79 = dateTimeField74.getAsShortText((int) (byte) 1, locale78);
        java.lang.String str80 = property60.getAsShortText(locale78);
        java.util.Locale locale81 = java.util.Locale.TAIWAN;
        java.lang.String str82 = locale81.getScript();
        java.lang.String str83 = locale78.getDisplayScript(locale81);
        java.util.Locale locale84 = java.util.Locale.US;
        java.lang.String str85 = locale78.getDisplayLanguage(locale84);
        java.util.Locale.setDefault(locale78);
        java.lang.String str87 = locale55.getDisplayScript(locale78);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket(1644572619753L, chronology26, locale55, (java.lang.Integer) 633);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime37 and mutableDateTime59", (mutableDateTime37.compareTo(mutableDateTime59) == 0) == mutableDateTime37.equals(mutableDateTime59));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test230");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        org.joda.time.Chronology chronology17 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale39.getDisplayScript(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale39);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) 74415232, chronology17);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime46.add(readablePeriod47, 74432920);
        org.joda.time.Instant instant50 = mutableDateTime46.toInstant();
        int int51 = mutableDateTime46.getMillisOfDay();
        boolean boolean52 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime46);
        java.lang.String str53 = mutableDateTime1.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime46 and instant50", (mutableDateTime46.compareTo(instant50) == 0) == mutableDateTime46.equals(instant50));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test231");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        int int15 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime18.set(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = mutableDateTime18.get(dateTimeFieldType25);
        org.joda.time.Instant instant27 = mutableDateTime18.toInstant();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime18);
        java.util.Date date29 = mutableDateTime18.toDate();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime18.add(readableDuration30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime18.weekyear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        mutableDateTime34.addHours(59);
        org.joda.time.Chronology chronology39 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology39.getZone();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime42.set(dateTimeFieldType46, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        int int50 = mutableDateTime42.get(dateTimeFieldType49);
        int int51 = mutableDateTime42.getWeekOfWeekyear();
        org.joda.time.Instant instant52 = mutableDateTime42.toInstant();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime42.weekyear();
        int int54 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime42.property(dateTimeFieldType55);
        org.joda.time.MutableDateTime mutableDateTime57 = property56.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime58 = property56.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime60 = property56.set(35065);
        int int61 = property32.compareTo((org.joda.time.ReadableInstant) mutableDateTime60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test232");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMonthOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        mutableDateTime6.addHours(59);
        int int11 = mutableDateTime6.getMillisOfSecond();
        mutableDateTime6.setMillisOfDay(10);
        boolean boolean14 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.Instant instant15 = mutableDateTime1.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        int int20 = dateTimeField19.getMaximumValue();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getISO3Country();
        java.lang.String str24 = dateTimeField19.getAsShortText(0L, locale22);
        boolean boolean25 = dateTimeField19.isLenient();
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime29.set(dateTimeFieldType33, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        int int37 = mutableDateTime29.get(dateTimeFieldType36);
        int int38 = mutableDateTime29.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.yearOfEra();
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar42 = mutableDateTime39.toCalendar(locale41);
        java.util.Calendar calendar43 = mutableDateTime29.toCalendar(locale41);
        java.lang.String str44 = dateTimeField19.getAsShortText(readablePartial26, (int) ' ', locale41);
        java.lang.String str45 = mutableDateTime1.toString("23", locale41);
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime1.getZone();
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("2022-02-11T09:40:09.067Z");
        java.lang.String str49 = locale48.getDisplayCountry();
        boolean boolean50 = dateTimeZone46.equals((java.lang.Object) str49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant15", (mutableDateTime1.compareTo(instant15) == 0) == mutableDateTime1.equals(instant15));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test233");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale9, (java.lang.Integer) 9, 59);
        java.lang.Object obj13 = dateTimeParserBucket12.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket12.saveField(dateTimeFieldType14, 59);
        boolean boolean17 = mutableDateTime1.isSupported(dateTimeFieldType14);
        int int18 = mutableDateTime1.getDayOfWeek();
        int int19 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        mutableDateTime21.addDays(0);
        int int27 = mutableDateTime21.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime21.weekyear();
        int int29 = mutableDateTime21.getMonthOfYear();
        long long30 = mutableDateTime21.getMillis();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime21.centuryOfEra();
        org.joda.time.Instant instant32 = mutableDateTime21.toInstant();
        boolean boolean33 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        mutableDateTime38.addHours((int) (short) 0);
        mutableDateTime38.addWeekyears((int) 'a');
        java.lang.String str44 = mutableDateTime38.toString("0");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        int int49 = mutableDateTime46.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime46.set(dateTimeFieldType50, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        int int54 = mutableDateTime46.get(dateTimeFieldType53);
        mutableDateTime38.set(dateTimeFieldType53, 5);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime35.property(dateTimeFieldType53);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str59 = dateTimeFieldType58.toString();
        mutableDateTime35.set(dateTimeFieldType58, 939);
        boolean boolean62 = mutableDateTime1.isSupported(dateTimeFieldType58);
        java.lang.Class<?> wildcardClass63 = mutableDateTime1.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and instant32", (mutableDateTime21.compareTo(instant32) == 0) == mutableDateTime21.equals(instant32));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test234");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        long long10 = dateTimeParserBucket7.computeMillis(true);
        org.joda.time.Chronology chronology11 = dateTimeParserBucket7.getChronology();
        org.joda.time.Chronology chronology12 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.yearOfEra();
        boolean boolean14 = durationFieldType1.isSupported(chronology11);
        java.lang.String str15 = durationFieldType1.getName();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime17.set(dateTimeFieldType21, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        int int25 = mutableDateTime17.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime26 = mutableDateTime17.toDateTime();
        int int27 = dateTime26.getMinuteOfHour();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime26.toDateTime(chronology35);
        boolean boolean39 = durationFieldType1.isSupported(chronology35);
        org.joda.time.DurationField durationField40 = chronology35.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and dateTime38", (mutableDateTime17.compareTo(dateTime38) == 0) == mutableDateTime17.equals(dateTime38));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test235");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfCeiling();
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        java.util.Locale locale17 = null;
        java.util.Calendar calendar18 = mutableDateTime13.toCalendar(locale17);
        int int19 = mutableDateTime13.getCenturyOfEra();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey((long) (byte) 0);
        mutableDateTime13.setZoneRetainFields(dateTimeZone26);
        org.joda.time.Chronology chronology30 = mutableDateTime13.getChronology();
        org.joda.time.DateTime dateTime31 = dateTime11.toDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime31.getZone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.Chronology chronology35 = null;
        mutableDateTime34.setChronology(chronology35);
        boolean boolean38 = mutableDateTime34.equals((java.lang.Object) 214);
        boolean boolean39 = mutableDateTime34.isBeforeNow();
        boolean boolean40 = dateTime31.isBefore((org.joda.time.ReadableInstant) mutableDateTime34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar18", (calendar3.compareTo(calendar18) == 0) == calendar3.equals(calendar18));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test236");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutableDateTime4.add(readablePeriod5);
        org.joda.time.Instant instant7 = mutableDateTime4.toInstant();
        mutableDateTime4.setSecondOfDay(74562);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant7", (mutableDateTime1.compareTo(instant7) == 0) == mutableDateTime1.equals(instant7));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test237");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime1.add(readablePeriod16, 730);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime1.add(readableDuration19, 842);
        mutableDateTime1.setSecondOfDay(320);
        boolean boolean24 = mutableDateTime1.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Instant instant26 = mutableDateTime1.toInstant();
        mutableDateTime1.addDays(1404780000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime25 and instant26", (mutableDateTime25.compareTo(instant26) == 0) == mutableDateTime25.equals(instant26));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test238");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime13.set(dateTimeFieldType17, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        int int21 = mutableDateTime13.get(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = mutableDateTime13.toDateTime();
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = mutableDateTime13.toCalendar(locale23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime13.toDateTime(dateTimeZone26);
        java.lang.String str28 = dateTimeZone26.getID();
        long long31 = dateTimeZone26.adjustOffset((long) 158, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(27320L, dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime33.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        int int38 = dateTimeZone36.getOffsetFromLocal((long) 13);
        org.joda.time.DateTime dateTime39 = mutableDateTime34.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology40 = chronology7.withZone(dateTimeZone36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime33 and dateTime39", (mutableDateTime33.compareTo(dateTime39) == 0) == mutableDateTime33.equals(dateTime39));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test239");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime1.addMillis((int) (byte) 0);
        int int21 = mutableDateTime1.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.property(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getRangeDurationType();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.dayOfMonth();
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology33, locale38);
        org.joda.time.DateTimeField dateTimeField40 = chronology33.secondOfDay();
        org.joda.time.DurationField durationField41 = durationFieldType24.getField(chronology33);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DurationField durationField43 = durationFieldType24.getField(chronology42);
        java.lang.String str44 = durationFieldType24.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField34 and durationField43", (durationField34.compareTo(durationField43) == 0) == durationField34.equals(durationField43));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test240");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        int int8 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMillis(361);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime25.set(dateTimeFieldType29, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        int int33 = mutableDateTime25.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime34 = mutableDateTime25.toDateTime();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        int int39 = mutableDateTime36.getHourOfDay();
        mutableDateTime36.addYears(0);
        mutableDateTime25.setDate((org.joda.time.ReadableInstant) mutableDateTime36);
        mutableDateTime25.addMillis((int) (byte) 0);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime1.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        java.lang.String str49 = durationFieldType48.toString();
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology51, locale52, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeParserBucket55.getZone();
        long long58 = dateTimeParserBucket55.computeMillis(true);
        org.joda.time.Chronology chronology59 = dateTimeParserBucket55.getChronology();
        org.joda.time.Chronology chronology60 = chronology59.withUTC();
        boolean boolean61 = durationFieldType48.isSupported(chronology60);
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now(chronology60);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.secondOfDay();
        mutableDateTime1.setChronology(chronology60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime36 and mutableDateTime62", (mutableDateTime36.compareTo(mutableDateTime62) == 0) == mutableDateTime36.equals(mutableDateTime62));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test241");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addSeconds((-292275054));
        int int10 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Instant instant12 = mutableDateTime11.toInstant();
        org.joda.time.DateTimeField dateTimeField13 = null;
        mutableDateTime11.setRounding(dateTimeField13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant12", (mutableDateTime1.compareTo(instant12) == 0) == mutableDateTime1.equals(instant12));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test242");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        long long16 = property15.remainder();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.Instant instant18 = mutableDateTime17.toInstant();
        java.lang.Class<?> wildcardClass19 = mutableDateTime17.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and instant18", (mutableDateTime17.compareTo(instant18) == 0) == mutableDateTime17.equals(instant18));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test243");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.monthOfYear();
        org.joda.time.DurationField durationField10 = chronology7.days();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant12 = null;
        mutableDateTime11.setMillis(readableInstant12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        mutableDateTime26.addYears(0);
        mutableDateTime15.setDate((org.joda.time.ReadableInstant) mutableDateTime26);
        int int33 = mutableDateTime15.getEra();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.dayOfMonth();
        org.joda.time.DurationField durationField46 = chronology41.centuries();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime15.toMutableDateTime(chronology41);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableDateTime48.add(readablePeriod49);
        boolean boolean51 = mutableDateTime11.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        long long52 = mutableDateTime11.getMillis();
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime11.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and mutableDateTime48", (mutableDateTime15.compareTo(mutableDateTime48) == 0) == mutableDateTime15.equals(mutableDateTime48));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test244");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        mutableDateTime1.setMillisOfDay(411);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        mutableDateTime13.addHours(59);
        org.joda.time.Chronology chronology18 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology18.getZone();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime21.set(dateTimeFieldType25, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        int int29 = mutableDateTime21.get(dateTimeFieldType28);
        int int30 = mutableDateTime21.getWeekOfWeekyear();
        org.joda.time.Instant instant31 = mutableDateTime21.toInstant();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime21.weekyear();
        int int33 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime11.setZone(dateTimeZone19);
        mutableDateTime11.addSeconds(74503);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and instant31", (mutableDateTime21.compareTo(instant31) == 0) == mutableDateTime21.equals(instant31));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test245");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        mutableDateTime1.setMillisOfDay(411);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getRangeDurationType();
        int int13 = mutableDateTime1.get(dateTimeFieldType11);
        int int14 = mutableDateTime1.getHourOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime16.set(dateTimeFieldType20, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = mutableDateTime16.get(dateTimeFieldType23);
        int int25 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.Instant instant26 = mutableDateTime16.toInstant();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime16.dayOfWeek();
        int int28 = mutableDateTime16.getYearOfEra();
        int int29 = mutableDateTime16.getMillisOfSecond();
        long long30 = mutableDateTime16.getMillis();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        int int43 = mutableDateTime40.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime40.set(dateTimeFieldType44, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        int int48 = mutableDateTime40.get(dateTimeFieldType47);
        int int49 = mutableDateTime40.getWeekOfWeekyear();
        org.joda.time.Instant instant50 = mutableDateTime40.toInstant();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime40.dayOfWeek();
        mutableDateTime40.addWeekyears(796);
        int int54 = mutableDateTime40.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfMinute();
        mutableDateTime40.set(dateTimeFieldType55, 9);
        dateTimeParserBucket36.saveField(dateTimeFieldType55, 34839065);
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(0L, chronology62, locale63, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone67 = dateTimeParserBucket66.getZone();
        org.joda.time.Chronology chronology68 = dateTimeParserBucket66.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.hours();
        org.joda.time.DurationField durationField70 = chronology68.centuries();
        org.joda.time.DurationField durationField71 = chronology68.centuries();
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) 167, chronology68);
        boolean boolean73 = dateTimeFieldType55.isSupported(chronology68);
        int int74 = mutableDateTime16.get(dateTimeFieldType55);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime1.property(dateTimeFieldType55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime16 and instant26", (mutableDateTime16.compareTo(instant26) == 0) == mutableDateTime16.equals(instant26));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test246");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        int int15 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime18.set(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = mutableDateTime18.get(dateTimeFieldType25);
        org.joda.time.Instant instant27 = mutableDateTime18.toInstant();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime18);
        java.util.Date date29 = mutableDateTime18.toDate();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime18.add(readableDuration30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime18.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test247");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DurationField durationField11 = chronology9.years();
        org.joda.time.DurationField durationField12 = chronology9.weekyears();
        long long16 = chronology9.add((long) 564, 0L, 85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField11 and durationField12", (durationField11.compareTo(durationField12) == 0) == durationField11.equals(durationField12));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test248");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = mutableDateTime1.toDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology28, locale30, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField34 = chronology28.halfdays();
        org.joda.time.DurationField durationField35 = chronology28.millis();
        org.joda.time.DateTimeField dateTimeField36 = chronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology28.hourOfHalfday();
        mutableDateTime1.setChronology(chronology28);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property39.getFieldType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime18", (mutableDateTime1.compareTo(dateTime18) == 0) == mutableDateTime1.equals(dateTime18));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test249");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        int int4 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        int int9 = mutableDateTime6.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime6.set(dateTimeFieldType10, (int) 'a');
        org.joda.time.Instant instant13 = mutableDateTime6.toInstant();
        boolean boolean14 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) instant13);
        int int15 = mutableDateTime1.getHourOfDay();
        int int16 = mutableDateTime1.getDayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        mutableDateTime18.addHours(59);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.minuteOfHour();
        int int24 = mutableDateTime18.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime18.set(dateTimeFieldType25, (int) 'a');
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology29, locale30, (java.lang.Integer) 9, 59);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.dayOfWeek();
        int int37 = property36.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property36.getFieldType();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.dayOfWeek();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime41.yearOfCentury();
        org.joda.time.DurationField durationField44 = property43.getDurationField();
        int int45 = property43.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        int int49 = dateTimeField48.getMaximumValue();
        java.util.Locale locale51 = java.util.Locale.FRENCH;
        java.lang.String str52 = locale51.getISO3Country();
        java.lang.String str53 = dateTimeField48.getAsShortText(0L, locale51);
        int int54 = property43.getMaximumTextLength(locale51);
        dateTimeParserBucket33.saveField(dateTimeFieldType38, "2022-02-11T00:01:37.078Z", locale51);
        int int56 = mutableDateTime18.get(dateTimeFieldType38);
        int int57 = mutableDateTime1.get(dateTimeFieldType38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant13", (mutableDateTime6.compareTo(instant13) == 0) == mutableDateTime6.equals(instant13));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test250");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfYear();
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfWeek();
        java.util.Locale locale31 = null;
        java.lang.String str32 = property30.getAsText(locale31);
        java.util.Locale locale33 = null;
        int int34 = property30.getMaximumTextLength(locale33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        int int39 = mutableDateTime36.getHourOfDay();
        mutableDateTime36.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        int int45 = dateTimeField44.getMaximumValue();
        mutableDateTime36.setRounding(dateTimeField44);
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.lang.String str49 = dateTimeField44.getAsShortText((int) (byte) 1, locale48);
        java.lang.String str50 = property30.getAsShortText(locale48);
        java.lang.String str51 = dateTimeField25.getAsShortText(readablePartial26, (int) (short) -1, locale48);
        org.joda.time.ReadablePartial readablePartial52 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        boolean boolean57 = mutableDateTime55.isEqual(readableInstant56);
        int int58 = mutableDateTime55.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime55.set(dateTimeFieldType59, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        int int63 = mutableDateTime55.get(dateTimeFieldType62);
        int int64 = mutableDateTime55.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime65.yearOfEra();
        java.util.Locale locale67 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar68 = mutableDateTime65.toCalendar(locale67);
        java.util.Calendar calendar69 = mutableDateTime55.toCalendar(locale67);
        java.lang.String str70 = dateTimeField25.getAsText(readablePartial52, 306, locale67);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale71);
        java.lang.String str73 = locale67.getDisplayName(locale71);
        java.lang.String str74 = locale67.getISO3Country();
        int int75 = dateTimeField16.getMaximumTextLength(locale67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar69", (calendar12.compareTo(calendar69) == 0) == calendar12.equals(calendar69));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test251");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int8 = mutableDateTime1.get(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.minuteOfDay();
        long long10 = mutableDateTime1.getMillis();
        mutableDateTime1.setMillisOfDay(616);
        mutableDateTime1.addSeconds(134);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket20.getZone();
        boolean boolean23 = dateTimeZone22.isFixed();
        long long26 = dateTimeZone22.adjustOffset((long) 34992084, true);
        mutableDateTime1.setZoneRetainFields(dateTimeZone22);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        mutableDateTime29.addHours(59);
        org.joda.time.Chronology chronology34 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology34.getZone();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.Chronology chronology37 = chronology34.withUTC();
        org.joda.time.DurationField durationField38 = chronology37.centuries();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(chronology37);
        mutableDateTime1.setChronology(chronology37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime36 and mutableDateTime40", (mutableDateTime36.compareTo(mutableDateTime40) == 0) == mutableDateTime36.equals(mutableDateTime40));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test252");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField26 = chronology19.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        mutableDateTime31.addHours(59);
        org.joda.time.Chronology chronology36 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology36.getZone();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.dayOfWeek();
        java.util.Locale locale41 = null;
        java.lang.String str42 = property40.getAsText(locale41);
        java.util.Locale locale43 = null;
        int int44 = property40.getMaximumTextLength(locale43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        int int49 = mutableDateTime46.getHourOfDay();
        mutableDateTime46.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType52.getField(chronology53);
        int int55 = dateTimeField54.getMaximumValue();
        mutableDateTime46.setRounding(dateTimeField54);
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.lang.String str59 = dateTimeField54.getAsShortText((int) (byte) 1, locale58);
        java.lang.String str60 = property40.getAsShortText(locale58);
        java.util.Locale locale61 = java.util.Locale.TAIWAN;
        java.lang.String str62 = locale61.getScript();
        java.lang.String str63 = locale58.getDisplayScript(locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale58);
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) 74415232, chronology36);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutableDateTime65.add(readablePeriod66, 74432920);
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime69.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime72 = property70.addWrapField(0);
        mutableDateTime72.setHourOfDay((int) (byte) 1);
        mutableDateTime72.addWeeks(568);
        int int77 = mutableDateTime72.getRoundingMode();
        org.joda.time.MutableDateTime mutableDateTime78 = mutableDateTime72.toMutableDateTimeISO();
        mutableDateTime65.setTime((org.joda.time.ReadableInstant) mutableDateTime72);
        boolean boolean80 = mutableDateTime27.isEqual((org.joda.time.ReadableInstant) mutableDateTime72);
        int int81 = mutableDateTime72.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime27 and mutableDateTime39", (mutableDateTime27.compareTo(mutableDateTime39) == 0) == mutableDateTime27.equals(mutableDateTime39));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test253");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology7.add(readablePeriod12, (long) 293, 74413);
        org.joda.time.DurationField durationField16 = chronology7.eras();
        org.joda.time.DurationField durationField17 = chronology7.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField17, and durationField16", !(durationField16.compareTo(durationField17) == 0) || (Math.signum(durationField16.compareTo(durationField16)) == Math.signum(durationField17.compareTo(durationField16))));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test254");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        int int10 = mutableDateTime9.getYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime9.setZone(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime9.toMutableDateTimeISO();
        org.joda.time.Instant instant14 = mutableDateTime9.toInstant();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime9.add(readablePeriod15, 74468);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime13 and instant14", (mutableDateTime13.compareTo(instant14) == 0) == mutableDateTime13.equals(instant14));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test255");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        java.lang.String str12 = chronology10.toString();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int18 = dateTimeField16.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfWeek();
        java.util.Locale locale23 = null;
        java.lang.String str24 = property22.getAsText(locale23);
        java.util.Locale locale25 = null;
        int int26 = property22.getMaximumTextLength(locale25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        mutableDateTime28.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        int int37 = dateTimeField36.getMaximumValue();
        mutableDateTime28.setRounding(dateTimeField36);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = dateTimeField36.getAsShortText((int) (byte) 1, locale40);
        java.lang.String str42 = property22.getAsShortText(locale40);
        java.lang.String str43 = dateTimeField16.getAsShortText(1L, locale40);
        int int44 = dateTimeField16.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField16.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.format.DateTimePrinter dateTimePrinter47 = null;
        org.joda.time.format.DateTimeParser dateTimeParser48 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter47, dateTimeParser48);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeFormatter49.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser51 = dateTimeFormatter49.getParser();
        boolean boolean52 = dateTimeFormatter49.isParser();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology54, locale55, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket58.getZone();
        org.joda.time.Chronology chronology60 = dateTimeParserBucket58.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.days();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        long long65 = chronology60.add(readablePeriod62, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter49.withChronology(chronology60);
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType46.getField(chronology60);
        org.joda.time.DateTimeField dateTimeField68 = chronology60.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType45.getField(chronology60);
        int int70 = mutableDateTime13.get(dateTimeFieldType45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField11 and durationField61", (durationField11.compareTo(durationField61) == 0) == durationField11.equals(durationField61));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test256");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType13.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        org.joda.time.DurationField durationField21 = dateTimeField20.getDurationField();
        boolean boolean23 = dateTimeField20.isLeap((long) (short) -1);
        java.lang.String str24 = dateTimeField20.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        int int29 = dateTimeField28.getMaximumValue();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.dayOfWeek();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime32.yearOfCentury();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        int int36 = property34.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        int int40 = dateTimeField39.getMaximumValue();
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.lang.String str43 = locale42.getISO3Country();
        java.lang.String str44 = dateTimeField39.getAsShortText(0L, locale42);
        int int45 = property34.getMaximumTextLength(locale42);
        java.lang.String str46 = dateTimeField28.getAsShortText(0L, locale42);
        java.lang.String str47 = dateTimeField20.getAsText((-1L), locale42);
        dateTimeParserBucket5.saveField(dateTimeFieldType13, "2022-02-11T09:40:25.676Z", locale42);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = mutableDateTime51.toString(dateTimeFormatter54);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeParserBucket61.getZone();
        java.lang.String str63 = dateTimeZone62.getID();
        java.lang.String str65 = dateTimeZone62.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime66 = mutableDateTime51.toMutableDateTime(dateTimeZone62);
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.now(dateTimeZone62);
        java.lang.String str69 = dateTimeZone62.getName((long) 805);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        boolean boolean73 = mutableDateTime71.isEqual(readableInstant72);
        int int74 = mutableDateTime71.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime71.set(dateTimeFieldType75, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.year();
        int int79 = mutableDateTime71.get(dateTimeFieldType78);
        int int80 = mutableDateTime71.getWeekOfWeekyear();
        org.joda.time.Instant instant81 = mutableDateTime71.toInstant();
        int int82 = mutableDateTime71.getWeekOfWeekyear();
        mutableDateTime71.setDayOfYear(100);
        int int85 = dateTimeZone62.getOffset((org.joda.time.ReadableInstant) mutableDateTime71);
        dateTimeParserBucket5.setZone(dateTimeZone62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and instant81", (mutableDateTime9.compareTo(instant81) == 0) == mutableDateTime9.equals(instant81));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test257");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.add(100);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.addWrapField(10);
        mutableDateTime16.setMillis((long) 779);
        long long19 = mutableDateTime16.getMillis();
        mutableDateTime16.addDays(35651);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology29.centuries();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.era();
        org.joda.time.DateTime dateTime33 = mutableDateTime16.toDateTime(chronology29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        int int38 = mutableDateTime35.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime35.set(dateTimeFieldType39, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        int int43 = mutableDateTime35.get(dateTimeFieldType42);
        org.joda.time.DateTime dateTime44 = mutableDateTime35.toDateTime();
        java.util.Locale locale45 = null;
        java.util.Calendar calendar46 = mutableDateTime35.toCalendar(locale45);
        mutableDateTime35.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime35.millisOfDay();
        mutableDateTime35.addMonths(281);
        int int52 = mutableDateTime16.compareTo((org.joda.time.ReadableInstant) mutableDateTime35);
        boolean boolean53 = mutableDateTime10.isAfter((org.joda.time.ReadableInstant) mutableDateTime35);
        mutableDateTime10.addHours((-52));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and dateTime33", (mutableDateTime11.compareTo(dateTime33) == 0) == mutableDateTime11.equals(dateTime33));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test258");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.add(938);
        int int9 = property6.getMaximumValueOverall();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        int int18 = mutableDateTime11.getEra();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.dayOfMonth();
        mutableDateTime11.setMinuteOfDay(5);
        mutableDateTime11.setSecondOfMinute(6);
        int int24 = property6.getDifference((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getRangeDurationType();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        long long35 = dateTimeParserBucket32.computeMillis(true);
        org.joda.time.Chronology chronology36 = dateTimeParserBucket32.getChronology();
        org.joda.time.Chronology chronology37 = chronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.yearOfEra();
        boolean boolean39 = durationFieldType26.isSupported(chronology36);
        java.lang.String str40 = durationFieldType26.getName();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime42.set(dateTimeFieldType46, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        int int50 = mutableDateTime42.get(dateTimeFieldType49);
        org.joda.time.DateTime dateTime51 = mutableDateTime42.toDateTime();
        int int52 = dateTime51.getMinuteOfHour();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology54, locale55, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket58.getZone();
        org.joda.time.Chronology chronology60 = dateTimeParserBucket58.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime51.toDateTime(chronology60);
        boolean boolean64 = durationFieldType26.isSupported(chronology60);
        org.joda.time.DateTime dateTime65 = mutableDateTime11.toDateTime(chronology60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime42 and dateTime63", (mutableDateTime42.compareTo(dateTime63) == 0) == mutableDateTime42.equals(dateTime63));
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test259");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        int int13 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        mutableDateTime15.addHours(59);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.minuteOfHour();
        int int21 = mutableDateTime15.getSecondOfDay();
        int int22 = mutableDateTime15.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime15.hourOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime15.dayOfWeek();
        mutableDateTime15.addMillis(361);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        mutableDateTime28.addHours(59);
        org.joda.time.Chronology chronology33 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime15.toMutableDateTime(chronology33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        int int41 = mutableDateTime38.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime38.set(dateTimeFieldType42, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        int int46 = mutableDateTime38.get(dateTimeFieldType45);
        org.joda.time.DateTime dateTime47 = mutableDateTime38.toDateTime();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = mutableDateTime49.isEqual(readableInstant50);
        int int52 = mutableDateTime49.getHourOfDay();
        mutableDateTime49.addYears(0);
        mutableDateTime38.setDate((org.joda.time.ReadableInstant) mutableDateTime49);
        int int56 = mutableDateTime38.getEra();
        int int57 = mutableDateTime38.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = mutableDateTime38.toString(dateTimeFormatter58);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime38.minuteOfHour();
        mutableDateTime38.addYears(237);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime38.millisOfSecond();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        boolean boolean67 = mutableDateTime65.isEqual(readableInstant66);
        mutableDateTime65.addHours(59);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime65.minuteOfHour();
        int int71 = mutableDateTime65.getSecondOfDay();
        mutableDateTime65.addSeconds((-292275054));
        int int74 = mutableDateTime65.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime75 = mutableDateTime65.toMutableDateTime();
        int int76 = property63.compareTo((org.joda.time.ReadableInstant) mutableDateTime65);
        boolean boolean77 = mutableDateTime36.isAfter((org.joda.time.ReadableInstant) mutableDateTime65);
        boolean boolean78 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.ReadableDuration readableDuration79 = null;
        mutableDateTime1.add(readableDuration79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime47", (instant11.compareTo(dateTime47) == 0) == instant11.equals(dateTime47));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test260");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = mutableDateTime1.toDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology28, locale30, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField34 = chronology28.halfdays();
        org.joda.time.DurationField durationField35 = chronology28.millis();
        org.joda.time.DateTimeField dateTimeField36 = chronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology28.hourOfHalfday();
        mutableDateTime1.setChronology(chronology28);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime1.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.yearOfEra();
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar43 = mutableDateTime40.toCalendar(locale42);
        mutableDateTime40.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime40.dayOfYear();
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology51, locale52, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeParserBucket55.getZone();
        org.joda.time.Chronology chronology57 = dateTimeParserBucket55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = chronology57.add(readablePeriod59, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime63 = org.joda.time.MutableDateTime.now(chronology57);
        boolean boolean64 = mutableDateTime63.isEqualNow();
        int int65 = mutableDateTime40.compareTo((org.joda.time.ReadableInstant) mutableDateTime63);
        int int66 = property39.compareTo((org.joda.time.ReadableInstant) mutableDateTime63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        boolean boolean70 = mutableDateTime68.isEqual(readableInstant69);
        mutableDateTime68.addHours(59);
        org.joda.time.Chronology chronology73 = mutableDateTime68.getChronology();
        org.joda.time.MutableDateTime mutableDateTime74 = mutableDateTime68.toMutableDateTime();
        int int75 = mutableDateTime74.getEra();
        mutableDateTime74.addSeconds(0);
        mutableDateTime63.setTime((org.joda.time.ReadableInstant) mutableDateTime74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime18", (mutableDateTime1.compareTo(dateTime18) == 0) == mutableDateTime1.equals(dateTime18));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test261");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        java.lang.Object obj21 = dateTimeParserBucket19.saveState();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology38, locale40, (java.lang.Integer) 2022);
        java.util.Locale locale44 = locale40.stripExtensions();
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "", locale40);
        java.lang.String str46 = mutableDateTime1.toString("32", locale40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        mutableDateTime48.addHours(59);
        int int53 = mutableDateTime48.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean55 = mutableDateTime48.isSupported(dateTimeFieldType54);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField57 = mutableDateTime48.getRoundingField();
        boolean boolean58 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.DateTimeZone dateTimeZone59 = mutableDateTime1.getZone();
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime1.add(readableDuration60, 34931287);
        org.joda.time.DateTime dateTime63 = mutableDateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime1.minuteOfHour();
        int int65 = mutableDateTime1.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime63", (instant11.compareTo(dateTime63) == 0) == instant11.equals(dateTime63));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test262");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        int int3 = mutableDateTime1.getRoundingMode();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        int int8 = mutableDateTime5.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime5.set(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime5.getZone();
        long long14 = dateTimeZone12.nextTransition((long) 59);
        java.lang.String str16 = dateTimeZone12.getName((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        mutableDateTime18.addHours(59);
        org.joda.time.Chronology chronology23 = mutableDateTime18.getChronology();
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime18.toMutableDateTime();
        int int25 = mutableDateTime18.getYear();
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone12);
        long long30 = dateTimeZone12.nextTransition(0L);
        mutableDateTime1.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.monthOfYear();
        org.joda.time.DurationField durationField42 = chronology39.days();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant44 = null;
        mutableDateTime43.setMillis(readableInstant44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        boolean boolean49 = mutableDateTime47.isEqual(readableInstant48);
        int int50 = mutableDateTime47.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime47.set(dateTimeFieldType51, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        int int55 = mutableDateTime47.get(dateTimeFieldType54);
        org.joda.time.DateTime dateTime56 = mutableDateTime47.toDateTime();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        boolean boolean60 = mutableDateTime58.isEqual(readableInstant59);
        int int61 = mutableDateTime58.getHourOfDay();
        mutableDateTime58.addYears(0);
        mutableDateTime47.setDate((org.joda.time.ReadableInstant) mutableDateTime58);
        int int65 = mutableDateTime47.getEra();
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale68, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone72 = dateTimeParserBucket71.getZone();
        org.joda.time.Chronology chronology73 = dateTimeParserBucket71.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.days();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.dayOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField77 = chronology73.dayOfMonth();
        org.joda.time.DurationField durationField78 = chronology73.centuries();
        org.joda.time.DateTimeField dateTimeField79 = chronology73.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime47.toMutableDateTime(chronology73);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        mutableDateTime80.add(readablePeriod81);
        boolean boolean83 = mutableDateTime43.isBefore((org.joda.time.ReadableInstant) mutableDateTime80);
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime80.era();
        boolean boolean85 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime28 and mutableDateTime43", (mutableDateTime28.compareTo(mutableDateTime43) == 0) == mutableDateTime28.equals(mutableDateTime43));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test263");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMonthOfYear();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = locale15.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology13, locale15, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField19 = chronology13.halfdays();
        org.joda.time.DurationField durationField20 = chronology13.weekyears();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(chronology13);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.DateTime dateTime23 = mutableDateTime1.toDateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField24 = chronology13.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime21", (mutableDateTime1.compareTo(mutableDateTime21) == 0) == mutableDateTime1.equals(mutableDateTime21));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test264");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        int int4 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        int int9 = mutableDateTime6.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime6.set(dateTimeFieldType10, (int) 'a');
        org.joda.time.Instant instant13 = mutableDateTime6.toInstant();
        boolean boolean14 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime16.set(dateTimeFieldType20, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = mutableDateTime16.get(dateTimeFieldType23);
        java.util.Date date25 = mutableDateTime16.toDate();
        mutableDateTime16.addDays((int) (byte) -1);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        java.lang.Integer int35 = dateTimeParserBucket33.getPivotYear();
        org.joda.time.Chronology chronology36 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        dateTimeParserBucket33.saveField(dateTimeFieldType37, "2022-02-11T09:40:23.419Z", locale39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime16.property(dateTimeFieldType37);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        org.joda.time.Chronology chronology49 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfHalfday();
        org.joda.time.DurationField durationField51 = chronology49.centuries();
        org.joda.time.DateTimeZone dateTimeZone52 = chronology49.getZone();
        java.lang.String str54 = dateTimeZone52.getName((long) 34817966);
        int int56 = dateTimeZone52.getOffset(580L);
        java.lang.String str58 = dateTimeZone52.getNameKey(1644572521484L);
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime16.toMutableDateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime60 = mutableDateTime1.toDateTime(dateTimeZone52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant13", (mutableDateTime6.compareTo(instant13) == 0) == mutableDateTime6.equals(instant13));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test265");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.weekyear();
        org.joda.time.DurationField durationField13 = property12.getLeapDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test266");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.dayOfYear();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMinimumValue(readablePartial14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getMonthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        mutableDateTime23.addHours(59);
        int int28 = mutableDateTime23.getMillisOfSecond();
        mutableDateTime23.setMillisOfDay(10);
        boolean boolean31 = mutableDateTime18.isEqual((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Instant instant32 = mutableDateTime18.toInstant();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        int int37 = mutableDateTime34.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime34.set(dateTimeFieldType38, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        int int42 = mutableDateTime34.get(dateTimeFieldType41);
        org.joda.time.DateTime dateTime43 = mutableDateTime34.toDateTime();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime34.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime45 = property44.getMutableDateTime();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.dayOfWeek();
        java.util.Locale locale49 = null;
        java.lang.String str50 = property48.getAsText(locale49);
        java.util.Locale locale51 = null;
        int int52 = property48.getMaximumTextLength(locale51);
        int int53 = property48.getMaximumValueOverall();
        int int54 = property48.get();
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime57 = mutableDateTime56.toDateTime();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        boolean boolean61 = mutableDateTime59.isEqual(readableInstant60);
        mutableDateTime59.addHours(59);
        org.joda.time.Chronology chronology64 = mutableDateTime59.getChronology();
        mutableDateTime56.setChronology(chronology64);
        java.util.Locale locale68 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale69 = locale68.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) 598, chronology64, locale68);
        java.lang.String str71 = property48.getAsShortText(locale68);
        java.lang.String str72 = property44.getAsText(locale68);
        java.util.Calendar calendar73 = mutableDateTime18.toCalendar(locale68);
        java.lang.String str74 = dateTimeField13.getAsShortText((long) 74426, locale68);
        java.lang.Object obj75 = locale68.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and instant32", (mutableDateTime18.compareTo(instant32) == 0) == mutableDateTime18.equals(instant32));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test267");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.secondOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime13.set(dateTimeFieldType17, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        int int21 = mutableDateTime13.get(dateTimeFieldType20);
        int int22 = mutableDateTime13.getWeekOfWeekyear();
        org.joda.time.Instant instant23 = mutableDateTime13.toInstant();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime13.dayOfWeek();
        mutableDateTime13.addWeekyears(796);
        int int27 = mutableDateTime13.getYearOfEra();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime13.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        int int33 = mutableDateTime30.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime30.set(dateTimeFieldType34, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        int int38 = mutableDateTime30.get(dateTimeFieldType37);
        org.joda.time.Instant instant39 = mutableDateTime30.toInstant();
        mutableDateTime13.setMillis((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.format.DateTimePrinter dateTimePrinter41 = null;
        org.joda.time.format.DateTimeParser dateTimeParser42 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter41, dateTimeParser42);
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeFormatter43.getZone();
        java.util.Locale locale45 = dateTimeFormatter43.getLocale();
        org.joda.time.Chronology chronology46 = dateTimeFormatter43.getChronolgy();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        mutableDateTime48.setMinuteOfHour((int) (short) 1);
        int int53 = mutableDateTime48.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime48.weekyear();
        int int55 = mutableDateTime48.getDayOfYear();
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        mutableDateTime48.setZone(dateTimeZone57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter43.withZone(dateTimeZone57);
        mutableDateTime13.setZone(dateTimeZone57);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime13.dayOfMonth();
        long long62 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and mutableDateTime30", (instant23.compareTo(mutableDateTime30) == 0) == instant23.equals(mutableDateTime30));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test268");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        int int16 = mutableDateTime1.getEra();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime18 = mutableDateTime17.toDateTime();
        int int19 = dateTime18.getHourOfDay();
        int int20 = dateTime18.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.yearOfEra();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar24 = mutableDateTime21.toCalendar(locale23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        mutableDateTime21.setDate(readableInstant25);
        int int27 = mutableDateTime21.getSecondOfDay();
        boolean boolean28 = dateTime18.isEqual((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        long long42 = chronology37.add(readablePeriod39, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now(chronology37);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeParserBucket49.getZone();
        org.joda.time.Chronology chronology51 = dateTimeParserBucket49.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.DateTime dateTime54 = mutableDateTime43.toDateTime(chronology51);
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime54.toMutableDateTime();
        boolean boolean56 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and mutableDateTime43", (mutableDateTime17.compareTo(mutableDateTime43) == 0) == mutableDateTime17.equals(mutableDateTime43));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test269");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        long long17 = dateTimeParserBucket14.computeMillis(true);
        org.joda.time.Chronology chronology18 = dateTimeParserBucket14.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        mutableDateTime1.setZone(dateTimeZone28);
        long long32 = dateTimeZone28.nextTransition((long) 74429);
        java.lang.String str34 = dateTimeZone28.getNameKey((long) 456);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime21", (mutableDateTime1.compareTo(mutableDateTime21) == 0) == mutableDateTime1.equals(mutableDateTime21));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test270");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField(0);
        boolean boolean13 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime16.set(dateTimeFieldType20, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime16.getZone();
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone23.isLocalDateTimeGap(localDateTime24);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(0L, dateTimeZone23);
        mutableDateTime12.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        mutableDateTime29.addHours(59);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime29.minuteOfHour();
        int int35 = mutableDateTime29.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        int int39 = dateTimeField38.getMaximumValue();
        int int42 = dateTimeField38.getDifference((long) 10, (long) 'a');
        int int44 = dateTimeField38.getLeapAmount((-1L));
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.lang.String str47 = dateTimeField38.getAsText((long) 340, locale46);
        java.util.Locale locale49 = java.util.Locale.UK;
        java.lang.String str50 = dateTimeField38.getAsShortText((int) '4', locale49);
        org.joda.time.ReadablePartial readablePartial51 = null;
        java.util.Locale locale53 = java.util.Locale.UK;
        java.lang.String str54 = dateTimeField38.getAsText(readablePartial51, 292278993, locale53);
        java.util.Calendar calendar55 = mutableDateTime29.toCalendar(locale53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean57 = mutableDateTime29.isSupported(dateTimeFieldType56);
        mutableDateTime12.setDate((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime29.toMutableDateTime();
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(0L, chronology61, locale62, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone66 = dateTimeParserBucket65.getZone();
        org.joda.time.Chronology chronology67 = dateTimeParserBucket65.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.monthOfYear();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.weekyear();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.minuteOfDay();
        org.joda.time.DurationField durationField71 = chronology67.hours();
        org.joda.time.DateTimeField dateTimeField72 = chronology67.halfdayOfDay();
        org.joda.time.DurationField durationField73 = chronology67.hours();
        org.joda.time.DateTime dateTime74 = mutableDateTime59.toDateTime(chronology67);
        java.lang.String str75 = chronology67.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime29 and dateTime74", (mutableDateTime29.compareTo(dateTime74) == 0) == mutableDateTime29.equals(dateTime74));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test271");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale9, (java.lang.Integer) 9, 59);
        java.lang.Object obj13 = dateTimeParserBucket12.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket12.saveField(dateTimeFieldType14, 59);
        boolean boolean17 = mutableDateTime1.isSupported(dateTimeFieldType14);
        int int18 = mutableDateTime1.getDayOfWeek();
        int int19 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        mutableDateTime21.addDays(0);
        int int27 = mutableDateTime21.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime21.weekyear();
        int int29 = mutableDateTime21.getMonthOfYear();
        long long30 = mutableDateTime21.getMillis();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime21.centuryOfEra();
        org.joda.time.Instant instant32 = mutableDateTime21.toInstant();
        boolean boolean33 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = null;
        org.joda.time.format.DateTimeParser dateTimeParser35 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter34, dateTimeParser35);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeFormatter36.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser38 = dateTimeFormatter36.getParser();
        boolean boolean39 = dateTimeFormatter36.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter36.withOffsetParsed();
        org.joda.time.Chronology chronology41 = dateTimeFormatter36.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = dateTimeFormatter36.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter36.withPivotYear((java.lang.Integer) 627);
        boolean boolean45 = dateTimeFormatter44.isParser();
        boolean boolean46 = mutableDateTime1.equals((java.lang.Object) dateTimeFormatter44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and instant32", (mutableDateTime21.compareTo(instant32) == 0) == mutableDateTime21.equals(instant32));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test272");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(100);
        org.joda.time.MutableDateTime mutableDateTime5 = property1.addWrapField(10);
        mutableDateTime5.setMillis((long) 779);
        long long8 = mutableDateTime5.getMillis();
        mutableDateTime5.addDays(35651);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology18.centuries();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.era();
        org.joda.time.DateTime dateTime22 = mutableDateTime5.toDateTime(chronology18);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeFormatter25.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        boolean boolean28 = dateTimeFormatter25.isParser();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeParserBucket34.getZone();
        org.joda.time.Chronology chronology36 = dateTimeParserBucket34.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.days();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        long long41 = chronology36.add(readablePeriod38, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter25.withChronology(chronology36);
        org.joda.time.DurationField durationField43 = chronology36.seconds();
        org.joda.time.DateTimeField dateTimeField44 = chronology36.halfdayOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        mutableDateTime46.addHours(59);
        org.joda.time.Chronology chronology51 = mutableDateTime46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = chronology51.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        int int57 = dateTimeField56.getMaximumValue();
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.lang.String str60 = locale59.getISO3Country();
        java.lang.String str61 = dateTimeField56.getAsShortText(0L, locale59);
        java.lang.String str62 = dateTimeZone52.getShortName((long) 286, locale59);
        int int64 = dateTimeZone52.getOffsetFromLocal((long) 420);
        int int66 = dateTimeZone52.getStandardOffset((long) 454);
        org.joda.time.Chronology chronology67 = chronology36.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField68 = chronology36.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime5, chronology36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and dateTime22", (mutableDateTime5.compareTo(dateTime22) == 0) == mutableDateTime5.equals(dateTime22));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test273");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.yearOfCentury();
        long long12 = property11.remainder();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.roundFloor();
        int int14 = mutableDateTime13.getSecondOfMinute();
        org.joda.time.Instant instant15 = mutableDateTime13.toInstant();
        int int16 = mutableDateTime13.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime13 and instant15", (mutableDateTime13.compareTo(instant15) == 0) == mutableDateTime13.equals(instant15));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test274");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.minuteOfHour();
        mutableDateTime4.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.addWrapField(0);
        boolean boolean16 = mutableDateTime4.isAfter((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DurationField durationField26 = chronology24.centuries();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology24.getZone();
        org.joda.time.DurationField durationField28 = chronology24.weeks();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.year();
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime4.toMutableDateTime(chronology24);
        boolean boolean31 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime4);
        int int32 = mutableDateTime1.getDayOfYear();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime1.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and mutableDateTime30", (mutableDateTime4.compareTo(mutableDateTime30) == 0) == mutableDateTime4.equals(mutableDateTime30));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test275");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        java.util.Date date10 = mutableDateTime1.toDate();
        mutableDateTime1.addDays((int) (byte) -1);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        java.lang.Integer int20 = dateTimeParserBucket18.getPivotYear();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        dateTimeParserBucket18.saveField(dateTimeFieldType22, "2022-02-11T09:40:23.419Z", locale24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.property(dateTimeFieldType22);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.DurationField durationField36 = chronology34.centuries();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology34.getZone();
        java.lang.String str39 = dateTimeZone37.getName((long) 34817966);
        int int41 = dateTimeZone37.getOffset(580L);
        java.lang.String str43 = dateTimeZone37.getNameKey(1644572521484L);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime1.toMutableDateTime(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime48 = property46.add(100);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.weekyear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime51.set(dateTimeFieldType55, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        int int59 = mutableDateTime51.get(dateTimeFieldType58);
        int int60 = mutableDateTime51.getWeekOfWeekyear();
        org.joda.time.Instant instant61 = mutableDateTime51.toInstant();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime51.dayOfWeek();
        mutableDateTime51.addWeekyears(796);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        boolean boolean68 = mutableDateTime66.isEqual(readableInstant67);
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now();
        mutableDateTime69.addHours((int) (short) 0);
        mutableDateTime69.addWeekyears((int) 'a');
        java.lang.String str75 = mutableDateTime69.toString("0");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        boolean boolean79 = mutableDateTime77.isEqual(readableInstant78);
        int int80 = mutableDateTime77.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime77.set(dateTimeFieldType81, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.year();
        int int85 = mutableDateTime77.get(dateTimeFieldType84);
        mutableDateTime69.set(dateTimeFieldType84, 5);
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime66.property(dateTimeFieldType84);
        boolean boolean89 = mutableDateTime51.isSupported(dateTimeFieldType84);
        mutableDateTime48.set(dateTimeFieldType84, 34909);
        boolean boolean92 = mutableDateTime1.isSupported(dateTimeFieldType84);
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType84.getRangeDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime44", (mutableDateTime1.compareTo(mutableDateTime44) == 0) == mutableDateTime1.equals(mutableDateTime44));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test276");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.add(100);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.addWrapField(10);
        mutableDateTime16.setMillis((long) 779);
        long long19 = mutableDateTime16.getMillis();
        mutableDateTime16.addDays(35651);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology29.centuries();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.era();
        org.joda.time.DateTime dateTime33 = mutableDateTime16.toDateTime(chronology29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        int int38 = mutableDateTime35.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime35.set(dateTimeFieldType39, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        int int43 = mutableDateTime35.get(dateTimeFieldType42);
        org.joda.time.DateTime dateTime44 = mutableDateTime35.toDateTime();
        java.util.Locale locale45 = null;
        java.util.Calendar calendar46 = mutableDateTime35.toCalendar(locale45);
        mutableDateTime35.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime35.millisOfDay();
        mutableDateTime35.addMonths(281);
        int int52 = mutableDateTime16.compareTo((org.joda.time.ReadableInstant) mutableDateTime35);
        boolean boolean53 = mutableDateTime10.isAfter((org.joda.time.ReadableInstant) mutableDateTime35);
        java.util.Date date54 = mutableDateTime35.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and dateTime33", (mutableDateTime11.compareTo(dateTime33) == 0) == mutableDateTime11.equals(dateTime33));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test277");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        java.util.Date date10 = mutableDateTime1.toDate();
        mutableDateTime1.addDays((int) (byte) -1);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        java.lang.Integer int20 = dateTimeParserBucket18.getPivotYear();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        dateTimeParserBucket18.saveField(dateTimeFieldType22, "2022-02-11T09:40:23.419Z", locale24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.property(dateTimeFieldType22);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.DurationField durationField36 = chronology34.centuries();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology34.getZone();
        java.lang.String str39 = dateTimeZone37.getName((long) 34817966);
        int int41 = dateTimeZone37.getOffset(580L);
        java.lang.String str43 = dateTimeZone37.getNameKey(1644572521484L);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime1.toMutableDateTime(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime48 = mutableDateTime47.toDateTime();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        mutableDateTime50.addHours(59);
        org.joda.time.Chronology chronology55 = mutableDateTime50.getChronology();
        mutableDateTime47.setChronology(chronology55);
        java.util.Locale locale59 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale60 = locale59.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 598, chronology55, locale59);
        java.lang.String str62 = dateTimeZone37.getName(35001L, locale59);
        long long64 = dateTimeZone37.previousTransition((long) 74604);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime44", (mutableDateTime1.compareTo(mutableDateTime44) == 0) == mutableDateTime1.equals(mutableDateTime44));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test278");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        long long16 = property15.remainder();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.Instant instant18 = mutableDateTime17.toInstant();
        mutableDateTime17.setMillisOfDay(34916286);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant18", (dateTime10.compareTo(instant18) == 0) == dateTime10.equals(instant18));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test279");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        int int13 = mutableDateTime12.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test280");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale9, (java.lang.Integer) 9, 59);
        java.lang.Object obj13 = dateTimeParserBucket12.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket12.saveField(dateTimeFieldType14, 59);
        boolean boolean17 = mutableDateTime1.isSupported(dateTimeFieldType14);
        int int18 = mutableDateTime1.getDayOfWeek();
        int int19 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        mutableDateTime21.addDays(0);
        int int27 = mutableDateTime21.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime21.weekyear();
        int int29 = mutableDateTime21.getMonthOfYear();
        long long30 = mutableDateTime21.getMillis();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime21.centuryOfEra();
        org.joda.time.Instant instant32 = mutableDateTime21.toInstant();
        boolean boolean33 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        mutableDateTime38.addHours((int) (short) 0);
        mutableDateTime38.addWeekyears((int) 'a');
        java.lang.String str44 = mutableDateTime38.toString("0");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        int int49 = mutableDateTime46.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime46.set(dateTimeFieldType50, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        int int54 = mutableDateTime46.get(dateTimeFieldType53);
        mutableDateTime38.set(dateTimeFieldType53, 5);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime35.property(dateTimeFieldType53);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str59 = dateTimeFieldType58.toString();
        mutableDateTime35.set(dateTimeFieldType58, 939);
        boolean boolean62 = mutableDateTime1.isSupported(dateTimeFieldType58);
        mutableDateTime1.setMinuteOfDay(503);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and instant32", (mutableDateTime21.compareTo(instant32) == 0) == mutableDateTime21.equals(instant32));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test281");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withDefaultYear((int) (short) 100);
        boolean boolean8 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime10.set(dateTimeFieldType14, (int) 'a');
        org.joda.time.Instant instant17 = mutableDateTime10.toInstant();
        int int18 = mutableDateTime10.getDayOfMonth();
        org.joda.time.Chronology chronology19 = mutableDateTime10.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter5.withChronology(chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and instant17", (mutableDateTime10.compareTo(instant17) == 0) == mutableDateTime10.equals(instant17));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test282");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.setYear(74411);
        int int5 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getHourOfDay();
        mutableDateTime7.addYears(0);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        mutableDateTime7.setZoneRetainFields(dateTimeZone19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        boolean boolean27 = mutableDateTime22.isSupported(dateTimeFieldType26);
        int int28 = mutableDateTime7.get(dateTimeFieldType26);
        mutableDateTime7.setWeekyear(74419);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        long long39 = dateTimeParserBucket36.computeMillis(true);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.DurationField durationField42 = chronology40.years();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime7.toMutableDateTime(chronology40);
        boolean boolean44 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        int int45 = mutableDateTime1.getSecondOfDay();
        boolean boolean47 = mutableDateTime1.isAfter((long) 74466);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and mutableDateTime43", (mutableDateTime7.compareTo(mutableDateTime43) == 0) == mutableDateTime7.equals(mutableDateTime43));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test283");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 9, 59);
        int int6 = dateTimeParserBucket5.getOffset();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        org.joda.time.Chronology chronology17 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale39.getDisplayScript(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale39);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) 74444144, chronology17);
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(0L, chronology48, locale49, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeParserBucket52.getZone();
        org.joda.time.Chronology chronology54 = dateTimeParserBucket52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology54);
        int int57 = mutableDateTime56.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType58.getField(chronology59);
        int int61 = dateTimeField60.getMaximumValue();
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.lang.String str64 = locale63.getISO3Country();
        java.lang.String str65 = dateTimeField60.getAsShortText(0L, locale63);
        mutableDateTime56.setRounding(dateTimeField60);
        mutableDateTime56.addDays(627);
        int int69 = mutableDateTime56.getMinuteOfDay();
        mutableDateTime56.addWeeks(74434287);
        int int72 = mutableDateTime56.getSecondOfMinute();
        boolean boolean73 = mutableDateTime46.isEqual((org.joda.time.ReadableInstant) mutableDateTime56);
        boolean boolean74 = dateTimeParserBucket5.restoreState((java.lang.Object) mutableDateTime46);
        org.joda.time.Chronology chronology76 = null;
        java.util.Locale locale77 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket(0L, chronology76, locale77, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone81 = dateTimeParserBucket80.getZone();
        org.joda.time.Chronology chronology82 = dateTimeParserBucket80.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime84 = org.joda.time.MutableDateTime.now(chronology82);
        org.joda.time.DateTimeField dateTimeField85 = chronology82.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField86 = chronology82.centuryOfEra();
        org.joda.time.DurationField durationField87 = chronology82.weekyears();
        org.joda.time.DateTime dateTime88 = mutableDateTime46.toDateTime(chronology82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime20 and mutableDateTime84", (mutableDateTime20.compareTo(mutableDateTime84) == 0) == mutableDateTime20.equals(mutableDateTime84));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test284");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getMillisOfDay();
        mutableDateTime17.addDays(22);
        mutableDateTime17.setYear(59);
        int int25 = dateTime15.compareTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime27.set(dateTimeFieldType31, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        int int35 = mutableDateTime27.get(dateTimeFieldType34);
        int int36 = mutableDateTime27.getWeekOfWeekyear();
        org.joda.time.Instant instant37 = mutableDateTime27.toInstant();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime27.dayOfWeek();
        mutableDateTime27.addWeekyears(796);
        int int41 = mutableDateTime27.getWeekOfWeekyear();
        mutableDateTime27.addWeeks(74411);
        org.joda.time.Instant instant44 = mutableDateTime27.toInstant();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = mutableDateTime46.toString(dateTimeFormatter49);
        int int51 = mutableDateTime46.getDayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        boolean boolean55 = mutableDateTime53.isEqual(readableInstant54);
        mutableDateTime53.setMinuteOfHour((int) (short) 1);
        int int58 = mutableDateTime53.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime53.weekyear();
        int int60 = mutableDateTime53.getWeekyear();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = mutableDateTime62.isEqual(readableInstant63);
        mutableDateTime62.addHours(59);
        org.joda.time.Chronology chronology67 = mutableDateTime62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology67.getZone();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology67);
        boolean boolean70 = mutableDateTime53.isEqual((org.joda.time.ReadableInstant) mutableDateTime69);
        org.joda.time.Chronology chronology72 = null;
        java.util.Locale locale73 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket(0L, chronology72, locale73, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone77 = dateTimeParserBucket76.getZone();
        java.lang.String str79 = dateTimeZone77.getNameKey((long) (byte) 0);
        org.joda.time.DateTime dateTime80 = mutableDateTime53.toDateTime(dateTimeZone77);
        mutableDateTime46.setZone(dateTimeZone77);
        org.joda.time.DateTime dateTime82 = instant44.toDateTime(dateTimeZone77);
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime17, dateTimeZone77);
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime17.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant37", (mutableDateTime1.compareTo(instant37) == 0) == mutableDateTime1.equals(instant37));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test285");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        java.lang.Object obj21 = dateTimeParserBucket19.saveState();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology38, locale40, (java.lang.Integer) 2022);
        java.util.Locale locale44 = locale40.stripExtensions();
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "", locale40);
        java.lang.String str46 = mutableDateTime1.toString("32", locale40);
        int int47 = mutableDateTime1.getDayOfWeek();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = mutableDateTime49.isEqual(readableInstant50);
        int int52 = mutableDateTime49.getHourOfDay();
        java.util.Locale locale53 = null;
        java.util.Calendar calendar54 = mutableDateTime49.toCalendar(locale53);
        int int55 = mutableDateTime49.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime49.toMutableDateTime();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale61, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone65 = dateTimeParserBucket64.getZone();
        org.joda.time.Chronology chronology66 = dateTimeParserBucket64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfHalfday();
        java.util.Locale locale68 = java.util.Locale.FRENCH;
        java.lang.String str69 = locale68.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology66, locale68, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField72 = chronology66.halfdays();
        org.joda.time.DateTimeField dateTimeField73 = chronology66.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField74 = chronology66.millisOfSecond();
        mutableDateTime1.setChronology(chronology66);
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(chronology66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime23", (mutableDateTime1.compareTo(mutableDateTime23) == 0) == mutableDateTime1.equals(mutableDateTime23));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test286");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime12.secondOfDay();
        mutableDateTime12.setWeekyear(747);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime12.minuteOfDay();
        mutableDateTime12.addMinutes(307);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime26.set(dateTimeFieldType30, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        int int34 = mutableDateTime26.get(dateTimeFieldType33);
        int int35 = mutableDateTime26.getWeekOfWeekyear();
        org.joda.time.Instant instant36 = mutableDateTime26.toInstant();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.dayOfWeek();
        mutableDateTime26.addWeekyears(796);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        mutableDateTime44.addHours((int) (short) 0);
        mutableDateTime44.addWeekyears((int) 'a');
        java.lang.String str50 = mutableDateTime44.toString("0");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        int int55 = mutableDateTime52.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime52.set(dateTimeFieldType56, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.year();
        int int60 = mutableDateTime52.get(dateTimeFieldType59);
        mutableDateTime44.set(dateTimeFieldType59, 5);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime41.property(dateTimeFieldType59);
        boolean boolean64 = mutableDateTime26.isSupported(dateTimeFieldType59);
        int int65 = mutableDateTime12.get(dateTimeFieldType59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant36 and mutableDateTime52", (instant36.compareTo(mutableDateTime52) == 0) == instant36.equals(mutableDateTime52));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test287");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and instant18", (mutableDateTime8.compareTo(instant18) == 0) == mutableDateTime8.equals(instant18));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test288");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        int int13 = mutableDateTime1.getWeekyear();
        org.joda.time.Chronology chronology14 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test289");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.monthOfYear();
        org.joda.time.DurationField durationField10 = chronology7.days();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant12 = null;
        mutableDateTime11.setMillis(readableInstant12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        mutableDateTime26.addYears(0);
        mutableDateTime15.setDate((org.joda.time.ReadableInstant) mutableDateTime26);
        int int33 = mutableDateTime15.getEra();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.dayOfMonth();
        org.joda.time.DurationField durationField46 = chronology41.centuries();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime15.toMutableDateTime(chronology41);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableDateTime48.add(readablePeriod49);
        boolean boolean51 = mutableDateTime11.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime48.addWeeks(152);
        mutableDateTime48.addMonths(969);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and mutableDateTime26", (mutableDateTime11.compareTo(mutableDateTime26) == 0) == mutableDateTime11.equals(mutableDateTime26));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test290");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology9.add(readablePeriod12, (long) 656, 912);
        org.joda.time.DurationField durationField16 = chronology9.centuries();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.DateTimeField dateTimeField18 = chronology9.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime17", (mutableDateTime8.compareTo(mutableDateTime17) == 0) == mutableDateTime8.equals(mutableDateTime17));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test291");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField(0);
        boolean boolean13 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Instant instant14 = mutableDateTime1.toInstant();
        mutableDateTime1.addSeconds(858);
        int int17 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.minuteOfHour();
        long long34 = chronology25.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField36 = chronology25.hourOfDay();
        boolean boolean38 = dateTimeField36.isLeap((long) 442);
        mutableDateTime1.setRounding(dateTimeField36);
        long long41 = dateTimeField36.roundFloor((long) 34892828);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and mutableDateTime35", (mutableDateTime9.compareTo(mutableDateTime35) == 0) == mutableDateTime9.equals(mutableDateTime35));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test292");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology13 = mutableDateTime1.getChronology();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        boolean boolean20 = mutableDateTime15.isSupported(dateTimeFieldType19);
        mutableDateTime15.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        int int32 = mutableDateTime24.get(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = mutableDateTime24.toDateTime();
        java.util.Locale locale34 = null;
        java.util.Calendar calendar35 = mutableDateTime24.toCalendar(locale34);
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime24.getZone();
        mutableDateTime15.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.Chronology chronology39 = chronology13.withZone(dateTimeZone36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test293");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.minuteOfHour();
        int int4 = mutableDateTime1.getCenturyOfEra();
        int int5 = mutableDateTime1.getSecondOfMinute();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime7.set(dateTimeFieldType11, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        int int15 = mutableDateTime7.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime16 = mutableDateTime7.toDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        mutableDateTime18.addYears(0);
        mutableDateTime7.setDate((org.joda.time.ReadableInstant) mutableDateTime18);
        int int25 = mutableDateTime7.getEra();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.dayOfMonth();
        org.joda.time.DurationField durationField38 = chronology33.centuries();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime7.toMutableDateTime(chronology33);
        org.joda.time.DateTime dateTime41 = mutableDateTime1.toDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField42 = chronology33.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime41", (mutableDateTime1.compareTo(dateTime41) == 0) == mutableDateTime1.equals(dateTime41));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test294");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology8.add(readablePeriod10, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = mutableDateTime14.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.millisOfDay();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.monthOfYear();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyear();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime40 = mutableDateTime39.toDateTime();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime39.millisOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        mutableDateTime43.addHours(59);
        int int48 = mutableDateTime43.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int50 = mutableDateTime43.get(dateTimeFieldType49);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime43.minuteOfDay();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.dayOfWeek();
        java.util.Locale locale55 = null;
        java.lang.String str56 = property54.getAsText(locale55);
        java.util.Locale locale57 = null;
        int int58 = property54.getMaximumTextLength(locale57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = mutableDateTime60.isEqual(readableInstant61);
        int int63 = mutableDateTime60.getHourOfDay();
        mutableDateTime60.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType66.getField(chronology67);
        int int69 = dateTimeField68.getMaximumValue();
        mutableDateTime60.setRounding(dateTimeField68);
        java.util.Locale locale72 = java.util.Locale.FRENCH;
        java.lang.String str73 = dateTimeField68.getAsShortText((int) (byte) 1, locale72);
        java.lang.String str74 = property54.getAsShortText(locale72);
        java.util.Calendar calendar75 = mutableDateTime43.toCalendar(locale72);
        int int76 = property41.getMaximumShortTextLength(locale72);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket((long) 34824000, chronology35, locale72, (java.lang.Integer) 664);
        java.lang.String str79 = locale72.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((-60273763200001L), chronology22, locale72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime39", (mutableDateTime14.compareTo(mutableDateTime39) == 0) == mutableDateTime14.equals(mutableDateTime39));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test295");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField14 = chronology8.halfdays();
        org.joda.time.DurationField durationField15 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.yearOfEra();
        org.joda.time.DurationField durationField17 = chronology8.seconds();
        org.joda.time.DurationField durationField18 = chronology8.hours();
        org.joda.time.DurationField durationField19 = chronology8.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField19, durationField14, and durationField15", !(durationField19.compareTo(durationField14) == 0) || (Math.signum(durationField19.compareTo(durationField15)) == Math.signum(durationField14.compareTo(durationField15))));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test296");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime4 = property1.add((long) (short) 1);
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket10.getZone();
        org.joda.time.Chronology chronology12 = dateTimeParserBucket10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.minuteOfDay();
        org.joda.time.DurationField durationField16 = chronology12.eras();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.monthOfYear();
        mutableDateTime4.setChronology(chronology12);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.add(100);
        mutableDateTime22.setSecondOfDay(0);
        int int25 = mutableDateTime22.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.monthOfYear();
        boolean boolean28 = mutableDateTime4.isBefore((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.year();
        org.joda.time.DurationField durationField40 = chronology37.days();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType29.getField(chronology37);
        org.joda.time.DateTime dateTime42 = mutableDateTime4.toDateTime(chronology37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField40", Math.signum(durationField16.compareTo(durationField40)) == -Math.signum(durationField40.compareTo(durationField16)));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test297");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime1.add(readablePeriod15, (int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.halfdayOfDay();
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology25.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.dayOfYear();
        org.joda.time.DurationField durationField36 = chronology33.eras();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        long long44 = dateTimeParserBucket42.computeMillis();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.dayOfWeek();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = mutableDateTime49.isEqual(readableInstant50);
        mutableDateTime49.addHours(59);
        int int54 = mutableDateTime49.getMillisOfSecond();
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology56, locale57, (java.lang.Integer) 9, 59);
        java.lang.Object obj61 = dateTimeParserBucket60.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket60.saveField(dateTimeFieldType62, 59);
        boolean boolean65 = mutableDateTime49.isSupported(dateTimeFieldType62);
        int int66 = mutableDateTime46.compareTo((org.joda.time.ReadableInstant) mutableDateTime49);
        int int67 = mutableDateTime49.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone68 = mutableDateTime49.getZone();
        long long72 = dateTimeZone68.convertLocalToUTC((long) 74450, false, (long) 74460488);
        dateTimeParserBucket42.setZone(dateTimeZone68);
        org.joda.time.Chronology chronology74 = chronology33.withZone(dateTimeZone68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField26 and durationField36", Math.signum(durationField26.compareTo(durationField36)) == -Math.signum(durationField36.compareTo(durationField26)));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test298");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.monthOfYear();
        org.joda.time.DurationField durationField10 = chronology7.days();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant12 = null;
        mutableDateTime11.setMillis(readableInstant12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        mutableDateTime26.addYears(0);
        mutableDateTime15.setDate((org.joda.time.ReadableInstant) mutableDateTime26);
        int int33 = mutableDateTime15.getEra();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.dayOfMonth();
        org.joda.time.DurationField durationField46 = chronology41.centuries();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime15.toMutableDateTime(chronology41);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableDateTime48.add(readablePeriod49);
        boolean boolean51 = mutableDateTime11.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime11.addDays((int) '4');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and mutableDateTime48", (mutableDateTime15.compareTo(mutableDateTime48) == 0) == mutableDateTime15.equals(mutableDateTime48));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test299");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        java.lang.Object obj21 = dateTimeParserBucket19.saveState();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology38, locale40, (java.lang.Integer) 2022);
        java.util.Locale locale44 = locale40.stripExtensions();
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "", locale40);
        java.lang.String str46 = mutableDateTime1.toString("32", locale40);
        mutableDateTime1.add((long) 765);
        mutableDateTime1.setYear(34817966);
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(0L, chronology52, locale53, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone57 = dateTimeParserBucket56.getZone();
        org.joda.time.Chronology chronology58 = dateTimeParserBucket56.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        long long63 = chronology58.add(readablePeriod60, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now(chronology58);
        org.joda.time.Chronology chronology66 = null;
        java.util.Locale locale67 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket(0L, chronology66, locale67, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone71 = dateTimeParserBucket70.getZone();
        org.joda.time.Chronology chronology72 = dateTimeParserBucket70.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(chronology72);
        org.joda.time.DateTime dateTime75 = mutableDateTime64.toDateTime(chronology72);
        org.joda.time.DurationField durationField76 = chronology72.millis();
        mutableDateTime1.setChronology(chronology72);
        int int78 = mutableDateTime1.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime23 and mutableDateTime64", (mutableDateTime23.compareTo(mutableDateTime64) == 0) == mutableDateTime23.equals(mutableDateTime64));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test300");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.minuteOfHour();
        int int4 = property3.getMaximumValue();
        boolean boolean5 = property3.isLeap();
        org.joda.time.MutableDateTime mutableDateTime7 = property3.add((long) 560);
        mutableDateTime7.setDate(328651L);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = mutableDateTime12.toCalendar(locale16);
        int int18 = mutableDateTime12.getCenturyOfEra();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey((long) (byte) 0);
        mutableDateTime12.setZoneRetainFields(dateTimeZone25);
        org.joda.time.Instant instant29 = mutableDateTime12.toInstant();
        boolean boolean30 = mutableDateTime7.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.addDays(609);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and instant29", (mutableDateTime2.compareTo(instant29) == 0) == mutableDateTime2.equals(instant29));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test301");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.minuteOfHour();
        long long17 = chronology8.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale39.getDisplayScript(locale42);
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = locale39.getDisplayLanguage(locale45);
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        org.joda.time.Chronology chronology55 = dateTimeParserBucket53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfHalfday();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = locale57.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology55, locale57, (java.lang.Integer) 2022);
        java.util.Locale locale61 = locale57.stripExtensions();
        java.lang.String str62 = locale61.getScript();
        java.lang.String str63 = locale61.getISO3Language();
        java.lang.String str64 = locale39.getDisplayScript(locale61);
        java.lang.String str65 = locale61.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) 34810005, chronology8, locale61);
        long long68 = dateTimeParserBucket66.computeMillis(false);
        org.joda.time.Chronology chronology71 = null;
        java.util.Locale locale72 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket(0L, chronology71, locale72, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone76 = dateTimeParserBucket75.getZone();
        org.joda.time.Chronology chronology77 = dateTimeParserBucket75.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.dayOfYear();
        org.joda.time.DateTimeField dateTimeField79 = chronology77.monthOfYear();
        org.joda.time.DateTimeField dateTimeField80 = chronology77.year();
        org.joda.time.DateTimeField dateTimeField81 = chronology77.dayOfMonth();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        boolean boolean85 = mutableDateTime83.isEqual(readableInstant84);
        int int86 = mutableDateTime83.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime83.set(dateTimeFieldType87, (int) 'a');
        int int90 = mutableDateTime83.getEra();
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime83.dayOfMonth();
        org.joda.time.MutableDateTime.Property property92 = mutableDateTime83.weekyear();
        java.util.Locale locale93 = java.util.Locale.FRENCH;
        java.lang.String str94 = property92.getAsShortText(locale93);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket95 = new org.joda.time.format.DateTimeParserBucket(1644572477588L, chronology77, locale93);
        dateTimeParserBucket95.setOffset((java.lang.Integer) 74606);
        org.joda.time.DateTimeZone dateTimeZone98 = dateTimeParserBucket95.getZone();
        dateTimeParserBucket66.setZone(dateTimeZone98);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and mutableDateTime20", (mutableDateTime18.compareTo(mutableDateTime20) == 0) == mutableDateTime18.equals(mutableDateTime20));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test302");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.addWeeks(678);
        boolean boolean22 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getCenturyOfEra();
        mutableDateTime18.setYear(672);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime18.toMutableDateTime();
        int int27 = mutableDateTime18.getMonthOfYear();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.minuteOfHour();
        org.joda.time.Chronology chronology41 = chronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology35.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime18.toMutableDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField44 = chronology35.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and mutableDateTime43", (mutableDateTime18.compareTo(mutableDateTime43) == 0) == mutableDateTime18.equals(mutableDateTime43));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test303");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.lang.String str15 = dateTimeZone12.getName((long) 2);
        java.util.TimeZone timeZone16 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology17 = chronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        org.joda.time.Chronology chronology25 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime18.toMutableDateTime(chronology25);
        boolean boolean29 = mutableDateTime28.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and mutableDateTime27", (mutableDateTime18.compareTo(mutableDateTime27) == 0) == mutableDateTime18.equals(mutableDateTime27));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test304");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        mutableDateTime0.setWeekyear(74416135);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime0.copy();
        org.joda.time.Instant instant8 = mutableDateTime0.toInstant();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime10.set(dateTimeFieldType14, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime10.getZone();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime10.secondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        mutableDateTime21.addHours(59);
        org.joda.time.Chronology chronology26 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfWeek();
        java.util.Locale locale31 = null;
        java.lang.String str32 = property30.getAsText(locale31);
        java.util.Locale locale33 = null;
        int int34 = property30.getMaximumTextLength(locale33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        int int39 = mutableDateTime36.getHourOfDay();
        mutableDateTime36.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        int int45 = dateTimeField44.getMaximumValue();
        mutableDateTime36.setRounding(dateTimeField44);
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.lang.String str49 = dateTimeField44.getAsShortText((int) (byte) 1, locale48);
        java.lang.String str50 = property30.getAsShortText(locale48);
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.lang.String str52 = locale51.getScript();
        java.lang.String str53 = locale48.getDisplayScript(locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale48);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.yearOfEra();
        int int57 = mutableDateTime55.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime55.set(dateTimeFieldType58, 0);
        boolean boolean61 = dateTimeParserBucket54.restoreState((java.lang.Object) dateTimeFieldType58);
        java.lang.String str62 = dateTimeFieldType58.getName();
        mutableDateTime10.set(dateTimeFieldType58, 18);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime10.weekyear();
        mutableDateTime10.setMillisOfSecond(822);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime10.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        mutableDateTime0.add(durationFieldType70, 387);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and instant8", (mutableDateTime7.compareTo(instant8) == 0) == mutableDateTime7.equals(instant8));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test305");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        mutableDateTime0.setWeekyear(74416135);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        org.joda.time.Chronology chronology14 = dateTimeParserBucket12.getChronology();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime16.set(dateTimeFieldType20, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = mutableDateTime16.get(dateTimeFieldType23);
        int int25 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.Instant instant26 = mutableDateTime16.toInstant();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime16.dayOfWeek();
        mutableDateTime16.addWeekyears(796);
        int int30 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfMinute();
        mutableDateTime16.set(dateTimeFieldType31, 9);
        dateTimeParserBucket12.saveField(dateTimeFieldType31, 34839065);
        org.joda.time.Chronology chronology36 = dateTimeParserBucket12.getChronology();
        org.joda.time.Chronology chronology37 = chronology36.withUTC();
        org.joda.time.Chronology chronology38 = chronology37.withUTC();
        org.joda.time.DateTime dateTime39 = mutableDateTime0.toDateTime(chronology38);
        org.joda.time.DurationField durationField40 = chronology38.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime39", (mutableDateTime0.compareTo(dateTime39) == 0) == mutableDateTime0.equals(dateTime39));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test306");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfCeiling();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology19, locale24);
        java.util.Locale locale26 = dateTimeParserBucket25.getLocale();
        java.lang.String str27 = property9.getAsShortText(locale26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime29.set(dateTimeFieldType33, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        int int37 = mutableDateTime29.get(dateTimeFieldType36);
        int int38 = mutableDateTime29.getWeekOfWeekyear();
        org.joda.time.Instant instant39 = mutableDateTime29.toInstant();
        int int40 = mutableDateTime29.getMinuteOfHour();
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        java.lang.Object obj49 = dateTimeParserBucket47.saveState();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        boolean boolean56 = mutableDateTime51.isSupported(dateTimeFieldType55);
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale61, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone65 = dateTimeParserBucket64.getZone();
        org.joda.time.Chronology chronology66 = dateTimeParserBucket64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfHalfday();
        java.util.Locale locale68 = java.util.Locale.FRENCH;
        java.lang.String str69 = locale68.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology66, locale68, (java.lang.Integer) 2022);
        java.util.Locale locale72 = locale68.stripExtensions();
        dateTimeParserBucket47.saveField(dateTimeFieldType55, "", locale68);
        java.lang.String str74 = mutableDateTime29.toString("32", locale68);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        boolean boolean78 = mutableDateTime76.isEqual(readableInstant77);
        mutableDateTime76.addHours(59);
        int int81 = mutableDateTime76.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean83 = mutableDateTime76.isSupported(dateTimeFieldType82);
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime76.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField85 = mutableDateTime76.getRoundingField();
        boolean boolean86 = mutableDateTime29.isAfter((org.joda.time.ReadableInstant) mutableDateTime76);
        long long87 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime29 and instant39", (mutableDateTime29.compareTo(instant39) == 0) == mutableDateTime29.equals(instant39));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test307");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField(0);
        boolean boolean13 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        mutableDateTime16.addHours(59);
        org.joda.time.Chronology chronology21 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology21.getZone();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology21, locale23);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        mutableDateTime12.setChronology(chronology25);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = mutableDateTime29.toString(dateTimeFormatter32);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        java.lang.String str41 = dateTimeZone40.getID();
        java.lang.String str43 = dateTimeZone40.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime29.toMutableDateTime(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(obj27, dateTimeZone40);
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        java.lang.String str55 = dateTimeZone54.toString();
        boolean boolean57 = dateTimeZone54.isStandardOffset((long) 59);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) 4, dateTimeZone54);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) 1, dateTimeZone54);
        long long61 = dateTimeZone40.getMillisKeepLocal(dateTimeZone54, (long) 964);
        java.lang.String str62 = dateTimeZone54.toString();
        long long65 = dateTimeZone54.adjustOffset(778L, false);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(dateTimeZone54);
        long long69 = dateTimeZone54.adjustOffset((long) 773, false);
        java.lang.String str70 = dateTimeZone54.toString();
        org.joda.time.MutableDateTime mutableDateTime71 = mutableDateTime12.toMutableDateTime(dateTimeZone54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime12 and mutableDateTime29", (mutableDateTime12.compareTo(mutableDateTime29) == 0) == mutableDateTime12.equals(mutableDateTime29));
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test308");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        int int15 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime18.set(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = mutableDateTime18.get(dateTimeFieldType25);
        org.joda.time.Instant instant27 = mutableDateTime18.toInstant();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime18);
        java.util.Date date29 = mutableDateTime18.toDate();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime18.add(readableDuration30);
        int int32 = mutableDateTime18.getCenturyOfEra();
        int int33 = mutableDateTime18.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant27", (mutableDateTime1.compareTo(instant27) == 0) == mutableDateTime1.equals(instant27));
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test309");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        mutableDateTime1.addMinutes(135);
        mutableDateTime1.setMillis((long) 205);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.minuteOfHour();
        org.joda.time.Chronology chronology25 = chronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType11.getField(chronology25);
        int int27 = mutableDateTime1.get(dateTimeFieldType11);
        org.joda.time.Instant instant28 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology30, locale31, (java.lang.Integer) 9, 59);
        java.lang.Object obj35 = dateTimeParserBucket34.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket34.saveField(dateTimeFieldType36, 59);
        java.lang.String str39 = dateTimeFieldType36.getName();
        org.joda.time.format.DateTimePrinter dateTimePrinter40 = null;
        org.joda.time.format.DateTimeParser dateTimeParser41 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter40, dateTimeParser41);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeFormatter42.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatter42.getParser();
        boolean boolean45 = dateTimeFormatter42.isParser();
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        org.joda.time.Chronology chronology53 = dateTimeParserBucket51.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.days();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        long long58 = chronology53.add(readablePeriod55, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter42.withChronology(chronology53);
        org.joda.time.DurationField durationField60 = chronology53.seconds();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType36.getField(chronology53);
        org.joda.time.DurationField durationField62 = chronology53.months();
        org.joda.time.Chronology chronology63 = chronology53.withUTC();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.millisOfDay();
        org.joda.time.DateTime dateTime65 = instant28.toDateTime(chronology63);
        org.joda.time.DurationField durationField66 = chronology63.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant28", (mutableDateTime1.compareTo(instant28) == 0) == mutableDateTime1.equals(instant28));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test310");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        long long10 = dateTimeParserBucket7.computeMillis(true);
        org.joda.time.Chronology chronology11 = dateTimeParserBucket7.getChronology();
        org.joda.time.Chronology chronology12 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.yearOfEra();
        boolean boolean14 = durationFieldType1.isSupported(chronology11);
        java.lang.String str15 = durationFieldType1.getName();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime17.set(dateTimeFieldType21, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        int int25 = mutableDateTime17.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime26 = mutableDateTime17.toDateTime();
        int int27 = dateTime26.getMinuteOfHour();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime26.toDateTime(chronology35);
        boolean boolean39 = durationFieldType1.isSupported(chronology35);
        java.lang.String str40 = durationFieldType1.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and dateTime38", (mutableDateTime17.compareTo(dateTime38) == 0) == mutableDateTime17.equals(dateTime38));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test311");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.yearOfEra();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar24 = mutableDateTime21.toCalendar(locale23);
        mutableDateTime21.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int30 = mutableDateTime21.getDayOfMonth();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        mutableDateTime32.addHours(59);
        org.joda.time.Chronology chronology37 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology37.getZone();
        mutableDateTime21.setZone(dateTimeZone38);
        mutableDateTime1.setZoneRetainFields(dateTimeZone38);
        int int42 = dateTimeZone38.getStandardOffset((long) 131);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        mutableDateTime44.addHours(59);
        org.joda.time.Chronology chronology49 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology49.getZone();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        int int55 = mutableDateTime52.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime52.set(dateTimeFieldType56, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.year();
        int int60 = mutableDateTime52.get(dateTimeFieldType59);
        int int61 = mutableDateTime52.getWeekOfWeekyear();
        org.joda.time.Instant instant62 = mutableDateTime52.toInstant();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime52.weekyear();
        int int64 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime52.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime66 = property65.roundHalfFloor();
        int int67 = property65.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime68 = property65.getMutableDateTime();
        boolean boolean69 = dateTimeZone38.equals((java.lang.Object) property65);
        int int71 = dateTimeZone38.getOffset(86400000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant62", (dateTime10.compareTo(instant62) == 0) == dateTime10.equals(instant62));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test312");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        int int15 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime18.set(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = mutableDateTime18.get(dateTimeFieldType25);
        org.joda.time.Instant instant27 = mutableDateTime18.toInstant();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime18);
        java.util.Date date29 = mutableDateTime18.toDate();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:13.902Z");
        boolean boolean32 = mutableDateTime18.isAfter((org.joda.time.ReadableInstant) mutableDateTime31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test313");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale9, (java.lang.Integer) 9, 59);
        java.lang.Object obj13 = dateTimeParserBucket12.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket12.saveField(dateTimeFieldType14, 59);
        boolean boolean17 = mutableDateTime1.isSupported(dateTimeFieldType14);
        int int18 = mutableDateTime1.getDayOfWeek();
        int int19 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        mutableDateTime21.addDays(0);
        int int27 = mutableDateTime21.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime21.weekyear();
        int int29 = mutableDateTime21.getMonthOfYear();
        long long30 = mutableDateTime21.getMillis();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime21.centuryOfEra();
        org.joda.time.Instant instant32 = mutableDateTime21.toInstant();
        boolean boolean33 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        java.util.Date date34 = mutableDateTime1.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and instant32", (mutableDateTime21.compareTo(instant32) == 0) == mutableDateTime21.equals(instant32));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test314");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        int int10 = mutableDateTime9.getYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime9.setZone(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime9.toMutableDateTimeISO();
        org.joda.time.Instant instant14 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime9.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime13 and instant14", (mutableDateTime13.compareTo(instant14) == 0) == mutableDateTime13.equals(instant14));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test315");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:42:10.268Z");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = mutableDateTime3.isEqual(readableInstant4);
        int int6 = mutableDateTime3.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime3.set(dateTimeFieldType7, (int) 'a');
        org.joda.time.Instant instant10 = mutableDateTime3.toInstant();
        int int11 = mutableDateTime3.getDayOfMonth();
        org.joda.time.Chronology chronology12 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.monthOfYear();
        int int14 = mutableDateTime1.get(dateTimeField13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and instant10", (mutableDateTime3.compareTo(instant10) == 0) == mutableDateTime3.equals(instant10));
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test316");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.copy();
        mutableDateTime1.setWeekyear(34812148);
        java.lang.String str11 = mutableDateTime1.toString("434");
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime1.add(readableDuration12, 415);
        int int15 = mutableDateTime1.getMonthOfYear();
        org.joda.time.DateTime dateTime16 = mutableDateTime1.toDateTime();
        boolean boolean17 = dateTime16.isBeforeNow();
        org.joda.time.Instant instant18 = dateTime16.toInstant();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.addHours((int) (short) 0);
        mutableDateTime19.addWeekyears((int) 'a');
        mutableDateTime19.addWeeks(74432048);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        int int38 = mutableDateTime27.getMonthOfYear();
        boolean boolean39 = mutableDateTime19.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        int int40 = instant18.compareTo((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime19.copy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant18", (mutableDateTime1.compareTo(instant18) == 0) == mutableDateTime1.equals(instant18));
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test317");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone14);
        int int19 = dateTimeZone14.getOffsetFromLocal((long) 253);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone14.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        int int36 = mutableDateTime33.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime33.set(dateTimeFieldType37, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        int int41 = mutableDateTime33.get(dateTimeFieldType40);
        org.joda.time.DateTime dateTime42 = mutableDateTime33.toDateTime();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        int int47 = mutableDateTime44.getHourOfDay();
        mutableDateTime44.addYears(0);
        mutableDateTime33.setDate((org.joda.time.ReadableInstant) mutableDateTime44);
        boolean boolean51 = mutableDateTime31.isBefore((org.joda.time.ReadableInstant) mutableDateTime44);
        int int52 = mutableDateTime44.getCenturyOfEra();
        org.joda.time.Instant instant53 = mutableDateTime44.toInstant();
        int int54 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) instant53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        int int59 = mutableDateTime56.getHourOfDay();
        mutableDateTime56.addDays(0);
        int int62 = mutableDateTime56.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime56.weekyear();
        int int64 = mutableDateTime56.getMonthOfYear();
        long long65 = mutableDateTime56.getMillis();
        org.joda.time.MutableDateTime mutableDateTime66 = mutableDateTime56.toMutableDateTime();
        int int67 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) mutableDateTime56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime31", (mutableDateTime1.compareTo(mutableDateTime31) == 0) == mutableDateTime1.equals(mutableDateTime31));
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test318");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        int int3 = mutableDateTime2.getDayOfWeek();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket9.getZone();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.minuteOfHour();
        long long20 = chronology11.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.DurationField durationField21 = chronology11.weeks();
        org.joda.time.DateTime dateTime22 = mutableDateTime2.toDateTime(chronology11);
        mutableDateTime2.addWeeks(74486);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime22", (mutableDateTime1.compareTo(dateTime22) == 0) == mutableDateTime1.equals(dateTime22));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test319");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.add(100);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.addWrapField(10);
        mutableDateTime16.setMillis((long) 779);
        long long19 = mutableDateTime16.getMillis();
        mutableDateTime16.addDays(35651);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology29.centuries();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.era();
        org.joda.time.DateTime dateTime33 = mutableDateTime16.toDateTime(chronology29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        int int38 = mutableDateTime35.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime35.set(dateTimeFieldType39, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        int int43 = mutableDateTime35.get(dateTimeFieldType42);
        org.joda.time.DateTime dateTime44 = mutableDateTime35.toDateTime();
        java.util.Locale locale45 = null;
        java.util.Calendar calendar46 = mutableDateTime35.toCalendar(locale45);
        mutableDateTime35.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime35.millisOfDay();
        mutableDateTime35.addMonths(281);
        int int52 = mutableDateTime16.compareTo((org.joda.time.ReadableInstant) mutableDateTime35);
        boolean boolean53 = mutableDateTime10.isAfter((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        boolean boolean57 = mutableDateTime55.isEqual(readableInstant56);
        mutableDateTime55.addHours(59);
        org.joda.time.Chronology chronology60 = mutableDateTime55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = chronology60.getZone();
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology60);
        org.joda.time.Chronology chronology63 = chronology60.withUTC();
        org.joda.time.DurationField durationField64 = chronology63.centuries();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.dayOfWeek();
        org.joda.time.Chronology chronology67 = chronology63.withUTC();
        org.joda.time.DateTimeField dateTimeField68 = chronology63.year();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime35, chronology63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and dateTime33", (mutableDateTime11.compareTo(dateTime33) == 0) == mutableDateTime11.equals(dateTime33));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test320");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology7.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField8 and durationField11", Math.signum(durationField8.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField8)));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test321");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.minuteOfDay();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.yearOfEra();
        java.lang.String str17 = property16.getAsShortText();
        int int18 = property16.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField19 = property16.getField();
        org.joda.time.ReadablePartial readablePartial20 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfYear();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.year();
        org.joda.time.DurationField durationField32 = chronology29.days();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType21.getField(chronology29);
        org.joda.time.ReadablePartial readablePartial34 = null;
        int int35 = dateTimeField33.getMinimumValue(readablePartial34);
        org.joda.time.ReadablePartial readablePartial36 = null;
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.weekyear();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial48 = null;
        int[] intArray49 = null;
        int int50 = dateTimeField47.getMinimumValue(readablePartial48, intArray49);
        long long52 = dateTimeField47.remainder((long) 865);
        org.joda.time.ReadablePartial readablePartial53 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        int int57 = dateTimeField56.getMaximumValue();
        int int60 = dateTimeField56.getDifference((long) 10, (long) 'a');
        int int62 = dateTimeField56.getMaximumValue((long) (byte) 1);
        java.lang.String str64 = dateTimeField56.getAsShortText((long) 5);
        org.joda.time.ReadablePartial readablePartial65 = null;
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale68, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone72 = dateTimeParserBucket71.getZone();
        org.joda.time.Chronology chronology73 = dateTimeParserBucket71.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.days();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.dayOfYear();
        org.joda.time.ReadablePartial readablePartial76 = null;
        int[] intArray82 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int83 = dateTimeField75.getMinimumValue(readablePartial76, intArray82);
        int int84 = dateTimeField56.getMaximumValue(readablePartial65, intArray82);
        int int85 = dateTimeField47.getMinimumValue(readablePartial53, intArray82);
        int int86 = dateTimeField33.getMaximumValue(readablePartial36, intArray82);
        int int87 = dateTimeField19.getMinimumValue(readablePartial20, intArray82);
        int[] intArray89 = dateTimeField12.add(readablePartial13, 208, intArray82, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField32", Math.signum(durationField11.compareTo(durationField32)) == -Math.signum(durationField32.compareTo(durationField11)));
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test322");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        long long10 = dateTimeParserBucket7.computeMillis(true);
        org.joda.time.Chronology chronology11 = dateTimeParserBucket7.getChronology();
        org.joda.time.Chronology chronology12 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.yearOfEra();
        boolean boolean14 = durationFieldType1.isSupported(chronology11);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        long long23 = dateTimeParserBucket20.computeMillis(true);
        org.joda.time.Chronology chronology24 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        java.lang.String str30 = dateTimeZone27.getName((long) 2);
        java.util.TimeZone timeZone31 = dateTimeZone27.toTimeZone();
        org.joda.time.Chronology chronology32 = chronology24.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.halfdayOfDay();
        org.joda.time.DurationField durationField35 = chronology32.hours();
        org.joda.time.DurationField durationField36 = durationFieldType1.getField(chronology32);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime41 = property39.addWrapField(0);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.dayOfWeek();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime43.yearOfCentury();
        mutableDateTime43.setMillisOfDay(7);
        long long48 = property39.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime43);
        mutableDateTime43.setMillisOfDay(10);
        org.joda.time.Chronology chronology51 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.monthOfYear();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.dayOfWeek();
        java.util.Locale locale56 = new java.util.Locale("", "2022-02-11t09:41:20.409-00:00:00.001");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 34866241, chronology51, locale56);
        boolean boolean58 = durationFieldType1.isSupported(chronology51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField35 and durationField36", Math.signum(durationField35.compareTo(durationField36)) == -Math.signum(durationField36.compareTo(durationField35)));
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test323");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.halfdayOfDay();
        org.joda.time.DurationField durationField15 = durationFieldType1.getField(chronology9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        java.util.Locale locale21 = null;
        java.util.Calendar calendar22 = mutableDateTime17.toCalendar(locale21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime17.add(readablePeriod23);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology26, locale27, (java.lang.Integer) 9, 59);
        int int31 = dateTimeParserBucket30.getOffset();
        java.lang.Integer int32 = dateTimeParserBucket30.getPivotYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        int int39 = mutableDateTime36.getHourOfDay();
        mutableDateTime36.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        int int45 = dateTimeField44.getMaximumValue();
        mutableDateTime36.setRounding(dateTimeField44);
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.lang.String str49 = dateTimeField44.getAsShortText((int) (byte) 1, locale48);
        dateTimeParserBucket30.saveField(dateTimeFieldType33, "2022-02-11T09:40:24.743Z", locale48);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime17.property(dateTimeFieldType33);
        int int52 = mutableDateTime17.getMillisOfSecond();
        org.joda.time.format.DateTimePrinter dateTimePrinter53 = null;
        org.joda.time.format.DateTimeParser dateTimeParser54 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter53, dateTimeParser54);
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeFormatter55.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser57 = dateTimeFormatter55.getParser();
        boolean boolean58 = dateTimeFormatter55.isParser();
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale61, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone65 = dateTimeParserBucket64.getZone();
        org.joda.time.Chronology chronology66 = dateTimeParserBucket64.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.days();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        long long71 = chronology66.add(readablePeriod68, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter55.withChronology(chronology66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter72.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter73.withPivotYear(211);
        org.joda.time.Chronology chronology76 = dateTimeFormatter73.getChronolgy();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.clockhourOfDay();
        long long81 = chronology76.add((long) 216, (long) 598, 271);
        org.joda.time.DateTimeField dateTimeField82 = chronology76.dayOfMonth();
        org.joda.time.DateTime dateTime83 = mutableDateTime17.toDateTime(chronology76);
        org.joda.time.DurationField durationField84 = durationFieldType1.getField(chronology76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and dateTime83", (mutableDateTime17.compareTo(dateTime83) == 0) == mutableDateTime17.equals(dateTime83));
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test324");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.days();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.dayOfMonth();
        org.joda.time.DurationField durationField32 = chronology27.centuries();
        org.joda.time.DateTimeField dateTimeField33 = chronology27.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime1.toMutableDateTime(chronology27);
        org.joda.time.DurationField durationField35 = chronology27.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime34", (mutableDateTime1.compareTo(mutableDateTime34) == 0) == mutableDateTime1.equals(mutableDateTime34));
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test325");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        java.lang.Integer int7 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfHalfday();
        org.joda.time.Chronology chronology11 = chronology8.withUTC();
        org.joda.time.DurationField durationField12 = chronology11.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField12, and durationField9", !(durationField9.compareTo(durationField12) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField12.compareTo(durationField9))));
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test326");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        mutableDateTime1.setMillisOfDay(411);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        mutableDateTime13.addHours(59);
        org.joda.time.Chronology chronology18 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology18.getZone();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime21.set(dateTimeFieldType25, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        int int29 = mutableDateTime21.get(dateTimeFieldType28);
        int int30 = mutableDateTime21.getWeekOfWeekyear();
        org.joda.time.Instant instant31 = mutableDateTime21.toInstant();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime21.weekyear();
        int int33 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime11.setZone(dateTimeZone19);
        boolean boolean36 = dateTimeZone19.equals((java.lang.Object) "2022-02-11T09:41:49.023-00:00:00.001");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and instant31", (mutableDateTime21.compareTo(instant31) == 0) == mutableDateTime21.equals(instant31));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test327");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        int int34 = mutableDateTime33.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(0);
        mutableDateTime33.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        org.joda.time.Chronology chronology45 = dateTimeParserBucket43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfHalfday();
        org.joda.time.DurationField durationField47 = chronology45.days();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.millisOfSecond();
        org.joda.time.DateTime dateTime49 = mutableDateTime33.toDateTime(chronology45);
        org.joda.time.DateTimeField dateTimeField50 = chronology45.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test328");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        int int7 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Instant instant8 = mutableDateTime1.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        org.joda.time.Chronology chronology17 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.minuteOfHour();
        org.joda.time.Chronology chronology23 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType9.getField(chronology23);
        boolean boolean25 = instant8.isSupported(dateTimeFieldType9);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getMillisOfDay();
        mutableDateTime27.addDays(22);
        int int33 = mutableDateTime27.getRoundingMode();
        int int34 = mutableDateTime27.getWeekOfWeekyear();
        org.joda.time.Chronology chronology35 = mutableDateTime27.getChronology();
        boolean boolean36 = dateTimeFieldType9.isSupported(chronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant8", (mutableDateTime1.compareTo(instant8) == 0) == mutableDateTime1.equals(instant8));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test329");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        mutableDateTime1.setHourOfDay(0);
        mutableDateTime1.addDays(34918235);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.days();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.minuteOfHour();
        org.joda.time.Chronology chronology27 = chronology21.withUTC();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.Chronology chronology30 = null;
        mutableDateTime29.setChronology(chronology30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime29.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime29.getZone();
        org.joda.time.Chronology chronology34 = chronology21.withZone(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime1.toMutableDateTime(chronology21);
        int int36 = mutableDateTime35.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType37.getDurationType();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale42, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket45.getZone();
        long long48 = dateTimeParserBucket45.computeMillis(true);
        org.joda.time.Chronology chronology49 = dateTimeParserBucket45.getChronology();
        org.joda.time.Chronology chronology50 = chronology49.withUTC();
        boolean boolean51 = durationFieldType38.isSupported(chronology50);
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.year();
        mutableDateTime35.setChronology(chronology50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime29 and mutableDateTime52", (mutableDateTime29.compareTo(mutableDateTime52) == 0) == mutableDateTime29.equals(mutableDateTime52));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test330");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology13 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        mutableDateTime14.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.yearOfEra();
        mutableDateTime14.setMillisOfDay(34808947);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeFormatter22.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatter22.getParser();
        boolean boolean25 = dateTimeFormatter22.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter22.withOffsetParsed();
        int int27 = dateTimeFormatter22.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter22.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter29.withZoneUTC();
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter29.withLocale(locale31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        int int37 = mutableDateTime34.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime34.set(dateTimeFieldType38, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        int int42 = mutableDateTime34.get(dateTimeFieldType41);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale45, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket48.getZone();
        java.lang.String str50 = dateTimeZone49.toString();
        org.joda.time.DateTime dateTime51 = mutableDateTime34.toDateTime(dateTimeZone49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter29.withZone(dateTimeZone49);
        int int54 = dateTimeZone49.getOffset((long) 135);
        mutableDateTime14.setZoneRetainFields(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.yearOfEra();
        java.util.Locale locale58 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar59 = mutableDateTime56.toCalendar(locale58);
        mutableDateTime56.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int65 = mutableDateTime56.getDayOfMonth();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        boolean boolean69 = mutableDateTime67.isEqual(readableInstant68);
        int int70 = mutableDateTime67.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime67.set(dateTimeFieldType71, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.year();
        int int75 = mutableDateTime67.get(dateTimeFieldType74);
        java.util.Date date76 = mutableDateTime67.toDate();
        org.joda.time.DateTimeZone dateTimeZone77 = mutableDateTime67.getZone();
        mutableDateTime56.setZoneRetainFields(dateTimeZone77);
        mutableDateTime14.setZone(dateTimeZone77);
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime1.toMutableDateTime(dateTimeZone77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime34", (instant11.compareTo(mutableDateTime34) == 0) == instant11.equals(mutableDateTime34));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test331");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        mutableDateTime16.addHours(59);
        int int21 = mutableDateTime16.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = mutableDateTime23.toString(dateTimeFormatter26);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) (byte) 0);
        mutableDateTime23.setZoneRetainFields(dateTimeZone34);
        mutableDateTime16.setZone(dateTimeZone34);
        java.util.TimeZone timeZone39 = dateTimeZone34.toTimeZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone34);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundFloor();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale45, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology50 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        long long55 = chronology50.add(readablePeriod52, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now(chronology50);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(chronology64);
        org.joda.time.DateTime dateTime67 = mutableDateTime56.toDateTime(chronology64);
        int int68 = dateTime67.getSecondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime67.toMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar70 = mutableDateTime69.toGregorianCalendar();
        mutableDateTime42.setDate((org.joda.time.ReadableInstant) mutableDateTime69);
        mutableDateTime42.add((long) 972);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime23 and mutableDateTime56", (mutableDateTime23.compareTo(mutableDateTime56) == 0) == mutableDateTime23.equals(mutableDateTime56));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test332");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.minuteOfHour();
        int int8 = mutableDateTime2.getSecondOfDay();
        mutableDateTime2.addMinutes(59);
        int int11 = mutableDateTime2.getYear();
        mutableDateTime2.addMillis(97545);
        long long14 = mutableDateTime2.getMillis();
        int int15 = mutableDateTime2.getCenturyOfEra();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfWeek();
        org.joda.time.DateTime dateTime26 = mutableDateTime2.toDateTime(chronology23);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket32.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.hours();
        org.joda.time.DurationField durationField36 = chronology34.centuries();
        org.joda.time.DurationField durationField37 = chronology34.centuries();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.millisOfSecond();
        java.util.Locale locale42 = new java.util.Locale("2022-02-11T09:40:08.213Z", "2022-02-11T09:40:32.831Z");
        java.lang.String str43 = dateTimeField38.getAsText(366, locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) 472, chronology23, locale42, (java.lang.Integer) 96, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and dateTime26", (mutableDateTime2.compareTo(dateTime26) == 0) == mutableDateTime2.equals(dateTime26));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test333");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale9, (java.lang.Integer) 9, 59);
        java.lang.Object obj13 = dateTimeParserBucket12.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket12.saveField(dateTimeFieldType14, 59);
        boolean boolean17 = mutableDateTime1.isSupported(dateTimeFieldType14);
        int int18 = mutableDateTime1.getDayOfWeek();
        int int19 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        mutableDateTime21.addDays(0);
        int int27 = mutableDateTime21.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime21.weekyear();
        int int29 = mutableDateTime21.getMonthOfYear();
        long long30 = mutableDateTime21.getMillis();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime21.centuryOfEra();
        org.joda.time.Instant instant32 = mutableDateTime21.toInstant();
        boolean boolean33 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 1, (int) '#');
        dateTimeParserBucket40.setOffset(34852);
        org.joda.time.Chronology chronology43 = dateTimeParserBucket40.getChronology();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((-810L), chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        int int48 = dateTimeField47.getMaximumValue();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = locale50.getISO3Country();
        java.lang.String str52 = dateTimeField47.getAsShortText(0L, locale50);
        org.joda.time.DurationField durationField53 = dateTimeField47.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = dateTimeField47.getType();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getRangeDurationType();
        int int56 = mutableDateTime44.get(dateTimeFieldType54);
        boolean boolean57 = mutableDateTime1.isSupported(dateTimeFieldType54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and instant32", (mutableDateTime21.compareTo(instant32) == 0) == mutableDateTime21.equals(instant32));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test334");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        mutableDateTime16.addHours(59);
        int int21 = mutableDateTime16.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = mutableDateTime23.toString(dateTimeFormatter26);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) (byte) 0);
        mutableDateTime23.setZoneRetainFields(dateTimeZone34);
        mutableDateTime16.setZone(dateTimeZone34);
        java.util.TimeZone timeZone39 = dateTimeZone34.toTimeZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone34.isLocalDateTimeGap(localDateTime41);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale45, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology50 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = mutableDateTime54.isEqual(readableInstant55);
        int int57 = mutableDateTime54.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime54.set(dateTimeFieldType58, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        int int62 = mutableDateTime54.get(dateTimeFieldType61);
        org.joda.time.DateTime dateTime63 = mutableDateTime54.toDateTime();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        boolean boolean67 = mutableDateTime65.isEqual(readableInstant66);
        int int68 = mutableDateTime65.getHourOfDay();
        mutableDateTime65.addYears(0);
        mutableDateTime54.setDate((org.joda.time.ReadableInstant) mutableDateTime65);
        boolean boolean72 = mutableDateTime52.isBefore((org.joda.time.ReadableInstant) mutableDateTime65);
        int int73 = mutableDateTime65.getCenturyOfEra();
        mutableDateTime65.addMonths(33);
        boolean boolean77 = mutableDateTime65.equals((java.lang.Object) "2022-02-11T09:40:47.947Z");
        int int78 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) mutableDateTime65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime52", (mutableDateTime1.compareTo(mutableDateTime52) == 0) == mutableDateTime1.equals(mutableDateTime52));
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test335");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.setYear(74411);
        int int5 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getHourOfDay();
        mutableDateTime7.addYears(0);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        mutableDateTime7.setZoneRetainFields(dateTimeZone19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        boolean boolean27 = mutableDateTime22.isSupported(dateTimeFieldType26);
        int int28 = mutableDateTime7.get(dateTimeFieldType26);
        mutableDateTime7.setWeekyear(74419);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        long long39 = dateTimeParserBucket36.computeMillis(true);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.DurationField durationField42 = chronology40.years();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime7.toMutableDateTime(chronology40);
        boolean boolean44 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        int int45 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addYears(867);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and mutableDateTime43", (mutableDateTime7.compareTo(mutableDateTime43) == 0) == mutableDateTime7.equals(mutableDateTime43));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test336");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = mutableDateTime2.toString(dateTimeFormatter5);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        java.lang.String str16 = dateTimeZone13.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime2.toMutableDateTime(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(obj0, dateTimeZone13);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.year();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar23 = mutableDateTime20.toCalendar(locale22);
        mutableDateTime20.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime20.weekyear();
        mutableDateTime20.addHours(930);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.days();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.dayOfMonth();
        org.joda.time.DurationField durationField44 = chronology39.centuries();
        mutableDateTime20.setChronology(chronology39);
        org.joda.time.DateTimeField dateTimeField46 = chronology39.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = mutableDateTime49.isEqual(readableInstant50);
        int int52 = mutableDateTime49.getHourOfDay();
        java.util.Locale locale53 = null;
        java.util.Calendar calendar54 = mutableDateTime49.toCalendar(locale53);
        int int55 = mutableDateTime49.getCenturyOfEra();
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeParserBucket61.getZone();
        java.lang.String str64 = dateTimeZone62.getNameKey((long) (byte) 0);
        mutableDateTime49.setZoneRetainFields(dateTimeZone62);
        org.joda.time.DateTime dateTime66 = mutableDateTime47.toDateTime(dateTimeZone62);
        boolean boolean67 = mutableDateTime18.isEqual((org.joda.time.ReadableInstant) mutableDateTime47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar23 and calendar54", (calendar23.compareTo(calendar54) == 0) == calendar23.equals(calendar54));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test337");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        java.lang.Object obj21 = dateTimeParserBucket19.saveState();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology38, locale40, (java.lang.Integer) 2022);
        java.util.Locale locale44 = locale40.stripExtensions();
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "", locale40);
        java.lang.String str46 = mutableDateTime1.toString("32", locale40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        int int51 = mutableDateTime48.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime48.set(dateTimeFieldType52, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone55 = mutableDateTime48.getZone();
        long long57 = dateTimeZone55.nextTransition((long) 59);
        java.lang.String str59 = dateTimeZone55.getName((long) (short) 0);
        java.lang.String str60 = dateTimeZone55.getID();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        boolean boolean65 = mutableDateTime63.isEqual(readableInstant64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        boolean boolean69 = mutableDateTime67.isEqual(readableInstant68);
        mutableDateTime67.addHours(59);
        org.joda.time.Chronology chronology72 = mutableDateTime67.getChronology();
        org.joda.time.MutableDateTime mutableDateTime73 = mutableDateTime67.toMutableDateTime();
        int int74 = mutableDateTime67.getMinuteOfHour();
        mutableDateTime67.addDays(831);
        boolean boolean77 = mutableDateTime63.isBefore((org.joda.time.ReadableInstant) mutableDateTime67);
        java.util.Locale locale78 = java.util.Locale.CANADA;
        java.util.Calendar calendar79 = mutableDateTime67.toCalendar(locale78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType80.getField(chronology81);
        int int83 = dateTimeField82.getMaximumValue();
        int int86 = dateTimeField82.getDifference((long) 10, (long) 'a');
        int int88 = dateTimeField82.getLeapAmount((-1L));
        java.util.Locale locale90 = java.util.Locale.ITALY;
        java.lang.String str91 = dateTimeField82.getAsText((long) 340, locale90);
        java.lang.String str92 = locale78.getDisplayVariant(locale90);
        java.lang.String str93 = dateTimeZone55.getShortName((long) 74427617, locale90);
        java.lang.String str94 = locale40.getDisplayScript(locale90);
        java.util.Set<java.lang.String> strSet95 = locale90.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test338");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        mutableDateTime1.setMillis((long) 232);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.secondOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime16.set(dateTimeFieldType20, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = mutableDateTime16.get(dateTimeFieldType23);
        org.joda.time.DateTime dateTime25 = mutableDateTime16.toDateTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) mutableDateTime27);
        int int34 = mutableDateTime16.getEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfWeek();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        mutableDateTime39.addHours(59);
        int int44 = mutableDateTime39.getMillisOfSecond();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology46, locale47, (java.lang.Integer) 9, 59);
        java.lang.Object obj51 = dateTimeParserBucket50.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket50.saveField(dateTimeFieldType52, 59);
        boolean boolean55 = mutableDateTime39.isSupported(dateTimeFieldType52);
        int int56 = mutableDateTime36.compareTo((org.joda.time.ReadableInstant) mutableDateTime39);
        int int57 = mutableDateTime39.getDayOfMonth();
        mutableDateTime39.addYears(2922789);
        boolean boolean60 = mutableDateTime16.isAfter((org.joda.time.ReadableInstant) mutableDateTime39);
        mutableDateTime39.setYear(489);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket(0L, chronology65, locale66, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone70 = dateTimeParserBucket69.getZone();
        org.joda.time.Chronology chronology71 = dateTimeParserBucket69.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.monthOfYear();
        org.joda.time.DateTimeField dateTimeField73 = chronology71.weekOfWeekyear();
        mutableDateTime39.setChronology(chronology71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime16", (instant11.compareTo(mutableDateTime16) == 0) == instant11.equals(mutableDateTime16));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test339");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime4 = property1.add((long) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfEra();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar8 = mutableDateTime5.toCalendar(locale7);
        mutableDateTime5.addMinutes((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int12 = mutableDateTime5.get(dateTimeFieldType11);
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.dayOfMonth();
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology22, locale27);
        mutableDateTime5.setChronology(chronology22);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField31 = chronology22.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and mutableDateTime30", (mutableDateTime0.compareTo(mutableDateTime30) == 0) == mutableDateTime0.equals(mutableDateTime30));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test340");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        int int2 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        int int9 = mutableDateTime4.getMillisOfSecond();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = mutableDateTime11.toString(dateTimeFormatter14);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) (byte) 0);
        mutableDateTime11.setZoneRetainFields(dateTimeZone22);
        mutableDateTime4.setZone(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int32 = dateTimeField30.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.dayOfWeek();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property36.getAsText(locale37);
        java.util.Locale locale39 = null;
        int int40 = property36.getMaximumTextLength(locale39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        mutableDateTime42.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        int int51 = dateTimeField50.getMaximumValue();
        mutableDateTime42.setRounding(dateTimeField50);
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = dateTimeField50.getAsShortText((int) (byte) 1, locale54);
        java.lang.String str56 = property36.getAsShortText(locale54);
        java.lang.String str57 = dateTimeField30.getAsShortText(1L, locale54);
        java.util.Set<java.lang.Character> charSet58 = locale54.getExtensionKeys();
        java.lang.String str59 = dateTimeZone22.getShortName((long) 6, locale54);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime0.toMutableDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = mutableDateTime62.isEqual(readableInstant63);
        mutableDateTime62.addHours(59);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime62.minuteOfHour();
        int int68 = mutableDateTime62.getSecondOfDay();
        mutableDateTime62.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology71 = mutableDateTime62.getChronology();
        int int72 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) mutableDateTime62);
        java.util.Locale locale74 = java.util.Locale.CHINESE;
        java.lang.String str75 = dateTimeZone22.getShortName((long) 8223, locale74);
        org.joda.time.MutableDateTime mutableDateTime76 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        boolean boolean78 = mutableDateTime76.isEqual((long) 74510977);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetMillis(94);
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime((long) 74449, dateTimeZone81);
        org.joda.time.MutableDateTime mutableDateTime83 = mutableDateTime76.toMutableDateTime(dateTimeZone81);
        long long86 = dateTimeZone81.convertLocalToUTC(1643383820871L, true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and mutableDateTime83", (mutableDateTime0.compareTo(mutableDateTime83) == 0) == mutableDateTime0.equals(mutableDateTime83));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test341");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        boolean boolean10 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        java.util.Calendar calendar28 = mutableDateTime14.toCalendar(locale26);
        java.lang.String str29 = dateTimeField4.getAsShortText(readablePartial11, (int) ' ', locale26);
        int int30 = property1.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = property1.roundCeiling();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime33.toString(dateTimeFormatter36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        java.lang.String str47 = dateTimeZone44.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime33.toMutableDateTime(dateTimeZone44);
        boolean boolean49 = mutableDateTime31.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        mutableDateTime54.addHours((int) (short) 0);
        mutableDateTime54.addWeekyears((int) 'a');
        java.lang.String str60 = mutableDateTime54.toString("0");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = mutableDateTime62.isEqual(readableInstant63);
        int int65 = mutableDateTime62.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime62.set(dateTimeFieldType66, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        int int70 = mutableDateTime62.get(dateTimeFieldType69);
        mutableDateTime54.set(dateTimeFieldType69, 5);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime51.property(dateTimeFieldType69);
        boolean boolean74 = mutableDateTime48.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime48.setWeekyear(377);
        boolean boolean77 = mutableDateTime48.isBeforeNow();
        mutableDateTime48.setYear(9);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime(chronology80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        boolean boolean83 = mutableDateTime81.isEqual(readableInstant82);
        mutableDateTime81.addHours(59);
        org.joda.time.Chronology chronology86 = mutableDateTime81.getChronology();
        org.joda.time.MutableDateTime mutableDateTime87 = mutableDateTime81.toMutableDateTime();
        mutableDateTime87.setTime((long) 381);
        org.joda.time.Instant instant90 = mutableDateTime87.toInstant();
        boolean boolean91 = mutableDateTime48.isEqual((org.joda.time.ReadableInstant) instant90);
        int int92 = mutableDateTime48.getWeekOfWeekyear();
        int int93 = mutableDateTime48.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime87 and instant90", (mutableDateTime87.compareTo(instant90) == 0) == mutableDateTime87.equals(instant90));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test342");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.addHours((int) (short) 0);
        mutableDateTime19.addWeekyears((int) 'a');
        java.lang.String str25 = mutableDateTime19.toString("0");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime27.set(dateTimeFieldType31, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        int int35 = mutableDateTime27.get(dateTimeFieldType34);
        mutableDateTime19.set(dateTimeFieldType34, 5);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime16.property(dateTimeFieldType34);
        boolean boolean39 = mutableDateTime1.isSupported(dateTimeFieldType34);
        java.lang.String str40 = dateTimeFieldType34.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime27", (instant11.compareTo(mutableDateTime27) == 0) == instant11.equals(mutableDateTime27));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test343");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long9 = dateTimeParserBucket5.computeMillis(true, "237");
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 645);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.Instant instant24 = mutableDateTime14.toInstant();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime14.dayOfWeek();
        mutableDateTime14.addWeekyears(796);
        int int28 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfMinute();
        mutableDateTime14.set(dateTimeFieldType29, 9);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType29.getRangeDurationType();
        dateTimeParserBucket5.saveField(dateTimeFieldType29, 846);
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = null;
        org.joda.time.format.DateTimeParser dateTimeParser36 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter35, dateTimeParser36);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeFormatter37.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser39 = dateTimeFormatter37.getParser();
        boolean boolean40 = dateTimeFormatter37.isParser();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology42, locale43, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeParserBucket46.getZone();
        org.joda.time.Chronology chronology48 = dateTimeParserBucket46.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.days();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        long long53 = chronology48.add(readablePeriod50, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter37.withChronology(chronology48);
        boolean boolean55 = dateTimeFormatter37.isParser();
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeParserBucket61.getZone();
        java.lang.Object obj63 = dateTimeParserBucket61.saveState();
        long long64 = dateTimeParserBucket61.computeMillis();
        java.lang.Object obj65 = dateTimeParserBucket61.saveState();
        org.joda.time.DateTimeZone dateTimeZone66 = dateTimeParserBucket61.getZone();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        boolean boolean70 = mutableDateTime68.isEqual(readableInstant69);
        int int71 = mutableDateTime68.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime68.set(dateTimeFieldType72, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.year();
        int int76 = mutableDateTime68.get(dateTimeFieldType75);
        java.util.Date date77 = mutableDateTime68.toDate();
        org.joda.time.DateTimeZone dateTimeZone78 = mutableDateTime68.getZone();
        dateTimeParserBucket61.setZone(dateTimeZone78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter37.withZone(dateTimeZone78);
        dateTimeParserBucket5.setZone(dateTimeZone78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and mutableDateTime68", (instant24.compareTo(mutableDateTime68) == 0) == instant24.equals(mutableDateTime68));
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test344");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        int int11 = mutableDateTime1.getSecondOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        boolean boolean18 = mutableDateTime13.isSupported(dateTimeFieldType17);
        mutableDateTime13.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime22.set(dateTimeFieldType26, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        int int30 = mutableDateTime22.get(dateTimeFieldType29);
        org.joda.time.DateTime dateTime31 = mutableDateTime22.toDateTime();
        java.util.Locale locale32 = null;
        java.util.Calendar calendar33 = mutableDateTime22.toCalendar(locale32);
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime22.getZone();
        mutableDateTime13.setZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        int int41 = mutableDateTime38.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime38.set(dateTimeFieldType42, (int) 'a');
        mutableDateTime38.setMillis(5L);
        int int47 = mutableDateTime38.getWeekOfWeekyear();
        mutableDateTime38.addYears(34830);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime51.set(dateTimeFieldType55, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone58 = mutableDateTime51.getZone();
        long long60 = dateTimeZone58.nextTransition((long) 59);
        java.lang.String str62 = dateTimeZone58.getName((long) (short) 0);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = mutableDateTime64.isEqual(readableInstant65);
        mutableDateTime64.addHours(59);
        org.joda.time.Chronology chronology69 = mutableDateTime64.getChronology();
        org.joda.time.MutableDateTime mutableDateTime70 = mutableDateTime64.toMutableDateTime();
        int int71 = mutableDateTime64.getYear();
        int int72 = dateTimeZone58.getOffset((org.joda.time.ReadableInstant) mutableDateTime64);
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(0L, chronology74, locale75, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone79 = dateTimeParserBucket78.getZone();
        long long81 = dateTimeParserBucket78.computeMillis(true);
        org.joda.time.Chronology chronology82 = dateTimeParserBucket78.getChronology();
        org.joda.time.MutableDateTime mutableDateTime83 = mutableDateTime64.toMutableDateTime(chronology82);
        mutableDateTime38.setMillis((org.joda.time.ReadableInstant) mutableDateTime83);
        int int85 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) mutableDateTime83);
        org.joda.time.DateTime dateTime86 = mutableDateTime1.toDateTime(dateTimeZone34);
        long long88 = dateTimeZone34.convertUTCToLocal(1644572516059L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime38 and mutableDateTime83", (mutableDateTime38.compareTo(mutableDateTime83) == 0) == mutableDateTime38.equals(mutableDateTime83));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test345");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.copy();
        mutableDateTime1.setWeekyear(34812148);
        java.lang.String str11 = mutableDateTime1.toString("434");
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime1.add(readableDuration12, 415);
        int int15 = mutableDateTime1.getMonthOfYear();
        org.joda.time.DateTime dateTime16 = mutableDateTime1.toDateTime();
        boolean boolean17 = dateTime16.isBeforeNow();
        org.joda.time.Instant instant18 = dateTime16.toInstant();
        int int19 = dateTime16.getYearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant18", (mutableDateTime1.compareTo(instant18) == 0) == mutableDateTime1.equals(instant18));
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test346");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        mutableDateTime1.setMillisOfDay(411);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime1);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.addWrapField(0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime16.set(dateTimeFieldType20, (int) 'a');
        org.joda.time.DateTime dateTime23 = mutableDateTime16.toDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime25.set(dateTimeFieldType29, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        int int33 = mutableDateTime25.get(dateTimeFieldType32);
        java.util.Date date34 = mutableDateTime25.toDate();
        mutableDateTime25.addDays((int) (byte) -1);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        java.lang.Integer int44 = dateTimeParserBucket42.getPivotYear();
        org.joda.time.Chronology chronology45 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        dateTimeParserBucket42.saveField(dateTimeFieldType46, "2022-02-11T09:40:23.419Z", locale48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime25.property(dateTimeFieldType46);
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(0L, chronology52, locale53, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone57 = dateTimeParserBucket56.getZone();
        org.joda.time.Chronology chronology58 = dateTimeParserBucket56.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.hourOfHalfday();
        org.joda.time.DurationField durationField60 = chronology58.centuries();
        org.joda.time.DateTimeZone dateTimeZone61 = chronology58.getZone();
        java.lang.String str63 = dateTimeZone61.getName((long) 34817966);
        int int65 = dateTimeZone61.getOffset(580L);
        java.lang.String str67 = dateTimeZone61.getNameKey(1644572521484L);
        org.joda.time.MutableDateTime mutableDateTime68 = mutableDateTime25.toMutableDateTime(dateTimeZone61);
        org.joda.time.MutableDateTime mutableDateTime71 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime72 = mutableDateTime71.toDateTime();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        boolean boolean76 = mutableDateTime74.isEqual(readableInstant75);
        mutableDateTime74.addHours(59);
        org.joda.time.Chronology chronology79 = mutableDateTime74.getChronology();
        mutableDateTime71.setChronology(chronology79);
        java.util.Locale locale83 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale84 = locale83.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) 598, chronology79, locale83);
        java.lang.String str86 = dateTimeZone61.getName(35001L, locale83);
        org.joda.time.DateTime dateTime87 = dateTime23.toDateTime(dateTimeZone61);
        boolean boolean88 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) dateTime87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime25 and mutableDateTime68", (mutableDateTime25.compareTo(mutableDateTime68) == 0) == mutableDateTime25.equals(mutableDateTime68));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test347");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        mutableDateTime1.setHourOfDay(0);
        mutableDateTime1.setMillisOfSecond((int) '4');
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology15, locale16, (java.lang.Integer) 9, 59);
        int int20 = dateTimeParserBucket19.getOffset();
        java.lang.Integer int21 = dateTimeParserBucket19.getPivotYear();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        org.joda.time.DateTime dateTime24 = mutableDateTime1.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.yearOfCentury();
        long long28 = dateTimeField25.add(1644572477588L, (long) 97828);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime24", (mutableDateTime1.compareTo(dateTime24) == 0) == mutableDateTime1.equals(dateTime24));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test348");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        mutableDateTime1.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(dateTimeZone12);
        int int15 = dateTimeZone12.getOffsetFromLocal((long) 589);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime13", (mutableDateTime1.compareTo(dateTime13) == 0) == mutableDateTime1.equals(dateTime13));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test349");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        int int8 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Instant instant9 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        int int19 = mutableDateTime11.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = mutableDateTime11.toDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        mutableDateTime22.addYears(0);
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.era();
        boolean boolean30 = mutableDateTime22.isSupported(dateTimeFieldType29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime1.property(dateTimeFieldType29);
        java.lang.String str32 = dateTimeFieldType29.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant9", (mutableDateTime1.compareTo(instant9) == 0) == mutableDateTime1.equals(instant9));
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test350");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime7 = property3.add(41);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        mutableDateTime9.addHours(59);
        int int14 = mutableDateTime9.getMillisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = mutableDateTime16.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) (byte) 0);
        mutableDateTime16.setZoneRetainFields(dateTimeZone27);
        mutableDateTime9.setZone(dateTimeZone27);
        long long33 = dateTimeZone27.previousTransition((long) 852);
        mutableDateTime7.setZone(dateTimeZone27);
        mutableDateTime7.setMillis(866L);
        mutableDateTime7.setMillisOfDay(148);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeParserBucket44.getZone();
        org.joda.time.Chronology chronology46 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = chronology46.add(readablePeriod48, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(chronology46);
        org.joda.time.DateTimeField dateTimeField53 = chronology46.secondOfMinute();
        int int54 = dateTimeField53.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial55 = null;
        int int56 = dateTimeField53.getMaximumValue(readablePartial55);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.days();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.dayOfYear();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.millisOfSecond();
        java.util.Locale locale68 = java.util.Locale.TAIWAN;
        java.lang.String str69 = locale68.getScript();
        int int70 = dateTimeField67.getMaximumTextLength(locale68);
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        boolean boolean73 = locale72.hasExtensions();
        java.lang.String str74 = dateTimeField67.getAsText((long) 4, locale72);
        int int75 = dateTimeField53.getMaximumShortTextLength(locale72);
        long long77 = dateTimeField53.roundHalfCeiling(0L);
        int int78 = mutableDateTime7.get(dateTimeField53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime16 and mutableDateTime52", (mutableDateTime16.compareTo(mutableDateTime52) == 0) == mutableDateTime16.equals(mutableDateTime52));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test351");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime10.set(dateTimeFieldType14, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        int int18 = mutableDateTime10.get(dateTimeFieldType17);
        org.joda.time.DateTime dateTime19 = mutableDateTime10.toDateTime();
        java.util.Locale locale20 = null;
        java.util.Calendar calendar21 = mutableDateTime10.toCalendar(locale20);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime10.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone22);
        int int24 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime26.set(dateTimeFieldType30, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        int int34 = mutableDateTime26.get(dateTimeFieldType33);
        int int35 = mutableDateTime26.getWeekOfWeekyear();
        org.joda.time.Instant instant36 = mutableDateTime26.toInstant();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.dayOfWeek();
        mutableDateTime26.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableDateTime26.add(readablePeriod40, (int) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale45, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology50 = dateTimeParserBucket48.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.days();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.halfdayOfDay();
        mutableDateTime26.setChronology(chronology50);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Chronology chronology58 = chronology50.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = chronology58.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.dayOfYear();
        mutableDateTime1.setRounding(dateTimeField60);
        mutableDateTime1.addSeconds(669);
        int int64 = mutableDateTime1.getRoundingMode();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and instant36", (mutableDateTime10.compareTo(instant36) == 0) == mutableDateTime10.equals(instant36));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test352");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.hourOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.Chronology chronology24 = null;
        mutableDateTime23.setChronology(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = mutableDateTime27.toString(dateTimeFormatter30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.weekOfWeekyear();
        org.joda.time.Chronology chronology33 = mutableDateTime27.getChronology();
        mutableDateTime23.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.addMinutes((int) 'u');
        org.joda.time.Chronology chronology37 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTime dateTime39 = mutableDateTime1.toDateTime(chronology37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableDateTime1.add(readablePeriod40);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        org.joda.time.Chronology chronology49 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.minuteOfDay();
        java.lang.String str52 = chronology49.toString();
        mutableDateTime1.setChronology(chronology49);
        org.joda.time.Instant instant54 = mutableDateTime1.toInstant();
        int int55 = mutableDateTime1.getEra();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutableDateTime1.add(readablePeriod56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant54", (dateTime10.compareTo(instant54) == 0) == dateTime10.equals(instant54));
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test353");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        boolean boolean21 = mutableDateTime16.isSupported(dateTimeFieldType20);
        int int22 = mutableDateTime1.get(dateTimeFieldType20);
        mutableDateTime1.setWeekyear(74419);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        long long33 = dateTimeParserBucket30.computeMillis(true);
        org.joda.time.Chronology chronology34 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.DurationField durationField36 = chronology34.years();
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime1.toMutableDateTime(chronology34);
        java.util.GregorianCalendar gregorianCalendar38 = mutableDateTime37.toGregorianCalendar();
        mutableDateTime37.setMinuteOfDay(0);
        int int41 = mutableDateTime37.getWeekyear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime43.set(dateTimeFieldType47, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        int int51 = mutableDateTime43.get(dateTimeFieldType50);
        int int52 = mutableDateTime43.getWeekOfWeekyear();
        org.joda.time.Instant instant53 = mutableDateTime43.toInstant();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime43.dayOfWeek();
        int int55 = mutableDateTime43.getYearOfEra();
        int int56 = mutableDateTime43.getMillisOfSecond();
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.days();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.dayOfYear();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField68 = chronology64.dayOfMonth();
        org.joda.time.DurationField durationField69 = chronology64.centuries();
        org.joda.time.DateTimeField dateTimeField70 = chronology64.minuteOfHour();
        org.joda.time.DateTime dateTime71 = mutableDateTime43.toDateTime(chronology64);
        mutableDateTime37.setChronology(chronology64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime43 and instant53", (mutableDateTime43.compareTo(instant53) == 0) == mutableDateTime43.equals(instant53));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test354");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        int int13 = mutableDateTime1.getYearOfEra();
        int int14 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        mutableDateTime16.addHours(59);
        org.joda.time.Chronology chronology21 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology21.getZone();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.Chronology chronology24 = chronology21.withUTC();
        org.joda.time.DurationField durationField25 = chronology24.centuries();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        org.joda.time.DurationField durationField27 = chronology24.days();
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime1.toMutableDateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test355");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMonthOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        mutableDateTime6.addHours(59);
        int int11 = mutableDateTime6.getMillisOfSecond();
        mutableDateTime6.setMillisOfDay(10);
        boolean boolean14 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.secondOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        mutableDateTime17.addHours(59);
        org.joda.time.Chronology chronology22 = mutableDateTime17.getChronology();
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime17.toMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar24 = mutableDateTime23.toGregorianCalendar();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.weekOfWeekyear();
        boolean boolean28 = mutableDateTime23.isEqual((long) 74486);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeParserBucket34.getZone();
        org.joda.time.Chronology chronology36 = dateTimeParserBucket34.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.days();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.dayOfMonth();
        long long44 = chronology36.add((long) 205, (long) 74411, 664);
        org.joda.time.DateTimeField dateTimeField45 = chronology36.dayOfMonth();
        mutableDateTime23.setChronology(chronology36);
        org.joda.time.DurationField durationField47 = chronology36.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and mutableDateTime23", (mutableDateTime17.compareTo(mutableDateTime23) == 0) == mutableDateTime17.equals(mutableDateTime23));
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test356");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        mutableDateTime1.addMinutes(0);
        boolean boolean12 = mutableDateTime1.isBeforeNow();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology19.getZone();
        java.lang.String str21 = dateTimeZone20.getID();
        boolean boolean23 = dateTimeZone20.isStandardOffset((long) 930);
        org.joda.time.DateTime dateTime24 = mutableDateTime1.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.days();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.secondOfMinute();
        long long42 = chronology32.add(1835L, (long) 693, 12);
        org.joda.time.DateTime dateTime43 = mutableDateTime1.toDateTime(chronology32);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime1.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and dateTime43", (mutableDateTime14.compareTo(dateTime43) == 0) == mutableDateTime14.equals(dateTime43));
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test357");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        int int19 = mutableDateTime11.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = mutableDateTime11.toDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        mutableDateTime22.addYears(0);
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) mutableDateTime22);
        boolean boolean29 = mutableDateTime9.isBefore((org.joda.time.ReadableInstant) mutableDateTime22);
        int int30 = mutableDateTime22.getCenturyOfEra();
        int int31 = mutableDateTime22.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime22.era();
        long long33 = property32.remainder();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and mutableDateTime22", (mutableDateTime9.compareTo(mutableDateTime22) == 0) == mutableDateTime9.equals(mutableDateTime22));
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test358");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.setYear(74411);
        int int5 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getHourOfDay();
        mutableDateTime7.addYears(0);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        mutableDateTime7.setZoneRetainFields(dateTimeZone19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        boolean boolean27 = mutableDateTime22.isSupported(dateTimeFieldType26);
        int int28 = mutableDateTime7.get(dateTimeFieldType26);
        mutableDateTime7.setWeekyear(74419);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        long long39 = dateTimeParserBucket36.computeMillis(true);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.DurationField durationField42 = chronology40.years();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime7.toMutableDateTime(chronology40);
        boolean boolean44 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        boolean boolean46 = mutableDateTime7.isAfter(779L);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        mutableDateTime48.addHours(59);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime48.minuteOfHour();
        boolean boolean54 = mutableDateTime7.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        int int55 = mutableDateTime48.getWeekOfWeekyear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = mutableDateTime48.toMutableDateTime(chronology56);
        int int58 = mutableDateTime57.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and mutableDateTime43", (mutableDateTime7.compareTo(mutableDateTime43) == 0) == mutableDateTime7.equals(mutableDateTime43));
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test359");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.minuteOfHour();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket9.getZone();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.minuteOfHour();
        org.joda.time.Chronology chronology17 = chronology11.withUTC();
        mutableDateTime1.setChronology(chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime2", (mutableDateTime1.compareTo(mutableDateTime2) == 0) == mutableDateTime1.equals(mutableDateTime2));
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test360");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = mutableDateTime14.toDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        mutableDateTime25.addYears(0);
        mutableDateTime14.setDate((org.joda.time.ReadableInstant) mutableDateTime25);
        int int32 = mutableDateTime14.getEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfWeek();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        mutableDateTime37.addHours(59);
        int int42 = mutableDateTime37.getMillisOfSecond();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology44, locale45, (java.lang.Integer) 9, 59);
        java.lang.Object obj49 = dateTimeParserBucket48.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket48.saveField(dateTimeFieldType50, 59);
        boolean boolean53 = mutableDateTime37.isSupported(dateTimeFieldType50);
        int int54 = mutableDateTime34.compareTo((org.joda.time.ReadableInstant) mutableDateTime37);
        int int55 = mutableDateTime37.getDayOfMonth();
        mutableDateTime37.addYears(2922789);
        boolean boolean58 = mutableDateTime14.isAfter((org.joda.time.ReadableInstant) mutableDateTime37);
        java.util.GregorianCalendar gregorianCalendar59 = mutableDateTime37.toGregorianCalendar();
        int int60 = mutableDateTime37.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str62 = dateTimeFieldType61.toString();
        boolean boolean63 = mutableDateTime37.isSupported(dateTimeFieldType61);
        int int64 = mutableDateTime12.get(dateTimeFieldType61);
        org.joda.time.MutableDateTime mutableDateTime65 = mutableDateTime12.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime12.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime65", (mutableDateTime8.compareTo(mutableDateTime65) == 0) == mutableDateTime8.equals(mutableDateTime65));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test361");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        mutableDateTime1.setMonthOfYear(9);
        int int9 = mutableDateTime1.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add(100);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.weekyear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime16.set(dateTimeFieldType20, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = mutableDateTime16.get(dateTimeFieldType23);
        int int25 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.Instant instant26 = mutableDateTime16.toInstant();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime16.dayOfWeek();
        mutableDateTime16.addWeekyears(796);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        mutableDateTime34.addHours((int) (short) 0);
        mutableDateTime34.addWeekyears((int) 'a');
        java.lang.String str40 = mutableDateTime34.toString("0");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime42.set(dateTimeFieldType46, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        int int50 = mutableDateTime42.get(dateTimeFieldType49);
        mutableDateTime34.set(dateTimeFieldType49, 5);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime31.property(dateTimeFieldType49);
        boolean boolean54 = mutableDateTime16.isSupported(dateTimeFieldType49);
        mutableDateTime13.set(dateTimeFieldType49, 34909);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime1.property(dateTimeFieldType49);
        java.lang.String str58 = property57.getAsShortText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and mutableDateTime42", (instant26.compareTo(mutableDateTime42) == 0) == instant26.equals(mutableDateTime42));
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test362");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        boolean boolean10 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        java.util.Calendar calendar28 = mutableDateTime14.toCalendar(locale26);
        java.lang.String str29 = dateTimeField4.getAsShortText(readablePartial11, (int) ' ', locale26);
        int int30 = property1.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = property1.roundCeiling();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime33.toString(dateTimeFormatter36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        java.lang.String str47 = dateTimeZone44.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime33.toMutableDateTime(dateTimeZone44);
        boolean boolean49 = mutableDateTime31.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        mutableDateTime54.addHours((int) (short) 0);
        mutableDateTime54.addWeekyears((int) 'a');
        java.lang.String str60 = mutableDateTime54.toString("0");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = mutableDateTime62.isEqual(readableInstant63);
        int int65 = mutableDateTime62.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime62.set(dateTimeFieldType66, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        int int70 = mutableDateTime62.get(dateTimeFieldType69);
        mutableDateTime54.set(dateTimeFieldType69, 5);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime51.property(dateTimeFieldType69);
        boolean boolean74 = mutableDateTime48.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        boolean boolean76 = mutableDateTime51.isEqual((long) 366);
        org.joda.time.DateTimeZone dateTimeZone77 = mutableDateTime51.getZone();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime(chronology78);
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime79.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime79.minuteOfHour();
        org.joda.time.Chronology chronology83 = null;
        java.util.Locale locale84 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket87 = new org.joda.time.format.DateTimeParserBucket(0L, chronology83, locale84, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone88 = dateTimeParserBucket87.getZone();
        org.joda.time.Chronology chronology89 = dateTimeParserBucket87.getChronology();
        org.joda.time.DurationField durationField90 = chronology89.days();
        org.joda.time.DateTimeField dateTimeField91 = chronology89.dayOfYear();
        org.joda.time.DateTimeField dateTimeField92 = chronology89.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField93 = chronology89.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField94 = chronology89.minuteOfHour();
        org.joda.time.Chronology chronology95 = chronology89.withUTC();
        mutableDateTime79.setChronology(chronology95);
        org.joda.time.DateTimeField dateTimeField97 = chronology95.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime98 = mutableDateTime51.toMutableDateTime(chronology95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime79 and mutableDateTime80", (mutableDateTime79.compareTo(mutableDateTime80) == 0) == mutableDateTime79.equals(mutableDateTime80));
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test363");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        int int11 = mutableDateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime13.set(dateTimeFieldType17, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        int int21 = mutableDateTime13.get(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = mutableDateTime13.toDateTime();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime13.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.getMutableDateTime();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = mutableDateTime26.toString(dateTimeFormatter29);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        java.lang.String str38 = dateTimeZone37.getID();
        java.lang.String str40 = dateTimeZone37.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime26.toMutableDateTime(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        mutableDateTime24.setZoneRetainFields(dateTimeZone37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableDateTime45.isEqual(readableInstant46);
        int int48 = mutableDateTime45.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime45.set(dateTimeFieldType49, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        int int53 = mutableDateTime45.get(dateTimeFieldType52);
        org.joda.time.DateTime dateTime54 = mutableDateTime45.toDateTime();
        java.util.Locale locale55 = null;
        java.util.Calendar calendar56 = mutableDateTime45.toCalendar(locale55);
        mutableDateTime45.addDays((int) (byte) 0);
        mutableDateTime45.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime45.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration62 = null;
        mutableDateTime45.add(readableDuration62);
        int int64 = dateTimeZone37.getOffset((org.joda.time.ReadableInstant) mutableDateTime45);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(35061);
        mutableDateTime1.setZoneRetainFields(dateTimeZone67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime13", (instant10.compareTo(mutableDateTime13) == 0) == instant10.equals(mutableDateTime13));
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test364");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.days();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.dayOfMonth();
        org.joda.time.DurationField durationField32 = chronology27.centuries();
        org.joda.time.DateTimeField dateTimeField33 = chronology27.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime1.toMutableDateTime(chronology27);
        int int35 = mutableDateTime1.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and mutableDateTime34", (dateTime10.compareTo(mutableDateTime34) == 0) == dateTime10.equals(mutableDateTime34));
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test365");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfCeiling();
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        java.util.Locale locale17 = null;
        java.util.Calendar calendar18 = mutableDateTime13.toCalendar(locale17);
        int int19 = mutableDateTime13.getCenturyOfEra();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey((long) (byte) 0);
        mutableDateTime13.setZoneRetainFields(dateTimeZone26);
        org.joda.time.Chronology chronology30 = mutableDateTime13.getChronology();
        org.joda.time.DateTime dateTime31 = dateTime11.toDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        java.lang.String str35 = dateTimeZone33.getNameKey((long) (short) 100);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        mutableDateTime37.addHours(59);
        int int42 = mutableDateTime37.getMillisOfSecond();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = mutableDateTime44.toString(dateTimeFormatter47);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(0L, chronology50, locale51, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeParserBucket54.getZone();
        java.lang.String str57 = dateTimeZone55.getNameKey((long) (byte) 0);
        mutableDateTime44.setZoneRetainFields(dateTimeZone55);
        mutableDateTime37.setZone(dateTimeZone55);
        long long61 = dateTimeZone33.getMillisKeepLocal(dateTimeZone55, (long) 74419);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime31, dateTimeZone55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar18", (calendar3.compareTo(calendar18) == 0) == calendar3.equals(calendar18));
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test366");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        int int34 = mutableDateTime33.getDayOfYear();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime33.minuteOfHour();
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        int int37 = property35.getMaximumShortTextLength(locale36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test367");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        int int13 = mutableDateTime1.getYearOfEra();
        int int14 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfYear();
        boolean boolean17 = property16.isLeap();
        boolean boolean18 = mutableDateTime1.equals((java.lang.Object) property16);
        int int19 = property16.get();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test368");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        int int21 = mutableDateTime8.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        mutableDateTime8.add(readablePeriod22, 34836);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime26.set(dateTimeFieldType30, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        int int34 = mutableDateTime26.get(dateTimeFieldType33);
        int int35 = mutableDateTime26.getDayOfMonth();
        mutableDateTime8.setDate((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        mutableDateTime38.addHours(59);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime38.minuteOfHour();
        mutableDateTime38.addWeeks(34808947);
        boolean boolean47 = mutableDateTime38.isBefore((long) 533);
        mutableDateTime38.addMinutes((int) (short) 100);
        mutableDateTime38.addMonths(258);
        boolean boolean52 = mutableDateTime26.isAfter((org.joda.time.ReadableInstant) mutableDateTime38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and instant18", (mutableDateTime8.compareTo(instant18) == 0) == mutableDateTime8.equals(instant18));
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test369");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.centuryOfEra();
        org.joda.time.DurationField durationField12 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField12", Math.signum(durationField10.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField10)));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test370");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyear();
        int int14 = dateTimeField13.getMaximumValue();
        long long16 = dateTimeField13.roundHalfEven((long) 74503);
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.minuteOfHour();
        org.joda.time.Chronology chronology31 = chronology25.withUTC();
        org.joda.time.DurationField durationField32 = chronology25.seconds();
        org.joda.time.DateTimeField dateTimeField33 = chronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology25.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime40 = property38.addWrapField(0);
        org.joda.time.DateTimeField dateTimeField41 = property38.getField();
        int int42 = dateTimeField41.getMinimumValue();
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeParserBucket49.getZone();
        org.joda.time.Chronology chronology51 = dateTimeParserBucket49.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.DurationField durationField54 = chronology51.hours();
        org.joda.time.DateTimeField dateTimeField55 = chronology51.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial56 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType57.getField(chronology58);
        int int60 = dateTimeField59.getMaximumValue();
        int int63 = dateTimeField59.getDifference((long) 10, (long) 'a');
        int int65 = dateTimeField59.getLeapAmount((-1L));
        java.util.Locale locale67 = java.util.Locale.ITALY;
        java.lang.String str68 = dateTimeField59.getAsText((long) 340, locale67);
        org.joda.time.ReadablePartial readablePartial69 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType70.getField(chronology71);
        int int73 = dateTimeField72.getMaximumValue();
        int int76 = dateTimeField72.getDifference((long) 10, (long) 'a');
        int int78 = dateTimeField72.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial79 = null;
        int[] intArray86 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int87 = dateTimeField72.getMinimumValue(readablePartial79, intArray86);
        int int88 = dateTimeField59.getMinimumValue(readablePartial69, intArray86);
        int int89 = dateTimeField55.getMaximumValue(readablePartial56, intArray86);
        int int90 = dateTimeField41.getMaximumValue(readablePartial43, intArray86);
        int int91 = dateTimeField35.getMinimumValue(readablePartial36, intArray86);
        int int92 = dateTimeField13.getMaximumValue(readablePartial17, intArray86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime37 and mutableDateTime53", (mutableDateTime37.compareTo(mutableDateTime53) == 0) == mutableDateTime37.equals(mutableDateTime53));
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test371");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(98374L);
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        java.lang.Integer int9 = dateTimeParserBucket7.getPivotYear();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.weekyear();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = chronology10.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime13", (mutableDateTime1.compareTo(dateTime13) == 0) == mutableDateTime1.equals(dateTime13));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test372");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 9, 59);
        int int6 = dateTimeParserBucket5.getOffset();
        java.lang.Integer int7 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DurationField durationField12 = chronology8.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField12, and durationField11", !(durationField11.compareTo(durationField12) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField12.compareTo(durationField11))));
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test373");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField26 = chronology19.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        java.util.Locale locale33 = null;
        java.util.Calendar calendar34 = mutableDateTime29.toCalendar(locale33);
        int int35 = mutableDateTime29.getCenturyOfEra();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket41.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey((long) (byte) 0);
        mutableDateTime29.setZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = mutableDateTime27.toDateTime(dateTimeZone42);
        java.lang.Object obj47 = null;
        boolean boolean48 = dateTimeZone42.equals(obj47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar34", (calendar3.compareTo(calendar34) == 0) == calendar3.equals(calendar34));
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test374");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.minuteOfDay();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        java.lang.String str12 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        int int18 = dateTimeField17.getMaximumValue();
        int int21 = dateTimeField17.getDifference((long) 10, (long) 'a');
        int int23 = dateTimeField17.getMaximumValue((long) (byte) 1);
        java.lang.String str25 = dateTimeField17.getAsShortText((long) 5);
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket32.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.days();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.dayOfYear();
        org.joda.time.ReadablePartial readablePartial37 = null;
        int[] intArray43 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int44 = dateTimeField36.getMinimumValue(readablePartial37, intArray43);
        int int45 = dateTimeField17.getMaximumValue(readablePartial26, intArray43);
        int int46 = dateTimeField13.getMaximumValue(readablePartial14, intArray43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField35", Math.signum(durationField11.compareTo(durationField35)) == -Math.signum(durationField35.compareTo(durationField11)));
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test375");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.centuryOfEra();
        int int18 = property17.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        int int24 = dateTimeField23.getMaximumValue();
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getISO3Country();
        java.lang.String str28 = dateTimeField23.getAsShortText(0L, locale26);
        boolean boolean29 = dateTimeField23.isLenient();
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        int int36 = mutableDateTime33.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime33.set(dateTimeFieldType37, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        int int41 = mutableDateTime33.get(dateTimeFieldType40);
        int int42 = mutableDateTime33.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.yearOfEra();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar46 = mutableDateTime43.toCalendar(locale45);
        java.util.Calendar calendar47 = mutableDateTime33.toCalendar(locale45);
        java.lang.String str48 = dateTimeField23.getAsShortText(readablePartial30, (int) ' ', locale45);
        int int49 = property20.getMaximumShortTextLength(locale45);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType50.getField(chronology51);
        int int54 = dateTimeField52.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology56);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime57.dayOfWeek();
        java.util.Locale locale59 = null;
        java.lang.String str60 = property58.getAsText(locale59);
        java.util.Locale locale61 = null;
        int int62 = property58.getMaximumTextLength(locale61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = mutableDateTime64.isEqual(readableInstant65);
        int int67 = mutableDateTime64.getHourOfDay();
        mutableDateTime64.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType70.getField(chronology71);
        int int73 = dateTimeField72.getMaximumValue();
        mutableDateTime64.setRounding(dateTimeField72);
        java.util.Locale locale76 = java.util.Locale.FRENCH;
        java.lang.String str77 = dateTimeField72.getAsShortText((int) (byte) 1, locale76);
        java.lang.String str78 = property58.getAsShortText(locale76);
        java.lang.String str79 = dateTimeField52.getAsShortText(1L, locale76);
        java.util.Set<java.lang.Character> charSet80 = locale76.getExtensionKeys();
        java.lang.String str81 = locale45.getDisplayVariant(locale76);
        int int82 = property17.getMaximumTextLength(locale76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar47", (calendar12.compareTo(calendar47) == 0) == calendar12.equals(calendar47));
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test376");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField14 = chronology8.halfdays();
        org.joda.time.DurationField durationField15 = chronology8.years();
        org.joda.time.Chronology chronology16 = chronology8.withUTC();
        org.joda.time.DurationField durationField17 = chronology8.weekyears();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField15 and durationField17", (durationField15.compareTo(durationField17) == 0) == durationField15.equals(durationField17));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test377");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        mutableDateTime1.add((long) 993);
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime1.getZone();
        mutableDateTime1.setMinuteOfDay((int) ' ');
        java.lang.String str14 = mutableDateTime1.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.addWrapField(0);
        org.joda.time.DateTimeField dateTimeField19 = property16.getField();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar23 = mutableDateTime20.toCalendar(locale22);
        mutableDateTime20.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime20.weekyear();
        int int30 = property29.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime31 = property29.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.minuteOfHour();
        int int33 = mutableDateTime31.getSecondOfMinute();
        int int34 = property16.compareTo((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.MutableDateTime mutableDateTime36 = property16.add((long) 437);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        int int41 = mutableDateTime38.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime38.set(dateTimeFieldType42, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime38.getZone();
        org.joda.time.Chronology chronology46 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(390, 13);
        java.lang.String str50 = dateTimeZone49.getID();
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone49.isLocalDateTimeGap(localDateTime51);
        org.joda.time.Chronology chronology53 = chronology46.withZone(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime36.toMutableDateTime(dateTimeZone49);
        mutableDateTime1.setZone(dateTimeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and mutableDateTime54", (mutableDateTime15.compareTo(mutableDateTime54) == 0) == mutableDateTime15.equals(mutableDateTime54));
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test378");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        org.joda.time.DurationField durationField12 = chronology7.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField8 and durationField11", Math.signum(durationField8.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField8)));
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test379");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfEra();
        mutableDateTime0.setMillisOfDay(34808947);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter8.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter8.getParser();
        boolean boolean11 = dateTimeFormatter8.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withOffsetParsed();
        int int13 = dateTimeFormatter8.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter8.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter15.withZoneUTC();
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter15.withLocale(locale17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        int int28 = mutableDateTime20.get(dateTimeFieldType27);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeParserBucket34.getZone();
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime37 = mutableDateTime20.toDateTime(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter15.withZone(dateTimeZone35);
        int int40 = dateTimeZone35.getOffset((long) 135);
        mutableDateTime0.setZoneRetainFields(dateTimeZone35);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime0.add(durationFieldType42, 560);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        org.joda.time.Chronology chronology53 = dateTimeParserBucket51.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.hours();
        org.joda.time.DurationField durationField55 = chronology53.centuries();
        org.joda.time.DurationField durationField56 = chronology53.centuries();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) 167, chronology53);
        org.joda.time.DateTimeField dateTimeField58 = chronology53.era();
        org.joda.time.DurationField durationField59 = durationFieldType42.getField(chronology53);
        org.joda.time.DurationField durationField60 = chronology53.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField60, durationField54, and durationField55", !(durationField60.compareTo(durationField54) == 0) || (Math.signum(durationField60.compareTo(durationField55)) == Math.signum(durationField54.compareTo(durationField55))));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test380");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        mutableDateTime1.setDayOfYear(7);
        org.joda.time.DateTime dateTime9 = mutableDateTime1.toDateTime();
        mutableDateTime1.setDate((-74390L));
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        int int18 = dateTimeField17.getMaximumValue();
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.getISO3Country();
        java.lang.String str22 = dateTimeField17.getAsShortText(0L, locale20);
        boolean boolean23 = dateTimeField17.isLenient();
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime27.set(dateTimeFieldType31, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        int int35 = mutableDateTime27.get(dateTimeFieldType34);
        int int36 = mutableDateTime27.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.yearOfEra();
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar40 = mutableDateTime37.toCalendar(locale39);
        java.util.Calendar calendar41 = mutableDateTime27.toCalendar(locale39);
        java.lang.String str42 = dateTimeField17.getAsShortText(readablePartial24, (int) ' ', locale39);
        int int43 = property14.getMaximumShortTextLength(locale39);
        org.joda.time.MutableDateTime mutableDateTime44 = property14.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime46 = property14.addWrapField(74422);
        int int47 = mutableDateTime46.getSecondOfMinute();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = mutableDateTime49.isEqual(readableInstant50);
        int int52 = mutableDateTime49.getHourOfDay();
        boolean boolean54 = mutableDateTime49.isEqual((long) 411);
        mutableDateTime49.addHours(34824000);
        mutableDateTime46.setTime((org.joda.time.ReadableInstant) mutableDateTime49);
        int int58 = property12.compareTo((org.joda.time.ReadableInstant) mutableDateTime49);
        boolean boolean59 = property12.isLeap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar40", (calendar6.compareTo(calendar40) == 0) == calendar6.equals(calendar40));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test381");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime1.add(readablePeriod6, (-292275054));
        long long9 = mutableDateTime1.getMillis();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.Chronology chronology11 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology23.add(readablePeriod25, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField30 = chronology23.secondOfMinute();
        int int31 = dateTimeField30.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial32 = null;
        int int33 = dateTimeField30.getMaximumValue(readablePartial32);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.millisOfSecond();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.lang.String str46 = locale45.getScript();
        int int47 = dateTimeField44.getMaximumTextLength(locale45);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        boolean boolean50 = locale49.hasExtensions();
        java.lang.String str51 = dateTimeField44.getAsText((long) 4, locale49);
        int int52 = dateTimeField30.getMaximumShortTextLength(locale49);
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology54, locale55, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket58.getZone();
        org.joda.time.Chronology chronology60 = dateTimeParserBucket58.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.hours();
        org.joda.time.DurationField durationField62 = chronology60.centuries();
        org.joda.time.DurationField durationField63 = chronology60.centuries();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.millisOfSecond();
        java.util.Locale locale68 = new java.util.Locale("2022-02-11T09:40:08.213Z", "2022-02-11T09:40:32.831Z");
        java.lang.String str69 = dateTimeField64.getAsText(366, locale68);
        java.util.Set<java.lang.Character> charSet70 = locale68.getExtensionKeys();
        java.lang.String str71 = locale49.getDisplayName(locale68);
        java.lang.String str72 = dateTimeField13.getAsShortText(readablePartial14, 368, locale49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime12 and mutableDateTime29", (mutableDateTime12.compareTo(mutableDateTime29) == 0) == mutableDateTime12.equals(mutableDateTime29));
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test382");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.minuteOfDay();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.era();
        org.joda.time.DurationField durationField13 = chronology7.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField13, and durationField11", !(durationField11.compareTo(durationField13) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField13.compareTo(durationField11))));
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test383");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addDays((int) ' ');
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.millis();
        java.lang.String str14 = durationFieldType13.toString();
        java.lang.String str15 = durationFieldType13.getName();
        mutableDateTime1.add(durationFieldType13, 20);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        mutableDateTime19.addDays(0);
        int int25 = mutableDateTime19.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime19.weekyear();
        int int27 = mutableDateTime19.getMonthOfYear();
        long long28 = mutableDateTime19.getMillis();
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime19.toMutableDateTime();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.Instant instant31 = mutableDateTime19.toInstant();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        int int36 = mutableDateTime33.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime33.set(dateTimeFieldType37, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime33.getZone();
        org.joda.time.Chronology chronology41 = mutableDateTime33.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.centuries();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.dayOfMonth();
        org.joda.time.DateTime dateTime44 = mutableDateTime19.toDateTime(chronology41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime33", (instant10.compareTo(mutableDateTime33) == 0) == instant10.equals(mutableDateTime33));
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test384");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        mutableDateTime1.setHourOfDay(0);
        mutableDateTime1.setMillisOfSecond((int) '4');
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology15, locale16, (java.lang.Integer) 9, 59);
        int int20 = dateTimeParserBucket19.getOffset();
        java.lang.Integer int21 = dateTimeParserBucket19.getPivotYear();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        org.joda.time.DateTime dateTime24 = mutableDateTime1.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.yearOfCentury();
        java.lang.String str27 = dateTimeField25.getAsShortText(1644785054390L);
        long long29 = dateTimeField25.roundCeiling((long) 156);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime24", (mutableDateTime1.compareTo(dateTime24) == 0) == mutableDateTime1.equals(dateTime24));
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test385");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime1.add(readablePeriod15, (int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.halfdayOfDay();
        mutableDateTime1.setChronology(chronology25);
        mutableDateTime1.addMinutes(559);
        mutableDateTime1.addMinutes(242);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        mutableDateTime36.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime36.yearOfEra();
        mutableDateTime36.setMillisOfDay(34808947);
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = null;
        org.joda.time.format.DateTimeParser dateTimeParser43 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter42, dateTimeParser43);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeFormatter44.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser46 = dateTimeFormatter44.getParser();
        boolean boolean47 = dateTimeFormatter44.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter44.withOffsetParsed();
        int int49 = dateTimeFormatter44.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter44.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter51.withZoneUTC();
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter51.withLocale(locale53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        int int59 = mutableDateTime56.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime56.set(dateTimeFieldType60, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.year();
        int int64 = mutableDateTime56.get(dateTimeFieldType63);
        org.joda.time.Chronology chronology66 = null;
        java.util.Locale locale67 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket(0L, chronology66, locale67, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone71 = dateTimeParserBucket70.getZone();
        java.lang.String str72 = dateTimeZone71.toString();
        org.joda.time.DateTime dateTime73 = mutableDateTime56.toDateTime(dateTimeZone71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter51.withZone(dateTimeZone71);
        int int76 = dateTimeZone71.getOffset((long) 135);
        mutableDateTime36.setZoneRetainFields(dateTimeZone71);
        org.joda.time.DurationFieldType durationFieldType78 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime36.add(durationFieldType78, 560);
        boolean boolean81 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime56", (instant11.compareTo(mutableDateTime56) == 0) == instant11.equals(mutableDateTime56));
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test386");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.Instant instant8 = mutableDateTime1.toInstant();
        int int9 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        int int16 = mutableDateTime11.getMillisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime18.toString(dateTimeFormatter21);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        java.lang.String str31 = dateTimeZone29.getNameKey((long) (byte) 0);
        mutableDateTime18.setZoneRetainFields(dateTimeZone29);
        mutableDateTime11.setZone(dateTimeZone29);
        long long37 = dateTimeZone29.convertLocalToUTC(10L, false, (long) 842);
        boolean boolean39 = dateTimeZone29.isStandardOffset(1644784833557L);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        org.joda.time.DurationField durationField43 = dateTimeField42.getDurationField();
        boolean boolean45 = dateTimeField42.isLeap((long) (short) -1);
        java.util.Locale locale47 = java.util.Locale.US;
        java.lang.String str48 = dateTimeField42.getAsText((long) (-1), locale47);
        org.joda.time.ReadablePartial readablePartial49 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        int int54 = dateTimeField53.getMaximumValue();
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.lang.String str57 = locale56.getISO3Country();
        java.lang.String str58 = dateTimeField53.getAsShortText(0L, locale56);
        boolean boolean59 = dateTimeField53.isLenient();
        org.joda.time.ReadablePartial readablePartial60 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        boolean boolean65 = mutableDateTime63.isEqual(readableInstant64);
        int int66 = mutableDateTime63.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime63.set(dateTimeFieldType67, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.year();
        int int71 = mutableDateTime63.get(dateTimeFieldType70);
        int int72 = mutableDateTime63.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime73.yearOfEra();
        java.util.Locale locale75 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar76 = mutableDateTime73.toCalendar(locale75);
        java.util.Calendar calendar77 = mutableDateTime63.toCalendar(locale75);
        java.lang.String str78 = dateTimeField53.getAsShortText(readablePartial60, (int) ' ', locale75);
        java.lang.String str79 = locale75.getDisplayCountry();
        java.lang.String str80 = dateTimeField42.getAsShortText(readablePartial49, 34812148, locale75);
        java.lang.String str81 = locale75.getDisplayLanguage();
        boolean boolean82 = dateTimeZone29.equals((java.lang.Object) str81);
        java.lang.String str83 = dateTimeZone29.getID();
        mutableDateTime1.setZoneRetainFields(dateTimeZone29);
        mutableDateTime1.setMillisOfDay(34928861);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime63", (instant8.compareTo(mutableDateTime63) == 0) == instant8.equals(mutableDateTime63));
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test387");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, 5);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.minuteOfHour();
        int int17 = mutableDateTime11.getSecondOfDay();
        mutableDateTime11.addSeconds((-292275054));
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfHalfday();
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology29, locale31, (java.lang.Integer) 2022);
        java.util.Locale locale35 = locale31.stripExtensions();
        java.lang.String str36 = locale35.getISO3Language();
        java.lang.String str37 = mutableDateTime11.toString("842", locale35);
        boolean boolean38 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.yearOfEra();
        java.lang.String str41 = property40.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime43 = property40.add((long) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.yearOfEra();
        java.util.Locale locale46 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar47 = mutableDateTime44.toCalendar(locale46);
        mutableDateTime44.addMinutes((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int51 = mutableDateTime44.get(dateTimeFieldType50);
        mutableDateTime43.setDate((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeParserBucket59.getZone();
        org.joda.time.Chronology chronology61 = dateTimeParserBucket59.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.days();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.dayOfYear();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.dayOfMonth();
        java.util.Locale locale66 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology61, locale66);
        mutableDateTime44.setChronology(chronology61);
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology61);
        mutableDateTime1.setChronology(chronology61);
        org.joda.time.DateTimeField dateTimeField71 = chronology61.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField72 = chronology61.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime39 and mutableDateTime69", (mutableDateTime39.compareTo(mutableDateTime69) == 0) == mutableDateTime39.equals(mutableDateTime69));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test388");
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfCentury();
        mutableDateTime8.setMillisOfDay(7);
        long long13 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime8.setMillisOfDay(10);
        org.joda.time.Chronology chronology16 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.monthOfYear();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 319, chronology16, locale18, (java.lang.Integer) 74419, 766);
        org.joda.time.DurationField durationField22 = chronology16.millis();
        org.joda.time.DurationField durationField23 = chronology16.minutes();
        org.joda.time.DurationField durationField24 = chronology16.weeks();
        java.util.Locale locale25 = java.util.Locale.UK;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.dayOfWeek();
        java.util.Locale locale29 = null;
        java.lang.String str30 = property28.getAsText(locale29);
        java.util.Locale locale31 = null;
        int int32 = property28.getMaximumTextLength(locale31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        int int37 = mutableDateTime34.getHourOfDay();
        mutableDateTime34.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        int int43 = dateTimeField42.getMaximumValue();
        mutableDateTime34.setRounding(dateTimeField42);
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = dateTimeField42.getAsShortText((int) (byte) 1, locale46);
        java.lang.String str48 = property28.getAsShortText(locale46);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.lang.String str50 = locale49.getScript();
        java.lang.String str51 = locale46.getDisplayScript(locale49);
        java.util.Locale locale52 = java.util.Locale.US;
        java.lang.String str53 = locale46.getDisplayLanguage(locale52);
        java.lang.String str54 = locale25.getDisplayCountry(locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 74442, chronology16, locale25, (java.lang.Integer) 74468);
        org.joda.time.DurationField durationField57 = chronology16.hours();
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(0L, chronology61, locale62, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone66 = dateTimeParserBucket65.getZone();
        org.joda.time.Chronology chronology67 = dateTimeParserBucket65.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology67);
        org.joda.time.DurationField durationField70 = chronology67.hours();
        org.joda.time.DurationField durationField71 = durationFieldType59.getField(chronology67);
        java.util.Locale.Builder builder72 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder73 = builder72.clearExtensions();
        java.util.Locale.Builder builder75 = builder73.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale76 = builder75.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 2818, chronology67, locale76);
        java.util.Locale locale78 = locale76.stripExtensions();
        java.lang.String str79 = locale78.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) 340, chronology16, locale78, (java.lang.Integer) 34986001);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime27 and mutableDateTime69", (mutableDateTime27.compareTo(mutableDateTime69) == 0) == mutableDateTime27.equals(mutableDateTime69));
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test389");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        int int9 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.dayOfMonth();
        java.lang.String str12 = property11.getAsShortText();
        java.lang.String str13 = property11.getAsText();
        org.joda.time.DurationField durationField14 = property11.getDurationField();
        java.lang.String str15 = property11.getAsShortText();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.monthOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyear();
        org.joda.time.DurationField durationField26 = chronology23.halfdays();
        org.joda.time.DurationField durationField27 = chronology23.days();
        org.joda.time.DurationField durationField28 = chronology23.hours();
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(chronology23);
        int int30 = mutableDateTime29.getYear();
        int int31 = mutableDateTime29.getMonthOfYear();
        int int32 = property11.getDifference((org.joda.time.ReadableInstant) mutableDateTime29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField14 and durationField27", (durationField14.compareTo(durationField27) == 0) == durationField14.equals(durationField27));
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test390");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.dayOfYear();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMinimumValue(readablePartial14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getMonthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        mutableDateTime23.addHours(59);
        int int28 = mutableDateTime23.getMillisOfSecond();
        mutableDateTime23.setMillisOfDay(10);
        boolean boolean31 = mutableDateTime18.isEqual((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Instant instant32 = mutableDateTime18.toInstant();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        int int37 = mutableDateTime34.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime34.set(dateTimeFieldType38, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        int int42 = mutableDateTime34.get(dateTimeFieldType41);
        org.joda.time.DateTime dateTime43 = mutableDateTime34.toDateTime();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime34.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime45 = property44.getMutableDateTime();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.dayOfWeek();
        java.util.Locale locale49 = null;
        java.lang.String str50 = property48.getAsText(locale49);
        java.util.Locale locale51 = null;
        int int52 = property48.getMaximumTextLength(locale51);
        int int53 = property48.getMaximumValueOverall();
        int int54 = property48.get();
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime57 = mutableDateTime56.toDateTime();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        boolean boolean61 = mutableDateTime59.isEqual(readableInstant60);
        mutableDateTime59.addHours(59);
        org.joda.time.Chronology chronology64 = mutableDateTime59.getChronology();
        mutableDateTime56.setChronology(chronology64);
        java.util.Locale locale68 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale69 = locale68.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) 598, chronology64, locale68);
        java.lang.String str71 = property48.getAsShortText(locale68);
        java.lang.String str72 = property44.getAsText(locale68);
        java.util.Calendar calendar73 = mutableDateTime18.toCalendar(locale68);
        java.lang.String str74 = dateTimeField13.getAsShortText((long) 74426, locale68);
        long long77 = dateTimeField13.set((long) 74503, "237");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and instant32", (mutableDateTime18.compareTo(instant32) == 0) == mutableDateTime18.equals(instant32));
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test391");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField(0);
        boolean boolean13 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime16.set(dateTimeFieldType20, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime16.getZone();
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone23.isLocalDateTimeGap(localDateTime24);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(0L, dateTimeZone23);
        mutableDateTime12.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        mutableDateTime29.addHours(59);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime29.minuteOfHour();
        int int35 = mutableDateTime29.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        int int39 = dateTimeField38.getMaximumValue();
        int int42 = dateTimeField38.getDifference((long) 10, (long) 'a');
        int int44 = dateTimeField38.getLeapAmount((-1L));
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.lang.String str47 = dateTimeField38.getAsText((long) 340, locale46);
        java.util.Locale locale49 = java.util.Locale.UK;
        java.lang.String str50 = dateTimeField38.getAsShortText((int) '4', locale49);
        org.joda.time.ReadablePartial readablePartial51 = null;
        java.util.Locale locale53 = java.util.Locale.UK;
        java.lang.String str54 = dateTimeField38.getAsText(readablePartial51, 292278993, locale53);
        java.util.Calendar calendar55 = mutableDateTime29.toCalendar(locale53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean57 = mutableDateTime29.isSupported(dateTimeFieldType56);
        mutableDateTime12.setDate((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime29.toMutableDateTime();
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(0L, chronology61, locale62, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone66 = dateTimeParserBucket65.getZone();
        org.joda.time.Chronology chronology67 = dateTimeParserBucket65.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.monthOfYear();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.weekyear();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.minuteOfDay();
        org.joda.time.DurationField durationField71 = chronology67.hours();
        org.joda.time.DateTimeField dateTimeField72 = chronology67.halfdayOfDay();
        org.joda.time.DurationField durationField73 = chronology67.hours();
        org.joda.time.DateTime dateTime74 = mutableDateTime59.toDateTime(chronology67);
        int int75 = mutableDateTime59.getDayOfYear();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime(chronology76);
        org.joda.time.Chronology chronology78 = null;
        mutableDateTime77.setChronology(chronology78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime(chronology80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        boolean boolean83 = mutableDateTime81.isEqual(readableInstant82);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = null;
        java.lang.String str85 = mutableDateTime81.toString(dateTimeFormatter84);
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime81.weekOfWeekyear();
        org.joda.time.Chronology chronology87 = mutableDateTime81.getChronology();
        mutableDateTime77.setMillis((org.joda.time.ReadableInstant) mutableDateTime81);
        mutableDateTime81.addMinutes((int) 'u');
        mutableDateTime81.add((long) 693);
        mutableDateTime59.setMillis((org.joda.time.ReadableInstant) mutableDateTime81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime29 and dateTime74", (mutableDateTime29.compareTo(dateTime74) == 0) == mutableDateTime29.equals(dateTime74));
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test392");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfCeiling();
        int int6 = property4.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.roundFloor();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        org.joda.time.Chronology chronology15 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfWeek();
        java.lang.String str17 = chronology15.toString();
        org.joda.time.DurationField durationField18 = chronology15.millis();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket24.getZone();
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        int int33 = mutableDateTime30.getHourOfDay();
        mutableDateTime30.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        int int39 = dateTimeField38.getMaximumValue();
        mutableDateTime30.setRounding(dateTimeField38);
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.lang.String str43 = dateTimeField38.getAsShortText((int) (byte) 1, locale42);
        java.lang.String str44 = dateTimeZone26.getName(10930L, locale42);
        org.joda.time.Chronology chronology45 = chronology15.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime46 = mutableDateTime7.toDateTime(chronology15);
        org.joda.time.DurationField durationField47 = chronology15.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime46", (mutableDateTime0.compareTo(dateTime46) == 0) == mutableDateTime0.equals(dateTime46));
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test393");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 9, 59);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfWeek();
        int int9 = property8.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property8.getFieldType();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfWeek();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime13.yearOfCentury();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        int int17 = property15.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int21 = dateTimeField20.getMaximumValue();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = dateTimeField20.getAsShortText(0L, locale23);
        int int26 = property15.getMaximumTextLength(locale23);
        dateTimeParserBucket5.saveField(dateTimeFieldType10, "2022-02-11T00:01:37.078Z", locale23);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType10.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType10.getDurationType();
        java.lang.String str30 = durationFieldType29.getName();
        java.lang.String str31 = durationFieldType29.getName();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale35, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeParserBucket38.getZone();
        long long41 = dateTimeParserBucket38.computeMillis(true);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket38.getChronology();
        org.joda.time.Chronology chronology43 = chronology42.withUTC();
        mutableDateTime32.setChronology(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfDay();
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DurationField durationField47 = durationFieldType29.getField(chronology43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField46", Math.signum(durationField16.compareTo(durationField46)) == -Math.signum(durationField46.compareTo(durationField16)));
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test394");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = mutableDateTime14.toDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        mutableDateTime25.addYears(0);
        mutableDateTime14.setDate((org.joda.time.ReadableInstant) mutableDateTime25);
        int int32 = mutableDateTime14.getEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfWeek();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        mutableDateTime37.addHours(59);
        int int42 = mutableDateTime37.getMillisOfSecond();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology44, locale45, (java.lang.Integer) 9, 59);
        java.lang.Object obj49 = dateTimeParserBucket48.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket48.saveField(dateTimeFieldType50, 59);
        boolean boolean53 = mutableDateTime37.isSupported(dateTimeFieldType50);
        int int54 = mutableDateTime34.compareTo((org.joda.time.ReadableInstant) mutableDateTime37);
        int int55 = mutableDateTime37.getDayOfMonth();
        mutableDateTime37.addYears(2922789);
        boolean boolean58 = mutableDateTime14.isAfter((org.joda.time.ReadableInstant) mutableDateTime37);
        java.util.GregorianCalendar gregorianCalendar59 = mutableDateTime37.toGregorianCalendar();
        int int60 = mutableDateTime37.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str62 = dateTimeFieldType61.toString();
        boolean boolean63 = mutableDateTime37.isSupported(dateTimeFieldType61);
        int int64 = mutableDateTime12.get(dateTimeFieldType61);
        org.joda.time.MutableDateTime mutableDateTime65 = mutableDateTime12.toMutableDateTime();
        mutableDateTime12.add(74418355L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime65", (mutableDateTime8.compareTo(mutableDateTime65) == 0) == mutableDateTime8.equals(mutableDateTime65));
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test395");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int9 = mutableDateTime0.getDayOfMonth();
        int int10 = mutableDateTime0.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime0.dayOfWeek();
        int int12 = mutableDateTime0.getCenturyOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        boolean boolean19 = mutableDateTime14.isSupported(dateTimeFieldType18);
        mutableDateTime14.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        long long30 = dateTimeParserBucket27.computeMillis(true);
        org.joda.time.Chronology chronology31 = dateTimeParserBucket27.getChronology();
        org.joda.time.Chronology chronology32 = chronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime14.toMutableDateTime(chronology32);
        org.joda.time.Instant instant35 = mutableDateTime14.toInstant();
        boolean boolean36 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) instant35);
        int int37 = mutableDateTime0.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime34", (mutableDateTime14.compareTo(mutableDateTime34) == 0) == mutableDateTime14.equals(mutableDateTime34));
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test396");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime1 = mutableDateTime0.toDateTime();
        int int2 = dateTime1.getHourOfDay();
        int int3 = dateTime1.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.yearOfEra();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar7 = mutableDateTime4.toCalendar(locale6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        mutableDateTime4.setDate(readableInstant8);
        int int10 = mutableDateTime4.getSecondOfDay();
        boolean boolean11 = dateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime4);
        boolean boolean12 = mutableDateTime4.isBeforeNow();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeFormatter15.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatter15.getParser();
        boolean boolean18 = dateTimeFormatter15.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter15.withOffsetParsed();
        int int20 = dateTimeFormatter15.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter15.withPivotYear(362);
        org.joda.time.Chronology chronology23 = dateTimeFormatter15.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter15.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter24.getZone();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        int int28 = dateTimeZone25.getOffsetFromLocal((-1404779304L));
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime4.toMutableDateTime(dateTimeZone25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and mutableDateTime26", (mutableDateTime0.compareTo(mutableDateTime26) == 0) == mutableDateTime0.equals(mutableDateTime26));
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test397");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        long long17 = dateTimeParserBucket14.computeMillis(true);
        org.joda.time.Chronology chronology18 = dateTimeParserBucket14.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.Instant instant22 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.minuteOfHour();
        long long39 = chronology30.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.DurationField durationField40 = chronology30.weeks();
        org.joda.time.DateTime dateTime41 = mutableDateTime1.toDateTime(chronology30);
        int int42 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.yearOfEra();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar46 = mutableDateTime43.toCalendar(locale45);
        mutableDateTime43.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int52 = mutableDateTime43.getDayOfMonth();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = mutableDateTime54.isEqual(readableInstant55);
        int int57 = mutableDateTime54.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime54.set(dateTimeFieldType58, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        int int62 = mutableDateTime54.get(dateTimeFieldType61);
        java.util.Date date63 = mutableDateTime54.toDate();
        org.joda.time.DateTimeZone dateTimeZone64 = mutableDateTime54.getZone();
        mutableDateTime43.setZoneRetainFields(dateTimeZone64);
        int int67 = dateTimeZone64.getOffsetFromLocal((long) 34835);
        mutableDateTime1.setZoneRetainFields(dateTimeZone64);
        org.joda.time.MutableDateTime mutableDateTime69 = mutableDateTime1.toMutableDateTime();
        mutableDateTime69.setMillisOfDay(41142);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        mutableDateTime69.add(readablePeriod72, 74560);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime21", (mutableDateTime1.compareTo(mutableDateTime21) == 0) == mutableDateTime1.equals(mutableDateTime21));
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test398");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getDurationField();
        boolean boolean5 = dateTimeField2.isLeap((long) (short) -1);
        java.lang.String str6 = dateTimeField2.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        int int11 = dateTimeField10.getMaximumValue();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfWeek();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime14.yearOfCentury();
        org.joda.time.DurationField durationField17 = property16.getDurationField();
        int int18 = property16.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        int int22 = dateTimeField21.getMaximumValue();
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale24.getISO3Country();
        java.lang.String str26 = dateTimeField21.getAsShortText(0L, locale24);
        int int27 = property16.getMaximumTextLength(locale24);
        java.lang.String str28 = dateTimeField10.getAsShortText(0L, locale24);
        java.lang.String str29 = dateTimeField2.getAsText((-1L), locale24);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = dateTimeField2.getType();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale35, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeParserBucket38.getZone();
        org.joda.time.Chronology chronology40 = dateTimeParserBucket38.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.days();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfDay();
        java.util.Locale locale45 = new java.util.Locale("anglais (Royaume-Uni)", "0237-02-11T09:40:32.406Z");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 669147, chronology40, locale45, (java.lang.Integer) 10671);
        org.joda.time.DurationField durationField48 = durationFieldType31.getField(chronology40);
        org.joda.time.format.DateTimePrinter dateTimePrinter49 = null;
        org.joda.time.format.DateTimeParser dateTimeParser50 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter49, dateTimeParser50);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeFormatter51.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser53 = dateTimeFormatter51.getParser();
        boolean boolean54 = dateTimeFormatter51.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter51.withOffsetParsed();
        org.joda.time.Chronology chronology56 = dateTimeFormatter51.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter57 = dateTimeFormatter51.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter51.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter51.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter51.withPivotYear((java.lang.Integer) 809);
        org.joda.time.format.DateTimePrinter dateTimePrinter63 = null;
        org.joda.time.format.DateTimeParser dateTimeParser64 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter63, dateTimeParser64);
        org.joda.time.DateTimeZone dateTimeZone66 = dateTimeFormatter65.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser67 = dateTimeFormatter65.getParser();
        boolean boolean68 = dateTimeFormatter65.isParser();
        org.joda.time.Chronology chronology70 = null;
        java.util.Locale locale71 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket(0L, chronology70, locale71, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone75 = dateTimeParserBucket74.getZone();
        org.joda.time.Chronology chronology76 = dateTimeParserBucket74.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.days();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        long long81 = chronology76.add(readablePeriod78, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter65.withChronology(chronology76);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter82.withOffsetParsed();
        boolean boolean84 = dateTimeFormatter83.isOffsetParsed();
        org.joda.time.Chronology chronology85 = dateTimeFormatter83.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = dateTimeFormatter62.withChronology(chronology85);
        org.joda.time.DurationField durationField88 = durationFieldType31.getField(chronology85);
        org.joda.time.DurationField durationField89 = chronology85.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField3 and durationField48", (durationField3.compareTo(durationField48) == 0) == durationField3.equals(durationField48));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test399");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.lang.String str15 = dateTimeZone12.getName((long) 2);
        java.util.TimeZone timeZone16 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology17 = chronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        org.joda.time.Chronology chronology25 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime18.toMutableDateTime(chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.dayOfWeek();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime30.yearOfCentury();
        org.joda.time.DurationField durationField33 = property32.getDurationField();
        int int34 = property32.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime35 = property32.roundCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        int int40 = dateTimeField38.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.dayOfWeek();
        java.util.Locale locale45 = null;
        java.lang.String str46 = property44.getAsText(locale45);
        java.util.Locale locale47 = null;
        int int48 = property44.getMaximumTextLength(locale47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        int int53 = mutableDateTime50.getHourOfDay();
        mutableDateTime50.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        int int59 = dateTimeField58.getMaximumValue();
        mutableDateTime50.setRounding(dateTimeField58);
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.lang.String str63 = dateTimeField58.getAsShortText((int) (byte) 1, locale62);
        java.lang.String str64 = property44.getAsShortText(locale62);
        java.lang.String str65 = dateTimeField38.getAsShortText(1L, locale62);
        java.lang.String str66 = locale62.getISO3Country();
        boolean boolean67 = locale62.hasExtensions();
        java.lang.String str68 = locale62.getDisplayLanguage();
        java.lang.String str69 = locale62.getDisplayScript();
        java.lang.String str70 = property32.getAsText(locale62);
        org.joda.time.MutableDateTime mutableDateTime71 = property32.getMutableDateTime();
        mutableDateTime71.setMinuteOfDay(2);
        int int74 = mutableDateTime71.getRoundingMode();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        boolean boolean79 = mutableDateTime77.isEqual(readableInstant78);
        mutableDateTime77.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        mutableDateTime77.add(readablePeriod82, (-292275054));
        long long85 = mutableDateTime77.getMillis();
        long long86 = mutableDateTime77.getMillis();
        org.joda.time.Chronology chronology87 = mutableDateTime77.getChronology();
        org.joda.time.MutableDateTime mutableDateTime88 = new org.joda.time.MutableDateTime(chronology87);
        org.joda.time.DateTimeField dateTimeField89 = dateTimeFieldType75.getField(chronology87);
        boolean boolean90 = mutableDateTime71.isSupported(dateTimeFieldType75);
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime28.property(dateTimeFieldType75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and mutableDateTime27", (mutableDateTime18.compareTo(mutableDateTime27) == 0) == mutableDateTime18.equals(mutableDateTime27));
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test400");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addDays((int) ' ');
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.millis();
        java.lang.String str14 = durationFieldType13.toString();
        java.lang.String str15 = durationFieldType13.getName();
        mutableDateTime1.add(durationFieldType13, 20);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        mutableDateTime19.addDays(0);
        int int25 = mutableDateTime19.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime19.weekyear();
        int int27 = mutableDateTime19.getMonthOfYear();
        long long28 = mutableDateTime19.getMillis();
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime19.toMutableDateTime();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.Instant instant31 = mutableDateTime19.toInstant();
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = null;
        org.joda.time.format.DateTimeParser dateTimeParser33 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter32, dateTimeParser33);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeFormatter34.getZone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        mutableDateTime37.addHours(59);
        org.joda.time.Chronology chronology42 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology42.getZone();
        java.lang.String str44 = dateTimeZone43.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter34.withZone(dateTimeZone43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        boolean boolean49 = mutableDateTime47.isEqual(readableInstant48);
        int int50 = mutableDateTime47.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime47.set(dateTimeFieldType51, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone54 = mutableDateTime47.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter34.withZone(dateTimeZone54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology56);
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime57.copy();
        int int59 = dateTimeZone54.getOffset((org.joda.time.ReadableInstant) mutableDateTime58);
        java.util.Date date60 = mutableDateTime58.toDate();
        mutableDateTime58.setYear(432);
        boolean boolean63 = instant31.isBefore((org.joda.time.ReadableInstant) mutableDateTime58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime47", (instant10.compareTo(mutableDateTime47) == 0) == instant10.equals(mutableDateTime47));
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test401");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale13);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.centuryOfEra();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        java.lang.Integer int26 = dateTimeParserBucket24.getPivotYear();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.eras();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        int int34 = dateTimeField33.getMaximumValue();
        int int37 = dateTimeField33.getDifference((long) 10, (long) 'a');
        int int39 = dateTimeField33.getLeapAmount((-1L));
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = dateTimeField33.getAsText((long) 340, locale41);
        java.util.Locale locale44 = java.util.Locale.UK;
        java.lang.String str45 = dateTimeField33.getAsShortText((int) '4', locale44);
        long long48 = dateTimeField33.getDifferenceAsLong((long) 74414, 74464784L);
        org.joda.time.ReadablePartial readablePartial49 = null;
        java.util.Locale locale54 = new java.util.Locale("\u82f1\u6587\u52a0\u62ff\u5927)", "2022-02-11T09:40:49.098Z", "2022-02-11T09:40:27.749Z");
        java.lang.String str55 = dateTimeField33.getAsShortText(readablePartial49, 293, locale54);
        int int56 = dateTimeField30.getMaximumTextLength(locale54);
        java.lang.String str57 = dateTimeField17.getAsShortText((long) 34810005, locale54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField28", Math.signum(durationField9.compareTo(durationField28)) == -Math.signum(durationField28.compareTo(durationField9)));
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test402");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.centuryOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = mutableDateTime19.toString(dateTimeFormatter22);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        java.lang.String str31 = dateTimeZone30.getID();
        java.lang.String str33 = dateTimeZone30.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime19.toMutableDateTime(dateTimeZone30);
        boolean boolean35 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.Instant instant36 = mutableDateTime34.toInstant();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket42.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.days();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.dayOfYear();
        org.joda.time.ReadablePartial readablePartial47 = null;
        int[] intArray53 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int54 = dateTimeField46.getMinimumValue(readablePartial47, intArray53);
        boolean boolean56 = dateTimeField46.isLeap((long) 74415);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone64 = dateTimeParserBucket63.getZone();
        org.joda.time.Chronology chronology65 = dateTimeParserBucket63.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.days();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.dayOfYear();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.millisOfSecond();
        java.util.Locale locale69 = java.util.Locale.TAIWAN;
        java.lang.String str70 = locale69.getScript();
        int int71 = dateTimeField68.getMaximumTextLength(locale69);
        java.lang.String str72 = dateTimeField46.getAsShortText((long) 34816672, locale69);
        int int73 = dateTimeField46.getMinimumValue();
        long long76 = dateTimeField46.addWrapField((long) 287, 0);
        boolean boolean77 = dateTimeField46.isSupported();
        java.lang.String str78 = dateTimeField46.toString();
        int int80 = dateTimeField46.getMaximumValue(4000L);
        int int81 = mutableDateTime34.get(dateTimeField46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime19 and instant36", (mutableDateTime19.compareTo(instant36) == 0) == mutableDateTime19.equals(instant36));
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test403");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale9, (java.lang.Integer) 9, 59);
        java.lang.Object obj13 = dateTimeParserBucket12.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket12.saveField(dateTimeFieldType14, 59);
        boolean boolean17 = mutableDateTime1.isSupported(dateTimeFieldType14);
        int int18 = mutableDateTime1.getDayOfWeek();
        int int19 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        mutableDateTime21.addDays(0);
        int int27 = mutableDateTime21.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime21.weekyear();
        int int29 = mutableDateTime21.getMonthOfYear();
        long long30 = mutableDateTime21.getMillis();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime21.centuryOfEra();
        org.joda.time.Instant instant32 = mutableDateTime21.toInstant();
        boolean boolean33 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket40.getZone();
        org.joda.time.Chronology chronology42 = dateTimeParserBucket40.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.days();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.dayOfMonth();
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology42, locale47);
        java.lang.Integer int49 = dateTimeParserBucket48.getPivotYear();
        java.lang.Integer int50 = dateTimeParserBucket48.getPivotYear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        int int55 = mutableDateTime52.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime52.set(dateTimeFieldType56, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.year();
        int int60 = mutableDateTime52.get(dateTimeFieldType59);
        org.joda.time.DateTime dateTime61 = mutableDateTime52.toDateTime();
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket(0L, chronology64, locale65, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone69 = dateTimeParserBucket68.getZone();
        org.joda.time.Chronology chronology70 = dateTimeParserBucket68.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.hourOfHalfday();
        java.util.Locale locale72 = java.util.Locale.FRENCH;
        java.lang.String str73 = locale72.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology70, locale72, (java.lang.Integer) 2022);
        java.util.Locale locale76 = locale72.stripExtensions();
        java.lang.String str77 = locale76.getScript();
        java.lang.String str78 = locale76.getISO3Language();
        java.util.Calendar calendar79 = dateTime61.toCalendar(locale76);
        org.joda.time.DateTimeZone dateTimeZone80 = dateTime61.getZone();
        long long83 = dateTimeZone80.convertLocalToUTC((long) 65, true);
        dateTimeParserBucket48.setZone(dateTimeZone80);
        mutableDateTime21.setZone(dateTimeZone80);
        java.lang.String str87 = dateTimeZone80.getShortName((long) 95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and instant32", (mutableDateTime21.compareTo(instant32) == 0) == mutableDateTime21.equals(instant32));
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test404");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.millisOfDay();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.era();
        mutableDateTime0.addSeconds(457);
        mutableDateTime0.setMinuteOfDay(715);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime13.set(dateTimeFieldType17, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        int int21 = mutableDateTime13.get(dateTimeFieldType20);
        int int22 = mutableDateTime13.getWeekOfWeekyear();
        boolean boolean24 = mutableDateTime13.isAfter((long) 74448);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime26.set(dateTimeFieldType30, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        int int34 = mutableDateTime26.get(dateTimeFieldType33);
        org.joda.time.DateTime dateTime35 = mutableDateTime26.toDateTime();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        mutableDateTime37.addYears(0);
        mutableDateTime26.setDate((org.joda.time.ReadableInstant) mutableDateTime37);
        mutableDateTime26.addMillis((int) (byte) 0);
        int int46 = mutableDateTime26.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime26.property(dateTimeFieldType47);
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType47.getRangeDurationType();
        mutableDateTime13.set(dateTimeFieldType47, 830);
        mutableDateTime0.set(dateTimeFieldType47, 293);
        int int54 = mutableDateTime0.getDayOfMonth();
        int int55 = mutableDateTime0.getDayOfWeek();
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeParserBucket61.getZone();
        org.joda.time.Chronology chronology63 = dateTimeParserBucket61.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.monthOfYear();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.weekyear();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.dayOfYear();
        org.joda.time.DurationField durationField67 = chronology63.halfdays();
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now(chronology63);
        org.joda.time.DateTimeField dateTimeField69 = chronology63.dayOfYear();
        mutableDateTime0.setChronology(chronology63);
        org.joda.time.DurationField durationField71 = chronology63.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime37 and mutableDateTime68", (mutableDateTime37.compareTo(mutableDateTime68) == 0) == mutableDateTime37.equals(mutableDateTime68));
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test405");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        mutableDateTime1.setHourOfDay(0);
        mutableDateTime1.setMillisOfSecond((int) '4');
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology15, locale16, (java.lang.Integer) 9, 59);
        int int20 = dateTimeParserBucket19.getOffset();
        java.lang.Integer int21 = dateTimeParserBucket19.getPivotYear();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        org.joda.time.DateTime dateTime24 = mutableDateTime1.toDateTime(chronology22);
        int int25 = dateTime24.getSecondOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime27.set(dateTimeFieldType31, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        int int35 = mutableDateTime27.get(dateTimeFieldType34);
        java.util.Date date36 = mutableDateTime27.toDate();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime27.era();
        int int38 = mutableDateTime27.getYearOfEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        int int43 = mutableDateTime40.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime40.set(dateTimeFieldType44, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        int int48 = mutableDateTime40.get(dateTimeFieldType47);
        org.joda.time.DateTime dateTime49 = mutableDateTime40.toDateTime();
        java.util.Locale locale50 = null;
        java.util.Calendar calendar51 = mutableDateTime40.toCalendar(locale50);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.DateTime dateTime54 = mutableDateTime40.toDateTime(dateTimeZone53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        int int59 = mutableDateTime56.getMillisOfDay();
        mutableDateTime56.addDays(22);
        mutableDateTime56.setYear(59);
        int int64 = dateTime54.compareTo((org.joda.time.ReadableInstant) mutableDateTime56);
        mutableDateTime56.addHours(831);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(chronology67);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime68.dayOfWeek();
        java.lang.String str70 = property69.getName();
        org.joda.time.DurationField durationField71 = property69.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property69.getFieldType();
        boolean boolean73 = mutableDateTime56.isSupported(dateTimeFieldType72);
        java.lang.String str74 = dateTimeFieldType72.getName();
        int int75 = mutableDateTime27.get(dateTimeFieldType72);
        int int76 = dateTime24.get(dateTimeFieldType72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField23 and durationField71", Math.signum(durationField23.compareTo(durationField71)) == -Math.signum(durationField71.compareTo(durationField23)));
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test406");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.addWrapField(0);
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfEra();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar8 = mutableDateTime5.toCalendar(locale7);
        mutableDateTime5.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime5.weekyear();
        int int15 = property14.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.minuteOfHour();
        int int18 = mutableDateTime16.getSecondOfMinute();
        int int19 = property1.compareTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.MutableDateTime mutableDateTime21 = property1.add((long) 437);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime23.getZone();
        org.joda.time.Chronology chronology31 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(390, 13);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone34.isLocalDateTimeGap(localDateTime36);
        org.joda.time.Chronology chronology38 = chronology31.withZone(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime21.toMutableDateTime(dateTimeZone34);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = mutableDateTime41.toString(dateTimeFormatter44);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        java.lang.String str54 = dateTimeZone52.getNameKey((long) (byte) 0);
        mutableDateTime41.setZoneRetainFields(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime56 = null;
        boolean boolean57 = dateTimeZone52.isLocalDateTimeGap(localDateTime56);
        long long59 = dateTimeZone52.previousTransition((long) 518);
        long long61 = dateTimeZone52.previousTransition((long) 692);
        org.joda.time.DateTime dateTime62 = mutableDateTime21.toDateTime(dateTimeZone52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and mutableDateTime39", (mutableDateTime21.compareTo(mutableDateTime39) == 0) == mutableDateTime21.equals(mutableDateTime39));
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test407");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        int int19 = mutableDateTime11.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = mutableDateTime11.toDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        mutableDateTime22.addYears(0);
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) mutableDateTime22);
        boolean boolean29 = mutableDateTime9.isBefore((org.joda.time.ReadableInstant) mutableDateTime22);
        int int30 = mutableDateTime22.getCenturyOfEra();
        org.joda.time.Instant instant31 = mutableDateTime22.toInstant();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime33.toString(dateTimeFormatter36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str46 = dateTimeZone44.getNameKey((long) (byte) 0);
        mutableDateTime33.setZoneRetainFields(dateTimeZone44);
        org.joda.time.Chronology chronology48 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.monthOfYear();
        long long51 = dateTimeField49.remainder((long) 36);
        long long53 = dateTimeField49.roundHalfCeiling((long) 810);
        int int54 = instant31.get(dateTimeField49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and mutableDateTime22", (mutableDateTime9.compareTo(mutableDateTime22) == 0) == mutableDateTime9.equals(mutableDateTime22));
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test408");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfCentury();
        long long11 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime8.setSecondOfMinute(13);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.era();
        int int15 = mutableDateTime8.getYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        mutableDateTime17.addHours(59);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.minuteOfHour();
        int int23 = mutableDateTime17.getSecondOfDay();
        int int24 = mutableDateTime17.getCenturyOfEra();
        mutableDateTime17.setSecondOfDay(969);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfHalfday();
        org.joda.time.DurationField durationField37 = chronology35.centuries();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology35.getZone();
        org.joda.time.DurationField durationField39 = chronology35.weeks();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.year();
        java.util.Locale locale41 = java.util.Locale.US;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 906, chronology35, locale41);
        org.joda.time.DateTime dateTime43 = mutableDateTime17.toDateTime(chronology35);
        boolean boolean44 = mutableDateTime17.isBeforeNow();
        boolean boolean45 = mutableDateTime8.isBefore((org.joda.time.ReadableInstant) mutableDateTime17);
        java.lang.Object obj46 = null;
        boolean boolean47 = mutableDateTime8.equals(obj46);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(0L, chronology50, locale51, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeParserBucket54.getZone();
        org.joda.time.Chronology chronology56 = dateTimeParserBucket54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.hourOfHalfday();
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.lang.String str59 = locale58.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology56, locale58, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField62 = chronology56.halfdays();
        org.joda.time.DateTimeField dateTimeField63 = chronology56.yearOfCentury();
        mutableDateTime8.setChronology(chronology56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and dateTime43", (mutableDateTime17.compareTo(dateTime43) == 0) == mutableDateTime17.equals(dateTime43));
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test409");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        mutableDateTime10.addDays(0);
        int int16 = mutableDateTime10.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime10.weekyear();
        boolean boolean18 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.minuteOfHour();
        int int26 = mutableDateTime20.getSecondOfDay();
        mutableDateTime20.setSecondOfDay((int) (byte) 0);
        mutableDateTime20.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.addHours((int) (short) 0);
        mutableDateTime31.addWeekyears((int) 'a');
        java.lang.String str37 = mutableDateTime31.toString("0");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        int int42 = mutableDateTime39.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime39.set(dateTimeFieldType43, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        int int47 = mutableDateTime39.get(dateTimeFieldType46);
        mutableDateTime31.set(dateTimeFieldType46, 5);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime20.property(dateTimeFieldType46);
        mutableDateTime10.set(dateTimeFieldType46, 237);
        mutableDateTime10.addWeekyears(22);
        boolean boolean55 = mutableDateTime10.isEqualNow();
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.days();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.dayOfYear();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField68 = chronology64.dayOfMonth();
        java.util.Locale locale69 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology64, locale69);
        org.joda.time.DateTimeField dateTimeField71 = chronology64.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime72 = mutableDateTime10.toMutableDateTime(chronology64);
        org.joda.time.DateTimeField dateTimeField73 = chronology64.centuryOfEra();
        long long75 = dateTimeField73.roundCeiling(1644572767766L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and mutableDateTime72", (mutableDateTime10.compareTo(mutableDateTime72) == 0) == mutableDateTime10.equals(mutableDateTime72));
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test410");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime4 = property1.add((long) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfEra();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar8 = mutableDateTime5.toCalendar(locale7);
        mutableDateTime5.addMinutes((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int12 = mutableDateTime5.get(dateTimeFieldType11);
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.dayOfMonth();
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology22, locale27);
        mutableDateTime5.setChronology(chronology22);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField31 = chronology22.secondOfMinute();
        org.joda.time.DurationField durationField32 = chronology22.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and mutableDateTime30", (mutableDateTime0.compareTo(mutableDateTime30) == 0) == mutableDateTime0.equals(mutableDateTime30));
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test411");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        int int3 = mutableDateTime2.getDayOfWeek();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket9.getZone();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.minuteOfHour();
        long long20 = chronology11.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.DurationField durationField21 = chronology11.weeks();
        org.joda.time.DateTime dateTime22 = mutableDateTime2.toDateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField23 = chronology11.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime22", (mutableDateTime1.compareTo(dateTime22) == 0) == mutableDateTime1.equals(dateTime22));
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test412");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.hourOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.Chronology chronology24 = null;
        mutableDateTime23.setChronology(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = mutableDateTime27.toString(dateTimeFormatter30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.weekOfWeekyear();
        org.joda.time.Chronology chronology33 = mutableDateTime27.getChronology();
        mutableDateTime23.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.addMinutes((int) 'u');
        org.joda.time.Chronology chronology37 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTime dateTime39 = mutableDateTime1.toDateTime(chronology37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableDateTime1.add(readablePeriod40);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        org.joda.time.Chronology chronology49 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.minuteOfDay();
        java.lang.String str52 = chronology49.toString();
        mutableDateTime1.setChronology(chronology49);
        org.joda.time.DateTimeField dateTimeField54 = chronology49.year();
        org.joda.time.DurationField durationField55 = chronology49.hours();
        org.joda.time.DurationField durationField56 = chronology49.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime10", (mutableDateTime1.compareTo(dateTime10) == 0) == mutableDateTime1.equals(dateTime10));
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test413");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        int int5 = mutableDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        boolean boolean7 = mutableDateTime2.isSupported(dateTimeFieldType6);
        mutableDateTime2.setSecondOfDay((int) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime2.isEqual(readableInstant10);
        mutableDateTime2.setSecondOfMinute(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        mutableDateTime2.add(durationFieldType15, (int) (short) 100);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        mutableDateTime19.addHours(59);
        org.joda.time.Chronology chronology24 = mutableDateTime19.getChronology();
        boolean boolean25 = durationFieldType15.isSupported(chronology24);
        org.joda.time.DurationField durationField26 = chronology24.years();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.secondOfDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getMonthOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        mutableDateTime34.addHours(59);
        int int39 = mutableDateTime34.getMillisOfSecond();
        mutableDateTime34.setMillisOfDay(10);
        boolean boolean42 = mutableDateTime29.isEqual((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.Instant instant43 = mutableDateTime29.toInstant();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableDateTime45.isEqual(readableInstant46);
        int int48 = mutableDateTime45.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime45.set(dateTimeFieldType49, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        int int53 = mutableDateTime45.get(dateTimeFieldType52);
        org.joda.time.DateTime dateTime54 = mutableDateTime45.toDateTime();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime45.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime56 = property55.getMutableDateTime();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(chronology57);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime58.dayOfWeek();
        java.util.Locale locale60 = null;
        java.lang.String str61 = property59.getAsText(locale60);
        java.util.Locale locale62 = null;
        int int63 = property59.getMaximumTextLength(locale62);
        int int64 = property59.getMaximumValueOverall();
        int int65 = property59.get();
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime68 = mutableDateTime67.toDateTime();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        boolean boolean72 = mutableDateTime70.isEqual(readableInstant71);
        mutableDateTime70.addHours(59);
        org.joda.time.Chronology chronology75 = mutableDateTime70.getChronology();
        mutableDateTime67.setChronology(chronology75);
        java.util.Locale locale79 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale80 = locale79.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) 598, chronology75, locale79);
        java.lang.String str82 = property59.getAsShortText(locale79);
        java.lang.String str83 = property55.getAsText(locale79);
        java.util.Calendar calendar84 = mutableDateTime29.toCalendar(locale79);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((-910800000L), chronology24, locale79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime29 and instant43", (mutableDateTime29.compareTo(instant43) == 0) == mutableDateTime29.equals(instant43));
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test414");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = mutableDateTime14.toDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        mutableDateTime25.addYears(0);
        mutableDateTime14.setDate((org.joda.time.ReadableInstant) mutableDateTime25);
        int int32 = mutableDateTime14.getEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfWeek();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        mutableDateTime37.addHours(59);
        int int42 = mutableDateTime37.getMillisOfSecond();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology44, locale45, (java.lang.Integer) 9, 59);
        java.lang.Object obj49 = dateTimeParserBucket48.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket48.saveField(dateTimeFieldType50, 59);
        boolean boolean53 = mutableDateTime37.isSupported(dateTimeFieldType50);
        int int54 = mutableDateTime34.compareTo((org.joda.time.ReadableInstant) mutableDateTime37);
        int int55 = mutableDateTime37.getDayOfMonth();
        mutableDateTime37.addYears(2922789);
        boolean boolean58 = mutableDateTime14.isAfter((org.joda.time.ReadableInstant) mutableDateTime37);
        java.util.GregorianCalendar gregorianCalendar59 = mutableDateTime37.toGregorianCalendar();
        int int60 = mutableDateTime37.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str62 = dateTimeFieldType61.toString();
        boolean boolean63 = mutableDateTime37.isSupported(dateTimeFieldType61);
        int int64 = mutableDateTime12.get(dateTimeFieldType61);
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime66 = mutableDateTime65.toDateTime();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        boolean boolean70 = mutableDateTime68.isEqual(readableInstant69);
        mutableDateTime68.addHours(59);
        org.joda.time.Chronology chronology73 = mutableDateTime68.getChronology();
        mutableDateTime65.setChronology(chronology73);
        mutableDateTime65.setSecondOfMinute(0);
        mutableDateTime65.setDate(1644788463784L);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableDateTime mutableDateTime80 = new org.joda.time.MutableDateTime(chronology79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        boolean boolean82 = mutableDateTime80.isEqual(readableInstant81);
        int int83 = mutableDateTime80.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime80.set(dateTimeFieldType84, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone87 = mutableDateTime80.getZone();
        org.joda.time.Chronology chronology88 = mutableDateTime80.getChronology();
        org.joda.time.DateTimeField dateTimeField89 = chronology88.yearOfEra();
        org.joda.time.DurationField durationField90 = chronology88.seconds();
        org.joda.time.DateTime dateTime91 = mutableDateTime65.toDateTime(chronology88);
        org.joda.time.DateTimeField dateTimeField92 = dateTimeFieldType61.getField(chronology88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime12", (mutableDateTime8.compareTo(mutableDateTime12) == 0) == mutableDateTime8.equals(mutableDateTime12));
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test415");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(chronology8);
        boolean boolean11 = durationFieldType0.isSupported(chronology8);
        java.lang.String str12 = durationFieldType0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = mutableDateTime15.toString(dateTimeFormatter18);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey((long) (byte) 0);
        mutableDateTime15.setZoneRetainFields(dateTimeZone26);
        org.joda.time.Chronology chronology30 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType13.getField(chronology30);
        org.joda.time.DurationField durationField33 = chronology30.minutes();
        org.joda.time.DurationField durationField34 = chronology30.hours();
        boolean boolean35 = durationFieldType0.isSupported(chronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and mutableDateTime15", (mutableDateTime10.compareTo(mutableDateTime15) == 0) == mutableDateTime10.equals(mutableDateTime15));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test416");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.weekyear();
        int int21 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.property(dateTimeFieldType22);
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.getMutableDateTime();
        java.lang.String str26 = property23.getName();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime28.set(dateTimeFieldType32, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime28.getZone();
        long long37 = dateTimeZone35.nextTransition((long) 59);
        java.lang.String str39 = dateTimeZone35.getName((long) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        mutableDateTime41.addHours(59);
        org.joda.time.Chronology chronology46 = mutableDateTime41.getChronology();
        org.joda.time.MutableDateTime mutableDateTime47 = mutableDateTime41.toMutableDateTime();
        int int48 = mutableDateTime41.getYear();
        int int49 = dateTimeZone35.getOffset((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology51, locale52, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeParserBucket55.getZone();
        long long58 = dateTimeParserBucket55.computeMillis(true);
        org.joda.time.Chronology chronology59 = dateTimeParserBucket55.getChronology();
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime41.toMutableDateTime(chronology59);
        int int61 = mutableDateTime60.getDayOfYear();
        int int62 = mutableDateTime60.getWeekyear();
        java.lang.String str63 = mutableDateTime60.toString();
        int int64 = property23.compareTo((org.joda.time.ReadableInstant) mutableDateTime60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime28", (instant19.compareTo(mutableDateTime28) == 0) == instant19.equals(mutableDateTime28));
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test417");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime33.getZone();
        int int36 = dateTimeZone34.getOffsetFromLocal(1644612117626L);
        java.util.TimeZone timeZone37 = dateTimeZone34.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test418");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        long long10 = mutableDateTime1.getMillis();
        int int11 = mutableDateTime1.getSecondOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getMonthOfYear();
        org.joda.time.ReadableInstant readableInstant17 = null;
        mutableDateTime13.setDate(readableInstant17);
        long long19 = mutableDateTime13.getMillis();
        int int20 = mutableDateTime13.getYearOfCentury();
        boolean boolean21 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime13.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        mutableDateTime24.addHours(59);
        int int29 = mutableDateTime24.getMillisOfSecond();
        mutableDateTime24.setMillisOfDay(10);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        mutableDateTime24.add(readablePeriod32, 580);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        mutableDateTime35.addHours((int) (short) 0);
        mutableDateTime35.addWeekyears((int) 'a');
        java.lang.String str41 = mutableDateTime35.toString("0");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime43.set(dateTimeFieldType47, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        int int51 = mutableDateTime43.get(dateTimeFieldType50);
        mutableDateTime35.set(dateTimeFieldType50, 5);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime24.property(dateTimeFieldType50);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime13.property(dateTimeFieldType50);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        boolean boolean59 = mutableDateTime57.isEqual(readableInstant58);
        int int60 = mutableDateTime57.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime57.set(dateTimeFieldType61, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        int int65 = mutableDateTime57.get(dateTimeFieldType64);
        int int66 = mutableDateTime57.getWeekOfWeekyear();
        org.joda.time.Instant instant67 = mutableDateTime57.toInstant();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime57.dayOfWeek();
        mutableDateTime57.addWeekyears(796);
        int int71 = mutableDateTime57.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.secondOfMinute();
        mutableDateTime57.set(dateTimeFieldType72, 9);
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType72.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType76 = dateTimeFieldType72.getDurationType();
        org.joda.time.Chronology chronology78 = null;
        java.util.Locale locale79 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket(0L, chronology78, locale79, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone83 = dateTimeParserBucket82.getZone();
        long long85 = dateTimeParserBucket82.computeMillis(true);
        org.joda.time.Chronology chronology86 = dateTimeParserBucket82.getChronology();
        org.joda.time.Chronology chronology87 = chronology86.withUTC();
        org.joda.time.DateTimeField dateTimeField88 = chronology86.yearOfEra();
        org.joda.time.DateTimeField dateTimeField89 = chronology86.hourOfHalfday();
        boolean boolean90 = dateTimeFieldType72.isSupported(chronology86);
        mutableDateTime13.set(dateTimeFieldType72, 31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime43 and instant67", (mutableDateTime43.compareTo(instant67) == 0) == mutableDateTime43.equals(instant67));
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test419");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        boolean boolean10 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        java.util.Calendar calendar28 = mutableDateTime14.toCalendar(locale26);
        java.lang.String str29 = dateTimeField4.getAsShortText(readablePartial11, (int) ' ', locale26);
        int int30 = property1.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = property1.roundCeiling();
        mutableDateTime31.setMinuteOfDay(189);
        int int34 = mutableDateTime31.getYear();
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime31.toMutableDateTime();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        mutableDateTime37.addDays(0);
        int int43 = mutableDateTime37.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime37.weekyear();
        int int45 = mutableDateTime37.getMonthOfYear();
        long long46 = mutableDateTime37.getMillis();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime37.centuryOfEra();
        org.joda.time.Instant instant48 = mutableDateTime37.toInstant();
        int int49 = mutableDateTime37.getEra();
        mutableDateTime35.setTime((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime35.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime24 and instant48", (mutableDateTime24.compareTo(instant48) == 0) == mutableDateTime24.equals(instant48));
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test420");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        int int3 = mutableDateTime2.getDayOfWeek();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket9.getZone();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.minuteOfHour();
        long long20 = chronology11.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.DurationField durationField21 = chronology11.weeks();
        org.joda.time.DateTime dateTime22 = mutableDateTime2.toDateTime(chronology11);
        mutableDateTime2.add(55074L);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology26, locale27, (java.lang.Integer) 9, 59);
        dateTimeParserBucket30.setPivotYear((java.lang.Integer) 805);
        dateTimeParserBucket30.setOffset((java.lang.Integer) 34946);
        dateTimeParserBucket30.setOffset(362);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        java.lang.String str40 = dateTimeZone38.getNameKey((long) (short) 100);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        mutableDateTime42.addHours(59);
        int int47 = mutableDateTime42.getMillisOfSecond();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = mutableDateTime49.isEqual(readableInstant50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = mutableDateTime49.toString(dateTimeFormatter52);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeParserBucket59.getZone();
        java.lang.String str62 = dateTimeZone60.getNameKey((long) (byte) 0);
        mutableDateTime49.setZoneRetainFields(dateTimeZone60);
        mutableDateTime42.setZone(dateTimeZone60);
        long long66 = dateTimeZone38.getMillisKeepLocal(dateTimeZone60, (long) 74419);
        dateTimeParserBucket30.setZone(dateTimeZone38);
        long long69 = dateTimeZone38.previousTransition(1644619423063L);
        org.joda.time.MutableDateTime mutableDateTime70 = mutableDateTime2.toMutableDateTime(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime22", (mutableDateTime1.compareTo(dateTime22) == 0) == mutableDateTime1.equals(dateTime22));
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test421");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime1.setSecondOfDay(74416);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        int int35 = mutableDateTime32.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime32.set(dateTimeFieldType36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        int int40 = mutableDateTime32.get(dateTimeFieldType39);
        int int41 = mutableDateTime32.getWeekOfWeekyear();
        org.joda.time.Instant instant42 = mutableDateTime32.toInstant();
        int int43 = mutableDateTime32.getMinuteOfHour();
        int int44 = mutableDateTime32.getWeekyear();
        org.joda.time.DateTime dateTime45 = mutableDateTime32.toDateTime();
        boolean boolean46 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime45);
        long long47 = mutableDateTime1.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and instant42", (mutableDateTime15.compareTo(instant42) == 0) == mutableDateTime15.equals(instant42));
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test422");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.DurationField durationField25 = chronology22.hours();
        org.joda.time.DurationField durationField26 = durationFieldType14.getField(chronology22);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(chronology22);
        org.joda.time.DateTime dateTime28 = mutableDateTime1.toDateTime(chronology22);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        mutableDateTime31.addHours(59);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime31.minuteOfHour();
        mutableDateTime31.addWeeks(34808947);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        int int43 = mutableDateTime40.getHourOfDay();
        mutableDateTime40.addDays(0);
        int int46 = mutableDateTime40.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime40.weekyear();
        boolean boolean48 = mutableDateTime31.isEqual((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        mutableDateTime50.addHours(59);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime50.minuteOfHour();
        int int56 = mutableDateTime50.getSecondOfDay();
        mutableDateTime50.setSecondOfDay((int) (byte) 0);
        mutableDateTime50.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.now();
        mutableDateTime61.addHours((int) (short) 0);
        mutableDateTime61.addWeekyears((int) 'a');
        java.lang.String str67 = mutableDateTime61.toString("0");
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        boolean boolean71 = mutableDateTime69.isEqual(readableInstant70);
        int int72 = mutableDateTime69.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime69.set(dateTimeFieldType73, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.year();
        int int77 = mutableDateTime69.get(dateTimeFieldType76);
        mutableDateTime61.set(dateTimeFieldType76, 5);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime50.property(dateTimeFieldType76);
        mutableDateTime40.set(dateTimeFieldType76, 237);
        mutableDateTime29.setMillis((org.joda.time.ReadableInstant) mutableDateTime40);
        int int84 = mutableDateTime29.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime28", (mutableDateTime1.compareTo(dateTime28) == 0) == mutableDateTime1.equals(dateTime28));
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test423");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.minuteOfHour();
        long long17 = chronology8.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale39.getDisplayScript(locale42);
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = locale39.getDisplayLanguage(locale45);
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        org.joda.time.Chronology chronology55 = dateTimeParserBucket53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfHalfday();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = locale57.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology55, locale57, (java.lang.Integer) 2022);
        java.util.Locale locale61 = locale57.stripExtensions();
        java.lang.String str62 = locale61.getScript();
        java.lang.String str63 = locale61.getISO3Language();
        java.lang.String str64 = locale39.getDisplayScript(locale61);
        java.lang.String str65 = locale61.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) 34810005, chronology8, locale61);
        java.lang.String str67 = locale61.getDisplayScript();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and mutableDateTime20", (mutableDateTime18.compareTo(mutableDateTime20) == 0) == mutableDateTime18.equals(mutableDateTime20));
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test424");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.addWeeks(678);
        boolean boolean22 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getCenturyOfEra();
        mutableDateTime18.setYear(672);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime18.toMutableDateTime();
        int int27 = mutableDateTime18.getMonthOfYear();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.minuteOfHour();
        org.joda.time.Chronology chronology41 = chronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology35.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime18.toMutableDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField44 = chronology35.weekyearOfCentury();
        long long47 = dateTimeField44.add(35651000L, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and mutableDateTime43", (mutableDateTime18.compareTo(mutableDateTime43) == 0) == mutableDateTime18.equals(mutableDateTime43));
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test425");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        mutableDateTime16.addHours(59);
        int int21 = mutableDateTime16.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = mutableDateTime23.toString(dateTimeFormatter26);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) (byte) 0);
        mutableDateTime23.setZoneRetainFields(dateTimeZone34);
        mutableDateTime16.setZone(dateTimeZone34);
        java.util.TimeZone timeZone39 = dateTimeZone34.toTimeZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone34);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundFloor();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale45, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology50 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        long long55 = chronology50.add(readablePeriod52, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now(chronology50);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(chronology64);
        org.joda.time.DateTime dateTime67 = mutableDateTime56.toDateTime(chronology64);
        int int68 = dateTime67.getSecondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime67.toMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar70 = mutableDateTime69.toGregorianCalendar();
        mutableDateTime42.setDate((org.joda.time.ReadableInstant) mutableDateTime69);
        int int72 = mutableDateTime42.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime23 and mutableDateTime56", (mutableDateTime23.compareTo(mutableDateTime56) == 0) == mutableDateTime23.equals(mutableDateTime56));
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test426");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfWeek();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property11.getAsText(locale12);
        java.util.Locale locale14 = null;
        int int15 = property11.getMaximumTextLength(locale14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        mutableDateTime17.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int26 = dateTimeField25.getMaximumValue();
        mutableDateTime17.setRounding(dateTimeField25);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = dateTimeField25.getAsShortText((int) (byte) 1, locale29);
        java.lang.String str31 = property11.getAsShortText(locale29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.getScript();
        java.lang.String str34 = locale29.getDisplayScript(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale29);
        long long36 = dateTimeParserBucket35.computeMillis();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        int int41 = mutableDateTime38.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime38.set(dateTimeFieldType42, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        int int46 = mutableDateTime38.get(dateTimeFieldType45);
        org.joda.time.DateTime dateTime47 = mutableDateTime38.toDateTime();
        java.util.Locale locale48 = null;
        java.util.Calendar calendar49 = mutableDateTime38.toCalendar(locale48);
        mutableDateTime38.addDays((int) (byte) 0);
        mutableDateTime38.add((long) 2022);
        org.joda.time.Instant instant54 = mutableDateTime38.toInstant();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        int int59 = mutableDateTime56.getHourOfDay();
        mutableDateTime56.addDays(0);
        int int62 = mutableDateTime56.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime56.weekyear();
        mutableDateTime56.add((long) 993);
        org.joda.time.MutableDateTime mutableDateTime66 = mutableDateTime56.copy();
        mutableDateTime66.setSecondOfDay(829);
        mutableDateTime38.setDate((org.joda.time.ReadableInstant) mutableDateTime66);
        boolean boolean70 = dateTimeParserBucket35.restoreState((java.lang.Object) mutableDateTime38);
        org.joda.time.Chronology chronology71 = dateTimeParserBucket35.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime38 and instant54", (mutableDateTime38.compareTo(instant54) == 0) == mutableDateTime38.equals(instant54));
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test427");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = mutableDateTime1.toDateTime(dateTimeZone16);
        mutableDateTime1.addWeekyears(79);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.yearOfEra();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar24 = mutableDateTime21.toCalendar(locale23);
        mutableDateTime21.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime21.dayOfYear();
        org.joda.time.Instant instant31 = mutableDateTime21.toInstant();
        int int32 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime21);
        long long33 = mutableDateTime21.getMillis();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        int int38 = mutableDateTime35.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime35.set(dateTimeFieldType39, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        int int43 = mutableDateTime35.get(dateTimeFieldType42);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeParserBucket49.getZone();
        java.lang.String str51 = dateTimeZone50.toString();
        org.joda.time.DateTime dateTime52 = mutableDateTime35.toDateTime(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime53 = null;
        boolean boolean54 = dateTimeZone50.isLocalDateTimeGap(localDateTime53);
        java.util.TimeZone timeZone55 = dateTimeZone50.toTimeZone();
        org.joda.time.LocalDateTime localDateTime56 = null;
        boolean boolean57 = dateTimeZone50.isLocalDateTimeGap(localDateTime56);
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime21.toMutableDateTime(dateTimeZone50);
        int int59 = mutableDateTime58.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and instant31", (mutableDateTime21.compareTo(instant31) == 0) == mutableDateTime21.equals(instant31));
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test428");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        int int3 = mutableDateTime2.getDayOfWeek();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket9.getZone();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.minuteOfHour();
        long long20 = chronology11.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.DurationField durationField21 = chronology11.weeks();
        org.joda.time.DateTime dateTime22 = mutableDateTime2.toDateTime(chronology11);
        mutableDateTime2.add(55074L);
        mutableDateTime2.setWeekyear(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime22", (mutableDateTime1.compareTo(dateTime22) == 0) == mutableDateTime1.equals(dateTime22));
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test429");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        java.lang.Object obj21 = dateTimeParserBucket19.saveState();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology38, locale40, (java.lang.Integer) 2022);
        java.util.Locale locale44 = locale40.stripExtensions();
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "", locale40);
        java.lang.String str46 = mutableDateTime1.toString("32", locale40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        mutableDateTime48.addHours(59);
        int int53 = mutableDateTime48.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean55 = mutableDateTime48.isSupported(dateTimeFieldType54);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField57 = mutableDateTime48.getRoundingField();
        boolean boolean58 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        int int59 = mutableDateTime48.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test430");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.setMinuteOfHour((int) (short) 1);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekyear();
        int int8 = mutableDateTime1.getWeekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        mutableDateTime10.addHours(59);
        org.joda.time.Chronology chronology15 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology15);
        boolean boolean18 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey((long) (byte) 0);
        org.joda.time.DateTime dateTime28 = mutableDateTime1.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        mutableDateTime30.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        mutableDateTime30.add(readablePeriod35, (-292275054));
        long long38 = mutableDateTime30.getMillis();
        long long39 = mutableDateTime30.getMillis();
        mutableDateTime30.setTime(1644788463784L);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        org.joda.time.Chronology chronology49 = dateTimeParserBucket47.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.days();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.dayOfYear();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = chronology49.minuteOfHour();
        long long58 = chronology49.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.now(chronology49);
        boolean boolean60 = mutableDateTime30.isBefore((org.joda.time.ReadableInstant) mutableDateTime59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = mutableDateTime62.isEqual(readableInstant63);
        int int65 = mutableDateTime62.getHourOfDay();
        mutableDateTime62.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean69 = mutableDateTime62.isSupported(dateTimeFieldType68);
        mutableDateTime62.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime74 = mutableDateTime62.toDateTime(dateTimeZone73);
        org.joda.time.ReadableDuration readableDuration75 = null;
        mutableDateTime62.add(readableDuration75);
        mutableDateTime30.setMillis((org.joda.time.ReadableInstant) mutableDateTime62);
        int int78 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) mutableDateTime62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and mutableDateTime59", (mutableDateTime17.compareTo(mutableDateTime59) == 0) == mutableDateTime17.equals(mutableDateTime59));
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test431");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        boolean boolean7 = locale6.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withLocale(locale6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear(34821173);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int15 = dateTimeField13.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfWeek();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property19.getAsText(locale20);
        java.util.Locale locale22 = null;
        int int23 = property19.getMaximumTextLength(locale22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        mutableDateTime25.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        int int34 = dateTimeField33.getMaximumValue();
        mutableDateTime25.setRounding(dateTimeField33);
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = dateTimeField33.getAsShortText((int) (byte) 1, locale37);
        java.lang.String str39 = property19.getAsShortText(locale37);
        java.lang.String str40 = dateTimeField13.getAsShortText(1L, locale37);
        java.lang.String str41 = locale37.getISO3Country();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter2.withLocale(locale37);
        boolean boolean43 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology44 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale46 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(390, 13);
        boolean boolean51 = dateTimeZone49.isStandardOffset((long) 3);
        long long53 = dateTimeZone49.nextTransition((long) 225);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        boolean boolean57 = mutableDateTime55.isEqual(readableInstant56);
        int int58 = mutableDateTime55.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime55.set(dateTimeFieldType59, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        int int63 = mutableDateTime55.get(dateTimeFieldType62);
        int int64 = mutableDateTime55.getWeekOfWeekyear();
        org.joda.time.Instant instant65 = mutableDateTime55.toInstant();
        int int66 = mutableDateTime55.getMinuteOfHour();
        int int67 = mutableDateTime55.getWeekyear();
        int int68 = dateTimeZone49.getOffset((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter2.withZone(dateTimeZone49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter2.withDefaultYear(34981);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime55 and instant65", (mutableDateTime55.compareTo(instant65) == 0) == mutableDateTime55.equals(instant65));
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test432");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfWeek();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property11.getAsText(locale12);
        java.util.Locale locale14 = null;
        int int15 = property11.getMaximumTextLength(locale14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        mutableDateTime17.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int26 = dateTimeField25.getMaximumValue();
        mutableDateTime17.setRounding(dateTimeField25);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = dateTimeField25.getAsShortText((int) (byte) 1, locale29);
        java.lang.String str31 = property11.getAsShortText(locale29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.getScript();
        java.lang.String str34 = locale29.getDisplayScript(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale29);
        org.joda.time.DurationField durationField36 = chronology7.centuries();
        org.joda.time.DurationField durationField37 = chronology7.centuries();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        int int42 = mutableDateTime39.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime39.set(dateTimeFieldType43, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        int int47 = mutableDateTime39.get(dateTimeFieldType46);
        org.joda.time.DateTime dateTime48 = mutableDateTime39.toDateTime();
        int int49 = dateTime48.getMinuteOfHour();
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology51, locale52, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeParserBucket55.getZone();
        org.joda.time.Chronology chronology57 = dateTimeParserBucket55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.now(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime48.toDateTime(chronology57);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime60.getZone();
        org.joda.time.Chronology chronology62 = chronology7.withZone(dateTimeZone61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime39 and dateTime60", (mutableDateTime39.compareTo(dateTime60) == 0) == mutableDateTime39.equals(dateTime60));
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test433");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.minuteOfDay();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        java.lang.String str12 = chronology7.toString();
        org.joda.time.DurationField durationField13 = chronology7.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField13, and durationField11", !(durationField11.compareTo(durationField13) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField13.compareTo(durationField11))));
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test434");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        mutableDateTime1.addMinutes(0);
        boolean boolean12 = mutableDateTime1.isBeforeNow();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology19.getZone();
        java.lang.String str21 = dateTimeZone20.getID();
        boolean boolean23 = dateTimeZone20.isStandardOffset((long) 930);
        org.joda.time.DateTime dateTime24 = mutableDateTime1.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.days();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.secondOfMinute();
        long long42 = chronology32.add(1835L, (long) 693, 12);
        org.joda.time.DateTime dateTime43 = mutableDateTime1.toDateTime(chronology32);
        org.joda.time.Chronology chronology44 = chronology32.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime43", (mutableDateTime1.compareTo(dateTime43) == 0) == mutableDateTime1.equals(dateTime43));
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test435");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.centuryOfEra();
        int int18 = mutableDateTime1.getYearOfCentury();
        long long19 = mutableDateTime1.getMillis();
        int int20 = mutableDateTime1.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime1.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = null;
        org.joda.time.format.DateTimeParser dateTimeParser23 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter22, dateTimeParser23);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter24.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser26 = dateTimeFormatter24.getParser();
        boolean boolean27 = dateTimeFormatter24.isParser();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        long long40 = chronology35.add(readablePeriod37, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter24.withChronology(chronology35);
        org.joda.time.DurationField durationField42 = chronology35.seconds();
        org.joda.time.DateTimeField dateTimeField43 = chronology35.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime1.toMutableDateTime(chronology35);
        org.joda.time.DurationField durationField45 = chronology35.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime44", (mutableDateTime1.compareTo(mutableDateTime44) == 0) == mutableDateTime1.equals(mutableDateTime44));
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test436");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.minuteOfHour();
        org.joda.time.Chronology chronology43 = chronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType29.getField(chronology43);
        mutableDateTime1.setChronology(chronology43);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.yearOfCentury();
        long long49 = dateTimeField46.add(74525L, 34971);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime15", (mutableDateTime1.compareTo(mutableDateTime15) == 0) == mutableDateTime1.equals(mutableDateTime15));
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test437");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long7 = dateTimeParserBucket5.computeMillis();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DurationField durationField10 = dateTimeField9.getDurationField();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime21.set(dateTimeFieldType25, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType25.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        org.joda.time.DurationField durationField33 = dateTimeField32.getDurationField();
        boolean boolean35 = dateTimeField32.isLeap((long) (short) -1);
        java.lang.String str36 = dateTimeField32.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        int int41 = dateTimeField40.getMaximumValue();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.dayOfWeek();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime44.yearOfCentury();
        org.joda.time.DurationField durationField47 = property46.getDurationField();
        int int48 = property46.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        int int52 = dateTimeField51.getMaximumValue();
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = locale54.getISO3Country();
        java.lang.String str56 = dateTimeField51.getAsShortText(0L, locale54);
        int int57 = property46.getMaximumTextLength(locale54);
        java.lang.String str58 = dateTimeField40.getAsShortText(0L, locale54);
        java.lang.String str59 = dateTimeField32.getAsText((-1L), locale54);
        dateTimeParserBucket17.saveField(dateTimeFieldType25, "2022-02-11T09:40:25.676Z", locale54);
        java.lang.String str61 = locale54.getLanguage();
        java.lang.String str62 = dateTimeField9.getAsShortText(41189, locale54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField10 and durationField47", (durationField10.compareTo(durationField47) == 0) == durationField10.equals(durationField47));
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test438");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.weekyear();
        int int21 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime9.minuteOfDay();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime9.add(readableDuration23, 4);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        java.util.Locale locale31 = null;
        java.util.Calendar calendar32 = mutableDateTime27.toCalendar(locale31);
        mutableDateTime27.setDayOfYear(7);
        org.joda.time.DateTime dateTime35 = mutableDateTime27.toDateTime();
        java.util.GregorianCalendar gregorianCalendar36 = mutableDateTime27.toGregorianCalendar();
        mutableDateTime27.setSecondOfDay(74420);
        boolean boolean39 = mutableDateTime9.isAfter((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.addMonths(664);
        java.util.Date date42 = mutableDateTime27.toDate();
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime27.add(readableDuration43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and instant19", (mutableDateTime9.compareTo(instant19) == 0) == mutableDateTime9.equals(instant19));
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test439");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        mutableDateTime1.setMillis((long) 232);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.secondOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime16.set(dateTimeFieldType20, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = mutableDateTime16.get(dateTimeFieldType23);
        org.joda.time.DateTime dateTime25 = mutableDateTime16.toDateTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) mutableDateTime27);
        int int34 = mutableDateTime16.getEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfWeek();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        mutableDateTime39.addHours(59);
        int int44 = mutableDateTime39.getMillisOfSecond();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology46, locale47, (java.lang.Integer) 9, 59);
        java.lang.Object obj51 = dateTimeParserBucket50.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket50.saveField(dateTimeFieldType52, 59);
        boolean boolean55 = mutableDateTime39.isSupported(dateTimeFieldType52);
        int int56 = mutableDateTime36.compareTo((org.joda.time.ReadableInstant) mutableDateTime39);
        int int57 = mutableDateTime39.getDayOfMonth();
        mutableDateTime39.addYears(2922789);
        boolean boolean60 = mutableDateTime16.isAfter((org.joda.time.ReadableInstant) mutableDateTime39);
        mutableDateTime39.setYear(489);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.ReadableDuration readableDuration64 = null;
        mutableDateTime39.add(readableDuration64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime16", (instant11.compareTo(mutableDateTime16) == 0) == instant11.equals(mutableDateTime16));
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test440");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        boolean boolean10 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        java.util.Calendar calendar28 = mutableDateTime14.toCalendar(locale26);
        java.lang.String str29 = dateTimeField4.getAsShortText(readablePartial11, (int) ' ', locale26);
        int int30 = property1.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = property1.roundCeiling();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime33.toString(dateTimeFormatter36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        java.lang.String str47 = dateTimeZone44.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime33.toMutableDateTime(dateTimeZone44);
        boolean boolean49 = mutableDateTime31.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        mutableDateTime54.addHours((int) (short) 0);
        mutableDateTime54.addWeekyears((int) 'a');
        java.lang.String str60 = mutableDateTime54.toString("0");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = mutableDateTime62.isEqual(readableInstant63);
        int int65 = mutableDateTime62.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime62.set(dateTimeFieldType66, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        int int70 = mutableDateTime62.get(dateTimeFieldType69);
        mutableDateTime54.set(dateTimeFieldType69, 5);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime51.property(dateTimeFieldType69);
        boolean boolean74 = mutableDateTime48.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime48.setWeekyear(377);
        boolean boolean77 = mutableDateTime48.isBeforeNow();
        mutableDateTime48.setYear(9);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime(chronology80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        boolean boolean83 = mutableDateTime81.isEqual(readableInstant82);
        mutableDateTime81.addHours(59);
        org.joda.time.Chronology chronology86 = mutableDateTime81.getChronology();
        org.joda.time.MutableDateTime mutableDateTime87 = mutableDateTime81.toMutableDateTime();
        mutableDateTime87.setTime((long) 381);
        org.joda.time.Instant instant90 = mutableDateTime87.toInstant();
        boolean boolean91 = mutableDateTime48.isEqual((org.joda.time.ReadableInstant) instant90);
        int int92 = mutableDateTime48.getWeekOfWeekyear();
        int int93 = mutableDateTime48.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime87 and instant90", (mutableDateTime87.compareTo(instant90) == 0) == mutableDateTime87.equals(instant90));
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test441");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(59);
        int int10 = mutableDateTime1.getYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = mutableDateTime12.toString(dateTimeFormatter15);
        int int17 = mutableDateTime12.getMonthOfYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime12);
        boolean boolean20 = mutableDateTime12.isBefore((long) 74413);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime12.add(readableDuration21, 886);
        org.joda.time.Instant instant24 = mutableDateTime12.toInstant();
        int int25 = mutableDateTime12.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant24", (mutableDateTime1.compareTo(instant24) == 0) == mutableDateTime1.equals(instant24));
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test442");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str2 = dateTimeFieldType1.toString();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType1.getDurationType();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket9.getZone();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology11.add(readablePeriod13, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology11);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = mutableDateTime17.toDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType1.getField(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        int int35 = dateTimeField33.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.dayOfWeek();
        java.util.Locale locale40 = null;
        java.lang.String str41 = property39.getAsText(locale40);
        java.util.Locale locale42 = null;
        int int43 = property39.getMaximumTextLength(locale42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableDateTime45.isEqual(readableInstant46);
        int int48 = mutableDateTime45.getHourOfDay();
        mutableDateTime45.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        int int54 = dateTimeField53.getMaximumValue();
        mutableDateTime45.setRounding(dateTimeField53);
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = dateTimeField53.getAsShortText((int) (byte) 1, locale57);
        java.lang.String str59 = property39.getAsShortText(locale57);
        java.lang.String str60 = dateTimeField33.getAsShortText(1L, locale57);
        java.lang.String str61 = locale57.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 135, chronology25, locale57, (java.lang.Integer) 34949, 426);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and mutableDateTime38", (mutableDateTime17.compareTo(mutableDateTime38) == 0) == mutableDateTime17.equals(mutableDateTime38));
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test443");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        int int13 = mutableDateTime1.getWeekyear();
        org.joda.time.Chronology chronology14 = mutableDateTime1.getChronology();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        boolean boolean21 = mutableDateTime16.isSupported(dateTimeFieldType20);
        mutableDateTime16.setSecondOfDay((int) '#');
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime16.isEqual(readableInstant24);
        mutableDateTime16.setSecondOfMinute(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        mutableDateTime16.add(durationFieldType29, (int) (short) 100);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        mutableDateTime33.addHours(59);
        org.joda.time.Chronology chronology38 = mutableDateTime33.getChronology();
        boolean boolean39 = durationFieldType29.isSupported(chronology38);
        org.joda.time.DateTime dateTime40 = mutableDateTime1.toDateTime(chronology38);
        int int41 = mutableDateTime1.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime40", (instant11.compareTo(dateTime40) == 0) == instant11.equals(dateTime40));
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test444");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        mutableDateTime1.setMillisOfDay(411);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        mutableDateTime13.addHours(59);
        org.joda.time.Chronology chronology18 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology18.getZone();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime21.set(dateTimeFieldType25, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        int int29 = mutableDateTime21.get(dateTimeFieldType28);
        int int30 = mutableDateTime21.getWeekOfWeekyear();
        org.joda.time.Instant instant31 = mutableDateTime21.toInstant();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime21.weekyear();
        int int33 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime11.setZone(dateTimeZone19);
        int int35 = mutableDateTime11.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and instant31", (mutableDateTime21.compareTo(instant31) == 0) == mutableDateTime21.equals(instant31));
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test445");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        boolean boolean11 = mutableDateTime9.isAfter(74418L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.Chronology chronology14 = null;
        mutableDateTime13.setChronology(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = mutableDateTime17.toString(dateTimeFormatter20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekOfWeekyear();
        org.joda.time.Chronology chronology23 = mutableDateTime17.getChronology();
        mutableDateTime13.setMillis((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime17.addMinutes((int) 'u');
        mutableDateTime17.add((long) 693);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        int int33 = mutableDateTime30.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime30.set(dateTimeFieldType34, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        int int38 = mutableDateTime30.get(dateTimeFieldType37);
        org.joda.time.DateTime dateTime39 = mutableDateTime30.toDateTime();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        int int44 = mutableDateTime41.getHourOfDay();
        mutableDateTime41.addYears(0);
        mutableDateTime30.setDate((org.joda.time.ReadableInstant) mutableDateTime41);
        int int48 = mutableDateTime30.getEra();
        int int49 = mutableDateTime30.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = mutableDateTime30.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime30.minuteOfHour();
        boolean boolean53 = mutableDateTime17.isBefore((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.yearOfEra();
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar57 = mutableDateTime54.toCalendar(locale56);
        mutableDateTime54.addMinutes((int) (byte) 100);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        boolean boolean63 = mutableDateTime61.isEqual(readableInstant62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = null;
        java.lang.String str65 = mutableDateTime61.toString(dateTimeFormatter64);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale68, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone72 = dateTimeParserBucket71.getZone();
        java.lang.String str74 = dateTimeZone72.getNameKey((long) (byte) 0);
        mutableDateTime61.setZoneRetainFields(dateTimeZone72);
        mutableDateTime54.setZone(dateTimeZone72);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime54.weekyear();
        org.joda.time.MutableDateTime mutableDateTime78 = property77.roundHalfFloor();
        int int79 = mutableDateTime17.compareTo((org.joda.time.ReadableInstant) mutableDateTime78);
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime78.toMutableDateTime();
        boolean boolean81 = mutableDateTime9.isBefore((org.joda.time.ReadableInstant) mutableDateTime78);
        org.joda.time.Chronology chronology83 = null;
        java.util.Locale locale84 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket87 = new org.joda.time.format.DateTimeParserBucket(0L, chronology83, locale84, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone88 = dateTimeParserBucket87.getZone();
        org.joda.time.Chronology chronology89 = dateTimeParserBucket87.getChronology();
        org.joda.time.DurationField durationField90 = chronology89.hours();
        org.joda.time.DurationField durationField91 = chronology89.centuries();
        org.joda.time.DurationField durationField92 = chronology89.centuries();
        org.joda.time.DateTimeField dateTimeField93 = chronology89.millisOfSecond();
        org.joda.time.DateTime dateTime94 = mutableDateTime9.toDateTime(chronology89);
        org.joda.time.DateTimeField dateTimeField95 = chronology89.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and mutableDateTime13", (mutableDateTime9.compareTo(mutableDateTime13) == 0) == mutableDateTime9.equals(mutableDateTime13));
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test446");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.addWrapField(0);
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket10.getZone();
        org.joda.time.Chronology chronology12 = dateTimeParserBucket10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology12, locale14, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField18 = chronology12.halfdays();
        org.joda.time.DurationField durationField19 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology12.minuteOfDay();
        mutableDateTime3.setChronology(chronology12);
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = mutableDateTime25.toString(dateTimeFormatter28);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        java.lang.String str37 = dateTimeZone36.getID();
        java.lang.String str39 = dateTimeZone36.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime25.toMutableDateTime(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(obj23, dateTimeZone36);
        mutableDateTime41.setSecondOfDay(870);
        int int44 = mutableDateTime41.getYear();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) mutableDateTime41);
        boolean boolean46 = mutableDateTime3.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and mutableDateTime41", (mutableDateTime3.compareTo(mutableDateTime41) == 0) == mutableDateTime3.equals(mutableDateTime41));
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test447");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        int int5 = mutableDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        boolean boolean7 = mutableDateTime2.isSupported(dateTimeFieldType6);
        mutableDateTime2.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        long long18 = dateTimeParserBucket15.computeMillis(true);
        org.joda.time.Chronology chronology19 = dateTimeParserBucket15.getChronology();
        org.joda.time.Chronology chronology20 = chronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime(chronology20);
        org.joda.time.Instant instant23 = mutableDateTime2.toInstant();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        org.joda.time.Chronology chronology31 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = chronology31.minuteOfHour();
        long long40 = chronology31.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.DurationField durationField41 = chronology31.weeks();
        org.joda.time.DateTime dateTime42 = mutableDateTime2.toDateTime(chronology31);
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder43.clearExtensions();
        java.util.Locale.Builder builder46 = builder44.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale47 = builder46.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 81854333, chronology31, locale47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and mutableDateTime22", (mutableDateTime2.compareTo(mutableDateTime22) == 0) == mutableDateTime2.equals(mutableDateTime22));
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test448");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime1.add(readablePeriod16, 730);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime1.add(readableDuration19, 842);
        mutableDateTime1.setSecondOfDay(320);
        boolean boolean24 = mutableDateTime1.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Instant instant26 = mutableDateTime1.toInstant();
        mutableDateTime1.setMillisOfDay(942);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime25 and instant26", (mutableDateTime25.compareTo(instant26) == 0) == mutableDateTime25.equals(instant26));
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test449");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.millisOfSecond();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeFormatter16.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatter16.getParser();
        boolean boolean19 = dateTimeFormatter16.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter16.withOffsetParsed();
        org.joda.time.Chronology chronology21 = dateTimeFormatter16.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = dateTimeFormatter16.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter16.withZoneUTC();
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter16.withLocale(locale24);
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.util.Locale locale30 = new java.util.Locale("");
        java.lang.String str31 = locale27.getDisplayScript(locale30);
        java.lang.String str32 = locale24.getDisplayLanguage(locale30);
        java.lang.String str33 = locale24.getISO3Country();
        java.lang.String str34 = locale24.toLanguageTag();
        java.util.Locale.setDefault(locale24);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket41.getZone();
        org.joda.time.Chronology chronology43 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.days();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.dayOfYear();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial49 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.dayOfWeek();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property53.getAsText(locale54);
        java.util.Locale locale56 = null;
        int int57 = property53.getMaximumTextLength(locale56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        boolean boolean61 = mutableDateTime59.isEqual(readableInstant60);
        int int62 = mutableDateTime59.getHourOfDay();
        mutableDateTime59.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType65.getField(chronology66);
        int int68 = dateTimeField67.getMaximumValue();
        mutableDateTime59.setRounding(dateTimeField67);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = dateTimeField67.getAsShortText((int) (byte) 1, locale71);
        java.lang.String str73 = property53.getAsShortText(locale71);
        java.lang.String str74 = dateTimeField48.getAsText(readablePartial49, 237, locale71);
        java.lang.String str75 = locale71.getISO3Country();
        java.lang.String str76 = locale24.getDisplayScript(locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket(1644785164499L, chronology8, locale71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and mutableDateTime52", (mutableDateTime10.compareTo(mutableDateTime52) == 0) == mutableDateTime10.equals(mutableDateTime52));
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test450");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        boolean boolean21 = mutableDateTime16.isSupported(dateTimeFieldType20);
        int int22 = mutableDateTime1.get(dateTimeFieldType20);
        mutableDateTime1.setWeekyear(74419);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        long long33 = dateTimeParserBucket30.computeMillis(true);
        org.joda.time.Chronology chronology34 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.DurationField durationField36 = chronology34.years();
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime1.toMutableDateTime(chronology34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = mutableDateTime39.toString(dateTimeFormatter42);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeParserBucket49.getZone();
        java.lang.String str51 = dateTimeZone50.getID();
        java.lang.String str53 = dateTimeZone50.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime39.toMutableDateTime(dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        org.joda.time.Chronology chronology56 = chronology34.withZone(dateTimeZone50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime37", (mutableDateTime1.compareTo(mutableDateTime37) == 0) == mutableDateTime1.equals(mutableDateTime37));
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test451");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getHourOfDay();
        mutableDateTime7.addDays(0);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime1.setTime((long) 969);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.hours();
        org.joda.time.DurationField durationField29 = durationFieldType17.getField(chronology25);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder30.clearExtensions();
        java.util.Locale.Builder builder33 = builder31.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale34 = builder33.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 2818, chronology25, locale34);
        java.util.Locale locale36 = locale34.stripExtensions();
        java.lang.String str37 = locale36.getISO3Country();
        java.util.Calendar calendar38 = mutableDateTime1.toCalendar(locale36);
        int int39 = mutableDateTime1.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and mutableDateTime27", (mutableDateTime7.compareTo(mutableDateTime27) == 0) == mutableDateTime7.equals(mutableDateTime27));
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test452");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withPivotYear(411);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        int int15 = dateTimeField14.getMaximumValue();
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getISO3Country();
        java.lang.String str19 = dateTimeField14.getAsShortText(0L, locale17);
        boolean boolean20 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        int int32 = mutableDateTime24.get(dateTimeFieldType31);
        int int33 = mutableDateTime24.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.yearOfEra();
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar37 = mutableDateTime34.toCalendar(locale36);
        java.util.Calendar calendar38 = mutableDateTime24.toCalendar(locale36);
        java.lang.String str39 = dateTimeField14.getAsShortText(readablePartial21, (int) ' ', locale36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter11.withLocale(locale36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter11.withZoneUTC();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime43.set(dateTimeFieldType47, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        int int51 = mutableDateTime43.get(dateTimeFieldType50);
        int int52 = mutableDateTime43.getWeekOfWeekyear();
        org.joda.time.Instant instant53 = mutableDateTime43.toInstant();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime43.dayOfWeek();
        mutableDateTime43.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        mutableDateTime43.add(readablePeriod57, (int) (short) 0);
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(0L, chronology61, locale62, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone66 = dateTimeParserBucket65.getZone();
        org.joda.time.Chronology chronology67 = dateTimeParserBucket65.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.days();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.dayOfYear();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField71 = chronology67.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField72 = chronology67.halfdayOfDay();
        mutableDateTime43.setChronology(chronology67);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Chronology chronology75 = chronology67.withZone(dateTimeZone74);
        org.joda.time.DateTimeField dateTimeField76 = chronology75.hourOfHalfday();
        org.joda.time.DurationField durationField77 = chronology75.years();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter41.withChronology(chronology75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime24 and instant53", (mutableDateTime24.compareTo(instant53) == 0) == mutableDateTime24.equals(instant53));
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test453");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        int int13 = mutableDateTime1.getWeekyear();
        org.joda.time.Chronology chronology14 = mutableDateTime1.getChronology();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        boolean boolean21 = mutableDateTime16.isSupported(dateTimeFieldType20);
        mutableDateTime16.setSecondOfDay((int) '#');
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime16.isEqual(readableInstant24);
        mutableDateTime16.setSecondOfMinute(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        mutableDateTime16.add(durationFieldType29, (int) (short) 100);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        mutableDateTime33.addHours(59);
        org.joda.time.Chronology chronology38 = mutableDateTime33.getChronology();
        boolean boolean39 = durationFieldType29.isSupported(chronology38);
        org.joda.time.DateTime dateTime40 = mutableDateTime1.toDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.yearOfEra();
        java.util.Locale locale44 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar45 = mutableDateTime42.toCalendar(locale44);
        mutableDateTime42.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime42.weekyear();
        mutableDateTime42.addHours(930);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeParserBucket59.getZone();
        org.joda.time.Chronology chronology61 = dateTimeParserBucket59.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.days();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.dayOfYear();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.dayOfMonth();
        org.joda.time.DurationField durationField66 = chronology61.centuries();
        mutableDateTime42.setChronology(chronology61);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        boolean boolean71 = mutableDateTime69.isEqual(readableInstant70);
        mutableDateTime69.addHours(59);
        org.joda.time.Chronology chronology74 = mutableDateTime69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = chronology74.getZone();
        mutableDateTime42.setZoneRetainFields(dateTimeZone75);
        org.joda.time.Chronology chronology78 = null;
        java.util.Locale locale79 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket(0L, chronology78, locale79, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone83 = dateTimeParserBucket82.getZone();
        java.lang.String str84 = dateTimeZone83.getID();
        long long88 = dateTimeZone83.convertLocalToUTC((long) 5, false, (long) 0);
        java.lang.String str89 = dateTimeZone83.getID();
        java.util.TimeZone timeZone90 = dateTimeZone83.toTimeZone();
        mutableDateTime42.setZone(dateTimeZone83);
        org.joda.time.Chronology chronology92 = chronology38.withZone(dateTimeZone83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test454");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        int int16 = dateTimeField14.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfWeek();
        java.util.Locale locale21 = null;
        java.lang.String str22 = property20.getAsText(locale21);
        java.util.Locale locale23 = null;
        int int24 = property20.getMaximumTextLength(locale23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        mutableDateTime26.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        int int35 = dateTimeField34.getMaximumValue();
        mutableDateTime26.setRounding(dateTimeField34);
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = dateTimeField34.getAsShortText((int) (byte) 1, locale38);
        java.lang.String str40 = property20.getAsShortText(locale38);
        java.lang.String str41 = dateTimeField14.getAsShortText(1L, locale38);
        boolean boolean42 = property11.equals((java.lang.Object) locale38);
        long long43 = property11.remainder();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property11.getFieldType();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        int int49 = mutableDateTime46.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime46.set(dateTimeFieldType50, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        int int54 = mutableDateTime46.get(dateTimeFieldType53);
        int int55 = mutableDateTime46.getWeekOfWeekyear();
        org.joda.time.Instant instant56 = mutableDateTime46.toInstant();
        int int57 = mutableDateTime46.getMinuteOfHour();
        int int58 = mutableDateTime46.getWeekyear();
        org.joda.time.Chronology chronology59 = mutableDateTime46.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        boolean boolean63 = mutableDateTime61.isEqual(readableInstant62);
        int int64 = mutableDateTime61.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        boolean boolean66 = mutableDateTime61.isSupported(dateTimeFieldType65);
        mutableDateTime61.setSecondOfDay((int) '#');
        org.joda.time.ReadableInstant readableInstant69 = null;
        boolean boolean70 = mutableDateTime61.isEqual(readableInstant69);
        mutableDateTime61.setSecondOfMinute(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType74 = dateTimeFieldType73.getDurationType();
        mutableDateTime61.add(durationFieldType74, (int) (short) 100);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime(chronology77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        boolean boolean80 = mutableDateTime78.isEqual(readableInstant79);
        mutableDateTime78.addHours(59);
        org.joda.time.Chronology chronology83 = mutableDateTime78.getChronology();
        boolean boolean84 = durationFieldType74.isSupported(chronology83);
        org.joda.time.DateTime dateTime85 = mutableDateTime46.toDateTime(chronology83);
        boolean boolean86 = dateTimeFieldType44.isSupported(chronology83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime46 and instant56", (mutableDateTime46.compareTo(instant56) == 0) == mutableDateTime46.equals(instant56));
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test455");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        java.lang.Object obj21 = dateTimeParserBucket19.saveState();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology38, locale40, (java.lang.Integer) 2022);
        java.util.Locale locale44 = locale40.stripExtensions();
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "", locale40);
        java.lang.String str46 = mutableDateTime1.toString("32", locale40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        mutableDateTime48.addHours(59);
        int int53 = mutableDateTime48.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean55 = mutableDateTime48.isSupported(dateTimeFieldType54);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField57 = mutableDateTime48.getRoundingField();
        boolean boolean58 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.DateTimeZone dateTimeZone59 = mutableDateTime1.getZone();
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime1.add(readableDuration60, 34931287);
        org.joda.time.DateTime dateTime63 = mutableDateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.setSecondOfDay(655);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime63", (instant11.compareTo(dateTime63) == 0) == instant11.equals(dateTime63));
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test456");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        int int34 = mutableDateTime33.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(0);
        mutableDateTime33.setZone(dateTimeZone36);
        java.lang.Object obj38 = null;
        boolean boolean39 = dateTimeZone36.equals(obj38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime33", (mutableDateTime14.compareTo(mutableDateTime33) == 0) == mutableDateTime14.equals(mutableDateTime33));
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test457");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.centuryOfEra();
        int int18 = mutableDateTime1.getYearOfCentury();
        boolean boolean20 = mutableDateTime1.isEqual((long) 74411);
        org.joda.time.Chronology chronology21 = mutableDateTime1.getChronology();
        java.lang.String str22 = mutableDateTime1.toString();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = chronology30.add(readablePeriod32, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(chronology30);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.DateTime dateTime47 = mutableDateTime36.toDateTime(chronology44);
        org.joda.time.DateTime dateTime48 = mutableDateTime1.toDateTime(chronology44);
        org.joda.time.Instant instant49 = dateTime48.toInstant();
        java.lang.String str50 = instant49.toString();
        boolean boolean52 = instant49.isAfter((long) 715);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime48", (mutableDateTime1.compareTo(dateTime48) == 0) == mutableDateTime1.equals(dateTime48));
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test458");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        int int9 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        int int20 = mutableDateTime12.get(dateTimeFieldType19);
        java.util.Date date21 = mutableDateTime12.toDate();
        mutableDateTime12.addDays((int) (byte) -1);
        mutableDateTime12.addMillis(2);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.addWrapField(0);
        mutableDateTime30.setHourOfDay((int) (byte) 1);
        mutableDateTime30.addWeeks(568);
        int int35 = mutableDateTime30.getRoundingMode();
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime30.toMutableDateTimeISO();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.weekyear();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.minuteOfDay();
        org.joda.time.DurationField durationField48 = chronology44.hours();
        org.joda.time.DateTimeField dateTimeField49 = chronology44.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime30.toMutableDateTime(chronology44);
        mutableDateTime12.setMillis((org.joda.time.ReadableInstant) mutableDateTime30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime30 and mutableDateTime51", (mutableDateTime30.compareTo(mutableDateTime51) == 0) == mutableDateTime30.equals(mutableDateTime51));
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test459");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(100);
        org.joda.time.MutableDateTime mutableDateTime5 = property1.addWrapField(10);
        mutableDateTime5.setMillis((long) 779);
        long long8 = mutableDateTime5.getMillis();
        mutableDateTime5.addDays(35651);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology18.centuries();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.era();
        org.joda.time.DateTime dateTime22 = mutableDateTime5.toDateTime(chronology18);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        int int32 = mutableDateTime24.get(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = mutableDateTime24.toDateTime();
        java.util.Locale locale34 = null;
        java.util.Calendar calendar35 = mutableDateTime24.toCalendar(locale34);
        mutableDateTime24.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime24.millisOfDay();
        mutableDateTime24.addMonths(281);
        int int41 = mutableDateTime5.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        mutableDateTime24.addMonths(74459);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime22", (mutableDateTime0.compareTo(dateTime22) == 0) == mutableDateTime0.equals(dateTime22));
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test460");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.minuteOfHour();
        int int4 = mutableDateTime1.getCenturyOfEra();
        int int5 = mutableDateTime1.getSecondOfMinute();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime7.set(dateTimeFieldType11, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        int int15 = mutableDateTime7.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime16 = mutableDateTime7.toDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        mutableDateTime18.addYears(0);
        mutableDateTime7.setDate((org.joda.time.ReadableInstant) mutableDateTime18);
        int int25 = mutableDateTime7.getEra();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.dayOfMonth();
        org.joda.time.DurationField durationField38 = chronology33.centuries();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime7.toMutableDateTime(chronology33);
        org.joda.time.DateTime dateTime41 = mutableDateTime1.toDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField42 = chronology33.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime41", (mutableDateTime1.compareTo(dateTime41) == 0) == mutableDateTime1.equals(dateTime41));
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test461");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        int int5 = mutableDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime2.set(dateTimeFieldType6, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        int int10 = mutableDateTime2.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = mutableDateTime2.toDateTime();
        java.util.Locale locale12 = null;
        java.util.Calendar calendar13 = mutableDateTime2.toCalendar(locale12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.hours();
        org.joda.time.DurationField durationField27 = durationFieldType15.getField(chronology23);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(chronology23);
        org.joda.time.DateTime dateTime29 = mutableDateTime2.toDateTime(chronology23);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 34873851, chronology23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and dateTime29", (mutableDateTime2.compareTo(dateTime29) == 0) == mutableDateTime2.equals(dateTime29));
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test462");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int5 = property3.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundCeiling();
        java.util.GregorianCalendar gregorianCalendar7 = mutableDateTime6.toGregorianCalendar();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime9.getZone();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime9.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        org.joda.time.Chronology chronology25 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.dayOfWeek();
        java.util.Locale locale30 = null;
        java.lang.String str31 = property29.getAsText(locale30);
        java.util.Locale locale32 = null;
        int int33 = property29.getMaximumTextLength(locale32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        int int38 = mutableDateTime35.getHourOfDay();
        mutableDateTime35.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        int int44 = dateTimeField43.getMaximumValue();
        mutableDateTime35.setRounding(dateTimeField43);
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = dateTimeField43.getAsShortText((int) (byte) 1, locale47);
        java.lang.String str49 = property29.getAsShortText(locale47);
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.lang.String str51 = locale50.getScript();
        java.lang.String str52 = locale47.getDisplayScript(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale47);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.yearOfEra();
        int int56 = mutableDateTime54.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime54.set(dateTimeFieldType57, 0);
        boolean boolean60 = dateTimeParserBucket53.restoreState((java.lang.Object) dateTimeFieldType57);
        java.lang.String str61 = dateTimeFieldType57.getName();
        mutableDateTime9.set(dateTimeFieldType57, 18);
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket(0L, chronology65, locale66, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone70 = dateTimeParserBucket69.getZone();
        org.joda.time.Chronology chronology71 = dateTimeParserBucket69.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.days();
        org.joda.time.DateTimeField dateTimeField73 = chronology71.dayOfYear();
        org.joda.time.DateTimeField dateTimeField74 = chronology71.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType57.getField(chronology71);
        org.joda.time.DateTimeField dateTimeField76 = chronology71.millisOfSecond();
        org.joda.time.DurationField durationField77 = chronology71.days();
        org.joda.time.MutableDateTime mutableDateTime78 = mutableDateTime6.toMutableDateTime(chronology71);
        java.lang.String str79 = chronology71.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime78", (mutableDateTime1.compareTo(mutableDateTime78) == 0) == mutableDateTime1.equals(mutableDateTime78));
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test463");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getMillisOfDay();
        mutableDateTime17.addDays(22);
        mutableDateTime17.setYear(59);
        int int25 = dateTime15.compareTo((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime17.addHours(831);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfWeek();
        java.lang.String str31 = property30.getName();
        org.joda.time.DurationField durationField32 = property30.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property30.getFieldType();
        boolean boolean34 = mutableDateTime17.isSupported(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = mutableDateTime17.getChronology();
        int int36 = mutableDateTime17.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime17.copy();
        mutableDateTime37.setSecondOfDay(34919);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        mutableDateTime41.addHours(59);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime41.minuteOfHour();
        int int47 = mutableDateTime41.getSecondOfDay();
        mutableDateTime41.setSecondOfDay((int) (byte) 0);
        mutableDateTime41.setHourOfDay(0);
        mutableDateTime41.setMillisOfSecond((int) '4');
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology55, locale56, (java.lang.Integer) 9, 59);
        int int60 = dateTimeParserBucket59.getOffset();
        java.lang.Integer int61 = dateTimeParserBucket59.getPivotYear();
        org.joda.time.Chronology chronology62 = dateTimeParserBucket59.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.eras();
        org.joda.time.DateTime dateTime64 = mutableDateTime41.toDateTime(chronology62);
        mutableDateTime37.setChronology(chronology62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField32 and durationField63", Math.signum(durationField32.compareTo(durationField63)) == -Math.signum(durationField63.compareTo(durationField32)));
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test464");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime1.add(readablePeriod15, (int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.halfdayOfDay();
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology25.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.dayOfYear();
        org.joda.time.DurationField durationField36 = chronology33.eras();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField26 and durationField36", Math.signum(durationField26.compareTo(durationField36)) == -Math.signum(durationField36.compareTo(durationField26)));
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test465");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("TWN");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        java.lang.String str6 = languageRange1.getRange();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        mutableDateTime8.addHours(59);
        org.joda.time.Chronology chronology13 = mutableDateTime8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime8.copy();
        mutableDateTime8.setWeekyear(34812148);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime8.hourOfDay();
        int int18 = property17.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        int int33 = mutableDateTime30.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime30.set(dateTimeFieldType34, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        int int38 = mutableDateTime30.get(dateTimeFieldType37);
        org.joda.time.DateTime dateTime39 = mutableDateTime30.toDateTime();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        int int44 = mutableDateTime41.getHourOfDay();
        mutableDateTime41.addYears(0);
        mutableDateTime30.setDate((org.joda.time.ReadableInstant) mutableDateTime41);
        boolean boolean48 = mutableDateTime28.isBefore((org.joda.time.ReadableInstant) mutableDateTime41);
        int int49 = mutableDateTime41.getCenturyOfEra();
        int int50 = mutableDateTime41.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime41.weekyear();
        int int52 = property17.compareTo((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime41.year();
        boolean boolean54 = languageRange1.equals((java.lang.Object) property53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime28 and mutableDateTime41", (mutableDateTime28.compareTo(mutableDateTime41) == 0) == mutableDateTime28.equals(mutableDateTime41));
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test466");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.millisOfDay();
        int int14 = mutableDateTime7.getDayOfWeek();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime7.setMillisOfDay(0);
        int int18 = mutableDateTime7.getCenturyOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        int int25 = mutableDateTime20.getMillisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = mutableDateTime27.toString(dateTimeFormatter30);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey((long) (byte) 0);
        mutableDateTime27.setZoneRetainFields(dateTimeZone38);
        mutableDateTime20.setZone(dateTimeZone38);
        long long44 = dateTimeZone38.previousTransition((long) 852);
        mutableDateTime7.setZoneRetainFields(dateTimeZone38);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime7.centuryOfEra();
        boolean boolean47 = property46.isLeap();
        org.joda.time.MutableDateTime mutableDateTime49 = property46.add((long) 830);
        mutableDateTime49.setYear(867);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(98374L);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeParserBucket59.getZone();
        java.lang.Integer int61 = dateTimeParserBucket59.getPivotYear();
        org.joda.time.Chronology chronology62 = dateTimeParserBucket59.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.eras();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.weekyear();
        org.joda.time.DateTime dateTime65 = mutableDateTime53.toDateTime(chronology62);
        mutableDateTime49.setChronology(chronology62);
        java.util.GregorianCalendar gregorianCalendar67 = mutableDateTime49.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime53 and dateTime65", (mutableDateTime53.compareTo(dateTime65) == 0) == mutableDateTime53.equals(dateTime65));
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test467");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        int int17 = mutableDateTime1.getMonthOfYear();
        int int18 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfHalfday();
        org.joda.time.DurationField durationField28 = chronology26.days();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = chronology26.add(readablePeriod29, (long) 34828152, 0);
        org.joda.time.Chronology chronology33 = chronology26.withUTC();
        org.joda.time.DateTime dateTime34 = mutableDateTime1.toDateTime(chronology33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime1.add(readableDuration35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime16 and dateTime34", (mutableDateTime16.compareTo(dateTime34) == 0) == mutableDateTime16.equals(dateTime34));
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test468");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.addWeeks(678);
        boolean boolean22 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getCenturyOfEra();
        mutableDateTime18.setYear(672);
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime18.add(readableDuration26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime18.secondOfMinute();
        java.util.Date date29 = mutableDateTime18.toDate();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(98374L);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        java.lang.Integer int39 = dateTimeParserBucket37.getPivotYear();
        org.joda.time.Chronology chronology40 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.eras();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekyear();
        org.joda.time.DateTime dateTime43 = mutableDateTime31.toDateTime(chronology40);
        mutableDateTime31.setHourOfDay((int) (short) 1);
        mutableDateTime31.setWeekyear((-580));
        boolean boolean48 = mutableDateTime18.isAfter((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        mutableDateTime50.addHours(59);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime50.minuteOfHour();
        int int56 = mutableDateTime50.getSecondOfDay();
        int int57 = mutableDateTime50.getCenturyOfEra();
        org.joda.time.Instant instant58 = mutableDateTime50.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(0L, chronology61, locale62, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone66 = dateTimeParserBucket65.getZone();
        org.joda.time.Chronology chronology67 = dateTimeParserBucket65.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.days();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.dayOfYear();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField71 = chronology67.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField72 = chronology67.minuteOfHour();
        org.joda.time.Chronology chronology73 = chronology67.withUTC();
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType59.getField(chronology73);
        java.lang.String str75 = dateTimeFieldType59.getName();
        boolean boolean76 = instant58.isSupported(dateTimeFieldType59);
        int int77 = mutableDateTime18.get(dateTimeFieldType59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField41 and durationField68", Math.signum(durationField41.compareTo(durationField68)) == -Math.signum(durationField68.compareTo(durationField41)));
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test469");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone14);
        org.joda.time.Chronology chronology18 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.hourOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        mutableDateTime21.addHours(59);
        org.joda.time.Chronology chronology26 = mutableDateTime21.getChronology();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime21.toMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar28 = mutableDateTime27.toGregorianCalendar();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        int int33 = mutableDateTime30.getHourOfDay();
        mutableDateTime30.addDays(0);
        int int36 = mutableDateTime30.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime30.weekyear();
        int int38 = mutableDateTime30.getMonthOfYear();
        mutableDateTime30.addDays(5);
        boolean boolean42 = mutableDateTime30.isAfter((long) '#');
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        int int47 = mutableDateTime44.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime44.set(dateTimeFieldType48, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        int int52 = mutableDateTime44.get(dateTimeFieldType51);
        org.joda.time.DateTime dateTime53 = mutableDateTime44.toDateTime();
        java.util.Locale locale54 = null;
        java.util.Calendar calendar55 = mutableDateTime44.toCalendar(locale54);
        org.joda.time.DateTimeZone dateTimeZone56 = mutableDateTime44.getZone();
        mutableDateTime30.setMillis((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone64 = dateTimeParserBucket63.getZone();
        java.lang.String str65 = dateTimeZone64.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone64);
        mutableDateTime30.setZoneRetainFields(dateTimeZone64);
        mutableDateTime27.setZoneRetainFields(dateTimeZone64);
        int int69 = property19.compareTo((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime27.era();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        boolean boolean74 = mutableDateTime72.isEqual(readableInstant73);
        int int75 = mutableDateTime72.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime72.set(dateTimeFieldType76, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.year();
        int int80 = mutableDateTime72.get(dateTimeFieldType79);
        org.joda.time.Instant instant81 = mutableDateTime72.toInstant();
        mutableDateTime72.addDays((int) ' ');
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime(chronology84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        boolean boolean87 = mutableDateTime85.isEqual(readableInstant86);
        int int88 = mutableDateTime85.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime85.set(dateTimeFieldType89, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone92 = mutableDateTime85.getZone();
        org.joda.time.MutableDateTime.Property property93 = mutableDateTime85.secondOfMinute();
        mutableDateTime85.setYear(645);
        mutableDateTime72.setMillis((org.joda.time.ReadableInstant) mutableDateTime85);
        int int97 = mutableDateTime27.compareTo((org.joda.time.ReadableInstant) mutableDateTime85);
        org.joda.time.DateTimeZone dateTimeZone98 = mutableDateTime85.getZone();
        org.joda.time.DateTime dateTime99 = mutableDateTime85.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime30 and instant81", (mutableDateTime30.compareTo(instant81) == 0) == mutableDateTime30.equals(instant81));
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test470");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.centuryOfEra();
        org.joda.time.DurationField durationField12 = chronology7.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.monthOfYear();
        org.joda.time.DurationField durationField14 = dateTimeField13.getLeapDurationField();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfWeek();
        long long18 = property17.remainder();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        int int22 = dateTimeField21.getMaximumValue();
        int int25 = dateTimeField21.getDifference((long) 10, (long) 'a');
        int int27 = dateTimeField21.getLeapAmount((-1L));
        java.util.Locale locale29 = java.util.Locale.ITALY;
        java.lang.String str30 = dateTimeField21.getAsText((long) 340, locale29);
        java.util.Locale locale32 = java.util.Locale.UK;
        java.lang.String str33 = dateTimeField21.getAsShortText((int) '4', locale32);
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.UK;
        java.lang.String str37 = dateTimeField21.getAsText(readablePartial34, 292278993, locale36);
        java.lang.String str38 = locale36.getCountry();
        java.lang.String str39 = locale36.getDisplayVariant();
        int int40 = property17.getMaximumTextLength(locale36);
        int int41 = dateTimeField13.getMaximumShortTextLength(locale36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and mutableDateTime16", (mutableDateTime9.compareTo(mutableDateTime16) == 0) == mutableDateTime9.equals(mutableDateTime16));
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test471");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfEven();
        int int5 = mutableDateTime4.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime4.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DurationField durationField9 = durationFieldType7.getField(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime11.getZone();
        org.joda.time.Chronology chronology19 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(390, 13);
        java.lang.String str23 = dateTimeZone22.getID();
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.Chronology chronology26 = chronology19.withZone(dateTimeZone22);
        org.joda.time.DurationField durationField27 = durationFieldType7.getField(chronology26);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime4.toMutableDateTime(chronology26);
        long long29 = mutableDateTime4.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and mutableDateTime28", (mutableDateTime4.compareTo(mutableDateTime28) == 0) == mutableDateTime4.equals(mutableDateTime28));
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test472");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        int int34 = mutableDateTime33.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(0);
        mutableDateTime33.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        org.joda.time.Chronology chronology45 = dateTimeParserBucket43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfHalfday();
        org.joda.time.DurationField durationField47 = chronology45.days();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.millisOfSecond();
        org.joda.time.DateTime dateTime49 = mutableDateTime33.toDateTime(chronology45);
        mutableDateTime33.setWeekyear(688);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime33.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and dateTime49", (mutableDateTime14.compareTo(dateTime49) == 0) == mutableDateTime14.equals(dateTime49));
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test473");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        long long20 = dateTimeParserBucket17.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.yearOfEra();
        boolean boolean23 = dateTimeParserBucket17.restoreState((java.lang.Object) property22);
        int int24 = property22.getMinimumValueOverall();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime26.set(dateTimeFieldType30, (int) 'a');
        int int33 = mutableDateTime26.getEra();
        boolean boolean34 = mutableDateTime26.isEqualNow();
        int int35 = property22.getDifference((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime26.yearOfCentury();
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.DateTime dateTime38 = mutableDateTime11.toDateTime();
        int int39 = mutableDateTime11.getYearOfCentury();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        int int44 = mutableDateTime41.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime41.set(dateTimeFieldType45, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        int int49 = mutableDateTime41.get(dateTimeFieldType48);
        int int50 = mutableDateTime41.getWeekOfWeekyear();
        org.joda.time.Instant instant51 = mutableDateTime41.toInstant();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime41.dayOfWeek();
        mutableDateTime41.addWeekyears(796);
        int int55 = mutableDateTime41.getYearOfEra();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime41.monthOfYear();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        boolean boolean60 = mutableDateTime58.isEqual(readableInstant59);
        int int61 = mutableDateTime58.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime58.set(dateTimeFieldType62, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        int int66 = mutableDateTime58.get(dateTimeFieldType65);
        org.joda.time.Instant instant67 = mutableDateTime58.toInstant();
        mutableDateTime41.setMillis((org.joda.time.ReadableInstant) mutableDateTime58);
        java.util.Date date69 = mutableDateTime58.toDate();
        org.joda.time.ReadableDuration readableDuration70 = null;
        mutableDateTime58.add(readableDuration70);
        int int72 = mutableDateTime58.getCenturyOfEra();
        boolean boolean73 = mutableDateTime11.isBefore((org.joda.time.ReadableInstant) mutableDateTime58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime26 and instant51", (mutableDateTime26.compareTo(instant51) == 0) == mutableDateTime26.equals(instant51));
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test474");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = mutableDateTime1.toDateTime(dateTimeZone16);
        mutableDateTime1.addWeekyears(79);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.yearOfEra();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar24 = mutableDateTime21.toCalendar(locale23);
        mutableDateTime21.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime21.dayOfYear();
        org.joda.time.Instant instant31 = mutableDateTime21.toInstant();
        int int32 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime21);
        long long33 = mutableDateTime21.getMillis();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        int int38 = mutableDateTime35.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime35.set(dateTimeFieldType39, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        int int43 = mutableDateTime35.get(dateTimeFieldType42);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeParserBucket49.getZone();
        java.lang.String str51 = dateTimeZone50.toString();
        org.joda.time.DateTime dateTime52 = mutableDateTime35.toDateTime(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime53 = null;
        boolean boolean54 = dateTimeZone50.isLocalDateTimeGap(localDateTime53);
        java.util.TimeZone timeZone55 = dateTimeZone50.toTimeZone();
        org.joda.time.LocalDateTime localDateTime56 = null;
        boolean boolean57 = dateTimeZone50.isLocalDateTimeGap(localDateTime56);
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime21.toMutableDateTime(dateTimeZone50);
        java.lang.String str60 = dateTimeZone50.getShortName(749L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and instant31", (mutableDateTime21.compareTo(instant31) == 0) == mutableDateTime21.equals(instant31));
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test475");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfCentury();
        long long11 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime8.setSecondOfMinute(13);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.era();
        int int15 = mutableDateTime8.getYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime17.set(dateTimeFieldType21, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        int int25 = mutableDateTime17.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime26 = mutableDateTime17.toDateTime();
        java.util.Locale locale27 = null;
        java.util.Calendar calendar28 = mutableDateTime17.toCalendar(locale27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTime dateTime31 = mutableDateTime17.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime17.toDateTimeISO();
        int int33 = dateTime32.getWeekyear();
        boolean boolean34 = mutableDateTime8.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime8.centuryOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime37.set(dateTimeFieldType41, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        int int45 = mutableDateTime37.get(dateTimeFieldType44);
        int int46 = mutableDateTime37.getWeekOfWeekyear();
        org.joda.time.Instant instant47 = mutableDateTime37.toInstant();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime37.dayOfWeek();
        mutableDateTime37.addWeekyears(796);
        int int51 = mutableDateTime37.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfMinute();
        mutableDateTime37.set(dateTimeFieldType52, 9);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str56 = durationFieldType55.toString();
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.days();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.dayOfYear();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.millisOfSecond();
        org.joda.time.DurationField durationField68 = durationFieldType55.getField(chronology64);
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType52.getField(chronology64);
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType52.getDurationType();
        boolean boolean71 = mutableDateTime8.isSupported(dateTimeFieldType52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and instant47", (mutableDateTime17.compareTo(instant47) == 0) == mutableDateTime17.equals(instant47));
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test476");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.halfdayOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getMonthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        int int25 = mutableDateTime20.getMillisOfSecond();
        mutableDateTime20.setMillisOfDay(10);
        boolean boolean28 = mutableDateTime15.isEqual((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Instant instant29 = mutableDateTime15.toInstant();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime31.set(dateTimeFieldType35, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        int int39 = mutableDateTime31.get(dateTimeFieldType38);
        org.joda.time.DateTime dateTime40 = mutableDateTime31.toDateTime();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime31.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.getMutableDateTime();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.dayOfWeek();
        java.util.Locale locale46 = null;
        java.lang.String str47 = property45.getAsText(locale46);
        java.util.Locale locale48 = null;
        int int49 = property45.getMaximumTextLength(locale48);
        int int50 = property45.getMaximumValueOverall();
        int int51 = property45.get();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime54 = mutableDateTime53.toDateTime();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        mutableDateTime56.addHours(59);
        org.joda.time.Chronology chronology61 = mutableDateTime56.getChronology();
        mutableDateTime53.setChronology(chronology61);
        java.util.Locale locale65 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale66 = locale65.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) 598, chronology61, locale65);
        java.lang.String str68 = property45.getAsShortText(locale65);
        java.lang.String str69 = property41.getAsText(locale65);
        java.util.Calendar calendar70 = mutableDateTime15.toCalendar(locale65);
        java.lang.String str71 = dateTimeField12.getAsText((long) 74594, locale65);
        org.joda.time.DurationField durationField72 = dateTimeField12.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and instant29", (mutableDateTime15.compareTo(instant29) == 0) == mutableDateTime15.equals(instant29));
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test477");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        java.lang.Object obj21 = dateTimeParserBucket19.saveState();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology38, locale40, (java.lang.Integer) 2022);
        java.util.Locale locale44 = locale40.stripExtensions();
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "", locale40);
        java.lang.String str46 = mutableDateTime1.toString("32", locale40);
        mutableDateTime1.add((long) 765);
        mutableDateTime1.setYear(34817966);
        mutableDateTime1.addMillis(399);
        int int53 = mutableDateTime1.getSecondOfDay();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        boolean boolean57 = mutableDateTime55.isEqual(readableInstant56);
        int int58 = mutableDateTime55.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime55.set(dateTimeFieldType59, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        int int63 = mutableDateTime55.get(dateTimeFieldType62);
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket(0L, chronology65, locale66, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone70 = dateTimeParserBucket69.getZone();
        java.lang.String str71 = dateTimeZone70.toString();
        org.joda.time.DateTime dateTime72 = mutableDateTime55.toDateTime(dateTimeZone70);
        boolean boolean73 = dateTimeZone70.isFixed();
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(dateTimeZone70);
        org.joda.time.LocalDateTime localDateTime75 = null;
        boolean boolean76 = dateTimeZone70.isLocalDateTimeGap(localDateTime75);
        mutableDateTime1.setZoneRetainFields(dateTimeZone70);
        mutableDateTime1.addMonths(35269640);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime55", (instant11.compareTo(mutableDateTime55) == 0) == instant11.equals(mutableDateTime55));
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test478");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.setYear(74411);
        int int5 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getHourOfDay();
        mutableDateTime7.addYears(0);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        mutableDateTime7.setZoneRetainFields(dateTimeZone19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        boolean boolean27 = mutableDateTime22.isSupported(dateTimeFieldType26);
        int int28 = mutableDateTime7.get(dateTimeFieldType26);
        mutableDateTime7.setWeekyear(74419);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        long long39 = dateTimeParserBucket36.computeMillis(true);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.DurationField durationField42 = chronology40.years();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime7.toMutableDateTime(chronology40);
        boolean boolean44 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        boolean boolean46 = mutableDateTime7.isAfter(779L);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        mutableDateTime48.addHours(59);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime48.minuteOfHour();
        boolean boolean54 = mutableDateTime7.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime48.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and mutableDateTime43", (mutableDateTime7.compareTo(mutableDateTime43) == 0) == mutableDateTime7.equals(mutableDateTime43));
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test479");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime18.set(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = mutableDateTime18.get(dateTimeFieldType25);
        int int27 = mutableDateTime18.getWeekOfWeekyear();
        org.joda.time.Instant instant28 = mutableDateTime18.toInstant();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime18.dayOfWeek();
        mutableDateTime18.addWeekyears(796);
        int int32 = mutableDateTime18.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        mutableDateTime18.set(dateTimeFieldType33, 9);
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType33.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType33.getDurationType();
        mutableDateTime16.add(durationFieldType37, 51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant28", (dateTime10.compareTo(instant28) == 0) == dateTime10.equals(instant28));
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test480");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        int int11 = mutableDateTime1.getSecondOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        boolean boolean18 = mutableDateTime13.isSupported(dateTimeFieldType17);
        mutableDateTime13.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime22.set(dateTimeFieldType26, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        int int30 = mutableDateTime22.get(dateTimeFieldType29);
        org.joda.time.DateTime dateTime31 = mutableDateTime22.toDateTime();
        java.util.Locale locale32 = null;
        java.util.Calendar calendar33 = mutableDateTime22.toCalendar(locale32);
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime22.getZone();
        mutableDateTime13.setZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        int int41 = mutableDateTime38.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime38.set(dateTimeFieldType42, (int) 'a');
        mutableDateTime38.setMillis(5L);
        int int47 = mutableDateTime38.getWeekOfWeekyear();
        mutableDateTime38.addYears(34830);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime51.set(dateTimeFieldType55, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone58 = mutableDateTime51.getZone();
        long long60 = dateTimeZone58.nextTransition((long) 59);
        java.lang.String str62 = dateTimeZone58.getName((long) (short) 0);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = mutableDateTime64.isEqual(readableInstant65);
        mutableDateTime64.addHours(59);
        org.joda.time.Chronology chronology69 = mutableDateTime64.getChronology();
        org.joda.time.MutableDateTime mutableDateTime70 = mutableDateTime64.toMutableDateTime();
        int int71 = mutableDateTime64.getYear();
        int int72 = dateTimeZone58.getOffset((org.joda.time.ReadableInstant) mutableDateTime64);
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(0L, chronology74, locale75, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone79 = dateTimeParserBucket78.getZone();
        long long81 = dateTimeParserBucket78.computeMillis(true);
        org.joda.time.Chronology chronology82 = dateTimeParserBucket78.getChronology();
        org.joda.time.MutableDateTime mutableDateTime83 = mutableDateTime64.toMutableDateTime(chronology82);
        mutableDateTime38.setMillis((org.joda.time.ReadableInstant) mutableDateTime83);
        int int85 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) mutableDateTime83);
        org.joda.time.DateTime dateTime86 = mutableDateTime1.toDateTime(dateTimeZone34);
        int int88 = dateTimeZone34.getStandardOffset((long) 608);
        java.lang.String str90 = dateTimeZone34.getNameKey(2938239981000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime38 and mutableDateTime83", (mutableDateTime38.compareTo(mutableDateTime83) == 0) == mutableDateTime38.equals(mutableDateTime83));
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test481");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        int int5 = mutableDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime2.set(dateTimeFieldType6, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime2.getZone();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime2.secondOfMinute();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        mutableDateTime13.addHours(59);
        org.joda.time.Chronology chronology18 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology18.getZone();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfWeek();
        java.util.Locale locale23 = null;
        java.lang.String str24 = property22.getAsText(locale23);
        java.util.Locale locale25 = null;
        int int26 = property22.getMaximumTextLength(locale25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        mutableDateTime28.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        int int37 = dateTimeField36.getMaximumValue();
        mutableDateTime28.setRounding(dateTimeField36);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = dateTimeField36.getAsShortText((int) (byte) 1, locale40);
        java.lang.String str42 = property22.getAsShortText(locale40);
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.lang.String str44 = locale43.getScript();
        java.lang.String str45 = locale40.getDisplayScript(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale40);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.yearOfEra();
        int int49 = mutableDateTime47.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime47.set(dateTimeFieldType50, 0);
        boolean boolean53 = dateTimeParserBucket46.restoreState((java.lang.Object) dateTimeFieldType50);
        java.lang.String str54 = dateTimeFieldType50.getName();
        mutableDateTime2.set(dateTimeFieldType50, 18);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.days();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.dayOfYear();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType50.getField(chronology64);
        org.joda.time.DateTimeField dateTimeField69 = chronology64.millisOfSecond();
        org.joda.time.DurationField durationField70 = chronology64.days();
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(chronology64);
        java.util.Locale locale75 = new java.util.Locale("2022-02-11T00:01:37.357Z", "dayOfWeek", "");
        java.lang.String str76 = locale75.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket(1644572828398L, chronology64, locale75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and mutableDateTime71", (mutableDateTime21.compareTo(mutableDateTime71) == 0) == mutableDateTime21.equals(mutableDateTime71));
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test482");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField13 = chronology8.centuries();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        int int19 = dateTimeField18.getMaximumValue();
        int int22 = dateTimeField18.getDifference((long) 10, (long) 'a');
        int int23 = dateTimeField18.getMaximumValue();
        int int25 = dateTimeField18.getLeapAmount((long) 237);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField18.getType();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = mutableDateTime28.toString(dateTimeFormatter31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime28.weekOfWeekyear();
        org.joda.time.Chronology chronology34 = mutableDateTime28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(chronology34);
        org.joda.time.DurationField durationField36 = chronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.minuteOfHour();
        org.joda.time.DurationField durationField38 = chronology34.years();
        boolean boolean39 = dateTimeFieldType26.isSupported(chronology34);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale42, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket45.getZone();
        long long48 = dateTimeParserBucket45.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.yearOfEra();
        boolean boolean51 = dateTimeParserBucket45.restoreState((java.lang.Object) property50);
        int int52 = property50.getMinimumValueOverall();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = mutableDateTime54.isEqual(readableInstant55);
        int int57 = mutableDateTime54.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime54.set(dateTimeFieldType58, (int) 'a');
        int int61 = mutableDateTime54.getEra();
        boolean boolean62 = mutableDateTime54.isEqualNow();
        int int63 = property50.getDifference((org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.MutableDateTime mutableDateTime65 = property50.add(1);
        java.util.Locale locale66 = java.util.Locale.PRC;
        int int67 = property50.getMaximumTextLength(locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) 734, chronology34, locale66, (java.lang.Integer) 800, 35016873);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) 10670, chronology8, locale66, (java.lang.Integer) 74771);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime28", (mutableDateTime14.compareTo(mutableDateTime28) == 0) == mutableDateTime14.equals(mutableDateTime28));
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test483");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        int int19 = mutableDateTime11.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = mutableDateTime11.toDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        mutableDateTime22.addYears(0);
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) mutableDateTime22);
        boolean boolean29 = mutableDateTime9.isBefore((org.joda.time.ReadableInstant) mutableDateTime22);
        int int30 = mutableDateTime22.getCenturyOfEra();
        mutableDateTime22.addMonths(33);
        mutableDateTime22.addYears(74482419);
        java.lang.String str36 = mutableDateTime22.toString("-580");
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket42.getChronology();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        int int49 = mutableDateTime46.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime46.set(dateTimeFieldType50, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType50.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType55.getField(chronology56);
        org.joda.time.DurationField durationField58 = dateTimeField57.getDurationField();
        boolean boolean60 = dateTimeField57.isLeap((long) (short) -1);
        java.lang.String str61 = dateTimeField57.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType63.getField(chronology64);
        int int66 = dateTimeField65.getMaximumValue();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology68);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime69.dayOfWeek();
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime69.yearOfCentury();
        org.joda.time.DurationField durationField72 = property71.getDurationField();
        int int73 = property71.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType74.getField(chronology75);
        int int77 = dateTimeField76.getMaximumValue();
        java.util.Locale locale79 = java.util.Locale.FRENCH;
        java.lang.String str80 = locale79.getISO3Country();
        java.lang.String str81 = dateTimeField76.getAsShortText(0L, locale79);
        int int82 = property71.getMaximumTextLength(locale79);
        java.lang.String str83 = dateTimeField65.getAsShortText(0L, locale79);
        java.lang.String str84 = dateTimeField57.getAsText((-1L), locale79);
        dateTimeParserBucket42.saveField(dateTimeFieldType50, "2022-02-11T09:40:25.676Z", locale79);
        org.joda.time.DateTimeZone dateTimeZone86 = dateTimeParserBucket42.getZone();
        long long88 = dateTimeZone86.nextTransition(3715200950L);
        mutableDateTime22.setZone(dateTimeZone86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and mutableDateTime69", (mutableDateTime9.compareTo(mutableDateTime69) == 0) == mutableDateTime9.equals(mutableDateTime69));
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test484");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.addWeeks(678);
        boolean boolean22 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getCenturyOfEra();
        mutableDateTime18.setYear(672);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime18.toMutableDateTime();
        int int27 = mutableDateTime18.getMonthOfYear();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.minuteOfHour();
        org.joda.time.Chronology chronology41 = chronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology35.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime18.toMutableDateTime(chronology35);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.yearOfEra();
        java.lang.String str46 = property45.getAsShortText();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        mutableDateTime48.addHours(59);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime48.minuteOfHour();
        int int54 = mutableDateTime48.getSecondOfDay();
        mutableDateTime48.setSecondOfDay((int) (byte) 0);
        boolean boolean57 = property45.equals((java.lang.Object) mutableDateTime48);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime59.dayOfWeek();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime59.yearOfCentury();
        org.joda.time.DurationField durationField62 = property61.getDurationField();
        int int63 = property61.getMinimumValue();
        org.joda.time.DurationField durationField64 = property61.getDurationField();
        boolean boolean65 = property45.equals((java.lang.Object) durationField64);
        org.joda.time.MutableDateTime mutableDateTime66 = property45.roundHalfEven();
        int int67 = mutableDateTime66.getSecondOfDay();
        int int68 = mutableDateTime18.compareTo((org.joda.time.ReadableInstant) mutableDateTime66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime26 and mutableDateTime43", (mutableDateTime26.compareTo(mutableDateTime43) == 0) == mutableDateTime26.equals(mutableDateTime43));
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test485");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = mutableDateTime1.toCalendar(locale12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15, 34940053);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test486");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.addHours((int) (short) 0);
        mutableDateTime19.addWeekyears((int) 'a');
        java.lang.String str25 = mutableDateTime19.toString("0");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime27.set(dateTimeFieldType31, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        int int35 = mutableDateTime27.get(dateTimeFieldType34);
        mutableDateTime19.set(dateTimeFieldType34, 5);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime16.property(dateTimeFieldType34);
        boolean boolean39 = mutableDateTime1.isSupported(dateTimeFieldType34);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime1.millisOfDay();
        long long41 = property40.remainder();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime27", (instant11.compareTo(mutableDateTime27) == 0) == instant11.equals(mutableDateTime27));
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test487");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getDurationType();
        java.lang.String str3 = durationFieldType2.getName();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DurationField durationField5 = durationFieldType2.getField(chronology4);
        java.lang.String str6 = durationFieldType2.getName();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        org.joda.time.Chronology chronology14 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.secondOfMinute();
        long long24 = chronology14.add(1835L, (long) 693, 12);
        org.joda.time.DateTimeField dateTimeField25 = chronology14.dayOfMonth();
        boolean boolean26 = durationFieldType2.isSupported(chronology14);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.monthOfYear();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.clockhourOfHalfday();
        org.joda.time.DurationField durationField38 = durationFieldType2.getField(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType39.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType41.getRangeDurationType();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale45, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket48.getZone();
        long long51 = dateTimeParserBucket48.computeMillis(true);
        org.joda.time.Chronology chronology52 = dateTimeParserBucket48.getChronology();
        org.joda.time.Chronology chronology53 = chronology52.withUTC();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.yearOfEra();
        boolean boolean55 = durationFieldType42.isSupported(chronology52);
        org.joda.time.DurationField durationField56 = durationFieldType40.getField(chronology52);
        org.joda.time.DateTimeField dateTimeField57 = chronology52.centuryOfEra();
        boolean boolean58 = durationFieldType2.isSupported(chronology52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField5 and durationField38", (durationField5.compareTo(durationField38) == 0) == durationField5.equals(durationField38));
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test488");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = mutableDateTime1.toCalendar(locale12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime1.toMutableDateTimeISO();
        int int15 = mutableDateTime14.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant11", (mutableDateTime1.compareTo(instant11) == 0) == mutableDateTime1.equals(instant11));
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test489");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.addWeeks(678);
        boolean boolean22 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getCenturyOfEra();
        mutableDateTime18.setYear(672);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime18.toMutableDateTime();
        int int27 = mutableDateTime18.getMonthOfYear();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.minuteOfHour();
        org.joda.time.Chronology chronology41 = chronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology35.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime18.toMutableDateTime(chronology35);
        mutableDateTime18.setMillisOfDay(15);
        java.util.Locale locale48 = new java.util.Locale("2022-02-11T09:41:28.202-00:00:00.001", "");
        java.util.Calendar calendar49 = mutableDateTime18.toCalendar(locale48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime26 and mutableDateTime43", (mutableDateTime26.compareTo(mutableDateTime43) == 0) == mutableDateTime26.equals(mutableDateTime43));
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test490");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(59);
        int int10 = mutableDateTime1.getYear();
        mutableDateTime1.addMillis(97545);
        long long13 = mutableDateTime1.getMillis();
        int int14 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfWeek();
        org.joda.time.DateTime dateTime25 = mutableDateTime1.toDateTime(chronology22);
        org.joda.time.DurationField durationField26 = chronology22.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime25", (mutableDateTime1.compareTo(dateTime25) == 0) == mutableDateTime1.equals(dateTime25));
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test491");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime1.toString(dateTimeFormatter21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addYears(237);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.util.Calendar calendar41 = mutableDateTime1.toCalendar(locale39);
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime1.getZone();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        int int47 = mutableDateTime44.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime44.set(dateTimeFieldType48, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime44.getZone();
        long long53 = dateTimeZone51.nextTransition((long) 59);
        java.lang.String str55 = dateTimeZone51.getName((long) (short) 0);
        java.lang.String str56 = dateTimeZone51.getID();
        mutableDateTime1.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        boolean boolean61 = mutableDateTime59.isEqual(readableInstant60);
        int int62 = mutableDateTime59.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime59.set(dateTimeFieldType63, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.year();
        int int67 = mutableDateTime59.get(dateTimeFieldType66);
        org.joda.time.DateTime dateTime68 = mutableDateTime59.toDateTime();
        int int69 = dateTime68.getMinuteOfHour();
        org.joda.time.Chronology chronology71 = null;
        java.util.Locale locale72 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket(0L, chronology71, locale72, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone76 = dateTimeParserBucket75.getZone();
        org.joda.time.Chronology chronology77 = dateTimeParserBucket75.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.now(chronology77);
        org.joda.time.DateTime dateTime80 = dateTime68.toDateTime(chronology77);
        int int81 = dateTime80.getYearOfEra();
        int int82 = dateTime80.getMinuteOfDay();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime80);
        int int84 = dateTime80.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime12 and mutableDateTime79", (mutableDateTime12.compareTo(mutableDateTime79) == 0) == mutableDateTime12.equals(mutableDateTime79));
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test492");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        int int11 = dateTime10.getMonthOfYear();
        int int12 = dateTime10.getYear();
        java.util.Date date13 = dateTime10.toDate();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology16, locale17, (java.lang.Integer) 9, 59);
        java.lang.Object obj21 = dateTimeParserBucket20.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket20.saveField(dateTimeFieldType22, 59);
        long long26 = dateTimeParserBucket20.computeMillis(true);
        org.joda.time.Chronology chronology27 = dateTimeParserBucket20.getChronology();
        java.util.Locale locale30 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 74418645, chronology27, locale30, (java.lang.Integer) 617);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.minuteOfHour();
        org.joda.time.DurationField durationField34 = chronology27.millis();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((java.lang.Object) date13, chronology27);
        org.joda.time.DurationField durationField36 = chronology27.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime35", (mutableDateTime1.compareTo(mutableDateTime35) == 0) == mutableDateTime1.equals(mutableDateTime35));
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test493");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        mutableDateTime10.addDays(0);
        int int16 = mutableDateTime10.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime10.weekyear();
        boolean boolean18 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.minuteOfHour();
        int int26 = mutableDateTime20.getSecondOfDay();
        mutableDateTime20.setSecondOfDay((int) (byte) 0);
        mutableDateTime20.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.addHours((int) (short) 0);
        mutableDateTime31.addWeekyears((int) 'a');
        java.lang.String str37 = mutableDateTime31.toString("0");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        int int42 = mutableDateTime39.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime39.set(dateTimeFieldType43, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        int int47 = mutableDateTime39.get(dateTimeFieldType46);
        mutableDateTime31.set(dateTimeFieldType46, 5);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime20.property(dateTimeFieldType46);
        mutableDateTime10.set(dateTimeFieldType46, 237);
        mutableDateTime10.addWeekyears(22);
        boolean boolean55 = mutableDateTime10.isEqualNow();
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.days();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.dayOfYear();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField68 = chronology64.dayOfMonth();
        java.util.Locale locale69 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology64, locale69);
        org.joda.time.DateTimeField dateTimeField71 = chronology64.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime72 = mutableDateTime10.toMutableDateTime(chronology64);
        org.joda.time.DateTimeField dateTimeField73 = chronology64.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField74 = chronology64.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and mutableDateTime72", (mutableDateTime10.compareTo(mutableDateTime72) == 0) == mutableDateTime10.equals(mutableDateTime72));
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test494");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 167, chronology8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        boolean boolean19 = mutableDateTime14.isSupported(dateTimeFieldType18);
        int int20 = mutableDateTime14.getYearOfEra();
        mutableDateTime14.setMillisOfSecond((int) '#');
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int28 = dateTimeField27.getMaximumValue();
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getISO3Country();
        java.lang.String str32 = dateTimeField27.getAsShortText(0L, locale30);
        boolean boolean33 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime37.set(dateTimeFieldType41, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        int int45 = mutableDateTime37.get(dateTimeFieldType44);
        int int46 = mutableDateTime37.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.yearOfEra();
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar50 = mutableDateTime47.toCalendar(locale49);
        java.util.Calendar calendar51 = mutableDateTime37.toCalendar(locale49);
        java.lang.String str52 = dateTimeField27.getAsShortText(readablePartial34, (int) ' ', locale49);
        int int53 = property24.getMaximumShortTextLength(locale49);
        org.joda.time.MutableDateTime mutableDateTime54 = property24.roundCeiling();
        mutableDateTime14.setMillis((org.joda.time.ReadableInstant) mutableDateTime54);
        boolean boolean56 = mutableDateTime12.isEqual((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime12.weekOfWeekyear();
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("2022-02-11T09:40:47.450Z");
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleKeys();
        int int61 = property57.getMaximumShortTextLength(locale59);
        org.joda.time.MutableDateTime mutableDateTime63 = property57.add(74568);
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket(0L, chronology65, locale66, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone70 = dateTimeParserBucket69.getZone();
        org.joda.time.Chronology chronology71 = dateTimeParserBucket69.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.now(chronology71);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime73.millisOfDay();
        int int75 = property57.getDifference((org.joda.time.ReadableInstant) mutableDateTime73);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        boolean boolean79 = mutableDateTime77.isEqual(readableInstant78);
        int int80 = mutableDateTime77.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime77.set(dateTimeFieldType81, (int) 'a');
        int int84 = mutableDateTime77.getEra();
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime77.millisOfSecond();
        long long86 = property57.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime47 and mutableDateTime73", (mutableDateTime47.compareTo(mutableDateTime73) == 0) == mutableDateTime47.equals(mutableDateTime73));
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test495");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = mutableDateTime3.isEqual(readableInstant4);
        int int6 = mutableDateTime3.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime3.set(dateTimeFieldType7, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        int int11 = mutableDateTime3.get(dateTimeFieldType10);
        org.joda.time.Instant instant12 = mutableDateTime3.toInstant();
        mutableDateTime3.addDays((int) ' ');
        java.util.Date date15 = mutableDateTime3.toDate();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = durationFieldType16.isSupported(chronology17);
        mutableDateTime3.add(durationFieldType16, 902);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology29.centuries();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology29.getZone();
        org.joda.time.DurationField durationField33 = chronology29.weeks();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.year();
        java.util.Locale locale35 = java.util.Locale.US;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 906, chronology29, locale35);
        java.lang.String str37 = chronology29.toString();
        org.joda.time.DurationField durationField38 = durationFieldType16.getField(chronology29);
        mutableDateTime1.add(durationFieldType16, 74456);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime42.set(dateTimeFieldType46, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime42.getZone();
        org.joda.time.Chronology chronology50 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(390, 13);
        java.lang.String str54 = dateTimeZone53.getID();
        org.joda.time.LocalDateTime localDateTime55 = null;
        boolean boolean56 = dateTimeZone53.isLocalDateTimeGap(localDateTime55);
        org.joda.time.Chronology chronology57 = chronology50.withZone(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField58 = chronology50.dayOfYear();
        boolean boolean59 = durationFieldType16.isSupported(chronology50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime42", (instant12.compareTo(mutableDateTime42) == 0) == instant12.equals(mutableDateTime42));
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test496");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.millisOfDay();
        int int14 = mutableDateTime7.getDayOfWeek();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime7);
        int int16 = mutableDateTime7.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime7.toMutableDateTime(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfEra();
        java.lang.String str21 = property20.getAsText();
        org.joda.time.DateTimeField dateTimeField22 = property20.getField();
        org.joda.time.MutableDateTime mutableDateTime23 = property20.roundHalfFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property20.getFieldType();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.minuteOfHour();
        org.joda.time.DurationField durationField34 = chronology32.weekyears();
        boolean boolean35 = dateTimeFieldType24.isSupported(chronology32);
        mutableDateTime18.setChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField37 = chronology32.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and mutableDateTime18", (mutableDateTime7.compareTo(mutableDateTime18) == 0) == mutableDateTime7.equals(mutableDateTime18));
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test497");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        int int8 = mutableDateTime7.getEra();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        org.joda.time.Chronology chronology16 = dateTimeParserBucket14.getChronology();
        java.lang.Integer int17 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket14.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.hours();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfWeek();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        mutableDateTime22.addHours(59);
        int int27 = mutableDateTime22.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = mutableDateTime29.toString(dateTimeFormatter32);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey((long) (byte) 0);
        mutableDateTime29.setZoneRetainFields(dateTimeZone40);
        mutableDateTime22.setZone(dateTimeZone40);
        long long46 = dateTimeZone40.previousTransition((long) 852);
        long long49 = dateTimeZone40.adjustOffset((long) 580, true);
        long long53 = dateTimeZone40.convertLocalToUTC((long) 879, false, (long) 852);
        org.joda.time.Chronology chronology54 = chronology18.withZone(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(chronology18);
        mutableDateTime7.setMillis((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        boolean boolean60 = mutableDateTime58.isEqual(readableInstant59);
        int int61 = mutableDateTime58.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime58.set(dateTimeFieldType62, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        int int66 = mutableDateTime58.get(dateTimeFieldType65);
        int int67 = mutableDateTime58.getWeekOfWeekyear();
        org.joda.time.Instant instant68 = mutableDateTime58.toInstant();
        int int69 = mutableDateTime58.getMinuteOfHour();
        boolean boolean70 = mutableDateTime55.isAfter((org.joda.time.ReadableInstant) mutableDateTime58);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        mutableDateTime55.add(readablePeriod71, 796);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime58 and instant68", (mutableDateTime58.compareTo(instant68) == 0) == mutableDateTime58.equals(instant68));
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test498");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.centuryOfEra();
        int int18 = mutableDateTime1.getYearOfCentury();
        boolean boolean20 = mutableDateTime1.isEqual((long) 74411);
        org.joda.time.Chronology chronology21 = mutableDateTime1.getChronology();
        java.lang.String str22 = mutableDateTime1.toString();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = chronology30.add(readablePeriod32, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(chronology30);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.DateTime dateTime47 = mutableDateTime36.toDateTime(chronology44);
        org.joda.time.DateTime dateTime48 = mutableDateTime1.toDateTime(chronology44);
        org.joda.time.DurationField durationField49 = chronology44.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime48", (mutableDateTime1.compareTo(dateTime48) == 0) == mutableDateTime1.equals(dateTime48));
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test499");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone14);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfDay();
        int int19 = mutableDateTime1.getRoundingMode();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.yearOfCentury();
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        int int30 = mutableDateTime23.getEra();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime23.dayOfMonth();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime23.weekyear();
        org.joda.time.MutableDateTime mutableDateTime33 = property32.roundHalfCeiling();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfYear();
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.dayOfWeek();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property47.getAsText(locale48);
        java.util.Locale locale50 = null;
        int int51 = property47.getMaximumTextLength(locale50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        boolean boolean55 = mutableDateTime53.isEqual(readableInstant54);
        int int56 = mutableDateTime53.getHourOfDay();
        mutableDateTime53.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType59.getField(chronology60);
        int int62 = dateTimeField61.getMaximumValue();
        mutableDateTime53.setRounding(dateTimeField61);
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        java.lang.String str66 = dateTimeField61.getAsShortText((int) (byte) 1, locale65);
        java.lang.String str67 = property47.getAsShortText(locale65);
        java.lang.String str68 = dateTimeField42.getAsShortText(readablePartial43, (int) (short) -1, locale65);
        org.joda.time.ReadablePartial readablePartial69 = null;
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        boolean boolean74 = mutableDateTime72.isEqual(readableInstant73);
        int int75 = mutableDateTime72.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime72.set(dateTimeFieldType76, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.year();
        int int80 = mutableDateTime72.get(dateTimeFieldType79);
        int int81 = mutableDateTime72.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime82 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime82.yearOfEra();
        java.util.Locale locale84 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar85 = mutableDateTime82.toCalendar(locale84);
        java.util.Calendar calendar86 = mutableDateTime72.toCalendar(locale84);
        java.lang.String str87 = dateTimeField42.getAsText(readablePartial69, 306, locale84);
        java.util.Locale locale88 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale88);
        java.lang.String str90 = locale84.getDisplayName(locale88);
        java.lang.String str91 = locale84.getISO3Country();
        int int92 = property32.getMaximumShortTextLength(locale84);
        java.util.Locale.setDefault(category21, locale84);
        int int94 = property20.getMaximumTextLength(locale84);
        java.lang.String str95 = locale84.getCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar85", (calendar6.compareTo(calendar85) == 0) == calendar6.equals(calendar85));
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test500");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMonthOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        mutableDateTime6.addHours(59);
        int int11 = mutableDateTime6.getMillisOfSecond();
        mutableDateTime6.setMillisOfDay(10);
        boolean boolean14 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.Instant instant15 = mutableDateTime1.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        int int20 = dateTimeField19.getMaximumValue();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getISO3Country();
        java.lang.String str24 = dateTimeField19.getAsShortText(0L, locale22);
        boolean boolean25 = dateTimeField19.isLenient();
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime29.set(dateTimeFieldType33, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        int int37 = mutableDateTime29.get(dateTimeFieldType36);
        int int38 = mutableDateTime29.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.yearOfEra();
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar42 = mutableDateTime39.toCalendar(locale41);
        java.util.Calendar calendar43 = mutableDateTime29.toCalendar(locale41);
        java.lang.String str44 = dateTimeField19.getAsShortText(readablePartial26, (int) ' ', locale41);
        java.lang.String str45 = mutableDateTime1.toString("23", locale41);
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime1.copy();
        mutableDateTime48.setTime((long) 693);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant15", (mutableDateTime1.compareTo(instant15) == 0) == mutableDateTime1.equals(instant15));
    }
}


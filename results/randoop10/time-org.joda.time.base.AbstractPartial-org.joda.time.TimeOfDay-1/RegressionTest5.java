import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test02501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02501");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        long long11 = dateTimeField9.roundFloor((long) 3);
        int int13 = dateTimeField9.getMaximumValue((long) (-3600000));
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeField9.getAsText((long) (short) 0, locale15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay21 = dateTime18.toTimeOfDay();
        org.joda.time.LocalTime localTime22 = dateTime18.toLocalTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes((int) (short) 100);
        java.lang.String str35 = dateTime34.toString();
        int int36 = dateTime34.getSecondOfMinute();
        boolean boolean37 = dateTime18.equals((java.lang.Object) dateTime34);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((java.lang.Object) dateTime34);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalTime localTime40 = localTime38.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay45 = dateTime42.toTimeOfDay();
        org.joda.time.LocalTime localTime46 = dateTime42.toLocalTime();
        int int47 = localTime46.getMillisOfSecond();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay52 = dateTime49.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property53 = timeOfDay52.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay52.withPeriodAdded(readablePeriod54, (int) '4');
        boolean boolean57 = localTime46.equals((java.lang.Object) timeOfDay56);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime61.minusDays(7);
        org.joda.time.DateTime dateTime65 = dateTime61.withYear(1);
        org.joda.time.Chronology chronology66 = dateTime61.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        long long71 = chronology66.add(readablePeriod68, 9L, 5);
        org.joda.time.TimeOfDay timeOfDay72 = timeOfDay56.withChronologyRetainFields(chronology66);
        boolean boolean73 = localTime40.isAfter((org.joda.time.ReadablePartial) timeOfDay56);
        java.util.Locale locale75 = null;
        java.lang.String str76 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime40, 3, locale75);
        org.joda.time.DurationField durationField77 = dateTimeField9.getRangeDurationField();
        int int79 = dateTimeField9.get((-82800000L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-82800000L) + "'", long11 == (-82800000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "31" + "'", str16, "31");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str35, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 9L + "'", long71 == 9L);
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "3" + "'", str76, "3");
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 31 + "'", int79 == 31);
    }

    @Test
    public void test02502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02502");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology10.add(readablePeriod16, (long) 100, 17);
        org.joda.time.DurationField durationField20 = chronology10.months();
        org.joda.time.DurationField durationField21 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology10.weekyear();
        org.joda.time.DurationField durationField23 = chronology10.weeks();
        org.joda.time.DateTimeField dateTimeField24 = chronology10.era();
        org.joda.time.Chronology chronology25 = chronology10.withUTC();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test02503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02503");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str3 = dateTimeZone1.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((-1L), locale6);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withHourOfDay(7);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        boolean boolean23 = dateTimeZone21.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology24 = chronology19.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField25 = chronology24.minutes();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay8.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int30 = dateTimeField27.getDifference(1644572202914L, 11518243200023L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -9873670997109");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test02504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02504");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        boolean boolean13 = dateTimeZone11.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime14 = dateTime7.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int18 = dateTimeZone16.getStandardOffset((long) (short) 0);
        long long20 = dateTimeZone11.getMillisKeepLocal(dateTimeZone16, (long) 0);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone16);
        int int22 = dateTime21.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.Chronology chronology32 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.minuteOfDay();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology32);
        org.joda.time.LocalTime.Property property36 = localTime35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        org.joda.time.DateTimeField dateTimeField38 = property36.getField();
        org.joda.time.LocalTime localTime39 = property36.getLocalTime();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalTime localTime41 = localTime39.minus(readablePeriod40);
        org.joda.time.LocalTime localTime43 = localTime41.minusMillis(2000);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays(7);
        org.joda.time.DateTime dateTime53 = dateTime49.withYear(1);
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(chronology54);
        org.joda.time.DurationField durationField56 = chronology54.weeks();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        long long60 = chronology54.add(readablePeriod57, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay61 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology54);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((-82799998L), chronology54);
        org.joda.time.LocalTime.Property property63 = localTime62.hourOfDay();
        org.joda.time.LocalTime localTime65 = property63.addCopy(0L);
        org.joda.time.LocalTime localTime67 = property63.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property63.getFieldType();
        int int69 = localTime41.get(dateTimeFieldType68);
        org.joda.time.DateTime dateTime71 = dateTime21.withField(dateTimeFieldType68, 2);
        int int72 = dateTime71.getSecondOfDay();
        java.lang.String str73 = dateTime71.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3600000) + "'", int18 == (-3600000));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9511 + "'", int72 == 9511);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-11T02:38:31.381-01:00" + "'", str73, "2022-02-11T02:38:31.381-01:00");
    }

    @Test
    public void test02505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02505");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfMinute();
        org.joda.time.DateTime.Property property15 = dateTime13.dayOfWeek();
        org.joda.time.DateTime.Property property16 = dateTime13.year();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay21 = dateTime18.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        java.lang.String str24 = property22.getAsShortText();
        java.util.Locale locale25 = null;
        int int26 = property22.getMaximumTextLength(locale25);
        org.joda.time.TimeOfDay timeOfDay27 = property22.getTimeOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay32 = dateTime29.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property33 = timeOfDay32.millisOfSecond();
        int int34 = property33.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay36 = property33.addToCopy(100);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay41 = dateTime38.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property42 = timeOfDay41.millisOfSecond();
        boolean boolean43 = timeOfDay36.isEqual((org.joda.time.ReadablePartial) timeOfDay41);
        int[] intArray44 = timeOfDay36.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = timeOfDay36.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        boolean boolean48 = timeOfDay27.isSupported(dateTimeFieldType46);
        org.joda.time.DateTime dateTime50 = dateTime13.withField(dateTimeFieldType46, 0);
        org.joda.time.DateTime dateTime52 = dateTime13.minusMonths(244);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) dateTime13);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test02506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02506");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property13.addCopy(62134912800000L);
        org.joda.time.LocalTime localTime17 = localTime15.withMillisOfDay(12);
        java.lang.String str19 = localTime17.toString("2022");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
    }

    @Test
    public void test02507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02507");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekyearOfCentury();
        boolean boolean20 = property9.equals((java.lang.Object) dateTimeField19);
        org.joda.time.DateTime dateTime21 = property9.roundCeilingCopy();
        java.lang.String str22 = property9.getAsText();
        java.lang.String str23 = property9.getAsShortText();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "22" + "'", str22, "22");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "22" + "'", str23, "22");
    }

    @Test
    public void test02508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02508");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str17 = dateTimeZone15.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime11.toMutableDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(15, (int) (short) 1);
        int int23 = dateTimeZone21.getOffset(0L);
        boolean boolean24 = dateTimeZone15.equals((java.lang.Object) int23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone15);
        boolean boolean27 = dateTime25.isEqual((long) 17);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:00" + "'", str17, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 54060000 + "'", int23 == 54060000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02509");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str14 = dateTimeZone12.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime10.toMutableDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(7);
        org.joda.time.DateTime dateTime32 = dateTime28.withYear(1);
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str37 = dateTimeZone35.getShortName((long) 0);
        org.joda.time.DateTime dateTime38 = dateTime33.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = dateTime23.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime23.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime23.minus(readableDuration42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(7);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(1);
        org.joda.time.DateTime dateTime52 = dateTime51.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property53 = dateTime51.hourOfDay();
        org.joda.time.DateTime dateTime54 = property53.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property55 = dateTime54.weekOfWeekyear();
        java.util.Locale locale56 = null;
        int int57 = property55.getMaximumShortTextLength(locale56);
        org.joda.time.DateTime dateTime58 = property55.withMaximumValue();
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        int int60 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime62 = dateTime23.plusMinutes(15);
        boolean boolean63 = mutableDateTime15.isBefore((org.joda.time.ReadableInstant) dateTime62);
        int int64 = dateTime62.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = dateTime62.withMonthOfYear(91);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 91 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-01:00" + "'", str37, "-01:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 365 + "'", int64 == 365);
    }

    @Test
    public void test02510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02510");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(chronology10);
        org.joda.time.DurationField durationField12 = chronology10.weeks();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology10.add(readablePeriod13, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology10);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((-82799998L), chronology10);
        org.joda.time.LocalTime.Property property19 = localTime18.hourOfDay();
        org.joda.time.LocalTime localTime21 = property19.addCopy(0L);
        org.joda.time.LocalTime localTime23 = property19.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalTime localTime25 = localTime23.withHourOfDay(17);
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = localTime25.toString("T00:00:00.000", locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test02511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02511");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        boolean boolean2 = calendar0.isWeekDateSupported();
        calendar0.set((int) ' ', 86399999, 292278993, 16, (-738188));
        int int9 = calendar0.getWeeksInWeekYear();
        calendar0.add(4, (-738188));
        // The following exception was thrown during execution in test generation
        try {
            int int14 = calendar0.getActualMinimum(36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 36");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=251959964345520000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7986263,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=156,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=52,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
    }

    @Test
    public void test02512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02512");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean27 = dateTime25.isSupported(dateTimeFieldType26);
        org.joda.time.TimeOfDay.Property property28 = timeOfDay15.property(dateTimeFieldType26);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay15.minusMillis(70);
        org.joda.time.Chronology chronology31 = timeOfDay15.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.seconds();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test02513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02513");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.secondOfMinute();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property27 = dateTime26.monthOfYear();
        int int28 = dateTime26.getSecondOfDay();
        org.joda.time.DateTime dateTime30 = dateTime26.withMillisOfDay(70);
        org.joda.time.DateTime dateTime32 = dateTime26.withMillis(111600000L);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        int int34 = property14.compareTo((org.joda.time.ReadableInstant) dateTime32);
        java.util.GregorianCalendar gregorianCalendar35 = dateTime32.toGregorianCalendar();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime32.plus(readablePeriod36);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 85680 + "'", int28 == 85680);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(gregorianCalendar35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test02514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02514");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        boolean boolean18 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        boolean boolean24 = dateTimeZone22.equals((java.lang.Object) (-3600000));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear((java.lang.Integer) 365);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay33 = dateTime30.toTimeOfDay();
        java.util.Date date34 = dateTime30.toDate();
        int int35 = date34.getHours();
        date34.setSeconds(16);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.fromDateFields(date34);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay43 = dateTime40.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property44 = timeOfDay43.millisOfSecond();
        int int45 = property44.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay47 = property44.addToCopy(100);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay52 = dateTime49.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property53 = timeOfDay52.millisOfSecond();
        boolean boolean54 = timeOfDay47.isEqual((org.joda.time.ReadablePartial) timeOfDay52);
        int int55 = timeOfDay52.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = timeOfDay52.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay52.withPeriodAdded(readablePeriod57, (int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay59.plusMinutes(12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = timeOfDay61.getFieldTypes();
        boolean boolean63 = localTime38.equals((java.lang.Object) dateTimeFieldTypeArray62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = dateTimeFormatter26.print((org.joda.time.ReadablePartial) localTime38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:16 UTC 1970");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test02515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02515");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter2.getParser();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(712);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = dateTimeFormatter2.parseLocalTime("T00:00:00.001");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test02516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02516");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str3 = dateTimeZone1.getShortName((long) 0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property5 = dateTime4.weekyear();
        org.joda.time.DurationField durationField6 = property5.getRangeDurationField();
        org.joda.time.DurationField durationField7 = property5.getRangeDurationField();
        org.joda.time.DateTime dateTime8 = property5.withMaximumValue();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.Chronology chronology17 = dateTime12.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology17);
        org.joda.time.DurationField durationField19 = chronology17.weeks();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.DateTime dateTime28 = dateTime23.withYearOfCentury(22);
        boolean boolean29 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime31 = dateTime21.minusYears(86399999);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear(1);
        org.joda.time.DateTime dateTime40 = dateTime39.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property41 = dateTime39.hourOfDay();
        org.joda.time.DateTime dateTime42 = property41.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfYear(8);
        org.joda.time.Chronology chronology45 = dateTime42.getChronology();
        long long46 = dateTime42.getMillis();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str50 = dateTimeZone48.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone48.getName((-1L), locale53);
        long long57 = dateTimeZone48.adjustOffset((long) (short) 10, true);
        org.joda.time.DateTime dateTime58 = dateTime42.toDateTime(dateTimeZone48);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType59.getDurationType();
        boolean boolean61 = dateTime42.isSupported(dateTimeFieldType59);
        int int62 = dateTime31.get(dateTimeFieldType59);
        boolean boolean63 = dateTime8.isSupported(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-62104064400000L) + "'", long46 == (-62104064400000L));
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-01:00" + "'", str50, "-01:00");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-01:00" + "'", str54, "-01:00");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test02517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02517");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.monthOfYear();
        int int30 = dateTime28.getSecondOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.withMillisOfDay(70);
        boolean boolean33 = timeOfDay16.equals((java.lang.Object) dateTime28);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(7);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(1);
        org.joda.time.DateTime dateTime42 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTimeISO();
        org.joda.time.DateTime dateTime45 = dateTime43.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property46 = dateTime45.monthOfYear();
        int int47 = dateTime45.getSecondOfDay();
        org.joda.time.DateTime dateTime49 = dateTime45.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean51 = dateTime45.isSupported(dateTimeFieldType50);
        boolean boolean52 = dateTime28.isSupported(dateTimeFieldType50);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime57.minusDays(7);
        org.joda.time.DateTime dateTime61 = dateTime57.withYear(1);
        org.joda.time.Chronology chronology62 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.hourOfHalfday();
        org.joda.time.Chronology chronology66 = chronology62.withUTC();
        boolean boolean67 = durationFieldType53.isSupported(chronology66);
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType50.getField(chronology66);
        java.lang.String str69 = dateTimeFieldType50.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 85680 + "'", int30 == 85680);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 85680 + "'", int47 == 85680);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "minuteOfDay" + "'", str69, "minuteOfDay");
    }

    @Test
    public void test02518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02518");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int2 = localTime1.getSecondOfMinute();
        int int3 = localTime1.getMinuteOfHour();
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime1.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getRangeDurationType();
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType11 = localTime1.getFieldType(43);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 43");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test02519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02519");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        calendar0.setTimeInMillis((long) 56);
        calendar0.set(30961509, 97, 122, (int) (byte) 100, 1969);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = dateTime13.toCalendar(locale16);
        calendar17.clear();
        boolean boolean20 = calendar17.after((java.lang.Object) (short) 0);
        calendar17.set(23, 14, 2);
        int int25 = calendar0.compareTo(calendar17);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=30961509,MONTH=97,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=122,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=100,MINUTE=1969,SECOND=0,MILLISECOND=56,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 53 + "'", int1 == 53);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=23,MONTH=14,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test02520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02520");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(chronology10);
        org.joda.time.DurationField durationField12 = chronology10.weeks();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology10.add(readablePeriod13, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology10);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((-82799998L), chronology10);
        org.joda.time.DurationField durationField19 = chronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = chronology10.centuryOfEra();
        long long22 = dateTimeField20.roundHalfEven((long) (byte) 10);
        long long24 = dateTimeField20.roundHalfFloor((-62134909200000L));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 946688400000L + "'", long22 == 946688400000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-62167215600000L) + "'", long24 == (-62167215600000L));
    }

    @Test
    public void test02521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02521");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay23 = property21.addWrapFieldToCopy(100);
        int int24 = property21.get();
        int int25 = property21.get();
        java.lang.String str26 = property21.getAsShortText();
        java.lang.String str27 = property21.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 23 + "'", int24 == 23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 23 + "'", int25 == 23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "23" + "'", str26, "23");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[hourOfDay]" + "'", str27, "Property[hourOfDay]");
    }

    @Test
    public void test02522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02522");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.withMinimumValue();
        org.joda.time.LocalTime localTime32 = localTime30.withMinuteOfHour(11);
        org.joda.time.LocalTime.Property property33 = localTime32.secondOfMinute();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(7);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(1);
        org.joda.time.DateTime dateTime42 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str46 = dateTimeZone44.getShortName((long) 0);
        org.joda.time.DateTime dateTime47 = dateTime42.withZone(dateTimeZone44);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(dateTimeZone44);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str50 = dateTimeFieldType49.toString();
        boolean boolean51 = localTime48.isSupported(dateTimeFieldType49);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay56 = dateTime53.toTimeOfDay();
        org.joda.time.LocalTime localTime57 = dateTime53.toLocalTime();
        org.joda.time.Chronology chronology58 = localTime57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.years();
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType49.getField(chronology58);
        boolean boolean61 = localTime32.isSupported(dateTimeFieldType49);
        // The following exception was thrown during execution in test generation
        try {
            int int63 = localTime32.getValue(74221000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 74221000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-01:00" + "'", str46, "-01:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "monthOfYear" + "'", str50, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test02523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02523");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        org.joda.time.LocalTime localTime6 = dateTime2.toLocalTime();
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.years();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay((long) 7, chronology7);
        org.joda.time.DurationField durationField10 = chronology7.eras();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test02524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02524");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(300063L);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfDay(70);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.plus(readableDuration5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = dateTime4.toString("years");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test02525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02525");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime10.toLocalTime();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        long long20 = chronology15.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.LocalTime localTime27 = dateTime23.toLocalTime();
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter7.withChronology(chronology28);
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter7.withLocale(locale32);
        java.util.Locale locale34 = dateTimeFormatter7.getLocale();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay39 = dateTime36.toTimeOfDay();
        org.joda.time.DateTime dateTime41 = dateTime36.withYearOfCentury(22);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(7);
        org.joda.time.DateTime dateTime50 = dateTime46.withYear(1);
        org.joda.time.DateTime dateTime51 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str55 = dateTimeZone53.getShortName((long) 0);
        org.joda.time.DateTime dateTime56 = dateTime51.withZone(dateTimeZone53);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime(dateTimeZone53);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str59 = dateTimeFieldType58.toString();
        boolean boolean60 = localTime57.isSupported(dateTimeFieldType58);
        org.joda.time.DateTime dateTime62 = dateTime41.withField(dateTimeFieldType58, 3);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime66 = dateTime64.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime68 = dateTime66.minusDays(7);
        org.joda.time.DateTime dateTime70 = dateTime66.withYear(1);
        org.joda.time.DateTime dateTime71 = dateTime70.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str75 = dateTimeZone73.getShortName((long) 0);
        org.joda.time.DateTime dateTime76 = dateTime71.withZone(dateTimeZone73);
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime(dateTimeZone73);
        org.joda.time.DateTime dateTime78 = dateTime62.toDateTime(dateTimeZone73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter7.withZone(dateTimeZone73);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime83 = dateTime81.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime85 = dateTime83.minusDays(7);
        org.joda.time.DateTime dateTime87 = dateTime83.withYear(1);
        org.joda.time.DateTime dateTime88 = dateTime87.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime90 = dateTime88.plusYears((int) (short) 0);
        boolean boolean92 = dateTime88.isEqual((long) (byte) 0);
        java.util.Locale locale93 = null;
        java.util.Calendar calendar94 = dateTime88.toCalendar(locale93);
        org.joda.time.MutableDateTime mutableDateTime95 = dateTime88.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            int int98 = dateTimeFormatter79.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime95, "08:37:24.825", 24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(locale34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1483228799900L) + "'", long42 == (-1483228799900L));
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-01:00" + "'", str55, "-01:00");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "monthOfYear" + "'", str59, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-01:00" + "'", str75, "-01:00");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableDateTime95);
    }

    @Test
    public void test02526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02526");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone4.getName(0L, locale6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZone(dateTimeZone4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        int int10 = dateTimeFormatter9.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeFormatter9.parseMillis("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2000 + "'", int10 == 2000);
    }

    @Test
    public void test02527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02527");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        int int15 = gregorianCalendar13.getMinimalDaysInFirstWeek();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        java.util.Date date21 = dateTime17.toDate();
        java.time.Instant instant22 = date21.toInstant();
        int int23 = date21.getMinutes();
        int int24 = date21.getDate();
        gregorianCalendar13.setTime(date21);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = gregorianCalendar13.getMaximum(1869);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1869");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test02528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02528");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = calendar7.getMaximum(1200000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1200000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test02529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02529");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean17 = dateTime11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime11.getZone();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long22 = dateTimeZone18.adjustOffset(2922789L, false);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2922789L + "'", long22 == 2922789L);
    }

    @Test
    public void test02530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02530");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        int int5 = timeOfDay4.getSecondOfMinute();
        int[] intArray6 = timeOfDay4.getValues();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime8 = localTime7.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime11 = localTime7.withPeriodAdded(readablePeriod9, (int) 'a');
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        int int18 = property17.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay20 = property17.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property23 = timeOfDay20.hourOfDay();
        int int24 = timeOfDay20.size();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.millisOfSecond();
        org.joda.time.DurationField durationField31 = property30.getDurationField();
        java.lang.String str32 = property30.getAsShortText();
        java.util.Locale locale33 = null;
        int int34 = property30.getMaximumTextLength(locale33);
        org.joda.time.TimeOfDay timeOfDay35 = property30.getTimeOfDay();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay40 = dateTime37.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property41 = timeOfDay40.millisOfSecond();
        int int42 = property41.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay44 = property41.addToCopy(100);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay49 = dateTime46.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property50 = timeOfDay49.millisOfSecond();
        boolean boolean51 = timeOfDay44.isEqual((org.joda.time.ReadablePartial) timeOfDay49);
        int[] intArray52 = timeOfDay44.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = timeOfDay44.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        boolean boolean56 = timeOfDay35.isSupported(dateTimeFieldType54);
        boolean boolean57 = timeOfDay20.isSupported(dateTimeFieldType54);
        boolean boolean58 = localTime7.isSupported(dateTimeFieldType54);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime62 = dateTime60.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay63 = dateTime60.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property64 = timeOfDay63.millisOfSecond();
        java.util.Locale locale65 = null;
        int int66 = property64.getMaximumShortTextLength(locale65);
        int int67 = property64.get();
        int int68 = property64.get();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime72 = dateTime70.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay73 = dateTime70.toTimeOfDay();
        org.joda.time.LocalTime localTime74 = dateTime70.toLocalTime();
        int int75 = property64.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology76 = dateTime70.getChronology();
        org.joda.time.TimeOfDay timeOfDay77 = new org.joda.time.TimeOfDay((java.lang.Object) localTime7, chronology76);
        org.joda.time.TimeOfDay timeOfDay78 = timeOfDay4.withChronologyRetainFields(chronology76);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime82 = dateTime80.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime84 = dateTime82.minusDays(7);
        org.joda.time.DateTime dateTime86 = dateTime82.withYear(1);
        org.joda.time.Chronology chronology87 = dateTime82.getChronology();
        org.joda.time.LocalTime localTime88 = new org.joda.time.LocalTime(chronology87);
        org.joda.time.DurationField durationField89 = chronology87.weeks();
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime(chronology87);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime93 = dateTime90.withField(dateTimeFieldType91, 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTime.Property property95 = dateTime93.property(dateTimeFieldType94);
        org.joda.time.TimeOfDay.Property property96 = timeOfDay4.property(dateTimeFieldType94);
        org.joda.time.TimeOfDay.Property property97 = timeOfDay4.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay99 = timeOfDay4.minusSeconds(214);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[23, 0, 0, 100]");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "100" + "'", str32, "100");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(timeOfDay78);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertNotNull(timeOfDay99);
    }

    @Test
    public void test02531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02531");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(14);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int12 = dateTimeZone10.getStandardOffset((long) (short) 0);
        long long15 = dateTimeZone10.convertLocalToUTC(480100L, false);
        java.lang.String str17 = dateTimeZone10.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property28 = dateTime26.hourOfDay();
        org.joda.time.DateTime dateTime29 = property28.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str33 = dateTimeZone31.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime29.toMutableDateTime(dateTimeZone31);
        long long36 = dateTimeZone10.getMillisKeepLocal(dateTimeZone31, 0L);
        int int38 = dateTimeZone10.getOffsetFromLocal((long) 20);
        long long40 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, 17485L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(0, 30961340, 992, 292278993, 0, (int) ' ', dateTimeZone10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3600000) + "'", int12 == (-3600000));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4080100L + "'", long15 == 4080100L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:00" + "'", str17, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:00" + "'", str33, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3600000) + "'", int38 == (-3600000));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 3617499L + "'", long40 == 3617499L);
    }

    @Test
    public void test02532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02532");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        calendar7.setLenient(false);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone10);
        calendar12.roll(0, 0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644572313064,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=33,MILLISECOND=64,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test02533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02533");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.weekyearOfCentury();
        int int16 = dateTimeField15.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test02534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02534");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        org.joda.time.DateTime dateTime15 = dateTime9.withYear(1869);
        int int16 = dateTime9.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test02535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02535");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        java.util.Locale locale17 = null;
        java.util.Calendar calendar18 = dateTime15.toCalendar(locale17);
        boolean boolean19 = calendar18.isWeekDateSupported();
        boolean boolean20 = calendar18.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            calendar18.add(61200002, 44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test02536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02536");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar calendar3 = builder0.build();
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Calendar calendar5 = builder4.build();
        calendar5.setFirstDayOfWeek(13);
        int int8 = calendar5.getWeeksInWeekYear();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        int int15 = property14.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay17 = property14.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay17.hourOfDay();
        boolean boolean21 = calendar5.before((java.lang.Object) timeOfDay17);
        java.util.Calendar.Builder builder22 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder24 = builder22.setLenient(false);
        java.util.Calendar.Builder builder28 = builder22.setDate((int) '#', (-1), (int) '4');
        java.util.Calendar.Builder builder33 = builder28.setTimeOfDay((int) (short) 10, 59, (-1), (int) (short) 10);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(7);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(1);
        org.joda.time.DateTime dateTime42 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str46 = dateTimeZone44.getShortName((long) 0);
        org.joda.time.DateTime dateTime47 = dateTime42.withZone(dateTimeZone44);
        java.util.TimeZone timeZone48 = dateTimeZone44.toTimeZone();
        java.util.Calendar.Builder builder49 = builder33.setTimeZone(timeZone48);
        calendar5.setTimeZone(timeZone48);
        calendar3.setTimeZone(timeZone48);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime55.minusDays(7);
        org.joda.time.DateTime dateTime59 = dateTime55.withYear(1);
        org.joda.time.DateTime dateTime60 = dateTime59.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime61 = dateTime60.toDateTimeISO();
        org.joda.time.DateTime dateTime63 = dateTime61.plusMinutes((int) (short) 100);
        java.lang.String str64 = dateTime63.toString();
        java.util.GregorianCalendar gregorianCalendar65 = dateTime63.toGregorianCalendar();
        boolean boolean66 = gregorianCalendar65.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay67 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar65);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime71 = dateTime69.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay72 = dateTime69.toTimeOfDay();
        java.util.Date date73 = dateTime69.toDate();
        long long74 = date73.getTime();
        int int75 = date73.getHours();
        date73.setSeconds((int) (short) 0);
        int int78 = date73.getYear();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime82 = dateTime80.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay83 = dateTime80.toTimeOfDay();
        java.util.Date date84 = dateTime80.toDate();
        boolean boolean85 = date73.before(date84);
        boolean boolean86 = gregorianCalendar65.after((java.lang.Object) boolean85);
        int int87 = calendar3.compareTo((java.util.Calendar) gregorianCalendar65);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=13,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-01:00" + "'", str46, "-01:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str64, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 100L + "'", long74 == 100L);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 70 + "'", int78 == 70);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(timeOfDay83);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test02537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02537");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        calendar7.setLenient(false);
        calendar7.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = calendar7.get(69);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 69");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test02538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02538");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        boolean boolean13 = dateTimeZone11.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime14 = dateTime7.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) 'a');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property26 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime27 = property26.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfYear(8);
        boolean boolean30 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime29.getZone();
        long long35 = dateTimeZone31.convertLocalToUTC(10L, false, (long) 115);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3600010L + "'", long35 == 3600010L);
    }

    @Test
    public void test02539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02539");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str33 = dateTimeZone31.getShortName((long) 0);
        org.joda.time.DateTime dateTime34 = dateTime29.withZone(dateTimeZone31);
        long long37 = dateTimeZone31.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        boolean boolean41 = dateTimeZone39.equals((java.lang.Object) (-3600000));
        long long43 = dateTimeZone31.getMillisKeepLocal(dateTimeZone39, 100L);
        org.joda.time.DateTime dateTime44 = timeOfDay20.toDateTimeToday(dateTimeZone39);
        boolean boolean45 = dateTime44.isAfterNow();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays(7);
        org.joda.time.DateTime dateTime53 = dateTime49.withYear(1);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfEra();
        java.lang.String str55 = property54.getName();
        boolean boolean56 = property54.isLeap();
        org.joda.time.DateTime dateTime57 = property54.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime59 = dateTime57.plusWeeks(0);
        java.lang.String str60 = dateTime57.toString();
        boolean boolean61 = dateTime44.isEqual((org.joda.time.ReadableInstant) dateTime57);
        int int62 = dateTime44.getEra();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime44.plus(readableDuration63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = dateTime44.withEra(1968);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1968 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:00" + "'", str33, "-01:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 5L + "'", long37 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "yearOfEra" + "'", str55, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0002-01-01T00:00:00.000-01:00" + "'", str60, "0002-01-01T00:00:00.000-01:00");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test02540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02540");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(266322585600816L, dateTimeZone1);
    }

    @Test
    public void test02541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02541");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = chronology8.days();
        org.joda.time.DurationField durationField13 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField17 = chronology8.seconds();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test02542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02542");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 24, chronology9);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        int int18 = property17.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay20 = property17.addToCopy(100);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay25 = dateTime22.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property26 = timeOfDay25.millisOfSecond();
        boolean boolean27 = timeOfDay20.isEqual((org.joda.time.ReadablePartial) timeOfDay25);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay25.withSecondOfMinute(12);
        int[] intArray31 = chronology9.get((org.joda.time.ReadablePartial) timeOfDay25, 1L);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(7);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(1);
        org.joda.time.Chronology chronology42 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.minuteOfDay();
        boolean boolean45 = durationFieldType33.isSupported(chronology42);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 3, chronology42);
        org.joda.time.LocalTime.Property property47 = localTime46.secondOfMinute();
        org.joda.time.LocalTime localTime48 = property47.getLocalTime();
        org.joda.time.LocalTime localTime50 = property47.addNoWrapToCopy(3);
        int[] intArray52 = chronology9.get((org.joda.time.ReadablePartial) localTime50, (-9198435345878819900L));
        org.joda.time.Chronology chronology53 = chronology9.withUTC();
        org.joda.time.DurationField durationField54 = chronology53.weeks();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.minusDays(7);
        org.joda.time.DateTime dateTime62 = dateTime58.withYear(1);
        org.joda.time.Chronology chronology63 = dateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.hourOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.era();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(chronology63);
        org.joda.time.DateTimeField dateTimeField68 = chronology63.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay69 = new org.joda.time.TimeOfDay((java.lang.Object) durationField54, chronology63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.PreciseDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 0, 0, 1]");
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[4, 13, 0, 100]");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test02543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02543");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        long long11 = dateTimeField9.roundFloor((long) 3);
        int int13 = dateTimeField9.getMaximumValue((long) (-3600000));
        org.joda.time.DurationField durationField14 = dateTimeField9.getLeapDurationField();
        java.util.Locale locale15 = null;
        int int16 = dateTimeField9.getMaximumShortTextLength(locale15);
        org.joda.time.DurationField durationField17 = dateTimeField9.getLeapDurationField();
        java.util.Locale locale18 = null;
        int int19 = dateTimeField9.getMaximumTextLength(locale18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((java.lang.Object) int19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-82800000L) + "'", long11 == (-82800000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test02544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02544");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        java.time.Instant instant7 = date5.toInstant();
        java.util.Date date8 = java.util.Date.from(instant7);
        java.util.Date date9 = java.util.Date.from(instant7);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromDateFields(date9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay15 = dateTime12.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.millisOfSecond();
        int int17 = property16.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay19 = property16.addToCopy(100);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay24 = dateTime21.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.millisOfSecond();
        boolean boolean26 = timeOfDay19.isEqual((org.joda.time.ReadablePartial) timeOfDay24);
        int int27 = timeOfDay24.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = timeOfDay24.getFieldTypes();
        org.joda.time.TimeOfDay.Property property29 = timeOfDay24.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay31 = property29.setCopy(1);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear(1);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime44.minusDays(7);
        org.joda.time.DateTime dateTime48 = dateTime44.withYear(1);
        org.joda.time.DateTime dateTime49 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str53 = dateTimeZone51.getShortName((long) 0);
        org.joda.time.DateTime dateTime54 = dateTime49.withZone(dateTimeZone51);
        org.joda.time.DateTime dateTime55 = dateTime39.withZone(dateTimeZone51);
        org.joda.time.DateTime dateTime57 = dateTime39.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime59 = dateTime39.minus(readableDuration58);
        int int60 = property29.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DurationField durationField61 = property29.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay62 = property29.getTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property29.getFieldType();
        org.joda.time.LocalTime.Property property64 = localTime10.property(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-01:00" + "'", str53, "-01:00");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test02545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02545");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.addCopy(1L);
        org.joda.time.LocalTime localTime17 = property13.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime19 = property13.addCopy(480100L);
        org.joda.time.LocalTime localTime20 = property13.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test02546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02546");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withDefaultYear(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = dateTimeFormatter4.parseLocalDateTime("794");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test02547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02547");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(chronology25);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfYear();
        org.joda.time.DurationField durationField29 = chronology25.centuries();
        org.joda.time.DateTime dateTime30 = dateTime16.withChronology(chronology25);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    public void test02548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02548");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.Instant instant6 = dateTime5.toInstant();
        boolean boolean7 = dateTime5.isBeforeNow();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded(readableDuration9, 54060000);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter14.withChronology(chronology25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withPivotYear((java.lang.Integer) 83280);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = dateTime5.toString(dateTimeFormatter28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
    }

    @Test
    public void test02549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02549");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfDay();
        org.joda.time.DurationField durationField11 = chronology8.hours();
        org.joda.time.DurationField durationField12 = chronology8.weeks();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = chronology8.get(readablePeriod13, (long) 841, (-54059990L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test02550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02550");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(7, 9, 11);
        java.util.Calendar.Builder builder6 = builder4.setLenient(true);
        java.util.Calendar.Builder builder11 = builder4.setTimeOfDay(17, 0, (int) '#', 365);
        java.util.Locale locale12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder13 = builder4.setLocale(locale12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02551");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setLenient(true);
        int int14 = calendar7.getLeastMaximum(16);
        calendar7.set(0, 13, (int) (byte) -1);
        long long19 = calendar7.getTimeInMillis();
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromCalendarFields(calendar7);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.plusMinutes((int) (short) 100);
        java.lang.String str33 = dateTime32.toString();
        int int34 = dateTime32.getSecondOfMinute();
        org.joda.time.DateTime dateTime36 = dateTime32.plusMonths((int) (short) 1);
        int int37 = dateTime36.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime36.getZone();
        boolean boolean39 = timeOfDay20.equals((java.lang.Object) dateTime36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = timeOfDay20.toString("17 Jun 31433 18:53:03 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-62133180719900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=6,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1200000 + "'", int14 == 1200000);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62133180719900L) + "'", long19 == (-62133180719900L));
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str33, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test02552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02552");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime13.getEra();
        org.joda.time.LocalTime localTime24 = dateTime13.toLocalTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime27 = localTime24.withPeriodAdded(readablePeriod25, 9);
        org.joda.time.LocalTime localTime29 = localTime27.plusSeconds(20);
        int int30 = localTime27.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
    }

    @Test
    public void test02553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02553");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName(79680100L);
        java.lang.String str4 = dateTimeZone0.getNameKey(4L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-01:00" + "'", str2, "-01:00");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test02554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02554");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        long long16 = chronology8.add((long) 7, 5L, 11);
        org.joda.time.DateTimeField dateTimeField17 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str31 = dateTimeZone29.getShortName((long) 0);
        org.joda.time.DateTime dateTime32 = dateTime27.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        boolean boolean41 = dateTime32.isBefore((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean42 = dateTime40.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime40.getZone();
        org.joda.time.Chronology chronology44 = chronology8.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = chronology8.weekyearOfCentury();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int48 = localTime47.getSecondOfMinute();
        int int49 = localTime47.getMinuteOfHour();
        int int50 = localTime47.getMinuteOfHour();
        org.joda.time.LocalTime localTime52 = localTime47.minusHours((int) (byte) -1);
        java.util.Locale locale53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = dateTimeField45.getAsText((org.joda.time.ReadablePartial) localTime52, locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 62L + "'", long16 == 62L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-01:00" + "'", str31, "-01:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(localTime52);
    }

    @Test
    public void test02555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02555");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.TimeOfDay timeOfDay10 = property5.addToCopy(5);
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay(3110L);
        int int13 = timeOfDay10.compareTo((org.joda.time.ReadablePartial) localTime12);
        int int14 = timeOfDay10.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = timeOfDay10.getValue((-1028363091));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1028363091");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test02556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02556");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay15 = dateTime12.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay15.withPeriodAdded(readablePeriod17, (int) '4');
        int[] intArray20 = timeOfDay19.getValues();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.withMinuteOfHour(11);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) timeOfDay22, 712, locale24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str38 = dateTimeZone36.getShortName((long) 0);
        org.joda.time.DateTime dateTime39 = dateTime34.withZone(dateTimeZone36);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime(dateTimeZone36);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str42 = dateTimeFieldType41.toString();
        boolean boolean43 = localTime40.isSupported(dateTimeFieldType41);
        org.joda.time.LocalTime localTime45 = localTime40.minusMinutes(79680);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay50 = dateTime47.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property51 = timeOfDay50.millisOfSecond();
        int int52 = property51.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay54 = property51.addToCopy(100);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay59 = dateTime56.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property60 = timeOfDay59.millisOfSecond();
        boolean boolean61 = timeOfDay54.isEqual((org.joda.time.ReadablePartial) timeOfDay59);
        int[] intArray62 = timeOfDay54.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = timeOfDay54.getFieldType(0);
        int[] intArray65 = timeOfDay54.getValues();
        int int66 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localTime45, intArray65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime70 = dateTime68.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime72 = dateTime70.minusDays(7);
        org.joda.time.DateTime dateTime74 = dateTime70.withYear(1);
        org.joda.time.DateTime dateTime75 = dateTime74.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property76 = dateTime74.hourOfDay();
        org.joda.time.DateTime dateTime77 = property76.roundHalfFloorCopy();
        long long78 = property76.remainder();
        java.lang.String str79 = property76.toString();
        long long80 = property76.remainder();
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime84 = dateTime82.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay85 = dateTime82.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property86 = timeOfDay85.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.TimeOfDay timeOfDay89 = timeOfDay85.withPeriodAdded(readablePeriod87, (int) '4');
        org.joda.time.LocalTime localTime90 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime92 = localTime90.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime94 = localTime92.withMillisOfDay(2);
        boolean boolean95 = timeOfDay85.isAfter((org.joda.time.ReadablePartial) localTime92);
        int int96 = property76.compareTo((org.joda.time.ReadablePartial) timeOfDay85);
        int int97 = localTime45.compareTo((org.joda.time.ReadablePartial) timeOfDay85);
        org.joda.time.LocalTime.Property property98 = localTime45.hourOfDay();
        org.joda.time.LocalTime localTime99 = property98.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 0, 0, 100]");
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "712" + "'", str25, "712");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-01:00" + "'", str38, "-01:00");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "monthOfYear" + "'", str42, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[23, 0, 0, 200]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 24 + "'", int66 == 24);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 480100L + "'", long78 == 480100L);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Property[hourOfDay]" + "'", str79, "Property[hourOfDay]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 480100L + "'", long80 == 480100L);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(timeOfDay85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(timeOfDay89);
        org.junit.Assert.assertNotNull(localTime90);
        org.junit.Assert.assertNotNull(localTime92);
        org.junit.Assert.assertNotNull(localTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(property98);
        org.junit.Assert.assertNotNull(localTime99);
    }

    @Test
    public void test02557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02557");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay8.hourOfDay();
        int int12 = property11.get();
        org.joda.time.DurationField durationField13 = property11.getRangeDurationField();
        org.joda.time.DurationField durationField14 = property11.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 23 + "'", int12 == 23);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test02558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02558");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime12 = localTime10.withSecondOfMinute(1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime12, 14, locale14);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localTime12.getFields();
        int int17 = localTime12.size();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property30 = dateTime29.monthOfYear();
        int int31 = dateTime29.getSecondOfDay();
        org.joda.time.DateTime dateTime33 = dateTime29.withMillisOfDay(70);
        org.joda.time.DateTime dateTime34 = localTime12.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekyear((int) (short) 0);
        java.util.Date date37 = dateTime34.toDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = dateTime34.withHourOfDay((-2337983));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2337983 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "14" + "'", str15, "14");
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 85680 + "'", int31 == 85680);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Mon Jan 02 09:38:01 UTC 2");
    }

    @Test
    public void test02559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02559");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int3 = dateTimeZone1.getStandardOffset((long) (short) 0);
        long long6 = dateTimeZone1.convertLocalToUTC(480100L, false);
        java.lang.String str8 = dateTimeZone1.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.DateTime dateTime18 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property19 = dateTime17.hourOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str24 = dateTimeZone22.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime20.toMutableDateTime(dateTimeZone22);
        long long27 = dateTimeZone1.getMillisKeepLocal(dateTimeZone22, 0L);
        int int29 = dateTimeZone1.getOffsetFromLocal((long) 20);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(dateTimeZone1);
        boolean boolean32 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4080100L + "'", long6 == 4080100L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:00" + "'", str8, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:00" + "'", str24, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3600000) + "'", int29 == (-3600000));
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test02560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02560");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.plusSeconds((int) '#');
        org.joda.time.DateTime.Property property16 = dateTime15.secondOfDay();
        int int17 = dateTime15.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1428 + "'", int17 == 1428);
    }

    @Test
    public void test02561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02561");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        long long13 = dateTimeField11.roundHalfCeiling((long) (byte) 100);
        java.lang.String str14 = dateTimeField11.toString();
        boolean boolean16 = dateTimeField11.isLeap((long) 11);
        boolean boolean18 = dateTimeField11.isLeap(24L);
        boolean boolean19 = dateTimeField11.isLenient();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DateTimeField[minuteOfHour]" + "'", str14, "DateTimeField[minuteOfHour]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02562");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology8.millis();
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField15 = dateTimeField14.getRangeDurationField();
        long long17 = dateTimeField14.roundHalfFloor((-1693664548000L));
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.secondOfDay();
        long long34 = chronology26.add((long) 7, 5L, 11);
        org.joda.time.DurationField durationField35 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField36 = chronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField37 = chronology26.year();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) (-1693664548000L), chronology26);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1693695600000L) + "'", long17 == (-1693695600000L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 62L + "'", long34 == 62L);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test02563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02563");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.DurationField durationField13 = chronology9.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.hourOfDay();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime17 = localTime15.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime19 = localTime17.withMillisOfDay(2);
        java.util.Locale locale21 = null;
        java.lang.String str22 = localTime19.toString("00:00:00.010", locale21);
        int int23 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localTime19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime25 = localTime19.withHourOfDay(516);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 516 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "00:00:00.010" + "'", str22, "00:00:00.010");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 23 + "'", int23 == 23);
    }

    @Test
    public void test02564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02564");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        boolean boolean18 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        boolean boolean24 = dateTimeZone22.equals((java.lang.Object) (-3600000));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter2.withOffsetParsed();
        int int27 = dateTimeFormatter2.getDefaultYear();
        java.io.Writer writer28 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property38 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = property38.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property40 = dateTime39.weekOfWeekyear();
        java.util.Locale locale41 = null;
        int int42 = property40.getMaximumShortTextLength(locale41);
        org.joda.time.DateTime dateTime43 = property40.withMaximumValue();
        org.joda.time.DateTime dateTime44 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime45 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime47 = dateTime45.withWeekOfWeekyear(13);
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTime45.toString("1380", locale49);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime55.minusDays(7);
        org.joda.time.DateTime dateTime59 = dateTime55.withYear(1);
        org.joda.time.Chronology chronology60 = dateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.minuteOfDay();
        org.joda.time.LocalTime localTime63 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology60);
        org.joda.time.LocalTime.Property property64 = localTime63.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField65 = property64.getField();
        org.joda.time.LocalTime localTime66 = property64.getLocalTime();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime70 = dateTime68.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime72 = dateTime70.minusDays(7);
        org.joda.time.DateTime dateTime74 = dateTime70.withYear(1);
        org.joda.time.DateTime dateTime75 = dateTime74.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime76 = dateTime75.toDateTimeISO();
        int int77 = dateTime76.getEra();
        org.joda.time.DateTime.Property property78 = dateTime76.weekyear();
        org.joda.time.DateTime.Property property79 = dateTime76.yearOfCentury();
        org.joda.time.DateTime dateTime81 = property79.addToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime83 = property79.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime84 = localTime66.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime87 = dateTime83.withDurationAdded(3600009L, 13);
        int int88 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime.Property property89 = dateTime45.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer28, (org.joda.time.ReadableInstant) dateTime45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2000 + "'", int27 == 2000);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1380" + "'", str50, "1380");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test02565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02565");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.plusDays(24);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTime4.withWeekOfWeekyear(82800100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82800100 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test02566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02566");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str5 = dateTimeZone3.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone3.getName((-1L), locale8);
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(dateTimeZone3);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withHourOfDay(7);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(7);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(1);
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        boolean boolean25 = dateTimeZone23.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology26 = chronology21.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField27 = chronology26.minutes();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay10.withChronologyRetainFields(chronology26);
        boolean boolean29 = durationFieldType1.isSupported(chronology26);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.Chronology chronology38 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.hourOfHalfday();
        org.joda.time.Chronology chronology42 = chronology38.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) boolean29, chronology42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-01:00" + "'", str5, "-01:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test02567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02567");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("08:36:01.961");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"08:36:01.961\" is malformed at \":36:01.961\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02568");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        int int13 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime11.plus(readableDuration17);
        boolean boolean19 = dateTime11.isEqualNow();
        org.joda.time.DateMidnight dateMidnight20 = dateTime11.toDateMidnight();
        int int21 = dateTime11.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 85680 + "'", int21 == 85680);
    }

    @Test
    public void test02569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02569");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale5);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = dateTimeFormatter10.parseLocalTime("08:36:51.442");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test02570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02570");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("61199999");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02571");
        java.util.Date date0 = new java.util.Date();
        date0.setHours((int) (short) 0);
        date0.setSeconds(457);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Feb 11 00:45:37 UTC 2022");
    }

    @Test
    public void test02572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02572");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime10.toLocalTime();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        long long20 = chronology15.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter7.withChronology(chronology15);
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withLocale(locale22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withPivotYear(3);
        java.lang.Appendable appendable26 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTimeISO();
        org.joda.time.DateTime dateTime38 = dateTime36.plusMinutes((int) (short) 100);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.plusYears(14);
        java.util.Locale locale42 = null;
        java.util.Calendar calendar43 = dateTime38.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime38.plus((long) 7);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime45.getZone();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter23.printTo(appendable26, (org.joda.time.ReadableInstant) dateTime45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str39, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-62104057919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=48,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
    }

    @Test
    public void test02573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02573");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        calendar7.clear();
        int int9 = calendar7.getWeekYear();
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromCalendarFields(calendar7);
        java.util.TimeZone timeZone11 = calendar7.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            calendar7.add(1328, 99);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT-01:00");
    }

    @Test
    public void test02574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02574");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(952, 82800010, 0, 17661728, 82800100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17661728 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02575");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        boolean boolean18 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        boolean boolean24 = dateTimeZone22.equals((java.lang.Object) (-3600000));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.Chronology chronology36 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.minuteOfDay();
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology36);
        org.joda.time.LocalTime.Property property40 = localTime39.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalTime localTime43 = localTime39.withFieldAdded(durationFieldType41, 0);
        org.joda.time.Chronology chronology44 = localTime43.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter2.withChronology(chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withPivotYear(365);
        java.util.Locale locale48 = dateTimeFormatter2.getLocale();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNull(locale48);
    }

    @Test
    public void test02576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02576");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime8.plusHours(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.weeks();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology20.add(readablePeriod23, 1L, 8);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property36 = dateTime34.hourOfDay();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        boolean boolean40 = dateTimeZone38.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime41 = dateTime34.withZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int45 = dateTimeZone43.getStandardOffset((long) (short) 0);
        long long47 = dateTimeZone38.getMillisKeepLocal(dateTimeZone43, (long) 0);
        org.joda.time.Chronology chronology48 = chronology20.withZone(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime8.toMutableDateTime(chronology20);
        org.joda.time.DateTime.Property property50 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime52 = property50.setCopy(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property50.getFieldType();
        java.util.Locale locale54 = null;
        int int55 = property50.getMaximumTextLength(locale54);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3600000) + "'", int45 == (-3600000));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
    }

    @Test
    public void test02577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02577");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(4080100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalTime localTime4 = localTime1.withField(dateTimeFieldType2, 1);
        org.joda.time.LocalTime localTime6 = localTime1.plusHours(292278993);
        org.joda.time.LocalTime localTime8 = localTime1.plusSeconds(85680);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfDay();
        boolean boolean22 = durationFieldType10.isSupported(chronology19);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 3, chronology19);
        org.joda.time.LocalTime.Property property24 = localTime23.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalTime localTime27 = localTime23.withFieldAdded(durationFieldType25, 9);
        org.joda.time.LocalTime localTime29 = localTime8.withFieldAdded(durationFieldType25, 31021786);
        org.joda.time.LocalTime localTime31 = localTime8.minusSeconds(42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime33 = localTime31.withMinuteOfHour(675);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 675 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
    }

    @Test
    public void test02578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02578");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        int int6 = date5.getDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test02579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02579");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay6 = dateTime3.toTimeOfDay();
        org.joda.time.LocalTime localTime7 = dateTime3.toLocalTime();
        int int8 = localTime7.getMillisOfSecond();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withPeriodAdded(readablePeriod15, (int) '4');
        boolean boolean18 = localTime7.equals((java.lang.Object) timeOfDay17);
        org.joda.time.LocalTime localTime20 = localTime7.withMillisOfSecond((int) ' ');
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.plusDays(24);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean26 = dateTime22.isSupported(dateTimeFieldType25);
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType25.getRangeDurationType();
        int int28 = localTime7.get(dateTimeFieldType25);
        int int29 = localTime7.getHourOfDay();
        boolean boolean30 = calendar1.after((java.lang.Object) localTime7);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.clear(3599990);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3599990");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test02580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02580");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean9 = property5.equals((java.lang.Object) dateTimeFieldType8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.hourOfHalfday();
        org.joda.time.Chronology chronology23 = chronology19.withUTC();
        boolean boolean24 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField25 = chronology23.seconds();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(712);
        long long30 = dateTimeZone28.nextTransition((long) '4');
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay37 = dateTime34.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property38 = timeOfDay37.millisOfSecond();
        int int39 = property38.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay41 = property38.addToCopy(100);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay46 = dateTime43.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property47 = timeOfDay46.millisOfSecond();
        boolean boolean48 = timeOfDay41.isEqual((org.joda.time.ReadablePartial) timeOfDay46);
        int int49 = timeOfDay46.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = timeOfDay46.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay46.withPeriodAdded(readablePeriod51, (int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay53.plusMinutes(12);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay60 = dateTime57.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property61 = timeOfDay60.millisOfSecond();
        int int62 = property61.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay64 = property61.addToCopy(100);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime68 = dateTime66.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay69 = dateTime66.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property70 = timeOfDay69.millisOfSecond();
        boolean boolean71 = timeOfDay64.isEqual((org.joda.time.ReadablePartial) timeOfDay69);
        org.joda.time.TimeOfDay timeOfDay73 = timeOfDay64.withMinuteOfHour((int) '#');
        java.lang.String str74 = timeOfDay73.toString();
        org.joda.time.TimeOfDay timeOfDay76 = timeOfDay73.plusHours(2);
        org.joda.time.TimeOfDay timeOfDay78 = timeOfDay76.plusHours(9);
        org.joda.time.LocalTime localTime79 = timeOfDay76.toLocalTime();
        boolean boolean80 = timeOfDay55.isEqual((org.joda.time.ReadablePartial) localTime79);
        int[] intArray81 = timeOfDay55.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray83 = dateTimeField26.add((org.joda.time.ReadablePartial) localTime31, 3600096, intArray81, 1969);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3600096");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "T23:35:00.200" + "'", str74, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertNotNull(timeOfDay78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[23, 12, 0, 100]");
    }

    @Test
    public void test02581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02581");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale5);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter6.getParser();
        org.joda.time.Chronology chronology8 = dateTimeFormatter6.getChronolgy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertNull(chronology8);
    }

    @Test
    public void test02582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02582");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        int int13 = dateTime11.getEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test02583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02583");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str1 = durationFieldType0.toString();
        java.lang.String str2 = durationFieldType0.getName();
        java.lang.String str3 = durationFieldType0.toString();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "seconds" + "'", str1, "seconds");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "seconds" + "'", str2, "seconds");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "seconds" + "'", str3, "seconds");
    }

    @Test
    public void test02584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02584");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = chronology8.get(readablePeriod13, 946688400000L, 4868256L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test02585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02585");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.setCopy("14");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = timeOfDay8.getField(1380);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1380");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
    }

    @Test
    public void test02586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02586");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale5);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfDay();
        org.joda.time.DurationField durationField22 = chronology19.months();
        boolean boolean23 = dateTimeFieldType10.isSupported(chronology19);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 100, chronology19);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology19.add(readablePeriod25, (long) 100, 17);
        org.joda.time.DurationField durationField29 = chronology19.months();
        org.joda.time.DurationField durationField30 = chronology19.years();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter8.withChronology(chronology19);
        org.joda.time.Chronology chronology33 = dateTimeFormatter32.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter32.withOffsetParsed();
        java.lang.StringBuffer stringBuffer35 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter32.printTo(stringBuffer35, (-62417085119900L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
    }

    @Test
    public void test02587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02587");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(7);
        java.util.Locale locale19 = null;
        java.util.Calendar calendar20 = dateTime16.toCalendar(locale19);
        int int22 = calendar20.getMaximum(9);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.fromCalendarFields(calendar20);
        java.time.Instant instant24 = calendar20.toInstant();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromCalendarFields(calendar20);
        java.lang.String str26 = localTime25.toString();
        int int27 = localTime25.getMinuteOfHour();
        int int28 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.minusHours(13);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay32.withPeriodAdded(readablePeriod33, 4);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays(7);
        org.joda.time.DateTime dateTime44 = dateTime40.withYear(1);
        org.joda.time.Chronology chronology45 = dateTime40.getChronology();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology50 = chronology45.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField51 = chronology45.dayOfYear();
        long long53 = dateTimeField51.remainder((-607919900L));
        java.util.Locale locale54 = null;
        int int55 = dateTimeField51.getMaximumShortTextLength(locale54);
        java.lang.String str56 = dateTimeField51.toString();
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int59 = localTime58.getSecondOfMinute();
        int int60 = localTime58.getMinuteOfHour();
        org.joda.time.LocalTime localTime62 = localTime58.plusHours(1);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime66 = dateTime64.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay67 = dateTime64.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property68 = timeOfDay67.millisOfSecond();
        java.util.Locale locale69 = null;
        int int70 = property68.getMaximumShortTextLength(locale69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean72 = property68.equals((java.lang.Object) dateTimeFieldType71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = property68.getFieldType();
        org.joda.time.TimeOfDay timeOfDay75 = property68.addWrapFieldToCopy(0);
        int[] intArray76 = timeOfDay75.getValues();
        int int77 = dateTimeField51.getMaximumValue((org.joda.time.ReadablePartial) localTime62, intArray76);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray79 = dateTimeField12.set((org.joda.time.ReadablePartial) timeOfDay35, 61199999, intArray76, 85680);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "22:08:00.100" + "'", str26, "22:08:00.100");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 79680100L + "'", long53 == 79680100L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "DateTimeField[dayOfYear]" + "'", str56, "DateTimeField[dayOfYear]");
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(timeOfDay75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[23, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 366 + "'", int77 == 366);
    }

    @Test
    public void test02588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02588");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.getLocalTime();
        org.joda.time.DateTime dateTime17 = localTime16.toDateTimeToday();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property23 = timeOfDay22.millisOfSecond();
        int int24 = property23.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay26 = property23.addToCopy(100);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay31 = dateTime28.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property32 = timeOfDay31.millisOfSecond();
        boolean boolean33 = timeOfDay26.isEqual((org.joda.time.ReadablePartial) timeOfDay31);
        int int34 = timeOfDay31.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = timeOfDay31.getFieldTypes();
        org.joda.time.TimeOfDay.Property property36 = timeOfDay31.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay38 = property36.setCopy(1);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(7);
        org.joda.time.DateTime dateTime46 = dateTime42.withYear(1);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfEra();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime51.minusDays(7);
        org.joda.time.DateTime dateTime55 = dateTime51.withYear(1);
        org.joda.time.DateTime dateTime56 = dateTime55.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str60 = dateTimeZone58.getShortName((long) 0);
        org.joda.time.DateTime dateTime61 = dateTime56.withZone(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime46.withZone(dateTimeZone58);
        org.joda.time.DateTime dateTime64 = dateTime46.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime46.minus(readableDuration65);
        int int67 = property36.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property36.getFieldType();
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType68.getDurationType();
        int int70 = localTime16.indexOf(dateTimeFieldType68);
        org.joda.time.DateTime dateTime71 = localTime16.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-01:00" + "'", str60, "-01:00");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test02589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02589");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.LocalTime localTime16 = localTime14.minusSeconds(2);
        org.joda.time.LocalTime localTime18 = localTime14.plusMinutes((-292275054));
        org.joda.time.LocalTime localTime20 = localTime18.withSecondOfMinute(15);
        int int21 = localTime18.getSecondOfMinute();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.Chronology chronology30 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = dateTimeField35.getType();
        boolean boolean37 = localTime18.isSupported(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02590");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology10.add(readablePeriod16, (long) 100, 17);
        org.joda.time.DurationField durationField20 = chronology10.months();
        org.joda.time.DurationField durationField21 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology10.weekyear();
        long long25 = dateTimeField23.roundFloor((-62104060319900L));
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime28 = localTime26.withSecondOfMinute(1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalTime localTime30 = localTime28.minus(readablePeriod29);
        org.joda.time.LocalTime.Property property31 = localTime28.millisOfDay();
        org.joda.time.LocalTime localTime32 = property31.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime33 = property31.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay39 = dateTime36.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property40 = timeOfDay39.millisOfSecond();
        int int41 = property40.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay43 = property40.setCopy("14");
        int[] intArray44 = timeOfDay43.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray46 = dateTimeField23.set((org.joda.time.ReadablePartial) localTime33, (-19), intArray44, 31115675);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-62104143600000L) + "'", long25 == (-62104143600000L));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[23, 0, 0, 14]");
    }

    @Test
    public void test02591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02591");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        boolean boolean15 = gregorianCalendar13.isWeekDateSupported();
        boolean boolean16 = gregorianCalendar13.isWeekDateSupported();
        gregorianCalendar13.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = gregorianCalendar13.getLeastMaximum(1439);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1439");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test02592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02592");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        int int2 = calendar0.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = calendar0.getMaximum(1970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
    }

    @Test
    public void test02593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02593");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(62134912800000L);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime4 = localTime1.withPeriodAdded(readablePeriod2, 79200);
        org.joda.time.DateTime dateTime5 = localTime4.toDateTimeToday();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.parse("0");
        java.util.GregorianCalendar gregorianCalendar8 = dateTime7.toGregorianCalendar();
        org.joda.time.DateTime dateTime10 = dateTime7.plusMillis(1439);
        org.joda.time.DateTime dateTime12 = dateTime7.minusMinutes(122);
        boolean boolean13 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime7.withMinuteOfHour((-738188));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -738188 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test02594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02594");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) 1);
        org.joda.time.DateTime.Property property15 = dateTime11.secondOfMinute();
        int int16 = dateTime11.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 365 + "'", int16 == 365);
    }

    @Test
    public void test02595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02595");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(69, 4, 0, (int) ' ', 2022, 79200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02596");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        long long13 = dateTimeField11.roundHalfCeiling((long) (byte) 100);
        java.lang.String str14 = dateTimeField11.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfDay();
        org.joda.time.DurationField durationField28 = chronology25.months();
        boolean boolean29 = dateTimeFieldType16.isSupported(chronology25);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 100, chronology25);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime30);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear(1);
        org.joda.time.DateTime dateTime40 = dateTime39.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTimeISO();
        org.joda.time.DateTime dateTime43 = dateTime41.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property44 = dateTime43.monthOfYear();
        int int45 = dateTime43.getSecondOfDay();
        org.joda.time.DateTime dateTime47 = dateTime43.withMillisOfDay(70);
        boolean boolean48 = timeOfDay31.equals((java.lang.Object) dateTime43);
        int int49 = timeOfDay31.getMillisOfSecond();
        java.util.Locale locale51 = null;
        java.lang.String str52 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) timeOfDay31, 91, locale51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay56 = timeOfDay31.withField(dateTimeFieldType53, 74221000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DateTimeField[minuteOfHour]" + "'", str14, "DateTimeField[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 85680 + "'", int45 == 85680);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "91" + "'", str52, "91");
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
    }

    @Test
    public void test02597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02597");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = property2.addNoWrapToCopy((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int6 = timeOfDay4.get(dateTimeFieldType5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay4);
    }

    @Test
    public void test02598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02598");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        int int6 = dateTimeFormatter5.getDefaultYear();
        boolean boolean7 = dateTimeFormatter5.isParser();
        org.joda.time.Chronology chronology8 = dateTimeFormatter5.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withDefaultYear(427);
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeFormatter5.parseMillis("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test02599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02599");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        boolean boolean14 = dateTime13.isEqualNow();
        boolean boolean15 = dateTime13.isEqualNow();
        org.joda.time.DateTime dateTime16 = dateTime13.withTimeAtStartOfDay();
        int int17 = dateTime13.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test02600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02600");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime10.toLocalTime();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        long long20 = chronology15.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.Chronology chronology22 = dateTimeFormatter21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter21.withPivotYear(86399999);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(7);
        org.joda.time.DateTime dateTime32 = dateTime28.withYear(1);
        org.joda.time.Chronology chronology33 = dateTime28.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = dateTimeFormatter24.print((org.joda.time.ReadableInstant) dateTime28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test02601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02601");
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.now();
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(794, (int) (byte) 1, 1869, 32772, chronology5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 794 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test02602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02602");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean27 = dateTime25.isSupported(dateTimeFieldType26);
        org.joda.time.TimeOfDay.Property property28 = timeOfDay15.property(dateTimeFieldType26);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay15.minusMillis(70);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.Chronology chronology39 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.secondOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology46 = chronology39.withZone(dateTimeZone45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((java.lang.Object) 70, chronology39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test02603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02603");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar calendar3 = builder0.build();
        int int5 = calendar3.getLeastMaximum((int) (short) 10);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay10 = dateTime7.toTimeOfDay();
        java.util.Date date11 = dateTime7.toDate();
        java.time.Instant instant12 = date11.toInstant();
        int int13 = date11.getMinutes();
        long long14 = date11.getTime();
        java.lang.String str15 = date11.toGMTString();
        int int16 = date11.getSeconds();
        int int17 = date11.getMonth();
        int int18 = date11.getTimezoneOffset();
        java.lang.Object obj19 = date11.clone();
        boolean boolean20 = calendar3.after((java.lang.Object) date11);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = calendar3.getMaximum(762);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 762");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 11 + "'", int5 == 11);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str15, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02604");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology8.add(readablePeriod11, 1L, 8);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        boolean boolean28 = dateTimeZone26.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime29 = dateTime22.withZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int33 = dateTimeZone31.getStandardOffset((long) (short) 0);
        long long35 = dateTimeZone26.getMillisKeepLocal(dateTimeZone31, (long) 0);
        org.joda.time.Chronology chronology36 = chronology8.withZone(dateTimeZone31);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = chronology8.getDateTimeMillis(17661728, 18, 388, 36, (int) 'a', 0, 61199999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3600000) + "'", int33 == (-3600000));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test02605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02605");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime.Property property11 = dateTime9.weekyear();
        org.joda.time.DateTime.Property property12 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime16 = property12.addWrapFieldToCopy((int) (short) 100);
        int int17 = property12.getMinimumValueOverall();
        java.lang.String str18 = property12.getAsText();
        java.lang.String str19 = property12.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "yearOfCentury" + "'", str19, "yearOfCentury");
    }

    @Test
    public void test02606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02606");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setDate(13, 85680, 517);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.DateTime dateTime15 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str19 = dateTimeZone17.getShortName((long) 0);
        org.joda.time.DateTime dateTime20 = dateTime15.withZone(dateTimeZone17);
        java.util.TimeZone timeZone21 = dateTimeZone17.toTimeZone();
        java.util.Calendar.Builder builder22 = builder6.setTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone21, locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-01:00" + "'", str19, "-01:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
    }

    @Test
    public void test02607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02607");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("08:36:01.971");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"08:36:01.971\" is malformed at \":36:01.971\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02608");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.withMillisOfDay(70);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfDay();
        int int17 = property16.getMaximumValueOverall();
        org.joda.time.DateTime dateTime18 = property16.withMaximumValue();
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1439 + "'", int17 == 1439);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
    }

    @Test
    public void test02609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02609");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        java.lang.String str15 = chronology10.toString();
        org.joda.time.DurationField durationField16 = chronology10.hours();
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[-01:00]" + "'", str15, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test02610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02610");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int8 = dateTimeZone6.getStandardOffset((long) (short) 0);
        java.lang.String str10 = dateTimeZone6.getNameKey(946688400000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(31021460, 2000, 61199999, 31115675, (int) (short) 1, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31115675 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3600000) + "'", int8 == (-3600000));
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test02611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02611");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.withPeriodAdded(readablePeriod6, (int) '4');
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.Chronology chronology17 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay4.withChronologyRetainFields(chronology17);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = chronology17.getDateTimeMillis(712, 7, 32772, 75, 82800100, 32770, 30961340);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 75 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(timeOfDay22);
    }

    @Test
    public void test02612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02612");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str16 = dateTimeFieldType15.toString();
        boolean boolean17 = localTime14.isSupported(dateTimeFieldType15);
        org.joda.time.LocalTime localTime19 = localTime14.minusMinutes(79680);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime21 = localTime20.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalTime localTime24 = localTime20.withPeriodAdded(readablePeriod22, (int) 'a');
        org.joda.time.LocalTime localTime26 = localTime20.minusMinutes(69);
        int int27 = localTime19.compareTo((org.joda.time.ReadablePartial) localTime26);
        java.lang.String str28 = localTime26.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "monthOfYear" + "'", str16, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "07:29:36.752" + "'", str28, "07:29:36.752");
    }

    @Test
    public void test02613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02613");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.withPeriodAdded(readablePeriod6, (int) '4');
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime11 = localTime9.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime13 = localTime11.withMillisOfDay(2);
        boolean boolean14 = timeOfDay4.isAfter((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.LocalTime.Property property15 = localTime11.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int17 = localTime11.get(dateTimeFieldType16);
        org.joda.time.LocalTime.Property property18 = localTime11.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test02614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02614");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar calendar3 = builder0.build();
        int int5 = calendar3.getLeastMaximum((int) (short) 10);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay10 = dateTime7.toTimeOfDay();
        java.util.Date date11 = dateTime7.toDate();
        java.time.Instant instant12 = date11.toInstant();
        int int13 = date11.getMinutes();
        long long14 = date11.getTime();
        java.lang.String str15 = date11.toGMTString();
        int int16 = date11.getSeconds();
        int int17 = date11.getMonth();
        int int18 = date11.getTimezoneOffset();
        java.lang.Object obj19 = date11.clone();
        boolean boolean20 = calendar3.after((java.lang.Object) date11);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str33 = dateTimeZone31.getShortName((long) 0);
        org.joda.time.DateTime dateTime34 = dateTime29.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime38.minusDays(7);
        org.joda.time.DateTime dateTime42 = dateTime38.withYear(1);
        boolean boolean43 = dateTime34.isBefore((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = dateTime42.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime42.getZone();
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(dateTimeZone45);
        java.util.TimeZone timeZone47 = dateTimeZone45.toTimeZone();
        boolean boolean48 = calendar3.after((java.lang.Object) dateTimeZone45);
        java.lang.String str49 = calendar3.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 11 + "'", int5 == 11);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str15, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:00" + "'", str33, "-01:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]" + "'", str49, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test02615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02615");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.millisOfSecond();
        int int22 = property21.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay24 = property21.addToCopy(100);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.millisOfSecond();
        boolean boolean31 = timeOfDay24.isEqual((org.joda.time.ReadablePartial) timeOfDay29);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay29.withSecondOfMinute(12);
        org.joda.time.DateTime dateTime34 = timeOfDay29.toDateTimeToday();
        int int35 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay29);
        int int36 = dateTimeField15.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial37 = null;
        java.util.Locale locale38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = dateTimeField15.getAsShortText(readablePartial37, locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 999 + "'", int35 == 999);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 999 + "'", int36 == 999);
    }

    @Test
    public void test02616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02616");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime.Property property34 = dateTime33.secondOfDay();
        long long35 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property37 = dateTime15.dayOfYear();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay42 = dateTime39.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property43 = timeOfDay42.millisOfSecond();
        int int44 = property43.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay46 = property43.addToCopy(100);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay51 = dateTime48.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property52 = timeOfDay51.millisOfSecond();
        boolean boolean53 = timeOfDay46.isEqual((org.joda.time.ReadablePartial) timeOfDay51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean55 = timeOfDay46.isSupported(dateTimeFieldType54);
        org.joda.time.LocalTime localTime56 = timeOfDay46.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            int int57 = property37.compareTo((org.joda.time.ReadablePartial) localTime56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localTime56);
    }

    @Test
    public void test02617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02617");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        boolean boolean13 = dateTimeZone11.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime14 = dateTime7.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime14.withMonthOfYear(1380);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1380 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test02618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02618");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        calendar7.setLenient(false);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        long long13 = dateTimeZone11.previousTransition(5L);
        java.lang.String str14 = dateTimeZone11.getID();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5L + "'", long13 == 5L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
    }

    @Test
    public void test02619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02619");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime7.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime7.minus(readableDuration26);
        org.joda.time.DateTime dateTime30 = dateTime7.withDurationAdded((long) 56, 86399);
        org.joda.time.DateTime.Property property31 = dateTime30.secondOfDay();
        org.joda.time.DateTime dateTime32 = dateTime30.withEarlierOffsetAtOverlap();
        int int33 = dateTime30.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
    }

    @Test
    public void test02620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02620");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1), 97, 1200000, 0, 470, 56, 718);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 470 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02621");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime14 = localTime11.withFieldAdded(durationFieldType12, 9);
        org.joda.time.LocalTime localTime16 = localTime14.plusMinutes((-3600000));
        int[] intArray18 = chronology8.get((org.joda.time.ReadablePartial) localTime14, (-62104060800000L));
        org.joda.time.DurationField durationField19 = chronology8.seconds();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.Chronology chronology30 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.minuteOfDay();
        org.joda.time.DurationField durationField33 = chronology30.months();
        boolean boolean34 = dateTimeFieldType21.isSupported(chronology30);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 100, chronology30);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = chronology30.add(readablePeriod36, (long) 100, 17);
        org.joda.time.DurationField durationField40 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField41 = chronology30.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((java.lang.Object) chronology8, chronology30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 0, 0, 0]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test02622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02622");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        java.time.Instant instant6 = date5.toInstant();
        int int7 = date5.getMinutes();
        long long8 = date5.getTime();
        java.lang.String str9 = date5.toGMTString();
        int int10 = date5.getSeconds();
        int int11 = date5.getMonth();
        int int12 = date5.getTimezoneOffset();
        date5.setMonth(1328);
        date5.setSeconds(99);
        date5.setYear((int) (byte) -1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Sep 01 00:01:39 UTC 1899");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str9, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test02623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02623");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronology();
        org.joda.time.Chronology chronology6 = dateTimeFormatter3.getChronology();
        boolean boolean7 = dateTimeFormatter3.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.parse("08:37:00.252", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02624");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime8.hourOfDay();
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear(8);
        org.joda.time.Chronology chronology14 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology14.getZone();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromMillisOfDay(247535040100L, chronology14);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test02625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02625");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        int int15 = gregorianCalendar13.getMinimalDaysInFirstWeek();
        gregorianCalendar13.clear();
        long long17 = gregorianCalendar13.getTimeInMillis();
        int int18 = gregorianCalendar13.getWeekYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3600000L + "'", long17 == 3600000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
    }

    @Test
    public void test02626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02626");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(82885680L);
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test02627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02627");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(111600000L);
        org.joda.time.LocalTime localTime3 = localTime1.withMillisOfSecond((int) (short) 100);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(7);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(1);
        org.joda.time.DateTime dateTime12 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str16 = dateTimeZone14.getShortName((long) 0);
        org.joda.time.DateTime dateTime17 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        boolean boolean26 = dateTime17.isBefore((org.joda.time.ReadableInstant) dateTime25);
        java.util.Locale locale27 = null;
        java.util.Calendar calendar28 = dateTime25.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.Chronology chronology37 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.year();
        boolean boolean41 = calendar28.before((java.lang.Object) dateTimeField40);
        org.joda.time.TimeOfDay timeOfDay42 = org.joda.time.TimeOfDay.fromCalendarFields(calendar28);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(7);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(1);
        org.joda.time.Chronology chronology52 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.minuteOfDay();
        boolean boolean55 = durationFieldType43.isSupported(chronology52);
        org.joda.time.DateTimeField dateTimeField56 = chronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = chronology52.halfdayOfDay();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime61.minusDays(7);
        org.joda.time.DateTime dateTime65 = dateTime61.withYear(1);
        org.joda.time.DateTime dateTime66 = dateTime65.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str70 = dateTimeZone68.getShortName((long) 0);
        org.joda.time.DateTime dateTime71 = dateTime66.withZone(dateTimeZone68);
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime(dateTimeZone68);
        java.util.Locale locale74 = null;
        java.lang.String str75 = dateTimeZone68.getName((long) 712, locale74);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone68);
        org.joda.time.Chronology chronology77 = chronology52.withZone(dateTimeZone68);
        int int79 = dateTimeZone68.getStandardOffset(31525459285680L);
        long long82 = dateTimeZone68.convertLocalToUTC((-31532400000L), true);
        boolean boolean83 = timeOfDay42.equals((java.lang.Object) true);
        org.joda.time.LocalTime localTime84 = timeOfDay42.toLocalTime();
        org.joda.time.LocalTime localTime85 = localTime1.withFields((org.joda.time.ReadablePartial) timeOfDay42);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-01:00" + "'", str16, "-01:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-01:00" + "'", str70, "-01:00");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-01:00" + "'", str75, "-01:00");
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3600000) + "'", int79 == (-3600000));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-31528800000L) + "'", long82 == (-31528800000L));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertNotNull(localTime85);
    }

    @Test
    public void test02628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02628");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime7.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime7.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property37 = dateTime35.hourOfDay();
        org.joda.time.DateTime dateTime38 = property37.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property39 = dateTime38.weekOfWeekyear();
        java.util.Locale locale40 = null;
        int int41 = property39.getMaximumShortTextLength(locale40);
        org.joda.time.DateTime dateTime42 = property39.withMaximumValue();
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfDay();
        int int44 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime46 = dateTime7.plusMinutes(15);
        org.joda.time.DateTime dateTime48 = dateTime46.minusYears((-292275054));
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime48.getZone();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
    }

    @Test
    public void test02629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02629");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.LocalTime localTime16 = localTime14.minusSeconds(2);
        org.joda.time.LocalTime localTime18 = localTime16.plusSeconds((-1));
        // The following exception was thrown during execution in test generation
        try {
            int int20 = localTime16.getValue(366);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 366");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test02630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02630");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
    }

    @Test
    public void test02631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02631");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime12 = localTime10.withSecondOfMinute(1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime12, 14, locale14);
        long long18 = dateTimeField9.add(24L, (long) (short) 0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "14" + "'", str15, "14");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 24L + "'", long18 == 24L);
    }

    @Test
    public void test02632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02632");
        java.lang.Object obj0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(obj0);
    }

    @Test
    public void test02633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02633");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyear();
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeField11.getAsText((long) 17661728, locale13);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970" + "'", str14, "1970");
    }

    @Test
    public void test02634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02634");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("T23:00:00.100");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02635");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(54060000, 19, 82800000, 85680, 9499);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 85680 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02636");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime31 = property13.roundFloorCopy();
        org.joda.time.LocalTime localTime32 = property13.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalTime localTime34 = localTime32.plus(readablePeriod33);
        org.joda.time.LocalTime localTime36 = localTime34.minusHours(8);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
    }

    @Test
    public void test02637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02637");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(31021256, 19, 25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31021256 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02638");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withYearOfCentury(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        org.joda.time.DurationField durationField19 = chronology16.months();
        boolean boolean20 = dateTimeFieldType7.isSupported(chronology16);
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType7.getDurationType();
        org.joda.time.DateTime dateTime23 = dateTime6.withFieldAdded(durationFieldType21, 2);
        java.util.GregorianCalendar gregorianCalendar24 = dateTime6.toGregorianCalendar();
        long long25 = gregorianCalendar24.getTimeInMillis();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property35 = dateTime33.hourOfDay();
        int int36 = property35.get();
        int int37 = property35.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField38 = property35.getField();
        boolean boolean39 = gregorianCalendar24.before((java.lang.Object) dateTimeField38);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = gregorianCalendar24.getMaximum(388);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 388");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(gregorianCalendar24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1483228799900L) + "'", long25 == (-1483228799900L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 23 + "'", int37 == 23);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test02639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02639");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readablePeriod14);
        org.joda.time.DateTime dateTime17 = dateTime9.plusMillis(6);
        java.util.Locale locale18 = null;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = calendar19.getGreatestMinimum(37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 37");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-62104063919894,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=106,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test02640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02640");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.getLocalTime();
        org.joda.time.LocalTime localTime17 = property13.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekyearOfCentury();
        long long29 = dateTimeField27.roundHalfEven(480100L);
        boolean boolean31 = dateTimeField27.isLeap((-82800000L));
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay36 = dateTime33.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.millisOfSecond();
        int int38 = property37.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay40 = property37.addToCopy(100);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay45 = dateTime42.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property46 = timeOfDay45.millisOfSecond();
        boolean boolean47 = timeOfDay40.isEqual((org.joda.time.ReadablePartial) timeOfDay45);
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay45.withSecondOfMinute(12);
        int int50 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay49);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay49.withMinuteOfHour(15);
        org.joda.time.Chronology chronology53 = timeOfDay52.getChronology();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay58 = dateTime55.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property59 = timeOfDay58.millisOfSecond();
        java.util.Locale locale60 = null;
        int int61 = property59.getMaximumShortTextLength(locale60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean63 = property59.equals((java.lang.Object) dateTimeFieldType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property59.getFieldType();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime68 = dateTime66.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime70 = dateTime68.minusDays(7);
        org.joda.time.DateTime dateTime72 = dateTime68.withYear(1);
        org.joda.time.Chronology chronology73 = dateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.hourOfHalfday();
        org.joda.time.Chronology chronology77 = chronology73.withUTC();
        boolean boolean78 = dateTimeFieldType64.isSupported(chronology77);
        java.lang.String str79 = dateTimeFieldType64.toString();
        int int80 = timeOfDay52.get(dateTimeFieldType64);
        boolean boolean81 = localTime17.isSupported(dateTimeFieldType64);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType83 = dateTimeFieldType82.getDurationType();
        boolean boolean84 = localTime17.isSupported(dateTimeFieldType82);
        java.lang.String str85 = dateTimeFieldType82.toString();
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType82.getDurationType();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3600000L + "'", long29 == 3600000L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "millisOfSecond" + "'", str79, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "year" + "'", str85, "year");
        org.junit.Assert.assertNotNull(durationFieldType86);
    }

    @Test
    public void test02641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02641");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale5);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = dateTimeFormatter6.parseMillis("DateTimeField[weekOfWeekyear]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertNull(dateTimeParser8);
    }

    @Test
    public void test02642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02642");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        java.util.Date date2 = calendar0.getTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay7 = dateTime4.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.millisOfSecond();
        int int9 = property8.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addToCopy(100);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        boolean boolean18 = timeOfDay11.isEqual((org.joda.time.ReadablePartial) timeOfDay16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology20);
        boolean boolean22 = timeOfDay16.isBefore((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay16.withFieldAdded(durationFieldType23, 2);
        boolean boolean26 = calendar0.before((java.lang.Object) durationFieldType23);
        calendar0.set(1328, 1380, 32770, 13, 31021223, 86399999);
        int int34 = calendar0.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = calendar0.getGreatestMinimum(1428);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1428");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1328,MONTH=1380,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=32770,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=13,MINUTE=31021223,SECOND=86399999,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 53 + "'", int34 == 53);
    }

    @Test
    public void test02643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02643");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.plus(readableDuration30);
        org.joda.time.DateTime.Property property32 = dateTime26.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        org.joda.time.ReadablePartial readablePartial34 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int35 = property32.compareTo(readablePartial34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
    }

    @Test
    public void test02644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02644");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("0");
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.DateTime dateTime4 = dateTime1.plusMillis(1439);
        int int5 = dateTime1.getEra();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test02645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02645");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.set((int) (short) 1, (int) 'a', (int) (short) 1);
        gregorianCalendar13.add((int) (byte) 0, (-3600000));
        java.lang.String str21 = gregorianCalendar13.getCalendarType();
        gregorianCalendar13.set(12, (-1), (int) ' ', 100, 712, 32770);
        gregorianCalendar13.clear();
        boolean boolean31 = gregorianCalendar13.equals((java.lang.Object) (-62104057200000L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gregory" + "'", str21, "gregory");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test02646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02646");
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.Chronology chronology15 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.minuteOfDay();
        org.joda.time.DurationField durationField18 = chronology15.months();
        boolean boolean19 = dateTimeFieldType6.isSupported(chronology15);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 100, chronology15);
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime20);
        org.joda.time.DateTime dateTime22 = timeOfDay21.toDateTimeToday();
        int int23 = dateTime22.getEra();
        org.joda.time.DateTime dateTime25 = dateTime22.plus((long) 70);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime22.getZone();
        boolean boolean27 = dateTimeZone26.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(8, (-35748), 32772, 0, 952, dateTimeZone26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 952 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test02647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02647");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.era();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = dateTimeField11.add((long) 31021786, (long) 32769);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test02648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02648");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter2.getParser();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(712);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = dateTimeFormatter2.parseLocalTime("eras");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test02649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02649");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setLenient(true);
        java.lang.Object obj13 = calendar7.clone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test02650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02650");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyearOfCentury();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime27 = localTime25.withSecondOfMinute(1);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localTime27, 14, locale29);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.Chronology chronology41 = dateTime36.getChronology();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(chronology41);
        org.joda.time.DurationField durationField43 = chronology41.weeks();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        long long47 = chronology41.add(readablePeriod44, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay48 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology41);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((-82799998L), chronology41);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay55 = dateTime52.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property56 = timeOfDay55.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay55.withPeriodAdded(readablePeriod57, (int) '4');
        int[] intArray60 = timeOfDay59.getValues();
        int[] intArray62 = dateTimeField24.set((org.joda.time.ReadablePartial) localTime49, (int) (short) 0, intArray60, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray64 = dateTimeField12.set(readablePartial13, 2880, intArray62, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "14" + "'", str30, "14");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[52, 0, 0, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[52, 0, 0, 100]");
    }

    @Test
    public void test02651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02651");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        org.joda.time.LocalTime localTime17 = property15.addWrapFieldToCopy((-3600000));
        org.joda.time.LocalTime localTime18 = property15.getLocalTime();
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test02652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02652");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str33 = dateTimeZone31.getShortName((long) 0);
        org.joda.time.DateTime dateTime34 = dateTime29.withZone(dateTimeZone31);
        long long37 = dateTimeZone31.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        boolean boolean41 = dateTimeZone39.equals((java.lang.Object) (-3600000));
        long long43 = dateTimeZone31.getMillisKeepLocal(dateTimeZone39, 100L);
        org.joda.time.DateTime dateTime44 = timeOfDay20.toDateTimeToday(dateTimeZone39);
        org.joda.time.DateTime.Property property45 = dateTime44.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:00" + "'", str33, "-01:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 5L + "'", long37 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test02653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02653");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DurationField durationField13 = chronology8.millis();
        org.joda.time.Chronology chronology14 = chronology8.withUTC();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.joda.time.DurationField durationField18 = dateTimeField17.getDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test02654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02654");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean27 = dateTime25.isSupported(dateTimeFieldType26);
        org.joda.time.TimeOfDay.Property property28 = timeOfDay15.property(dateTimeFieldType26);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay15.minusMillis(70);
        org.joda.time.Chronology chronology31 = timeOfDay15.getChronology();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay36 = dateTime33.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.millisOfSecond();
        java.util.Locale locale38 = null;
        int int39 = property37.getMaximumShortTextLength(locale38);
        int int40 = property37.get();
        java.util.Locale locale41 = null;
        java.lang.String str42 = property37.getAsText(locale41);
        java.lang.String str43 = property37.getAsText();
        org.joda.time.TimeOfDay timeOfDay44 = property37.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.minusSeconds(22);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay46.minus(readablePeriod47);
        org.joda.time.TimeOfDay.Property property49 = timeOfDay48.millisOfSecond();
        boolean boolean50 = timeOfDay15.isBefore((org.joda.time.ReadablePartial) timeOfDay48);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay15.plusMinutes(85680);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100" + "'", str42, "100");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100" + "'", str43, "100");
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(timeOfDay52);
    }

    @Test
    public void test02655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02655");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
    }

    @Test
    public void test02656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02656");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date5);
        java.lang.String str8 = date5.toGMTString();
        java.lang.String str9 = date5.toLocaleString();
        java.lang.String str10 = date5.toLocaleString();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay15 = dateTime12.toTimeOfDay();
        java.util.Date date16 = dateTime12.toDate();
        long long17 = date16.getTime();
        int int18 = date16.getDate();
        boolean boolean19 = date5.before(date16);
        java.lang.String str20 = date16.toGMTString();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromDateFields(date16);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime dateTime30 = dateTime29.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTimeISO();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes((int) (short) 100);
        java.lang.String str34 = dateTime33.toString();
        java.util.GregorianCalendar gregorianCalendar35 = dateTime33.toGregorianCalendar();
        boolean boolean36 = gregorianCalendar35.isWeekDateSupported();
        boolean boolean37 = gregorianCalendar35.isWeekDateSupported();
        boolean boolean38 = gregorianCalendar35.isWeekDateSupported();
        gregorianCalendar35.setLenient(true);
        gregorianCalendar35.add(3600000, 0);
        java.util.Date date45 = new java.util.Date(946688400000L);
        gregorianCalendar35.setTime(date45);
        int int47 = date16.compareTo(date45);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str8, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str9, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str10, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str20, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str34, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Jan 01 01:00:00 UTC 2000");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test02657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02657");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
    }

    @Test
    public void test02658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02658");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.secondOfMinute();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.Chronology chronology30 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.hourOfHalfday();
        org.joda.time.Chronology chronology34 = chronology30.withUTC();
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay20.withChronologyRetainFields(chronology30);
        org.joda.time.DateTime dateTime36 = timeOfDay20.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay20.plusHours(32770);
        int int39 = timeOfDay20.size();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
    }

    @Test
    public void test02659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02659");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfWeek();
        java.util.Locale locale14 = null;
        int int15 = dateTimeField13.getMaximumShortTextLength(locale14);
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay((-61200000L));
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) timeOfDay17, locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test02660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02660");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime1 = localTime0.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime4 = localTime0.withPeriodAdded(readablePeriod2, (int) 'a');
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay9 = dateTime6.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.millisOfSecond();
        int int11 = property10.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay13 = property10.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay13.hourOfDay();
        int int17 = timeOfDay13.size();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property23 = timeOfDay22.millisOfSecond();
        org.joda.time.DurationField durationField24 = property23.getDurationField();
        java.lang.String str25 = property23.getAsShortText();
        java.util.Locale locale26 = null;
        int int27 = property23.getMaximumTextLength(locale26);
        org.joda.time.TimeOfDay timeOfDay28 = property23.getTimeOfDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay33 = dateTime30.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        int int35 = property34.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay37 = property34.addToCopy(100);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay42 = dateTime39.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property43 = timeOfDay42.millisOfSecond();
        boolean boolean44 = timeOfDay37.isEqual((org.joda.time.ReadablePartial) timeOfDay42);
        int[] intArray45 = timeOfDay37.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = timeOfDay37.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        boolean boolean49 = timeOfDay28.isSupported(dateTimeFieldType47);
        boolean boolean50 = timeOfDay13.isSupported(dateTimeFieldType47);
        boolean boolean51 = localTime0.isSupported(dateTimeFieldType47);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay56 = dateTime53.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property57 = timeOfDay56.millisOfSecond();
        java.util.Locale locale58 = null;
        int int59 = property57.getMaximumShortTextLength(locale58);
        int int60 = property57.get();
        int int61 = property57.get();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay66 = dateTime63.toTimeOfDay();
        org.joda.time.LocalTime localTime67 = dateTime63.toLocalTime();
        int int68 = property57.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Chronology chronology69 = dateTime63.getChronology();
        org.joda.time.TimeOfDay timeOfDay70 = new org.joda.time.TimeOfDay((java.lang.Object) localTime0, chronology69);
        org.joda.time.Chronology chronology71 = timeOfDay70.getChronology();
        org.joda.time.TimeOfDay.Property property72 = timeOfDay70.hourOfDay();
        int int73 = timeOfDay70.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100" + "'", str25, "100");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(property72);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 42 + "'", int73 == 42);
    }

    @Test
    public void test02661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02661");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        int int13 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay32 = dateTime29.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property33 = timeOfDay32.millisOfSecond();
        java.util.Locale locale34 = null;
        int int35 = property33.getMaximumShortTextLength(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean37 = property33.equals((java.lang.Object) dateTimeFieldType36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property33.getFieldType();
        boolean boolean39 = dateTime26.isSupported(dateTimeFieldType38);
        org.joda.time.DateTime.Property property40 = dateTime16.property(dateTimeFieldType38);
        org.joda.time.DurationField durationField41 = property40.getDurationField();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime45.minusDays(7);
        org.joda.time.DateTime dateTime49 = dateTime45.withYear(1);
        org.joda.time.DateTime dateTime50 = dateTime49.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property51 = dateTime49.hourOfDay();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        boolean boolean55 = dateTimeZone53.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime56 = dateTime49.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime58 = dateTime56.withDayOfYear((int) 'a');
        int int59 = property40.compareTo((org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTime58.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 7 + "'", int60 == 7);
    }

    @Test
    public void test02662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02662");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay8.secondOfMinute();
        java.lang.String str17 = property16.getName();
        org.joda.time.DurationField durationField18 = property16.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay20 = property16.setCopy("08:36:01.912");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"08:36:01.912\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "secondOfMinute" + "'", str17, "secondOfMinute");
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test02663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02663");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str16 = dateTimeFieldType15.toString();
        boolean boolean17 = localTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        org.joda.time.LocalTime localTime23 = dateTime19.toLocalTime();
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.years();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.weekOfWeekyear();
        boolean boolean29 = dateTimeField28.isSupported();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = dateTimeField28.set(2000L, "T03:35:00.100");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T03:35:00.100\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "monthOfYear" + "'", str16, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test02664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02664");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        int int12 = dateTime9.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime9.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test02665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02665");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField12 = dateTimeField11.getDurationField();
        long long15 = dateTimeField11.addWrapField((long) '4', 712);
        long long18 = dateTimeField11.add((long) 801, (-607919900L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-43679948L) + "'", long15 == (-43679948L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-36475193999199L) + "'", long18 == (-36475193999199L));
    }

    @Test
    public void test02666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02666");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("22");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime3 = dateTime1.withEra(122);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 122 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test02667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02667");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime.Property property11 = dateTime9.weekyear();
        org.joda.time.DateTime.Property property12 = dateTime9.yearOfCentury();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime9.withMillisOfSecond((int) (byte) 0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property25 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = property25.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear(8);
        org.joda.time.Chronology chronology29 = dateTime26.getChronology();
        long long30 = dateTime26.getMillis();
        org.joda.time.DateTime.Property property31 = dateTime26.era();
        org.joda.time.DateTime dateTime33 = dateTime26.withWeekyear(4);
        org.joda.time.DateTime dateTime35 = dateTime26.minusWeeks((-1));
        boolean boolean36 = dateTime15.equals((java.lang.Object) (-1));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-62104064400000L) + "'", long30 == (-62104064400000L));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02668");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("seconds");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"seconds\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02669");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(999);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter7.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear((java.lang.Integer) (-3600000));
        int int11 = dateTimeFormatter7.getDefaultYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 999 + "'", int11 == 999);
    }

    @Test
    public void test02670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02670");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology13 = chronology8.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.plusMillis(762);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test02671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02671");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(82885680L, chronology9);
        int int15 = timeOfDay14.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 680 + "'", int15 == 680);
    }

    @Test
    public void test02672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02672");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfDay();
        long long40 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime38.minus((long) 1970);
        org.joda.time.DateTime dateTime45 = dateTime43.withMillisOfDay(79200);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays(7);
        org.joda.time.DateTime dateTime53 = dateTime49.withYear(1);
        org.joda.time.DateTime dateTime54 = dateTime53.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime55 = dateTime54.toDateTimeISO();
        org.joda.time.DateTime dateTime57 = dateTime55.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property58 = dateTime57.monthOfYear();
        int int59 = dateTime57.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str63 = dateTimeZone61.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime57.toMutableDateTime(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(15, (int) (short) 1);
        int int69 = dateTimeZone67.getOffset(0L);
        boolean boolean70 = dateTimeZone61.equals((java.lang.Object) int69);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime72 = dateTime43.toDateTime(dateTimeZone61);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime(dateTimeZone61);
        long long76 = dateTimeZone61.adjustOffset((long) 32770, true);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 85680 + "'", int59 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-01:00" + "'", str63, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 54060000 + "'", int69 == 54060000);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 32770L + "'", long76 == 32770L);
    }

    @Test
    public void test02673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02673");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        calendar24.set(14, 9, 2);
        int int30 = calendar24.getMinimum((int) (short) 10);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.Chronology chronology39 = dateTime34.getChronology();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        boolean boolean43 = dateTimeZone41.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology44 = chronology39.withZone(dateTimeZone41);
        boolean boolean45 = calendar24.after((java.lang.Object) chronology44);
        long long46 = calendar24.getTimeInMillis();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay51 = dateTime48.toTimeOfDay();
        java.util.Date date52 = dateTime48.toDate();
        long long53 = date52.getTime();
        java.time.Instant instant54 = date52.toInstant();
        java.util.Date date55 = java.util.Date.from(instant54);
        java.util.Date date56 = java.util.Date.from(instant54);
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.fromDateFields(date56);
        calendar24.setTime(date56);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = calendar24.getLeastMaximum(32772);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32772");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-61701785519900L) + "'", long46 == (-61701785519900L));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localTime57);
    }

    @Test
    public void test02674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02674");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("minuteOfHour");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"minuteOfHour\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02675");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str28 = dateTimeZone26.getShortName((long) 0);
        org.joda.time.DateTime dateTime29 = dateTime24.withZone(dateTimeZone26);
        long long32 = dateTimeZone26.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        boolean boolean36 = dateTimeZone34.equals((java.lang.Object) (-3600000));
        long long38 = dateTimeZone26.getMillisKeepLocal(dateTimeZone34, 100L);
        org.joda.time.DateTime dateTime39 = dateTime14.withZone(dateTimeZone34);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone34.getShortName(0L, locale41);
        long long45 = dateTimeZone34.convertLocalToUTC((long) (byte) 100, false);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:00" + "'", str28, "-01:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 5L + "'", long32 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3600100L + "'", long45 == 3600100L);
    }

    @Test
    public void test02676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02676");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekOfWeekyear(13);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTime16.toString("1380", locale20);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.Chronology chronology31 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfDay();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology31);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.joda.time.LocalTime localTime37 = property35.getLocalTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(7);
        org.joda.time.DateTime dateTime45 = dateTime41.withYear(1);
        org.joda.time.DateTime dateTime46 = dateTime45.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTimeISO();
        int int48 = dateTime47.getEra();
        org.joda.time.DateTime.Property property49 = dateTime47.weekyear();
        org.joda.time.DateTime.Property property50 = dateTime47.yearOfCentury();
        org.joda.time.DateTime dateTime52 = property50.addToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime54 = property50.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime55 = localTime37.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = dateTime54.withDurationAdded(3600009L, 13);
        int int59 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime.Property property60 = dateTime16.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = property60.setCopy("Jan 1, 1970 3:00:00 AM");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Jan 1, 1970 3:00:00 AM\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1380" + "'", str21, "1380");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test02677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02677");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        calendar24.set(14, 9, 2);
        int int30 = calendar24.getMinimum((int) (short) 10);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.Chronology chronology39 = dateTime34.getChronology();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        boolean boolean43 = dateTimeZone41.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology44 = chronology39.withZone(dateTimeZone41);
        boolean boolean45 = calendar24.after((java.lang.Object) chronology44);
        long long46 = calendar24.getTimeInMillis();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay51 = dateTime48.toTimeOfDay();
        java.util.Date date52 = dateTime48.toDate();
        long long53 = date52.getTime();
        java.time.Instant instant54 = date52.toInstant();
        java.util.Date date55 = java.util.Date.from(instant54);
        java.util.Date date56 = java.util.Date.from(instant54);
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.fromDateFields(date56);
        calendar24.setTime(date56);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime62 = dateTime60.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime62.minusDays(7);
        org.joda.time.DateTime dateTime66 = dateTime62.withYear(1);
        org.joda.time.Chronology chronology67 = dateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.clockhourOfDay();
        long long72 = dateTimeField69.add(0L, 31);
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime(4080100L);
        int[] intArray76 = null;
        int[] intArray78 = dateTimeField69.add((org.joda.time.ReadablePartial) localTime74, 9, intArray76, (int) (short) 0);
        boolean boolean79 = calendar24.after((java.lang.Object) intArray76);
        boolean boolean80 = calendar24.isWeekDateSupported();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-61701785519900L) + "'", long46 == (-61701785519900L));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 111600000L + "'", long72 == 111600000L);
        org.junit.Assert.assertNull(intArray78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test02678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02678");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(7);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(1);
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DurationField durationField15 = chronology12.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(14, 74221000, 8, 83280, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74221000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test02679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02679");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.withMinimumValue();
        org.joda.time.LocalTime localTime32 = localTime30.withMinuteOfHour(11);
        int int33 = localTime32.size();
        org.joda.time.LocalTime localTime35 = localTime32.minusHours(32772);
        org.joda.time.LocalTime localTime37 = localTime35.plusMillis(42);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
    }

    @Test
    public void test02680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02680");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        int int9 = dateTime8.getMonthOfYear();
        java.util.GregorianCalendar gregorianCalendar10 = dateTime8.toGregorianCalendar();
        int int11 = dateTime8.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test02681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02681");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        java.util.Date date6 = dateTime2.toDate();
        java.time.Instant instant7 = date6.toInstant();
        int int8 = date6.getSeconds();
        java.util.Calendar.Builder builder9 = builder0.setInstant(date6);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = dateTime11.toCalendar(locale16);
        calendar17.setLenient(false);
        java.util.TimeZone timeZone20 = calendar17.getTimeZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone20);
        java.util.Calendar.Builder builder22 = builder0.setTimeZone(timeZone20);
        java.util.Calendar.Builder builder24 = builder22.setLenient(false);
        java.util.Calendar.Builder builder28 = builder24.setWeekDate(11, 100, 9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar29 = builder28.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572319845,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=39,MILLISECOND=845,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test02682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02682");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.withMillisOfDay(70);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(85680);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.Chronology chronology27 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekyearOfCentury();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime31 = localTime29.withSecondOfMinute(1);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localTime31, 14, locale33);
        int int35 = localTime31.getMillisOfDay();
        org.joda.time.DateTime dateTime36 = dateTime16.withFields((org.joda.time.ReadablePartial) localTime31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime38 = localTime31.withSecondOfMinute((-3600000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3600000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "14" + "'", str34, "14");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 31081876 + "'", int35 == 31081876);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test02683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02683");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        long long11 = chronology6.add(0L, (long) (short) 0, 0);
        org.joda.time.DateTimeField dateTimeField12 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.weekyearOfCentury();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(chronology6);
        org.joda.time.DateTimeField dateTimeField15 = chronology6.hourOfDay();
        org.joda.time.DurationField durationField16 = chronology6.seconds();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = chronology6.getDateTimeMillis(1644572306614L, (-1), 841, 5, 1428);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test02684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02684");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withChronology(chronology8);
        org.joda.time.DateTime dateTime11 = dateTime3.plusYears(11);
        org.joda.time.DateTime dateTime13 = dateTime3.minusWeeks(31);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        int int24 = property23.get();
        org.joda.time.DateTime dateTime25 = property23.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey((-61200000L));
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str41 = dateTimeZone39.getShortName((long) 0);
        org.joda.time.DateTime dateTime42 = dateTime37.withZone(dateTimeZone39);
        long long45 = dateTimeZone39.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) (-3600000));
        long long51 = dateTimeZone39.getMillisKeepLocal(dateTimeZone47, 100L);
        org.joda.time.ReadableInstant readableInstant52 = null;
        int int53 = dateTimeZone39.getOffset(readableInstant52);
        boolean boolean54 = dateTimeZone39.isFixed();
        long long56 = dateTimeZone26.getMillisKeepLocal(dateTimeZone39, (long) 2000);
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeZone26.getName((-54059990L), locale58);
        org.joda.time.DateTime dateTime60 = dateTime13.toDateTime(dateTimeZone26);
        java.util.Locale locale62 = null;
        java.lang.String str63 = dateTimeZone26.getShortName(31021256L, locale62);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-01:00" + "'", str41, "-01:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 5L + "'", long45 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3600000) + "'", int53 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 2000L + "'", long56 == 2000L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-01:00" + "'", str59, "-01:00");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-01:00" + "'", str63, "-01:00");
    }

    @Test
    public void test02685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02685");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay8.hourOfDay();
        int int12 = timeOfDay8.size();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay8.plusMillis(14);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusMillis(32772);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay14.withSecondOfMinute(4);
        org.joda.time.TimeOfDay.Property property19 = timeOfDay14.minuteOfHour();
        java.util.Locale locale20 = null;
        int int21 = property19.getMaximumTextLength(locale20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay23 = property19.addNoWrapToCopy(1268);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Maximum value exceeded for add");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test02686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02686");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField12 = dateTimeField11.getDurationField();
        long long15 = dateTimeField11.addWrapField((long) '4', 712);
        int int17 = dateTimeField11.getMaximumValue(32769L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-43679948L) + "'", long15 == (-43679948L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1439 + "'", int17 == 1439);
    }

    @Test
    public void test02687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02687");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.DateTime.Property property21 = dateTime17.millisOfDay();
        org.joda.time.DateTime dateTime23 = dateTime17.plus(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime23.withEra(1268);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1268 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test02688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02688");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        java.lang.String str30 = property13.getName();
        java.util.Locale locale31 = null;
        java.lang.String str32 = property13.getAsShortText(locale31);
        org.joda.time.LocalTime localTime33 = property13.roundFloorCopy();
        org.joda.time.Chronology chronology34 = localTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long38 = dateTimeField35.set((long) 31021786, 61200002);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61200002 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "millisOfSecond" + "'", str30, "millisOfSecond");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test02689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02689");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(11, 1, 9, chronology11);
        org.joda.time.DurationField durationField16 = chronology11.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.year();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test02690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02690");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTime dateTime43 = dateTime38.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime28.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime28.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime28.minus(readableDuration47);
        int int49 = property18.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.TimeOfDay timeOfDay51 = property18.addToCopy(7);
        java.util.Locale locale52 = null;
        java.lang.String str53 = property18.getAsText(locale52);
        java.util.Locale locale54 = null;
        java.lang.String str55 = property18.getAsShortText(locale54);
        java.lang.String str56 = property18.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay58 = property18.setCopy("00:00:00.002");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"00:00:00.002\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "23" + "'", str53, "23");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "23" + "'", str55, "23");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "23" + "'", str56, "23");
    }

    @Test
    public void test02691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02691");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str14 = dateTimeZone12.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime10.toMutableDateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime10.weekOfWeekyear();
        boolean boolean18 = dateTime10.isAfter((long) 24352386);
        boolean boolean20 = dateTime10.isAfter((-6719900L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02692");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        boolean boolean2 = calendar0.isWeekDateSupported();
        calendar0.roll(0, true);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test02693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02693");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(7, 9, 11);
        java.util.Calendar calendar5 = builder0.build();
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(358, 718, (-292275054));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder11 = builder9.setCalendarType("114");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 114");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-61922016000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=284,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test02694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02694");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        long long13 = chronology8.add((-82800000L), (long) (byte) 1, 2);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology8.weekyears();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-82799998L) + "'", long13 == (-82799998L));
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test02695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02695");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.plusMinutes(12);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        int int29 = property28.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay31 = property28.addToCopy(100);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay36 = dateTime33.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.millisOfSecond();
        boolean boolean38 = timeOfDay31.isEqual((org.joda.time.ReadablePartial) timeOfDay36);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay31.withMinuteOfHour((int) '#');
        java.lang.String str41 = timeOfDay40.toString();
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay40.plusHours(2);
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.plusHours(9);
        org.joda.time.LocalTime localTime46 = timeOfDay43.toLocalTime();
        boolean boolean47 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.LocalTime localTime49 = localTime46.withMillisOfDay(516);
        org.joda.time.LocalTime.Property property50 = localTime46.minuteOfHour();
        org.joda.time.LocalTime localTime52 = property50.addWrapFieldToCopy(35);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "T23:35:00.200" + "'", str41, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localTime52);
    }

    @Test
    public void test02696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02696");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.addCopy(1L);
        org.joda.time.LocalTime localTime18 = property13.setCopy(12);
        java.lang.String str20 = localTime18.toString("23");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "23" + "'", str20, "23");
    }

    @Test
    public void test02697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02697");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfDay();
        long long40 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime38.plusWeeks(2022);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(7);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(1);
        org.joda.time.Chronology chronology52 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime38.toMutableDateTime(chronology52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = dateTime38.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
    }

    @Test
    public void test02698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02698");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.LocalTime localTime16 = localTime14.minusSeconds(2);
        org.joda.time.LocalTime localTime18 = localTime14.plusMinutes((-292275054));
        org.joda.time.LocalTime localTime20 = localTime18.withSecondOfMinute(15);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.plusMinutes((int) (short) 100);
        java.lang.String str33 = dateTime32.toString();
        java.util.GregorianCalendar gregorianCalendar34 = dateTime32.toGregorianCalendar();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        org.joda.time.Chronology chronology44 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.minuteOfDay();
        org.joda.time.DurationField durationField47 = chronology44.months();
        boolean boolean48 = dateTimeFieldType35.isSupported(chronology44);
        java.lang.String str49 = dateTimeFieldType35.toString();
        int int50 = dateTime32.get(dateTimeFieldType35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime52 = localTime20.withField(dateTimeFieldType35, 365);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str33, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "weekyearOfCentury" + "'", str49, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test02699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02699");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        java.util.Locale locale17 = null;
        java.util.Calendar calendar18 = dateTime15.toCalendar(locale17);
        calendar18.set(1968, 937, 30961509);
        int int23 = calendar18.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar18.setWeekDate(457, (int) 'a', (-292278));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: -292278");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1968,MONTH=937,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=30961509,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test02700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02700");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        int int9 = dateTime8.getMonthOfYear();
        java.util.GregorianCalendar gregorianCalendar10 = dateTime8.toGregorianCalendar();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property20 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.withYearOfEra(70);
        org.joda.time.DateTime dateTime24 = dateTime22.minusSeconds(6);
        boolean boolean25 = gregorianCalendar10.after((java.lang.Object) 6);
        gregorianCalendar10.setMinimalDaysInFirstWeek(23);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02701");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DurationField durationField11 = chronology8.months();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        int int14 = dateTimeField12.getLeapAmount((-14L));
        long long16 = dateTimeField12.roundCeiling(0L);
        java.lang.String str18 = dateTimeField12.getAsShortText((long) 79680);
        java.lang.Object obj19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str23 = dateTimeZone21.getShortName((long) 0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj19, dateTimeZone21);
        long long28 = dateTimeZone21.convertLocalToUTC(3600035L, true, 82882800L);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.Chronology chronology41 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.minuteOfDay();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology41);
        org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay(chronology41);
        int[] intArray46 = timeOfDay45.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray48 = dateTimeField12.set((org.joda.time.ReadablePartial) timeOfDay30, 85680100, intArray46, 97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3600000L + "'", long16 == 3600000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "31" + "'", str18, "31");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-01:00" + "'", str23, "-01:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 7200035L + "'", long28 == 7200035L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[8, 38, 41, 215]");
    }

    @Test
    public void test02702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02702");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("08:37:01.962");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02703");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime.Property property22 = dateTime17.centuryOfEra();
        org.joda.time.Chronology chronology23 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.minuteOfHour();
        java.lang.String str25 = dateTimeField24.getName();
        org.joda.time.DurationField durationField26 = dateTimeField24.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "minuteOfHour" + "'", str25, "minuteOfHour");
        org.junit.Assert.assertNull(durationField26);
    }

    @Test
    public void test02704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02704");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime14 = property12.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime15 = property12.getDateTime();
        org.joda.time.DateTime dateTime16 = property12.roundFloorCopy();
        int int17 = dateTime16.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test02705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02705");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        java.lang.String str7 = property5.getAsText();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology16);
        org.joda.time.DurationField durationField18 = chronology16.weeks();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.minuteOfHour();
        org.joda.time.DurationField durationField20 = chronology16.days();
        org.joda.time.DurationField durationField21 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = chronology16.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) property5, chronology16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.TimeOfDay$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test02706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02706");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        int int21 = timeOfDay20.getSecondOfMinute();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.millisOfSecond();
        int int28 = property27.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay30 = property27.addToCopy(100);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay35 = dateTime32.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property36 = timeOfDay35.millisOfSecond();
        boolean boolean37 = timeOfDay30.isEqual((org.joda.time.ReadablePartial) timeOfDay35);
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay30.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay39.minusMillis(100);
        boolean boolean42 = timeOfDay20.isAfter((org.joda.time.ReadablePartial) timeOfDay39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int46 = dateTimeZone44.getStandardOffset((long) (short) 0);
        long long49 = dateTimeZone44.convertLocalToUTC(480100L, false);
        java.lang.String str51 = dateTimeZone44.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay20, dateTimeZone44);
        java.lang.String str55 = dateTimeZone44.getName((long) (short) 100);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime(dateTimeZone44);
        org.joda.time.LocalTime localTime58 = localTime56.withMillisOfDay(1970);
        int int59 = localTime58.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3600000) + "'", int46 == (-3600000));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 4080100L + "'", long49 == 4080100L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-01:00" + "'", str51, "-01:00");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-01:00" + "'", str55, "-01:00");
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
    }

    @Test
    public void test02707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02707");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.get();
        int int9 = property5.get();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        int int16 = property5.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime11.plus(readablePeriod17);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.DateTime dateTime21 = property19.addWrapFieldToCopy(2000);
        org.joda.time.DateTime dateTime23 = property19.addToCopy(82885680L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime23.withWeekOfWeekyear(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test02708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02708");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property25 = dateTime24.weekOfWeekyear();
        java.util.Locale locale26 = null;
        int int27 = property25.getMaximumShortTextLength(locale26);
        org.joda.time.DateTime dateTime28 = property25.withMaximumValue();
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        boolean boolean33 = dateTimeZone31.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime34 = dateTime29.withZoneRetainFields(dateTimeZone31);
        org.joda.time.Chronology chronology35 = chronology8.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        org.joda.time.DateTime dateTime44 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property45 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime46 = property45.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfYear(8);
        org.joda.time.Chronology chronology49 = dateTime46.getChronology();
        long long50 = dateTime46.getMillis();
        org.joda.time.DateTime.Property property51 = dateTime46.hourOfDay();
        int int52 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime53 = dateTime46.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime57.minusDays(7);
        org.joda.time.DateTime dateTime61 = dateTime57.withYear(1);
        org.joda.time.DateTime dateTime62 = dateTime61.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property63 = dateTime61.hourOfDay();
        int int64 = dateTime61.getMillisOfSecond();
        org.joda.time.DateTime dateTime67 = dateTime61.withDurationAdded(62135600400000L, 52);
        boolean boolean68 = dateTime67.isEqualNow();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime72 = dateTime70.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay73 = dateTime70.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property74 = timeOfDay73.millisOfSecond();
        java.util.Locale locale75 = null;
        int int76 = property74.getMaximumShortTextLength(locale75);
        int int77 = property74.get();
        int int78 = property74.get();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime82 = dateTime80.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay83 = dateTime80.toTimeOfDay();
        org.joda.time.LocalTime localTime84 = dateTime80.toLocalTime();
        int int85 = property74.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Chronology chronology86 = dateTime80.getChronology();
        org.joda.time.DurationField durationField87 = chronology86.millis();
        org.joda.time.DurationField durationField88 = chronology86.halfdays();
        org.joda.time.DateTime dateTime89 = dateTime67.withChronology(chronology86);
        java.util.Date date90 = dateTime89.toDate();
        boolean boolean91 = dateTime53.isAfter((org.joda.time.ReadableInstant) dateTime89);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-62104064400000L) + "'", long50 == (-62104064400000L));
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3600000) + "'", int52 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(timeOfDay83);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sat Dec 09 03:08:00 UTC 102389");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test02709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02709");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime.Property property14 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(chronology25);
        org.joda.time.DurationField durationField27 = chronology25.weeks();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology25.add(readablePeriod28, 1L, 8);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear(1);
        org.joda.time.DateTime dateTime40 = dateTime39.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property41 = dateTime39.hourOfDay();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        boolean boolean45 = dateTimeZone43.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime46 = dateTime39.withZone(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int50 = dateTimeZone48.getStandardOffset((long) (short) 0);
        long long52 = dateTimeZone43.getMillisKeepLocal(dateTimeZone48, (long) 0);
        org.joda.time.Chronology chronology53 = chronology25.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime54 = dateTime16.withZoneRetainFields(dateTimeZone48);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMonths(59);
        org.joda.time.Instant instant57 = dateTime54.toInstant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3600000) + "'", int50 == (-3600000));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(instant57);
    }

    @Test
    public void test02710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02710");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.Chronology chronology13 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withChronology(chronology13);
        java.lang.StringBuffer stringBuffer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer17, (long) 30961340);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test02711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02711");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        org.joda.time.LocalTime localTime17 = property15.addWrapFieldToCopy((-3600000));
        int int18 = property15.getMinimumValue();
        java.lang.String str19 = property15.getAsShortText();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property15.getAsShortText(locale20);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
    }

    @Test
    public void test02712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02712");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology8.add(readablePeriod10, 9L, 5);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9L + "'", long13 == 9L);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test02713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02713");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property5.getAsShortText(locale8);
        org.joda.time.TimeOfDay timeOfDay11 = property5.addNoWrapToCopy((int) (byte) 1);
        java.util.Locale locale12 = null;
        java.lang.String str13 = property5.getAsShortText(locale12);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100" + "'", str9, "100");
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100" + "'", str13, "100");
    }

    @Test
    public void test02714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02714");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime9 = property8.withMaximumValue();
        org.joda.time.DateTime dateTime10 = property8.roundHalfFloorCopy();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.minus(readablePeriod13);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = property8.compareTo((org.joda.time.ReadablePartial) timeOfDay14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test02715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02715");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        java.lang.Object obj14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str18 = dateTimeZone16.getShortName((long) 0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj14, dateTimeZone16);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(chronology28);
        org.joda.time.DurationField durationField30 = chronology28.weeks();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = chronology28.add(readablePeriod31, 1L, 8);
        org.joda.time.DateTime dateTime35 = dateTime19.toDateTime(chronology28);
        org.joda.time.DateTime dateTime36 = dateTime13.withChronology(chronology28);
        org.joda.time.DateTime.Property property37 = dateTime13.minuteOfHour();
        int int38 = property37.get();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-01:00" + "'", str18, "-01:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test02716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02716");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(8);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyear();
        int int17 = dateTimeField15.getMinimumValue((-255600000L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-292275054) + "'", int17 == (-292275054));
    }

    @Test
    public void test02717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02717");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(54060000, 14, 388, 0, 358, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 358 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02718");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime dateTime30 = dateTime29.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTimeISO();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property34 = dateTime33.monthOfYear();
        org.joda.time.DateTime dateTime35 = property34.roundHalfEvenCopy();
        java.lang.Object obj36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str40 = dateTimeZone38.getShortName((long) 0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(obj36, dateTimeZone38);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime45.minusDays(7);
        org.joda.time.DateTime dateTime49 = dateTime45.withYear(1);
        org.joda.time.Chronology chronology50 = dateTime45.getChronology();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(chronology50);
        org.joda.time.DurationField durationField52 = chronology50.weeks();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        long long56 = chronology50.add(readablePeriod53, 1L, 8);
        org.joda.time.DateTime dateTime57 = dateTime41.toDateTime(chronology50);
        org.joda.time.DateTime dateTime58 = dateTime35.withChronology(chronology50);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime62 = dateTime60.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime62.minusDays(7);
        org.joda.time.DateTime dateTime66 = dateTime62.withYear(1);
        org.joda.time.Chronology chronology67 = dateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.dayOfMonth();
        long long70 = dateTimeField68.roundFloor((long) 3);
        int int72 = dateTimeField68.getMaximumValue((long) (-3600000));
        java.util.Locale locale74 = null;
        java.lang.String str75 = dateTimeField68.getAsText((long) (short) 0, locale74);
        int int78 = dateTimeField68.getDifference(0L, 25L);
        int int79 = dateTime58.get(dateTimeField68);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = dateTimeField68.getType();
        // The following exception was thrown during execution in test generation
        try {
            int int81 = localTime21.get(dateTimeFieldType80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-01:00" + "'", str40, "-01:00");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-82800000L) + "'", long70 == (-82800000L));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 31 + "'", int72 == 31);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "31" + "'", str75, "31");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
    }

    @Test
    public void test02719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02719");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(0, (int) (short) 10, 17);
        java.util.Calendar.Builder builder9 = builder5.setTimeOfDay((-3600000), (int) (byte) 10, 10);
        java.util.Calendar calendar10 = builder9.build();
        java.util.Calendar.Builder builder14 = builder9.setDate(457, 31, 115);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder16 = builder14.setInstant(31798800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-12958876190000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1559,MONTH=3,WEEK_OF_YEAR=17,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=119,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=10,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test02720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02720");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withYearOfCentury(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        org.joda.time.DurationField durationField19 = chronology16.months();
        boolean boolean20 = dateTimeFieldType7.isSupported(chronology16);
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType7.getDurationType();
        org.joda.time.DateTime dateTime23 = dateTime6.withFieldAdded(durationFieldType21, 2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime6.withMillisOfSecond((-19));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test02721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02721");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded(readableDuration5, 9);
        org.joda.time.DateTime dateTime8 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        java.util.Locale locale15 = null;
        int int16 = property14.getMaximumShortTextLength(locale15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean18 = property14.equals((java.lang.Object) dateTimeFieldType17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property14.getFieldType();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.hourOfHalfday();
        org.joda.time.Chronology chronology32 = chronology28.withUTC();
        boolean boolean33 = dateTimeFieldType19.isSupported(chronology32);
        org.joda.time.DurationField durationField34 = chronology32.seconds();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(chronology32);
        org.joda.time.DateTime dateTime36 = dateTime7.withChronology(chronology32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime36.withMillisOfSecond(30961509);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30961509 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test02722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02722");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        boolean boolean18 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        boolean boolean24 = dateTimeZone22.equals((java.lang.Object) (-3600000));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime.Property property34 = dateTime33.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) dateTime33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test02723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02723");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.plus(readableDuration30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withDurationAdded(readableDuration34, 23);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromCalendarFields(calendar38);
        java.time.Instant instant40 = calendar38.toInstant();
        int int41 = calendar38.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-62134909199000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 53 + "'", int41 == 53);
    }

    @Test
    public void test02724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02724");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.minuteOfDay();
        org.joda.time.DurationField durationField17 = chronology14.months();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(35, 5, 52, 18, 2022, (-292275054), chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test02725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02725");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        boolean boolean15 = gregorianCalendar13.isWeekDateSupported();
        java.util.Date date16 = gregorianCalendar13.getTime();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getTimezoneOffset();
        gregorianCalendar13.setTime(date17);
        gregorianCalendar13.set(357, 5, 0, 52, 8, 79200000);
        gregorianCalendar13.set((int) (short) 10, (int) (byte) 0);
        boolean boolean30 = gregorianCalendar13.isLenient();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 03 00:48:00 UTC 2");
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Fri Feb 11 09:38:42 UTC 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test02726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02726");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        java.lang.String str21 = timeOfDay20.toString();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plus(readablePeriod22);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property26 = timeOfDay25.secondOfMinute();
        boolean boolean27 = timeOfDay20.isBefore((org.joda.time.ReadablePartial) timeOfDay25);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = timeOfDay20.getValue(24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "T01:00:00.100" + "'", str21, "T01:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test02727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02727");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.get();
        int int9 = property5.get();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        int int16 = property5.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime18 = dateTime11.withYearOfCentury(24);
        org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfDay(0);
        org.joda.time.DateTime.Property property21 = dateTime11.weekyear();
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = dateTime11.isAfter(readableInstant22);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02728");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime31 = property13.roundFloorCopy();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property13.getAsText(locale32);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
    }

    @Test
    public void test02729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02729");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        int int13 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime11.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime11.minus((long) 1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight30 = dateTime29.toDateMidnight();
        int int31 = dateMidnight30.getSecondOfDay();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime44.minusDays(7);
        org.joda.time.DateTime dateTime48 = dateTime44.withYear(1);
        org.joda.time.Chronology chronology49 = dateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.minuteOfDay();
        org.joda.time.DurationField durationField52 = chronology49.months();
        boolean boolean53 = dateTimeFieldType40.isSupported(chronology49);
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType40.getDurationType();
        boolean boolean55 = dateTime39.isSupported(dateTimeFieldType40);
        boolean boolean56 = dateMidnight30.isSupported(dateTimeFieldType40);
        int int57 = dateTime20.get(dateTimeFieldType40);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType40.getDurationType();
        java.lang.String str59 = dateTimeFieldType40.toString();
        java.lang.String str60 = dateTimeFieldType40.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "weekyearOfCentury" + "'", str59, "weekyearOfCentury");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "weekyearOfCentury" + "'", str60, "weekyearOfCentury");
    }

    @Test
    public void test02730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02730");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.millisOfSecond();
        int int22 = property21.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay24 = property21.addToCopy(100);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.millisOfSecond();
        boolean boolean31 = timeOfDay24.isEqual((org.joda.time.ReadablePartial) timeOfDay29);
        int int32 = timeOfDay29.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = timeOfDay29.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay29.withPeriodAdded(readablePeriod34, (int) (short) -1);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays(7);
        org.joda.time.DateTime dateTime44 = dateTime40.withYear(1);
        org.joda.time.DateTime dateTime45 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str49 = dateTimeZone47.getShortName((long) 0);
        org.joda.time.DateTime dateTime50 = dateTime45.withZone(dateTimeZone47);
        long long53 = dateTimeZone47.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        boolean boolean57 = dateTimeZone55.equals((java.lang.Object) (-3600000));
        long long59 = dateTimeZone47.getMillisKeepLocal(dateTimeZone55, 100L);
        org.joda.time.DateTime dateTime60 = timeOfDay36.toDateTimeToday(dateTimeZone55);
        boolean boolean61 = dateTime60.isAfterNow();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime65.minusDays(7);
        org.joda.time.DateTime dateTime69 = dateTime65.withYear(1);
        org.joda.time.DateTime.Property property70 = dateTime69.yearOfEra();
        java.lang.String str71 = property70.getName();
        boolean boolean72 = property70.isLeap();
        org.joda.time.DateTime dateTime73 = property70.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime75 = dateTime73.plusWeeks(0);
        java.lang.String str76 = dateTime73.toString();
        boolean boolean77 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime73);
        int int78 = dateTime60.getEra();
        boolean boolean79 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime81 = dateTime14.plusSeconds(32769);
        int int82 = dateTime81.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.DateTime dateTime85 = dateTime81.withDurationAdded(readableDuration83, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime87 = dateTime81.withDayOfMonth(841);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 841 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-01:00" + "'", str49, "-01:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 5L + "'", long53 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 100L + "'", long59 == 100L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "yearOfEra" + "'", str71, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0002-01-01T00:00:00.000-01:00" + "'", str76, "0002-01-01T00:00:00.000-01:00");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test02731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02731");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = dateTime9.toLocalDateTime();
        int int13 = dateTime9.getMillisOfSecond();
        org.joda.time.DateTime dateTime15 = dateTime9.minus((-9469100436480000L));
        org.joda.time.DateTime.Property property16 = dateTime9.weekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test02732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02732");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale5);
        int int7 = dateTimeFormatter6.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = dateTimeFormatter6.print((-82798570L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
    }

    @Test
    public void test02733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02733");
        java.util.Date date5 = new java.util.Date(3, 17, 1869, 388, 859);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jul 29 18:19:00 UTC 1909");
    }

    @Test
    public void test02734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02734");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds(8);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(53);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear(4);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.plus(readablePeriod22);
        org.joda.time.TimeOfDay timeOfDay24 = dateTime23.toTimeOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
    }

    @Test
    public void test02735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02735");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = dateTime21.isEqualNow();
        org.joda.time.DateTime dateTime25 = dateTime21.minusSeconds(22);
        int int26 = dateTime25.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
    }

    @Test
    public void test02736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02736");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 2000);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        boolean boolean3 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(7);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(1);
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(chronology12);
        org.joda.time.DurationField durationField14 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.minuteOfHour();
        org.joda.time.DurationField durationField19 = durationFieldType2.getField(chronology12);
        org.joda.time.DurationField durationField20 = chronology12.days();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test02737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02737");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfMinute();
        org.joda.time.DateTime dateTime15 = property14.getDateTime();
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = dateTime15.isBefore(readableInstant16);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.plusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime18.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test02738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02738");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        int int7 = date5.getDate();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromDateFields(date5);
        int int10 = date5.getTimezoneOffset();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay15 = dateTime12.toTimeOfDay();
        java.util.Date date16 = dateTime12.toDate();
        long long17 = date16.getTime();
        int int18 = date16.getDate();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromDateFields(date16);
        date16.setTime((long) 357);
        boolean boolean22 = date5.after(date16);
        java.lang.String str23 = date5.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Thu Jan 01 00:00:00 UTC 1970" + "'", str23, "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test02739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02739");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readableDuration11);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        java.lang.String str14 = gregorianCalendar13.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.util.GregorianCalendar[time=-62104064400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]" + "'", str14, "java.util.GregorianCalendar[time=-62104064400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test02740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02740");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.Chronology chronology13 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(chronology13);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology13.getDateTimeMillis(516, 32769, 1968, (int) (short) 10, (int) (short) 100, 992, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test02741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02741");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property5.getFieldType();
        org.joda.time.TimeOfDay timeOfDay11 = property5.setCopy("1");
        org.joda.time.DateTimeField dateTimeField12 = property5.getField();
        long long15 = dateTimeField12.set(5L, (int) '4');
        java.util.Locale locale16 = null;
        int int17 = dateTimeField12.getMaximumShortTextLength(locale16);
        long long19 = dateTimeField12.remainder((long) '4');
        java.lang.Class<?> wildcardClass20 = dateTimeField12.getClass();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test02742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02742");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.DurationField durationField16 = chronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.secondOfDay();
        long long20 = dateTimeField17.add(85680100L, 946771200000L);
        java.lang.String str22 = dateTimeField17.getAsShortText((-526694400000L));
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 946771285680100L + "'", long20 == 946771285680100L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "82800" + "'", str22, "82800");
    }

    @Test
    public void test02743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02743");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = property24.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear(8);
        org.joda.time.Chronology chronology28 = dateTime25.getChronology();
        long long29 = dateTime25.getMillis();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str33 = dateTimeZone31.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone31.getName((-1L), locale36);
        long long40 = dateTimeZone31.adjustOffset((long) (short) 10, true);
        org.joda.time.DateTime dateTime41 = dateTime25.toDateTime(dateTimeZone31);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getDurationType();
        boolean boolean44 = dateTime25.isSupported(dateTimeFieldType42);
        org.joda.time.DateTime.Property property45 = dateTime14.property(dateTimeFieldType42);
        java.lang.String str46 = property45.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-62104064400000L) + "'", long29 == (-62104064400000L));
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:00" + "'", str33, "-01:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-01:00" + "'", str37, "-01:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "halfdayOfDay" + "'", str46, "halfdayOfDay");
    }

    @Test
    public void test02744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02744");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test02745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02745");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        boolean boolean18 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTimeFormatter2.parseDateTime("T23:01:25.680");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test02746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02746");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        java.time.Instant instant7 = date5.toInstant();
        java.util.Date date8 = java.util.Date.from(instant7);
        int int9 = date8.getDate();
        java.util.Date date15 = new java.util.Date(69, 1968, 23, (int) (byte) -1, 1439);
        date15.setMinutes(0);
        long long18 = date15.getTime();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromDateFields(date15);
        int int20 = date8.compareTo(date15);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 23 22:00:00 UTC 2133");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 5145804000000L + "'", long18 == 5145804000000L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test02747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02747");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMillis(11);
        org.joda.time.DateTime.Property property4 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str18 = dateTimeZone16.getShortName((long) 0);
        org.joda.time.DateTime dateTime19 = dateTime14.withZone(dateTimeZone16);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(dateTimeZone16);
        org.joda.time.LocalTime localTime22 = localTime20.minusSeconds(2);
        org.joda.time.LocalTime localTime24 = localTime20.plusMinutes((-292275054));
        int int25 = localTime24.getMinuteOfHour();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes((int) (short) 100);
        java.lang.String str38 = dateTime37.toString();
        java.util.GregorianCalendar gregorianCalendar39 = dateTime37.toGregorianCalendar();
        boolean boolean40 = gregorianCalendar39.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay41 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar39);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime45.minusDays(7);
        org.joda.time.DateTime dateTime49 = dateTime45.withYear(1);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.DateTime dateTime51 = property50.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean53 = dateTime51.isSupported(dateTimeFieldType52);
        org.joda.time.TimeOfDay.Property property54 = timeOfDay41.property(dateTimeFieldType52);
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay41.minusMillis(70);
        int[] intArray57 = timeOfDay41.getValues();
        int int58 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localTime24, intArray57);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-01:00" + "'", str18, "-01:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 44 + "'", int25 == 44);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str38, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[23, 48, 0, 100]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 53 + "'", int58 == 53);
    }

    @Test
    public void test02748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02748");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        calendar24.set(14, 9, 2);
        java.time.Instant instant29 = calendar24.toInstant();
        java.util.Date date33 = new java.util.Date(14, 86399999, 79200000);
        calendar24.setTime(date33);
        java.util.Locale locale37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap38 = calendar24.getDisplayNames(675, 1380, locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=234051164409600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7418756,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertEquals(date33.toString(), "Fri Feb 24 00:00:00 UTC 7418756");
    }

    @Test
    public void test02749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02749");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekOfWeekyear(13);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTime16.toString("1380", locale20);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.Chronology chronology31 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfDay();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology31);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.joda.time.LocalTime localTime37 = property35.getLocalTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(7);
        org.joda.time.DateTime dateTime45 = dateTime41.withYear(1);
        org.joda.time.DateTime dateTime46 = dateTime45.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTimeISO();
        int int48 = dateTime47.getEra();
        org.joda.time.DateTime.Property property49 = dateTime47.weekyear();
        org.joda.time.DateTime.Property property50 = dateTime47.yearOfCentury();
        org.joda.time.DateTime dateTime52 = property50.addToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime54 = property50.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime55 = localTime37.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = dateTime54.withDurationAdded(3600009L, 13);
        int int59 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime.Property property60 = dateTime16.weekyear();
        java.lang.String str61 = dateTime16.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1380" + "'", str21, "1380");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0002-12-23T22:00:00.000-01:00" + "'", str61, "0002-12-23T22:00:00.000-01:00");
    }

    @Test
    public void test02750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02750");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (short) 1, 31021256, 3600000, 48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31021256 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02751");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter2.getZone();
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = dateTimeFormatter2.parseLocalDateTime("AM");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test02752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02752");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime10.toLocalTime();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        long long20 = chronology15.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.LocalTime localTime27 = dateTime23.toLocalTime();
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter7.withChronology(chronology28);
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter7.withLocale(locale32);
        java.util.Locale locale34 = dateTimeFormatter7.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter7.withOffsetParsed();
        java.io.Writer writer36 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(7);
        org.joda.time.DateTime dateTime45 = dateTime41.withYear(1);
        org.joda.time.Chronology chronology46 = dateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.minuteOfDay();
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology46);
        org.joda.time.LocalTime.Property property50 = localTime49.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField51 = property50.getField();
        org.joda.time.DateTimeField dateTimeField52 = property50.getField();
        org.joda.time.LocalTime localTime53 = property50.getLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(writer36, (org.joda.time.ReadablePartial) localTime53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(locale34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localTime53);
    }

    @Test
    public void test02753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02753");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property13 = dateTime12.monthOfYear();
        int int14 = dateTime12.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str18 = dateTimeZone16.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime12.toMutableDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime21 = dateTime12.plusDays(100);
        org.joda.time.DateTime dateTime23 = dateTime21.withMillisOfSecond(100);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.plus(readableDuration24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.Chronology chronology36 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.minuteOfDay();
        org.joda.time.DurationField durationField39 = chronology36.months();
        boolean boolean40 = dateTimeFieldType27.isSupported(chronology36);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 100, chronology36);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = chronology36.add(readablePeriod42, (long) 100, 17);
        org.joda.time.DurationField durationField46 = chronology36.months();
        org.joda.time.DurationField durationField47 = chronology36.years();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(chronology36);
        org.joda.time.DateTimeField dateTimeField49 = chronology36.dayOfYear();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.now(chronology36);
        org.joda.time.DateTime dateTime51 = dateTime25.toDateTime(chronology36);
        org.joda.time.DateTimeZone dateTimeZone52 = chronology36.getZone();
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay((long) 18, chronology36);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 85680 + "'", int14 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-01:00" + "'", str18, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
    }

    @Test
    public void test02754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02754");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        boolean boolean10 = property8.isLeap();
        org.joda.time.DateTime dateTime11 = property8.roundHalfFloorCopy();
        int int12 = dateTime11.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        java.lang.String str14 = dateTime11.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0002-01-01T00:00:00.000-01:00" + "'", str14, "0002-01-01T00:00:00.000-01:00");
    }

    @Test
    public void test02755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02755");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay8.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(7);
        org.joda.time.DateTime dateTime32 = dateTime28.withYear(1);
        org.joda.time.Chronology chronology33 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.minuteOfDay();
        org.joda.time.DurationField durationField36 = chronology33.months();
        boolean boolean37 = dateTimeFieldType24.isSupported(chronology33);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 100, chronology33);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        long long42 = chronology33.add(readablePeriod39, (long) 100, 17);
        org.joda.time.DateTimeField dateTimeField43 = chronology33.year();
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeField43.getAsShortText((-62104063919900L), locale45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField43.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property48 = timeOfDay22.property(dateTimeFieldType47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
    }

    @Test
    public void test02756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02756");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfMinute();
        org.joda.time.DateTime.Property property15 = dateTime13.dayOfWeek();
        java.util.Locale locale16 = null;
        int int17 = property15.getMaximumTextLength(locale16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = property15.setCopy((-1028363091));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1028363091 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
    }

    @Test
    public void test02757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02757");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.DurationField durationField16 = chronology10.seconds();
        org.joda.time.Chronology chronology17 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology17.getDateTimeMillis((long) 43, (int) (byte) -1, (-2337983), 31, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test02758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02758");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        int int6 = localTime5.getMillisOfSecond();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay11 = dateTime8.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay11.withPeriodAdded(readablePeriod13, (int) '4');
        boolean boolean16 = localTime5.equals((java.lang.Object) timeOfDay15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = chronology25.add(readablePeriod27, 9L, 5);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay15.withChronologyRetainFields(chronology25);
        org.joda.time.DurationField durationField32 = chronology25.seconds();
        org.joda.time.DateTimeField dateTimeField33 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology25.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((java.lang.Object) chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test02759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02759");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        calendar7.setLenient(false);
        calendar7.clear();
        calendar7.setMinimalDaysInFirstWeek(2000);
        int int13 = calendar7.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = calendar7.getActualMinimum(1268);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1268");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=2000,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2000 + "'", int13 == 2000);
    }

    @Test
    public void test02760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02760");
        long long6 = java.util.Date.UTC((int) (byte) 100, 53, 1328, (-19), 427, 365);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1200658385000L + "'", long6 == 1200658385000L);
    }

    @Test
    public void test02761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02761");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfMinute();
        org.joda.time.DateTime dateTime15 = property14.getDateTime();
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = dateTime15.isBefore(readableInstant16);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime15.plusHours((-292278));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime15.withWeekOfWeekyear(680);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 680 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test02762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02762");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.set((int) (short) 1, (int) 'a', (int) (short) 1);
        gregorianCalendar13.add((int) (byte) 0, (-3600000));
        java.lang.String str21 = gregorianCalendar13.getCalendarType();
        gregorianCalendar13.set(12, (-1), (int) ' ', 100, 712, 32770);
        gregorianCalendar13.clear();
        gregorianCalendar13.set(1328, (-14640), (int) (short) 0, (int) (byte) 1, (-1));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gregory" + "'", str21, "gregory");
    }

    @Test
    public void test02763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02763");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime15);
        org.joda.time.DateTime dateTime17 = timeOfDay16.toDateTimeToday();
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.Chronology chronology29 = dateTime24.getChronology();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        boolean boolean33 = dateTimeZone31.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology34 = chronology29.withZone(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter20.withZone(dateTimeZone31);
        boolean boolean36 = dateTimeFormatter20.isPrinter();
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter20.withLocale(locale37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        boolean boolean42 = dateTimeZone40.equals((java.lang.Object) (-3600000));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter20.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(7);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(1);
        org.joda.time.DateTime.Property property52 = dateTime51.yearOfEra();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime56.minusDays(7);
        org.joda.time.DateTime dateTime60 = dateTime56.withYear(1);
        org.joda.time.DateTime dateTime61 = dateTime60.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str65 = dateTimeZone63.getShortName((long) 0);
        org.joda.time.DateTime dateTime66 = dateTime61.withZone(dateTimeZone63);
        org.joda.time.DateTime dateTime67 = dateTime51.withZone(dateTimeZone63);
        org.joda.time.DateTime dateTime69 = dateTime51.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.DateTime dateTime71 = dateTime51.minus(readableDuration70);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime75 = dateTime73.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime77 = dateTime75.minusDays(7);
        org.joda.time.DateTime dateTime79 = dateTime75.withYear(1);
        org.joda.time.DateTime dateTime80 = dateTime79.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property81 = dateTime79.hourOfDay();
        org.joda.time.DateTime dateTime82 = property81.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property83 = dateTime82.weekOfWeekyear();
        java.util.Locale locale84 = null;
        int int85 = property83.getMaximumShortTextLength(locale84);
        org.joda.time.DateTime dateTime86 = property83.withMaximumValue();
        org.joda.time.DateTime.Property property87 = dateTime86.millisOfDay();
        int int88 = dateTime51.compareTo((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime90 = dateTime51.plusMinutes(15);
        boolean boolean91 = dateTimeZone40.equals((java.lang.Object) dateTime90);
        org.joda.time.DateTime dateTime93 = dateTime90.withDayOfYear(6);
        boolean boolean94 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTime dateTime96 = dateTime90.plusMonths(58);
        org.joda.time.DateTime dateTime98 = dateTime90.withMillisOfSecond(516);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-01:00" + "'", str65, "-01:00");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test02764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02764");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        boolean boolean13 = dateTimeZone11.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime14 = dateTime7.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int18 = dateTimeZone16.getStandardOffset((long) (short) 0);
        long long20 = dateTimeZone11.getMillisKeepLocal(dateTimeZone16, (long) 0);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime23 = dateTime21.minusSeconds(762);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime23.withYearOfCentury(79680);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79680 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3600000) + "'", int18 == (-3600000));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test02765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02765");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean9 = property5.equals((java.lang.Object) dateTimeFieldType8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.hourOfHalfday();
        org.joda.time.Chronology chronology23 = chronology19.withUTC();
        boolean boolean24 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField25 = chronology23.seconds();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.secondOfMinute();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay31 = dateTime28.toTimeOfDay();
        java.util.Date date32 = dateTime28.toDate();
        long long33 = date32.getTime();
        org.joda.time.TimeOfDay timeOfDay34 = org.joda.time.TimeOfDay.fromDateFields(date32);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays(7);
        org.joda.time.DateTime dateTime44 = dateTime40.withYear(1);
        org.joda.time.Chronology chronology45 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology45);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(chronology45);
        int[] intArray50 = timeOfDay49.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray52 = dateTimeField26.set((org.joda.time.ReadablePartial) timeOfDay34, 17, intArray50, (-19));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[8, 38, 44, 69]");
    }

    @Test
    public void test02766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02766");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            int int3 = calendar0.getMaximum((-35748));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -35748");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572324119,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=38,SECOND=44,MILLISECOND=119,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test02767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02767");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        calendar0.setTimeInMillis((long) 56);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = calendar0.get(36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 36");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=56,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=56,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 53 + "'", int1 == 53);
    }

    @Test
    public void test02768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02768");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        calendar24.set(14, 9, 2);
        int int30 = calendar24.getMinimum((int) (short) 10);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.Chronology chronology39 = dateTime34.getChronology();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        boolean boolean43 = dateTimeZone41.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology44 = chronology39.withZone(dateTimeZone41);
        boolean boolean45 = calendar24.after((java.lang.Object) chronology44);
        long long46 = calendar24.getTimeInMillis();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((java.lang.Object) long46);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-61701785519900,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=14,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=275,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-61701785519900L) + "'", long46 == (-61701785519900L));
    }

    @Test
    public void test02769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02769");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        calendar24.set(14, 9, 2);
        boolean boolean29 = calendar24.isWeekDateSupported();
        calendar24.set(122, 24352386, 1200000);
        int int34 = calendar24.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar24.roll(79680, 457);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=122,MONTH=24352386,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1200000,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test02770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02770");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay6 = property5.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
    }

    @Test
    public void test02771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02771");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str4 = dateTimeZone2.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone2.getName((-1L), locale7);
        long long11 = dateTimeZone2.adjustOffset((long) (short) 10, true);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 365, dateTimeZone2);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone2.getOffset(readableInstant13);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone2.getName(4080100L, locale16);
        long long20 = dateTimeZone2.convertLocalToUTC(946688400000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:00" + "'", str8, "-01:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3600000) + "'", int14 == (-3600000));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:00" + "'", str17, "-01:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 946692000000L + "'", long20 == 946692000000L);
    }

    @Test
    public void test02772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02772");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str33 = dateTimeZone31.getShortName((long) 0);
        org.joda.time.DateTime dateTime34 = dateTime29.withZone(dateTimeZone31);
        long long37 = dateTimeZone31.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        boolean boolean41 = dateTimeZone39.equals((java.lang.Object) (-3600000));
        long long43 = dateTimeZone31.getMillisKeepLocal(dateTimeZone39, 100L);
        org.joda.time.DateTime dateTime44 = timeOfDay20.toDateTimeToday(dateTimeZone39);
        boolean boolean45 = dateTime44.isAfterNow();
        boolean boolean47 = dateTime44.isBefore((-82799998L));
        int int48 = dateTime44.getHourOfDay();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay53 = dateTime50.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property54 = timeOfDay53.millisOfSecond();
        int int55 = property54.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay57 = property54.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay57.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property60 = timeOfDay57.hourOfDay();
        int int61 = timeOfDay57.size();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay66 = dateTime63.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property67 = timeOfDay66.millisOfSecond();
        org.joda.time.DurationField durationField68 = property67.getDurationField();
        java.lang.String str69 = property67.getAsShortText();
        java.util.Locale locale70 = null;
        int int71 = property67.getMaximumTextLength(locale70);
        org.joda.time.TimeOfDay timeOfDay72 = property67.getTimeOfDay();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime76 = dateTime74.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay77 = dateTime74.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property78 = timeOfDay77.millisOfSecond();
        int int79 = property78.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay81 = property78.addToCopy(100);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime85 = dateTime83.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay86 = dateTime83.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property87 = timeOfDay86.millisOfSecond();
        boolean boolean88 = timeOfDay81.isEqual((org.joda.time.ReadablePartial) timeOfDay86);
        int[] intArray89 = timeOfDay81.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = timeOfDay81.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType92 = dateTimeFieldType91.getDurationType();
        boolean boolean93 = timeOfDay72.isSupported(dateTimeFieldType91);
        boolean boolean94 = timeOfDay57.isSupported(dateTimeFieldType91);
        org.joda.time.DateTime dateTime96 = dateTime44.withField(dateTimeFieldType91, 2);
        org.joda.time.DateTime dateTime98 = dateTime96.minusYears(1970);
        java.lang.String str99 = dateTime96.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:00" + "'", str33, "-01:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 5L + "'", long37 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 23 + "'", int48 == 23);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "100" + "'", str69, "100");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(timeOfDay81);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(timeOfDay86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "2022-02-11T02:00:00.100-01:00" + "'", str99, "2022-02-11T02:00:00.100-01:00");
    }

    @Test
    public void test02773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02773");
        org.joda.time.Chronology chronology0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(chronology0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Chronology must not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02774");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property25 = dateTime24.weekOfWeekyear();
        java.util.Locale locale26 = null;
        int int27 = property25.getMaximumShortTextLength(locale26);
        org.joda.time.DateTime dateTime28 = property25.withMaximumValue();
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        boolean boolean33 = dateTimeZone31.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime34 = dateTime29.withZoneRetainFields(dateTimeZone31);
        org.joda.time.Chronology chronology35 = chronology8.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        org.joda.time.DateTime dateTime44 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property45 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime46 = property45.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfYear(8);
        org.joda.time.Chronology chronology49 = dateTime46.getChronology();
        long long50 = dateTime46.getMillis();
        org.joda.time.DateTime.Property property51 = dateTime46.hourOfDay();
        int int52 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime46);
        int int53 = dateTime46.getMillisOfDay();
        org.joda.time.DateTime dateTime54 = dateTime46.toDateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.minusDays(7);
        org.joda.time.DateTime dateTime62 = dateTime58.withYear(1);
        org.joda.time.DateTime dateTime63 = dateTime62.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property64 = dateTime62.hourOfDay();
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        boolean boolean68 = dateTimeZone66.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime69 = dateTime62.withZone(dateTimeZone66);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.DateTime dateTime72 = dateTime62.withPeriodAdded(readablePeriod70, 1);
        boolean boolean73 = dateTime46.isEqual((org.joda.time.ReadableInstant) dateTime72);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-62104064400000L) + "'", long50 == (-62104064400000L));
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3600000) + "'", int52 == (-3600000));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 79200000 + "'", int53 == 79200000);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test02775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02775");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        boolean boolean13 = dateTimeField12.isLenient();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02776");
        java.util.Date date3 = new java.util.Date(2922789, 0, (int) '#');
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay8 = dateTime5.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.millisOfSecond();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        java.lang.String str11 = property9.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay13 = property9.addToCopy((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withMillisOfSecond(0);
        boolean boolean16 = date3.equals((java.lang.Object) timeOfDay13);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 04 00:00:00 UTC 2924689");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100" + "'", str11, "100");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02777");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        int int7 = date5.getDate();
        date5.setHours(3);
        int int10 = date5.getYear();
        int int11 = date5.getHours();
        int int12 = date5.getYear();
        date5.setDate(35);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Feb 04 03:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 70 + "'", int10 == 70);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 70 + "'", int12 == 70);
    }

    @Test
    public void test02778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02778");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        java.time.Instant instant6 = date5.toInstant();
        int int7 = date5.getMinutes();
        long long8 = date5.getTime();
        date5.setHours(1268);
        int int11 = date5.getDate();
        int int12 = date5.getTimezoneOffset();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Feb 22 20:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test02779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02779");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.LocalDate localDate10 = dateTime8.toLocalDate();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        int int20 = dateTime19.getMonthOfYear();
        org.joda.time.DateTime dateTime21 = localDate10.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property22 = dateTime19.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = property22.setCopy("15 Jan 1970 00:00:00 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"15 Jan 1970 00:00:00 GMT\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test02780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02780");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DurationField durationField10 = property9.getLeapDurationField();
        org.joda.time.DateTime dateTime11 = property9.roundHalfEvenCopy();
        int int12 = property9.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = property9.addToCopy(2871866106000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 2871866106000 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
    }

    @Test
    public void test02781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02781");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology9);
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.minuteOfHour();
        org.joda.time.DurationField durationField13 = chronology9.days();
        org.joda.time.DurationField durationField14 = chronology9.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay21 = dateTime18.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        java.lang.String str24 = property22.getAsShortText();
        org.joda.time.DateTimeField dateTimeField25 = property22.getField();
        org.joda.time.TimeOfDay timeOfDay27 = property22.addToCopy(5);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.fromMillisOfDay(3110L);
        int int30 = timeOfDay27.compareTo((org.joda.time.ReadablePartial) localTime29);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear(1);
        org.joda.time.Chronology chronology40 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.minuteOfDay();
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology40);
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(chronology40);
        org.joda.time.LocalTime localTime45 = localTime29.withFields((org.joda.time.ReadablePartial) timeOfDay44);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(12, 11, 24, (int) (byte) 1);
        org.joda.time.LocalTime localTime51 = localTime45.withFields((org.joda.time.ReadablePartial) localTime50);
        long long53 = chronology9.set((org.joda.time.ReadablePartial) localTime50, (long) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalTime localTime55 = localTime50.minus(readablePeriod54);
        org.joda.time.Chronology chronology56 = localTime50.getChronology();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(obj0, chronology56);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-38915999L) + "'", long53 == (-38915999L));
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    public void test02782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02782");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 79200);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.Chronology chronology17 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int24 = dateTimeZone22.getStandardOffset((long) (short) 0);
        long long27 = dateTimeZone22.convertLocalToUTC(480100L, false);
        java.lang.String str29 = dateTimeZone22.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime dateTime39 = dateTime38.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property40 = dateTime38.hourOfDay();
        org.joda.time.DateTime dateTime41 = property40.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str45 = dateTimeZone43.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime41.toMutableDateTime(dateTimeZone43);
        long long48 = dateTimeZone22.getMillisKeepLocal(dateTimeZone43, 0L);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime(25L, dateTimeZone43);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime53.minusDays(7);
        org.joda.time.DateTime dateTime57 = dateTime53.withYear(1);
        org.joda.time.Chronology chronology58 = dateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.weekyearOfCentury();
        org.joda.time.DurationField durationField60 = chronology58.weeks();
        org.joda.time.DurationField durationField61 = chronology58.centuries();
        org.joda.time.DateTimeField dateTimeField62 = chronology58.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology58.clockhourOfDay();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime69 = dateTime67.minusDays(7);
        org.joda.time.DateTime dateTime71 = dateTime67.withYear(1);
        org.joda.time.DateTime dateTime72 = dateTime71.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property73 = dateTime71.hourOfDay();
        org.joda.time.DateTime dateTime74 = property73.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property75 = dateTime74.weekOfWeekyear();
        java.util.Locale locale76 = null;
        int int77 = property75.getMaximumShortTextLength(locale76);
        org.joda.time.DateTime dateTime78 = property75.withMaximumValue();
        org.joda.time.DateTime dateTime79 = dateTime78.withTimeAtStartOfDay();
        java.util.TimeZone timeZone80 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forTimeZone(timeZone80);
        boolean boolean83 = dateTimeZone81.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime84 = dateTime79.withZoneRetainFields(dateTimeZone81);
        org.joda.time.Chronology chronology85 = chronology58.withZone(dateTimeZone81);
        boolean boolean86 = dateTimeZone43.equals((java.lang.Object) chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = dateTimeFormatter2.withZone(dateTimeZone43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter2.withDefaultYear(2922789);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3600000) + "'", int24 == (-3600000));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 4080100L + "'", long27 == 4080100L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-01:00" + "'", str29, "-01:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-01:00" + "'", str45, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
    }

    @Test
    public void test02783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02783");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        int int6 = date5.getHours();
        int int7 = date5.getHours();
        date5.setMonth((int) ' ');
        date5.setSeconds(14);
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromDateFields(date5);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = timeOfDay12.getValue(16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Sep 01 00:00:14 UTC 1972");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test02784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02784");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(12, 11, 24, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType6 = localTime4.getFieldType(82800);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 82800");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02785");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.set((int) (short) 1, (int) 'a', (int) (short) 1);
        gregorianCalendar13.add((int) (byte) 0, (-3600000));
        java.lang.String str21 = gregorianCalendar13.getCalendarType();
        gregorianCalendar13.clear();
        int int23 = gregorianCalendar13.getWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar13.roll(82800, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gregory" + "'", str21, "gregory");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
    }

    @Test
    public void test02786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02786");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str3 = dateTimeZone1.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType7 = timeOfDay5.getFieldType(34620000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34620000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
    }

    @Test
    public void test02787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02787");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(292278993);
        java.io.Writer writer6 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str10 = dateTimeZone8.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getName((-1L), locale13);
        java.lang.String str16 = dateTimeZone8.getNameKey((long) (short) 10);
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.plusHours(100);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer6, (org.joda.time.ReadablePartial) timeOfDay19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:00" + "'", str10, "-01:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(timeOfDay19);
    }

    @Test
    public void test02788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02788");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        java.util.Date date6 = dateTime2.toDate();
        java.time.Instant instant7 = date6.toInstant();
        int int8 = date6.getSeconds();
        java.util.Calendar.Builder builder9 = builder0.setInstant(date6);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = dateTime11.toCalendar(locale16);
        calendar17.setLenient(false);
        java.util.TimeZone timeZone20 = calendar17.getTimeZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone20);
        java.util.Calendar.Builder builder22 = builder0.setTimeZone(timeZone20);
        java.util.Calendar.Builder builder24 = builder22.setLenient(false);
        java.util.Calendar.Builder builder28 = builder24.setWeekDate(11, 100, 9);
        java.util.Calendar.Builder builder30 = builder28.setLenient(false);
        java.util.Calendar.Builder builder32 = builder30.setLenient(true);
        java.util.Date date39 = new java.util.Date((-292275054), 5, (int) (short) 10, 24352386, (-738188), 114);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder40 = builder30.setInstant(date39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572325025,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=45,MILLISECOND=25,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals(date39.toString(), "Mon Oct 06 17:19:45 UTC 292277670");
    }

    @Test
    public void test02789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02789");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-292278), chronology9);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = chronology9.getDateTimeMillis((int) (byte) 10, (-738188), (-738188), 59, 0, 14, 80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test02790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02790");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime7.minusHours((int) 'a');
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = chronology34.add(readablePeriod36, 9L, 5);
        org.joda.time.DateTime dateTime40 = dateTime25.toDateTime(chronology34);
        java.util.Locale locale41 = null;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        // The following exception was thrown during execution in test generation
        try {
            calendar42.roll(86399999, 1969);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9L + "'", long39 == 9L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-62104413119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=11,WEEK_OF_YEAR=53,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=363,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test02791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02791");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(31021460, 718, 14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31021460 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02792");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField11 = chronology8.months();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.millisOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        int int20 = property19.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property19.addToCopy(100);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        boolean boolean29 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) timeOfDay27);
        int int30 = timeOfDay27.size();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay35 = dateTime32.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property36 = timeOfDay35.millisOfSecond();
        int int37 = property36.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay39 = property36.addToCopy(100);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay44 = dateTime41.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property45 = timeOfDay44.millisOfSecond();
        boolean boolean46 = timeOfDay39.isEqual((org.joda.time.ReadablePartial) timeOfDay44);
        int[] intArray47 = timeOfDay39.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = timeOfDay39.getFieldType(0);
        int[] intArray50 = timeOfDay39.getValues();
        chronology8.validate((org.joda.time.ReadablePartial) timeOfDay27, intArray50);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.parse("19");
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime57.minusDays(7);
        org.joda.time.DateTime dateTime61 = dateTime57.withYear(1);
        org.joda.time.DateTime dateTime62 = dateTime61.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property63 = dateTime61.hourOfDay();
        int int64 = dateTime61.getMillisOfSecond();
        org.joda.time.DateTime.Property property65 = dateTime61.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property65.getFieldType();
        org.joda.time.DateTime dateTime68 = dateTime53.withField(dateTimeFieldType66, 75);
        int int69 = timeOfDay27.indexOf(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test02793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02793");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.millisOfSecond();
        int int16 = property15.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay18 = property15.addToCopy(100);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay23 = dateTime20.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.millisOfSecond();
        boolean boolean25 = timeOfDay18.isEqual((org.joda.time.ReadablePartial) timeOfDay23);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay23.withSecondOfMinute(12);
        org.joda.time.DateTime dateTime28 = timeOfDay23.toDateTimeToday();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay33 = dateTime30.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay33.withPeriodAdded(readablePeriod35, (int) '4');
        int[] intArray38 = timeOfDay37.getValues();
        int int39 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay23, intArray38);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeField9.getAsText(3600096, locale41);
        long long44 = dateTimeField9.roundHalfEven((long) 83280);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "3600096" + "'", str42, "3600096");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3600000L + "'", long44 == 3600000L);
    }

    @Test
    public void test02794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02794");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        java.time.Instant instant6 = date5.toInstant();
        int int7 = date5.getMinutes();
        long long8 = date5.getTime();
        java.lang.String str9 = date5.toGMTString();
        java.lang.String str10 = date5.toLocaleString();
        java.lang.String str11 = date5.toLocaleString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str9, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str10, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str11, "Jan 1, 1970 12:00:00 AM");
    }

    @Test
    public void test02795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02795");
        org.joda.time.Chronology chronology7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(801, (int) '4', 70, 30961340, 518, 0, (int) (short) 1, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30961340 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02796");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(680, 357, 675);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 680 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02797");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        int int13 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay32 = dateTime29.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property33 = timeOfDay32.millisOfSecond();
        java.util.Locale locale34 = null;
        int int35 = property33.getMaximumShortTextLength(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean37 = property33.equals((java.lang.Object) dateTimeFieldType36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property33.getFieldType();
        boolean boolean39 = dateTime26.isSupported(dateTimeFieldType38);
        org.joda.time.DateTime.Property property40 = dateTime16.property(dateTimeFieldType38);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay45 = dateTime42.toTimeOfDay();
        org.joda.time.LocalTime localTime46 = dateTime42.toLocalTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime50.minusDays(7);
        org.joda.time.DateTime dateTime54 = dateTime50.withYear(1);
        org.joda.time.DateTime dateTime55 = dateTime54.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime56 = dateTime55.toDateTimeISO();
        org.joda.time.DateTime dateTime58 = dateTime56.plusMinutes((int) (short) 100);
        java.lang.String str59 = dateTime58.toString();
        int int60 = dateTime58.getSecondOfMinute();
        boolean boolean61 = dateTime42.equals((java.lang.Object) dateTime58);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((java.lang.Object) dateTime58);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime66 = dateTime64.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime68 = dateTime66.minusDays(7);
        org.joda.time.DateTime dateTime70 = dateTime66.withYear(1);
        org.joda.time.DateTime.Property property71 = dateTime70.yearOfEra();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime75 = dateTime73.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime77 = dateTime75.minusDays(7);
        org.joda.time.DateTime dateTime79 = dateTime75.withYear(1);
        org.joda.time.DateTime.Property property80 = dateTime79.secondOfDay();
        long long81 = property71.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean82 = dateTime58.isEqual((org.joda.time.ReadableInstant) dateTime79);
        java.lang.String str83 = dateTime58.toString();
        java.util.TimeZone timeZone85 = null;
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forTimeZone(timeZone85);
        boolean boolean88 = dateTimeZone86.equals((java.lang.Object) (-3600000));
        java.util.Locale locale90 = null;
        java.lang.String str91 = dateTimeZone86.getShortName(10L, locale90);
        org.joda.time.LocalTime localTime92 = new org.joda.time.LocalTime((-62104064400000L), dateTimeZone86);
        org.joda.time.DateTime dateTime93 = dateTime58.withZoneRetainFields(dateTimeZone86);
        org.joda.time.LocalTime localTime94 = new org.joda.time.LocalTime(dateTimeZone86);
        org.joda.time.DateTime dateTime95 = dateTime16.withFields((org.joda.time.ReadablePartial) localTime94);
        java.util.Locale locale96 = null;
        java.util.Calendar calendar97 = dateTime16.toCalendar(locale96);
        int int98 = calendar97.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str59, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str83, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "-01:00" + "'", str91, "-01:00");
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(calendar97);
        org.junit.Assert.assertEquals(calendar97.toString(), "java.util.GregorianCalendar[time=-62104057919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=48,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 52 + "'", int98 == 52);
    }

    @Test
    public void test02798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02798");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 2000);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        boolean boolean3 = localTime1.isSupported(durationFieldType2);
        int[] intArray4 = localTime1.getValues();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[23, 0, 2, 0]");
    }

    @Test
    public void test02799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02799");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withDefaultYear(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = dateTimeFormatter4.parseLocalDate("secondOfDay");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test02800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02800");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str16 = dateTimeFieldType15.toString();
        boolean boolean17 = localTime14.isSupported(dateTimeFieldType15);
        org.joda.time.LocalTime localTime19 = localTime14.minusMinutes(79680);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime21 = localTime20.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalTime localTime24 = localTime20.withPeriodAdded(readablePeriod22, (int) 'a');
        org.joda.time.LocalTime localTime26 = localTime20.minusMinutes(69);
        int int27 = localTime19.compareTo((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        org.joda.time.DateTime dateTime39 = dateTime37.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property40 = dateTime39.monthOfYear();
        org.joda.time.DateTime dateTime42 = property40.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime43 = property40.getDateTime();
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks(17);
        org.joda.time.DateTime dateTime46 = localTime26.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        java.util.Locale locale48 = null;
        java.lang.String str49 = localTime26.toString("0", locale48);
        int int50 = localTime26.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "monthOfYear" + "'", str16, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 580 + "'", int50 == 580);
    }

    @Test
    public void test02801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02801");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay9 = property5.addToCopy((int) (short) -1);
        org.joda.time.DurationField durationField10 = property5.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay11 = property5.withMaximumValue();
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay14 = property5.setCopy("T22:08:00.100", locale13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T22:08:00.100\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test02802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02802");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = chronology8.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeField16.getAsText((long) '4', locale18);
        java.util.Locale locale22 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = dateTimeField16.set(0L, "hourOfDay", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hourOfDay\" for weekyearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "69" + "'", str19, "69");
    }

    @Test
    public void test02803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02803");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(7);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(1);
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        boolean boolean16 = dateTimeZone14.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology17 = chronology12.withZone(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter3.withZone(dateTimeZone14);
        boolean boolean19 = dateTimeFormatter3.isPrinter();
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter3.withLocale(locale20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withDefaultYear((-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter22.withDefaultYear(1268);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.parse("08:37:14.318", dateTimeFormatter22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test02804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02804");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.LocalDate localDate10 = dateTime8.toLocalDate();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        int int20 = dateTime19.getMonthOfYear();
        org.joda.time.DateTime dateTime21 = localDate10.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property22 = dateTime19.weekyear();
        org.joda.time.DateTime dateTime24 = property22.addToCopy(85680);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test02805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02805");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str3 = dateTimeZone1.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((-1L), locale6);
        java.lang.String str9 = dateTimeZone1.getNameKey((long) (short) 10);
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withHourOfDay(31021786);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31021786 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test02806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02806");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime14 = dateTime11.withField(dateTimeFieldType12, 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.property(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = dateTime14.minusWeeks(32769);
        org.joda.time.DateTime dateTime20 = dateTime14.minusSeconds(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime20.withDayOfMonth((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test02807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02807");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime13.getEra();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime26 = dateTime13.withDurationAdded(readableDuration24, (int) '4');
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property36 = dateTime34.hourOfDay();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        boolean boolean40 = dateTimeZone38.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime41 = dateTime34.withZone(dateTimeZone38);
        boolean boolean42 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime13.getZone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
    }

    @Test
    public void test02808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02808");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 11);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.minuteOfDay();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology11);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfSecond();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property25 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = property25.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear(8);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillis((long) 10);
        long long31 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime28.plus(readableDuration32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime36 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        boolean boolean40 = dateTimeZone38.equals((java.lang.Object) (-3600000));
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeZone38.getShortName(10L, locale42);
        boolean boolean44 = localTime1.equals((java.lang.Object) locale42);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime50.minusDays(7);
        org.joda.time.DateTime dateTime54 = dateTime50.withYear(1);
        org.joda.time.Chronology chronology55 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.minuteOfDay();
        boolean boolean58 = durationFieldType46.isSupported(chronology55);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) 3, chronology55);
        org.joda.time.LocalTime.Property property60 = localTime59.secondOfMinute();
        int int61 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.LocalTime localTime63 = localTime59.withSecondOfMinute((int) ' ');
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.years();
        boolean boolean65 = localTime63.isSupported(durationFieldType64);
        java.lang.String str66 = durationFieldType64.getName();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 62134912800000L + "'", long31 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-01:00" + "'", str43, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "years" + "'", str66, "years");
    }

    @Test
    public void test02809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02809");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusMinutes(14);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay12 = dateTime9.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property13 = timeOfDay12.millisOfSecond();
        int int14 = property13.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay16 = property13.addToCopy(100);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay21 = dateTime18.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        boolean boolean23 = timeOfDay16.isEqual((org.joda.time.ReadablePartial) timeOfDay21);
        org.joda.time.TimeOfDay.Property property24 = timeOfDay16.secondOfMinute();
        java.lang.String str25 = property24.getName();
        org.joda.time.TimeOfDay timeOfDay27 = property24.setCopy((int) '4');
        int int28 = timeOfDay4.compareTo((org.joda.time.ReadablePartial) timeOfDay27);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay4.minusSeconds(2000);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "secondOfMinute" + "'", str25, "secondOfMinute");
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(timeOfDay30);
    }

    @Test
    public void test02810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02810");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime.Property property11 = dateTime9.weekyear();
        java.util.Locale locale12 = null;
        java.util.Calendar calendar13 = dateTime9.toCalendar(locale12);
        int int14 = calendar13.getWeekYear();
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        java.util.Date date21 = dateTime17.toDate();
        java.time.Instant instant22 = date21.toInstant();
        int int23 = date21.getSeconds();
        java.util.Calendar.Builder builder24 = builder15.setInstant(date21);
        java.util.Calendar.Builder builder28 = builder15.setWeekDate(59, 32770, 79680);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str41 = dateTimeZone39.getShortName((long) 0);
        org.joda.time.DateTime dateTime42 = dateTime37.withZone(dateTimeZone39);
        java.util.TimeZone timeZone43 = dateTimeZone39.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.util.Calendar.Builder builder45 = builder15.setTimeZone(timeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        calendar13.setTimeZone(timeZone43);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone43);
        int int49 = calendar48.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-01:00" + "'", str41, "-01:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572326098,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=46,MILLISECOND=98,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
    }

    @Test
    public void test02811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02811");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        java.util.Date date2 = calendar0.getTime();
        calendar0.roll(0, (int) (short) -1);
        java.lang.String str6 = calendar0.toString();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str6, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02812");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.plusMinutes(12);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        int int29 = property28.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay31 = property28.addToCopy(100);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay36 = dateTime33.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.millisOfSecond();
        boolean boolean38 = timeOfDay31.isEqual((org.joda.time.ReadablePartial) timeOfDay36);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay31.withMinuteOfHour((int) '#');
        java.lang.String str41 = timeOfDay40.toString();
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay40.plusHours(2);
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.plusHours(9);
        org.joda.time.LocalTime localTime46 = timeOfDay43.toLocalTime();
        boolean boolean47 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType48.getDurationType();
        java.lang.String str50 = durationFieldType49.toString();
        org.joda.time.LocalTime localTime52 = localTime46.withFieldAdded(durationFieldType49, (-292275054));
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay57 = dateTime54.toTimeOfDay();
        org.joda.time.LocalTime localTime58 = dateTime54.toLocalTime();
        org.joda.time.Chronology chronology59 = localTime58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.hours();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.halfdayOfDay();
        boolean boolean63 = durationFieldType49.isSupported(chronology59);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay68 = dateTime65.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property69 = timeOfDay68.millisOfSecond();
        int int70 = property69.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay72 = property69.setCopy("14");
        long long74 = chronology59.set((org.joda.time.ReadablePartial) timeOfDay72, (long) 11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType76 = timeOfDay72.getFieldType(114);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 114");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "T23:35:00.200" + "'", str41, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "minutes" + "'", str50, "minutes");
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 82800014L + "'", long74 == 82800014L);
    }

    @Test
    public void test02813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02813");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.weekOfWeekyear();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(3600035L, chronology9);
        org.joda.time.DateTimeField dateTimeField17 = chronology9.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test02814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02814");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DurationField durationField10 = property9.getLeapDurationField();
        org.joda.time.DateTime dateTime12 = property9.setCopy((int) (short) 1);
        int int13 = dateTime12.getCenturyOfEra();
        org.joda.time.DateTime dateTime15 = dateTime12.minus(62104088221286L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test02815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02815");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.add(11, 11);
        gregorianCalendar13.clear();
        java.util.Date date18 = gregorianCalendar13.getTime();
        int int19 = date18.getHours();
        int int20 = date18.getMinutes();
        int int21 = date18.getMinutes();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        java.util.Date date27 = dateTime23.toDate();
        long long28 = date27.getTime();
        int int29 = date27.getDate();
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.fromDateFields(date27);
        date27.setTime((long) 357);
        int int33 = date18.compareTo(date27);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 01:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test02816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02816");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime16 = property13.addNoWrapToCopy(11);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekyearOfCentury();
        long long29 = dateTimeField27.roundHalfEven(480100L);
        boolean boolean31 = dateTimeField27.isLeap((-82800000L));
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay36 = dateTime33.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.millisOfSecond();
        int int38 = property37.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay40 = property37.addToCopy(100);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay45 = dateTime42.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property46 = timeOfDay45.millisOfSecond();
        boolean boolean47 = timeOfDay40.isEqual((org.joda.time.ReadablePartial) timeOfDay45);
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay45.withSecondOfMinute(12);
        int int50 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay49);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay49.withMinuteOfHour(15);
        org.joda.time.Chronology chronology53 = timeOfDay52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.weekyears();
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.fromMillisOfDay(79680100L, chronology53);
        boolean boolean56 = localTime16.isEqual((org.joda.time.ReadablePartial) localTime55);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3600000L + "'", long29 == 3600000L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test02817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02817");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = dateTimeField11.getRangeDurationField();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay17 = dateTime14.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.millisOfSecond();
        int int19 = property18.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay21 = property18.addToCopy(100);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.millisOfSecond();
        boolean boolean28 = timeOfDay21.isEqual((org.joda.time.ReadablePartial) timeOfDay26);
        int int29 = timeOfDay26.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = timeOfDay26.getFieldTypes();
        org.joda.time.TimeOfDay.Property property31 = timeOfDay26.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay33 = property31.setCopy(1);
        java.lang.String str34 = timeOfDay33.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = timeOfDay33.getFieldTypes();
        int int36 = timeOfDay33.size();
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) timeOfDay33, (-3600000), locale38);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeField11.getAsShortText((long) 31021256, locale41);
        long long45 = dateTimeField11.addWrapField((-1L), 188);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "T01:00:00.100" + "'", str34, "T01:00:00.100");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-3600000" + "'", str39, "-3600000");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "37" + "'", str42, "37");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-3120001L) + "'", long45 == (-3120001L));
    }

    @Test
    public void test02818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02818");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        int int7 = date5.getDate();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromDateFields(date5);
        java.lang.String str10 = localTime9.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = localTime9.getValue(742);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 742");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "00:00:00.100" + "'", str10, "00:00:00.100");
    }

    @Test
    public void test02819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02819");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        java.util.TimeZone timeZone14 = dateTimeZone10.toTimeZone();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone14);
        calendar15.clear();
        // The following exception was thrown during execution in test generation
        try {
            calendar15.set(30961509, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 30961509");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test02820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02820");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.Chronology chronology27 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.secondOfDay();
        long long35 = chronology27.add((long) 7, 5L, 11);
        org.joda.time.DateTimeField dateTimeField36 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = chronology27.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter2.withChronology(chronology27);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = dateTimeFormatter38.parseMillis("AM");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 62L + "'", long35 == 62L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
    }

    @Test
    public void test02821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02821");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime9 = property8.withMaximumValue();
        org.joda.time.DateTime dateTime10 = property8.roundHalfFloorCopy();
        java.lang.String str11 = property8.getAsShortText();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
    }

    @Test
    public void test02822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02822");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar calendar3 = builder0.build();
        java.util.Date date5 = new java.util.Date(0L);
        java.util.Calendar.Builder builder6 = builder0.setInstant(date5);
        java.util.Calendar calendar7 = builder6.build();
        calendar7.roll((int) (byte) 1, 794);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = calendar7.getLeastMaximum(31021460);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31021460");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2764,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02823");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) (-3600000));
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone2.getShortName(10L, locale6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((-62104064400000L), dateTimeZone2);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfDay();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology18);
        org.joda.time.LocalTime.Property property22 = localTime21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.DateTimeField dateTimeField24 = property22.getField();
        org.joda.time.LocalTime localTime25 = property22.getLocalTime();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalTime localTime27 = localTime25.minus(readablePeriod26);
        boolean boolean28 = localTime8.isAfter((org.joda.time.ReadablePartial) localTime27);
        org.joda.time.LocalTime.Property property29 = localTime27.secondOfMinute();
        org.joda.time.LocalTime localTime30 = property29.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime30);
    }

    @Test
    public void test02824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02824");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime10.toLocalTime();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        long long20 = chronology15.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.LocalTime localTime27 = dateTime23.toLocalTime();
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter7.withChronology(chronology28);
        java.lang.StringBuffer stringBuffer32 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(stringBuffer32, (long) 937);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
    }

    @Test
    public void test02825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02825");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.plusMinutes(12);
        org.joda.time.TimeOfDay.Property property23 = timeOfDay20.millisOfSecond();
        java.lang.String str24 = property23.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Property[millisOfSecond]" + "'", str24, "Property[millisOfSecond]");
    }

    @Test
    public void test02826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02826");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, 5);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test02827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02827");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar calendar3 = builder0.build();
        java.util.Date date5 = new java.util.Date(0L);
        java.util.Calendar.Builder builder6 = builder0.setInstant(date5);
        java.util.Calendar calendar7 = builder6.build();
        calendar7.roll((int) (byte) 1, 794);
        calendar7.setMinimalDaysInFirstWeek(470);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=470,ERA=1,YEAR=2764,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02828");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime14 = dateTime11.withField(dateTimeFieldType12, 17);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.minus(readablePeriod15);
        int int17 = dateTime11.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
    }

    @Test
    public void test02829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02829");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.withMinimumValue();
        org.joda.time.LocalTime localTime32 = localTime30.withMinuteOfHour(11);
        int int33 = localTime32.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test02830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02830");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        long long13 = dateTimeField10.add(0L, 31);
        long long16 = dateTimeField10.getDifferenceAsLong((long) 82800, (long) (-3600000));
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime19 = localTime17.withSecondOfMinute(1);
        int int20 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.plusMinutes((int) (short) 100);
        java.lang.String str33 = dateTime32.toString();
        int int34 = dateTime32.getSecondOfMinute();
        org.joda.time.DateTime dateTime36 = dateTime32.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime37 = dateTime32.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime32.plus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime32.minus((long) 1);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay46 = dateTime43.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property47 = timeOfDay46.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay46.withPeriodAdded(readablePeriod48, (int) '4');
        int[] intArray51 = timeOfDay50.getValues();
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay50.withMinuteOfHour(11);
        org.joda.time.TimeOfDay.Property property54 = timeOfDay50.minuteOfHour();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.minusDays(7);
        org.joda.time.DateTime dateTime62 = dateTime58.withYear(1);
        org.joda.time.DateTime dateTime63 = dateTime62.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime64 = dateTime63.toDateTimeISO();
        org.joda.time.DateTime dateTime66 = dateTime64.plusMinutes((int) (short) 100);
        java.lang.String str67 = dateTime66.toString();
        java.util.GregorianCalendar gregorianCalendar68 = dateTime66.toGregorianCalendar();
        boolean boolean69 = gregorianCalendar68.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay70 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar68);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime74 = dateTime72.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime76 = dateTime74.minusDays(7);
        org.joda.time.DateTime dateTime78 = dateTime74.withYear(1);
        org.joda.time.DateTime.Property property79 = dateTime78.yearOfEra();
        org.joda.time.DateTime dateTime80 = property79.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean82 = dateTime80.isSupported(dateTimeFieldType81);
        org.joda.time.TimeOfDay.Property property83 = timeOfDay70.property(dateTimeFieldType81);
        boolean boolean84 = timeOfDay50.isSupported(dateTimeFieldType81);
        org.joda.time.DateTime.Property property85 = dateTime41.property(dateTimeFieldType81);
        org.joda.time.DateTime dateTime86 = localTime19.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime88 = dateTime41.withMonthOfYear((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 111600000L + "'", long13 == 111600000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str33, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[23, 0, 0, 100]");
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str67, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test02831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02831");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date5);
        java.lang.String str8 = date5.toGMTString();
        java.lang.String str9 = date5.toLocaleString();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        java.util.Date date15 = dateTime11.toDate();
        int int16 = date15.getHours();
        date15.setSeconds(16);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromDateFields(date15);
        boolean boolean20 = date5.after(date15);
        boolean boolean22 = date5.equals((java.lang.Object) 35);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str8, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str9, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:16 UTC 1970");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02832");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes((int) 'a');
        java.util.GregorianCalendar gregorianCalendar13 = dateTime10.toGregorianCalendar();
        java.lang.Object obj14 = gregorianCalendar13.clone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "java.util.GregorianCalendar[time=-62104064400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "java.util.GregorianCalendar[time=-62104064400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "java.util.GregorianCalendar[time=-62104064400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test02833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02833");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.set(14, 15, 1);
        gregorianCalendar13.set(14, 82800, 5, 5, (-3600000), 2000);
        java.time.Instant instant25 = gregorianCalendar13.toInstant();
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        int int28 = gregorianCalendar13.getGreatestMinimum(14);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = gregorianCalendar13.isSet((-291478858));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test02834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02834");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(7, 9, 11);
        java.util.Calendar.Builder builder6 = builder4.setLenient(true);
        java.util.Calendar calendar7 = builder4.build();
        java.util.Calendar.Builder builder11 = builder4.setTimeOfDay(1328, 30961509, (int) (short) 1);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str24 = dateTimeZone22.getShortName((long) 0);
        org.joda.time.DateTime dateTime25 = dateTime20.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        boolean boolean34 = dateTime25.isBefore((org.joda.time.ReadableInstant) dateTime33);
        java.util.Locale locale35 = null;
        java.util.Calendar calendar36 = dateTime33.toCalendar(locale35);
        calendar36.clear();
        calendar36.clear();
        java.util.TimeZone timeZone39 = calendar36.getTimeZone();
        java.util.Calendar.Builder builder40 = builder4.setTimeZone(timeZone39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder42 = builder40.setInstant(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-61922016000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=284,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:00" + "'", str24, "-01:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test02835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02835");
        long long6 = java.util.Date.UTC(99, 24, (int) (short) -1, 680, (-19), 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 980581260000L + "'", long6 == 980581260000L);
    }

    @Test
    public void test02836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02836");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime.Property property14 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(chronology25);
        org.joda.time.DurationField durationField27 = chronology25.weeks();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology25.add(readablePeriod28, 1L, 8);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear(1);
        org.joda.time.DateTime dateTime40 = dateTime39.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property41 = dateTime39.hourOfDay();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        boolean boolean45 = dateTimeZone43.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime46 = dateTime39.withZone(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int50 = dateTimeZone48.getStandardOffset((long) (short) 0);
        long long52 = dateTimeZone43.getMillisKeepLocal(dateTimeZone48, (long) 0);
        org.joda.time.Chronology chronology53 = chronology25.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime54 = dateTime16.withZoneRetainFields(dateTimeZone48);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMonths(59);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime54.toMutableDateTime(dateTimeZone58);
        int int60 = dateTime54.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3600000) + "'", int50 == (-3600000));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test02837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02837");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime14 = localTime11.withFieldAdded(durationFieldType12, 9);
        org.joda.time.LocalTime localTime16 = localTime14.plusMinutes((-3600000));
        int[] intArray18 = chronology8.get((org.joda.time.ReadablePartial) localTime14, (-62104060800000L));
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.hourOfHalfday();
        org.joda.time.Chronology chronology32 = chronology28.withUTC();
        boolean boolean33 = durationFieldType19.isSupported(chronology32);
        boolean boolean34 = localTime14.isSupported(durationFieldType19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime36 = localTime14.withMinuteOfHour(1428);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1428 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 0, 0, 0]");
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test02838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02838");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str4 = dateTimeZone2.getShortName((long) 0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj0, dateTimeZone2);
        long long9 = dateTimeZone2.convertLocalToUTC(3600035L, true, 82882800L);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minusSeconds(801);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 7200035L + "'", long9 == 7200035L);
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test02839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02839");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minusMillis(100);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.plusHours((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.withHourOfDay(79200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79200000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
    }

    @Test
    public void test02840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02840");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean17 = dateTime11.isSupported(dateTimeFieldType16);
        org.joda.time.DateMidnight dateMidnight18 = dateTime11.toDateMidnight();
        java.util.Date date19 = dateTime11.toDate();
        int int20 = dateTime11.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight21 = dateTime11.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 03 00:48:00 UTC 2");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test02841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02841");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property13.addCopy(62134912800000L);
        org.joda.time.LocalTime localTime17 = property13.addNoWrapToCopy(0);
        org.joda.time.LocalTime localTime18 = property13.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime20 = property13.setCopy("dayOfYear");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfYear\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test02842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02842");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMinutes(54060000);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfDay(32772);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay32 = dateTime29.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property33 = timeOfDay32.millisOfSecond();
        java.util.Locale locale34 = null;
        int int35 = property33.getMaximumShortTextLength(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean37 = property33.equals((java.lang.Object) dateTimeFieldType36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property33.getFieldType();
        boolean boolean39 = dateTime26.isSupported(dateTimeFieldType38);
        int int40 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = dateTime26.withSecondOfMinute((-291478858));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -291478858 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test02843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02843");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean17 = dateTime11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime11.getZone();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        int int21 = dateTimeZone18.getOffset((long) 20);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3600000) + "'", int21 == (-3600000));
    }

    @Test
    public void test02844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02844");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        java.lang.String str18 = timeOfDay17.toString();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours(2);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay17.withPeriodAdded(readablePeriod21, (int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay17.minusSeconds((-738188));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "T23:35:00.200" + "'", str18, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
    }

    @Test
    public void test02845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02845");
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        boolean boolean6 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter5.getParser();
        java.util.Locale locale8 = dateTimeFormatter5.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter10.getParser();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        org.joda.time.LocalTime localTime17 = dateTime13.toLocalTime();
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.hours();
        long long23 = chronology18.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter10.withChronology(chronology18);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.LocalTime localTime30 = dateTime26.toLocalTime();
        org.joda.time.Chronology chronology31 = localTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.hours();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter10.withChronology(chronology31);
        org.joda.time.DurationField durationField35 = chronology31.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(79200, 937, 4, chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79200 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeParser11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test02846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02846");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.Chronology chronology15 = dateTime10.getChronology();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        boolean boolean19 = dateTimeZone17.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology20 = chronology15.withZone(dateTimeZone17);
        org.joda.time.DurationField durationField21 = chronology20.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(10, 1378, 16, 46, 292278993, 100, 99, chronology20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test02847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02847");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        org.joda.time.LocalDateTime localDateTime25 = dateTime21.toLocalDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test02848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02848");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        boolean boolean13 = dateTimeZone11.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime14 = dateTime7.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int18 = dateTimeZone16.getStandardOffset((long) (short) 0);
        long long20 = dateTimeZone11.getMillisKeepLocal(dateTimeZone16, (long) 0);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone16);
        int int22 = dateTime21.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.Chronology chronology32 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.minuteOfDay();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology32);
        org.joda.time.LocalTime.Property property36 = localTime35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        org.joda.time.DateTimeField dateTimeField38 = property36.getField();
        org.joda.time.LocalTime localTime39 = property36.getLocalTime();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalTime localTime41 = localTime39.minus(readablePeriod40);
        org.joda.time.LocalTime localTime43 = localTime41.minusMillis(2000);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays(7);
        org.joda.time.DateTime dateTime53 = dateTime49.withYear(1);
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(chronology54);
        org.joda.time.DurationField durationField56 = chronology54.weeks();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        long long60 = chronology54.add(readablePeriod57, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay61 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology54);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((-82799998L), chronology54);
        org.joda.time.LocalTime.Property property63 = localTime62.hourOfDay();
        org.joda.time.LocalTime localTime65 = property63.addCopy(0L);
        org.joda.time.LocalTime localTime67 = property63.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property63.getFieldType();
        int int69 = localTime41.get(dateTimeFieldType68);
        org.joda.time.DateTime dateTime71 = dateTime21.withField(dateTimeFieldType68, 2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime73 = dateTime71.withWeekOfWeekyear(952);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 952 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3600000) + "'", int18 == (-3600000));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test02849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02849");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Appendable appendable3 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(7);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(1);
        org.joda.time.DateTime dateTime12 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        int int17 = dateTime15.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime15.toMutableDateTime(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime15.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable3, (org.joda.time.ReadableInstant) dateTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 85680 + "'", int17 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test02850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02850");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        boolean boolean18 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = dateTimeFormatter2.parseLocalDateTime("0002-01-03T08:38:01.738-01:00");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test02851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02851");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.Chronology chronology15 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.hourOfHalfday();
        org.joda.time.Chronology chronology19 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.clockhourOfHalfday();
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(3, 0, 20, chronology15);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime24 = localTime23.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime27 = localTime23.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay32 = dateTime29.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property33 = timeOfDay32.millisOfSecond();
        int int34 = property33.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay36 = property33.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property39 = timeOfDay36.hourOfDay();
        int int40 = timeOfDay36.size();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay45 = dateTime42.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property46 = timeOfDay45.millisOfSecond();
        org.joda.time.DurationField durationField47 = property46.getDurationField();
        java.lang.String str48 = property46.getAsShortText();
        java.util.Locale locale49 = null;
        int int50 = property46.getMaximumTextLength(locale49);
        org.joda.time.TimeOfDay timeOfDay51 = property46.getTimeOfDay();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay56 = dateTime53.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property57 = timeOfDay56.millisOfSecond();
        int int58 = property57.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay60 = property57.addToCopy(100);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay65 = dateTime62.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property66 = timeOfDay65.millisOfSecond();
        boolean boolean67 = timeOfDay60.isEqual((org.joda.time.ReadablePartial) timeOfDay65);
        int[] intArray68 = timeOfDay60.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = timeOfDay60.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType70.getDurationType();
        boolean boolean72 = timeOfDay51.isSupported(dateTimeFieldType70);
        boolean boolean73 = timeOfDay36.isSupported(dateTimeFieldType70);
        boolean boolean74 = localTime23.isSupported(dateTimeFieldType70);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime78 = dateTime76.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay79 = dateTime76.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property80 = timeOfDay79.millisOfSecond();
        java.util.Locale locale81 = null;
        int int82 = property80.getMaximumShortTextLength(locale81);
        int int83 = property80.get();
        int int84 = property80.get();
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime88 = dateTime86.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay89 = dateTime86.toTimeOfDay();
        org.joda.time.LocalTime localTime90 = dateTime86.toLocalTime();
        int int91 = property80.compareTo((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.Chronology chronology92 = dateTime86.getChronology();
        org.joda.time.TimeOfDay timeOfDay93 = new org.joda.time.TimeOfDay((java.lang.Object) localTime23, chronology92);
        org.joda.time.Chronology chronology94 = timeOfDay93.getChronology();
        org.joda.time.TimeOfDay.Property property95 = timeOfDay93.hourOfDay();
        int[] intArray97 = chronology15.get((org.joda.time.ReadablePartial) timeOfDay93, (long) 937);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay98 = new org.joda.time.TimeOfDay(3600000, 1970, (int) (byte) 1, 85680100, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3600000 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "100" + "'", str48, "100");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(timeOfDay79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(timeOfDay89);
        org.junit.Assert.assertNotNull(localTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[23, 0, 0, 937]");
    }

    @Test
    public void test02852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02852");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.millisOfSecond();
        int int7 = property6.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay9 = property6.addToCopy(100);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.millisOfSecond();
        boolean boolean16 = timeOfDay9.isEqual((org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay9.withMinuteOfHour((int) '#');
        java.lang.String str19 = timeOfDay18.toString();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay18.plusHours(2);
        org.joda.time.Chronology chronology22 = timeOfDay21.getChronology();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property32 = dateTime30.hourOfDay();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        boolean boolean36 = dateTimeZone34.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime37 = dateTime30.withZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int41 = dateTimeZone39.getStandardOffset((long) (short) 0);
        long long43 = dateTimeZone34.getMillisKeepLocal(dateTimeZone39, (long) 0);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone39);
        java.lang.String str45 = dateTimeZone39.getID();
        org.joda.time.Chronology chronology46 = chronology22.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.centuryOfEra();
        org.joda.time.TimeOfDay timeOfDay48 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 1, chronology46);
        java.lang.String str49 = timeOfDay48.toString();
        int int50 = timeOfDay48.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "T23:35:00.200" + "'", str19, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3600000) + "'", int41 == (-3600000));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-01:00" + "'", str45, "-01:00");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "T00:00:00.001" + "'", str49, "T00:00:00.001");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test02853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02853");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        calendar7.setLenient(false);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test02854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02854");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int3 = dateTimeZone1.getStandardOffset((long) (short) 0);
        long long6 = dateTimeZone1.convertLocalToUTC(480100L, false);
        int int8 = dateTimeZone1.getOffset(345599986L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4080100L + "'", long6 == 4080100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3600000) + "'", int8 == (-3600000));
    }

    @Test
    public void test02855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02855");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        java.util.Date date6 = dateTime2.toDate();
        java.time.Instant instant7 = date6.toInstant();
        int int8 = date6.getSeconds();
        java.util.Calendar.Builder builder9 = builder0.setInstant(date6);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = dateTime11.toCalendar(locale16);
        calendar17.setLenient(false);
        java.util.TimeZone timeZone20 = calendar17.getTimeZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone20);
        java.util.Calendar.Builder builder22 = builder0.setTimeZone(timeZone20);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20);
        java.util.Locale locale26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap27 = calendar23.getDisplayNames((int) (short) 1, 122, locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572327951,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=47,MILLISECOND=951,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644572327951,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=47,MILLISECOND=951,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test02856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02856");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.getLocalTime();
        org.joda.time.LocalTime localTime18 = property13.addNoWrapToCopy(1200000);
        org.joda.time.LocalTime localTime19 = property13.getLocalTime();
        org.joda.time.LocalTime localTime20 = property13.getLocalTime();
        java.lang.String str21 = property13.getAsShortText();
        org.joda.time.LocalTime localTime22 = property13.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = property13.setCopy("08:36:01.339");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"08:36:01.339\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test02857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02857");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withHourOfDay(7);
        java.util.GregorianCalendar gregorianCalendar8 = dateTime7.toGregorianCalendar();
        gregorianCalendar8.setTimeInMillis(1644572205789L);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = gregorianCalendar8.getActualMaximum(518);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 518");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
    }

    @Test
    public void test02858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02858");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str17 = dateTimeZone15.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime11.toMutableDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(15, (int) (short) 1);
        int int23 = dateTimeZone21.getOffset(0L);
        boolean boolean24 = dateTimeZone15.equals((java.lang.Object) int23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone15);
        boolean boolean26 = dateTime25.isAfterNow();
        java.lang.String str27 = dateTime25.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:00" + "'", str17, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 54060000 + "'", int23 == 54060000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-11T08:38:48.034-01:00" + "'", str27, "2022-02-11T08:38:48.034-01:00");
    }

    @Test
    public void test02859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02859");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property13.getLocalTime();
        org.joda.time.LocalTime localTime17 = property13.addNoWrapToCopy(30961509);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = localTime17.withHourOfDay(79200);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79200 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test02860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02860");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        int int7 = dateTimeFormatter5.getDefaultYear();
        java.io.Writer writer8 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears((int) (short) 0);
        boolean boolean21 = dateTime17.isEqual((long) (byte) 0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime dateTime30 = dateTime29.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight31 = dateTime30.toDateMidnight();
        org.joda.time.LocalDate localDate32 = dateTime30.toLocalDate();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.DateTime dateTime41 = dateTime40.withEarlierOffsetAtOverlap();
        int int42 = dateTime41.getMonthOfYear();
        org.joda.time.DateTime dateTime43 = localDate32.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean44 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime41);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(writer8, (org.joda.time.ReadableInstant) dateTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 12 + "'", int42 == 12);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02861");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay(13, 22, 13, 11);
        java.util.Calendar.Builder builder10 = builder6.setWeekDate(20, (int) (short) 10, 22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar11 = builder6.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test02862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02862");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(1, 32770, 70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32770 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02863");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(0L);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = localTime1.getValue(34620000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 34620000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test02864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02864");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        calendar1.setFirstDayOfWeek(13);
        int int4 = calendar1.getWeeksInWeekYear();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay9 = dateTime6.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.millisOfSecond();
        int int11 = property10.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay13 = property10.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay13.hourOfDay();
        boolean boolean17 = calendar1.before((java.lang.Object) timeOfDay13);
        java.util.Calendar.Builder builder18 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder20 = builder18.setLenient(false);
        java.util.Calendar.Builder builder24 = builder18.setDate((int) '#', (-1), (int) '4');
        java.util.Calendar.Builder builder29 = builder24.setTimeOfDay((int) (short) 10, 59, (-1), (int) (short) 10);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTime dateTime43 = dateTime38.withZone(dateTimeZone40);
        java.util.TimeZone timeZone44 = dateTimeZone40.toTimeZone();
        java.util.Calendar.Builder builder45 = builder29.setTimeZone(timeZone44);
        calendar1.setTimeZone(timeZone44);
        java.lang.String str47 = calendar1.getCalendarType();
        boolean boolean48 = calendar1.isLenient();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=13,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "gregory" + "'", str47, "gregory");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test02865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02865");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        boolean boolean10 = property8.isLeap();
        org.joda.time.DateTime dateTime11 = property8.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minus((long) 12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis(70);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(7);
        org.joda.time.DateTime dateTime32 = dateTime28.withYear(1);
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str37 = dateTimeZone35.getShortName((long) 0);
        org.joda.time.DateTime dateTime38 = dateTime33.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = dateTime23.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime23.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime23.minus(readableDuration42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(7);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(1);
        org.joda.time.DateTime dateTime52 = dateTime51.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property53 = dateTime51.hourOfDay();
        org.joda.time.DateTime dateTime54 = property53.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property55 = dateTime54.weekOfWeekyear();
        java.util.Locale locale56 = null;
        int int57 = property55.getMaximumShortTextLength(locale56);
        org.joda.time.DateTime dateTime58 = property55.withMaximumValue();
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        int int60 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime62 = dateTime23.plusMinutes(15);
        org.joda.time.DateTime dateTime64 = dateTime62.minusYears((-292275054));
        int int65 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-01:00" + "'", str37, "-01:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test02866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02866");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 2000);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        boolean boolean3 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(7);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(1);
        org.joda.time.DateTime dateTime12 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes((int) (short) 100);
        java.lang.String str16 = dateTime15.toString();
        int int17 = dateTime15.getSecondOfMinute();
        org.joda.time.DateTime dateTime19 = dateTime15.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime20 = dateTime15.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime15.plus(readableDuration21);
        org.joda.time.DateTime dateTime24 = dateTime15.minus((long) 1);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay29.withPeriodAdded(readablePeriod31, (int) '4');
        int[] intArray34 = timeOfDay33.getValues();
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay33.withMinuteOfHour(11);
        org.joda.time.TimeOfDay.Property property37 = timeOfDay33.minuteOfHour();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(7);
        org.joda.time.DateTime dateTime45 = dateTime41.withYear(1);
        org.joda.time.DateTime dateTime46 = dateTime45.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTimeISO();
        org.joda.time.DateTime dateTime49 = dateTime47.plusMinutes((int) (short) 100);
        java.lang.String str50 = dateTime49.toString();
        java.util.GregorianCalendar gregorianCalendar51 = dateTime49.toGregorianCalendar();
        boolean boolean52 = gregorianCalendar51.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay53 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar51);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime57.minusDays(7);
        org.joda.time.DateTime dateTime61 = dateTime57.withYear(1);
        org.joda.time.DateTime.Property property62 = dateTime61.yearOfEra();
        org.joda.time.DateTime dateTime63 = property62.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean65 = dateTime63.isSupported(dateTimeFieldType64);
        org.joda.time.TimeOfDay.Property property66 = timeOfDay53.property(dateTimeFieldType64);
        boolean boolean67 = timeOfDay33.isSupported(dateTimeFieldType64);
        org.joda.time.DateTime.Property property68 = dateTime24.property(dateTimeFieldType64);
        int int69 = localTime1.get(dateTimeFieldType64);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime73 = dateTime71.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime75 = dateTime73.minusDays(7);
        org.joda.time.DateTime dateTime77 = dateTime73.withYear(1);
        org.joda.time.Chronology chronology78 = dateTime73.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField81 = chronology78.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField82 = chronology78.clockhourOfDay();
        org.joda.time.DurationField durationField83 = chronology78.millis();
        org.joda.time.DateTimeField dateTimeField84 = dateTimeFieldType64.getField(chronology78);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str16, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 0, 0, 100]");
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str50, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test02867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02867");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        long long2 = calendar0.getTimeInMillis();
        int int3 = calendar0.getFirstDayOfWeek();
        java.util.Locale locale6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap7 = calendar0.getDisplayNames(1969, 115, locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572328539,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=38,SECOND=48,MILLISECOND=539,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1644572328539L + "'", long2 == 1644572328539L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test02868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02868");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay8.hourOfDay();
        int int12 = timeOfDay8.size();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay8.plusMillis(14);
        int int15 = timeOfDay14.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = timeOfDay14.withField(dateTimeFieldType16, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 214 + "'", int15 == 214);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
    }

    @Test
    public void test02869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02869");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        long long11 = dateTimeField9.roundHalfFloor((long) 1200000);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(7);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(1);
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.minuteOfDay();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology21);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(chronology21);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.minusMinutes((int) (byte) 100);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) timeOfDay25, 712, locale29);
        boolean boolean31 = dateTimeField9.isSupported();
        java.lang.String str32 = dateTimeField9.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3600000L + "'", long11 == 3600000L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "712" + "'", str30, "712");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DateTimeField[weekyearOfCentury]" + "'", str32, "DateTimeField[weekyearOfCentury]");
    }

    @Test
    public void test02870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02870");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder0.setDate((int) '#', (-1), (int) '4');
        java.util.Calendar.Builder builder11 = builder6.setTimeOfDay((int) (short) 10, 59, (-1), (int) (short) 10);
        java.util.Locale locale12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder13 = builder11.setLocale(locale12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02871");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.secondOfDay();
        boolean boolean23 = property8.equals((java.lang.Object) dateTimeField22);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeField22.getAsShortText((long) 7, locale25);
        int int27 = dateTimeField22.getMinimumValue();
        long long30 = dateTimeField22.set(70L, "0");
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "82800" + "'", str26, "82800");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-82799930L) + "'", long30 == (-82799930L));
    }

    @Test
    public void test02872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02872");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(12, 675, 841, 470, 32770);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 470 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02873");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.Chronology chronology8 = dateTimeFormatter7.getChronolgy();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        java.util.TimeZone timeZone23 = dateTimeZone19.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter7.withZone(dateTimeZone19);
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withLocale(locale25);
        java.io.Writer writer27 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter24.printTo(writer27, (long) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test02874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02874");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay8 = dateTime5.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.millisOfSecond();
        int int10 = property9.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay12 = property9.addToCopy(100);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay17 = dateTime14.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.millisOfSecond();
        boolean boolean19 = timeOfDay12.isEqual((org.joda.time.ReadablePartial) timeOfDay17);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay12.withMinuteOfHour((int) '#');
        java.lang.String str22 = timeOfDay21.toString();
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay21.plusHours(2);
        org.joda.time.Chronology chronology25 = timeOfDay24.getChronology();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property35 = dateTime33.hourOfDay();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        boolean boolean39 = dateTimeZone37.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime40 = dateTime33.withZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int44 = dateTimeZone42.getStandardOffset((long) (short) 0);
        long long46 = dateTimeZone37.getMillisKeepLocal(dateTimeZone42, (long) 0);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone42);
        java.lang.String str48 = dateTimeZone42.getID();
        org.joda.time.Chronology chronology49 = chronology25.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField50 = chronology25.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(11, 48, 32769, 74221000, chronology25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32769 for secondOfMinute must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "T23:35:00.200" + "'", str22, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3600000) + "'", int44 == (-3600000));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-01:00" + "'", str48, "-01:00");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test02875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02875");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        int int15 = gregorianCalendar13.getMinimalDaysInFirstWeek();
        gregorianCalendar13.clear();
        long long17 = gregorianCalendar13.getTimeInMillis();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property30 = dateTime29.monthOfYear();
        int int31 = dateTime29.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str35 = dateTimeZone33.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime29.toMutableDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime38 = dateTime29.plusDays(100);
        org.joda.time.DateTime dateTime39 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property40 = dateTime38.dayOfYear();
        boolean boolean41 = gregorianCalendar13.equals((java.lang.Object) dateTime38);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3600000L + "'", long17 == 3600000L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 85680 + "'", int31 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-01:00" + "'", str35, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test02876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02876");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) (short) 10);
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear(36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime12 = dateTimeFormatter10.parseMutableDateTime("December");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test02877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02877");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        calendar7.setLenient(false);
        calendar7.set(85680, (-19), (-1028363091), 82800, 13, 7);
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap20 = calendar7.getDisplayNames(13, (-1028363091), locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=85680,MONTH=-19,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=-1028363091,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=82800,MINUTE=13,SECOND=7,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test02878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02878");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str16 = dateTimeFieldType15.toString();
        boolean boolean17 = localTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        org.joda.time.LocalTime localTime23 = dateTime19.toLocalTime();
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.years();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int29 = localTime27.indexOf(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property39 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = property39.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property41 = dateTime40.weekOfWeekyear();
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        org.joda.time.DateTime dateTime44 = property41.withMaximumValue();
        org.joda.time.DateTime dateTime45 = dateTime44.withTimeAtStartOfDay();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime50 = dateTime45.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = localTime27.toDateTimeToday(dateTimeZone47);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime55.minusDays(7);
        org.joda.time.DateTime dateTime59 = dateTime55.withYear(1);
        org.joda.time.Chronology chronology60 = dateTime55.getChronology();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime(chronology60);
        org.joda.time.DurationField durationField62 = chronology60.weeks();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.secondOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.dayOfWeek();
        boolean boolean66 = dateTime51.equals((java.lang.Object) chronology60);
        org.joda.time.DateTimeField dateTimeField67 = chronology60.centuryOfEra();
        int int70 = dateTimeField67.getDifference((long) 2, (long) 42);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "monthOfYear" + "'", str16, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test02879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02879");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int3 = dateTimeZone1.getStandardOffset((long) (short) 0);
        long long6 = dateTimeZone1.convertLocalToUTC(480100L, false);
        java.lang.String str8 = dateTimeZone1.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.DateTime dateTime18 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property19 = dateTime17.hourOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str24 = dateTimeZone22.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime20.toMutableDateTime(dateTimeZone22);
        long long27 = dateTimeZone1.getMillisKeepLocal(dateTimeZone22, 0L);
        boolean boolean29 = dateTimeZone22.isStandardOffset(300063L);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4080100L + "'", long6 == 4080100L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:00" + "'", str8, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:00" + "'", str24, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test02880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02880");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime12 = localTime10.withSecondOfMinute(1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime12, 14, locale14);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localTime12.getFields();
        org.joda.time.LocalTime localTime18 = localTime12.withMillisOfDay(8);
        org.joda.time.DateTime dateTime19 = localTime18.toDateTimeToday();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localTime18.getValue(31077130);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 31077130");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "14" + "'", str15, "14");
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test02881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02881");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.DateTime dateTime28 = dateTime23.withYearOfCentury(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.Chronology chronology38 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.minuteOfDay();
        org.joda.time.DurationField durationField41 = chronology38.months();
        boolean boolean42 = dateTimeFieldType29.isSupported(chronology38);
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType29.getDurationType();
        org.joda.time.DateTime dateTime45 = dateTime28.withFieldAdded(durationFieldType43, 2);
        org.joda.time.DateTime dateTime46 = localTime21.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        int int47 = dateTime45.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
    }

    @Test
    public void test02882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02882");
        org.joda.time.Chronology chronology4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(0, 1969, 200, (-291478858), chronology4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02883");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime8.plusHours(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.weeks();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology20.add(readablePeriod23, 1L, 8);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property36 = dateTime34.hourOfDay();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        boolean boolean40 = dateTimeZone38.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime41 = dateTime34.withZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int45 = dateTimeZone43.getStandardOffset((long) (short) 0);
        long long47 = dateTimeZone38.getMillisKeepLocal(dateTimeZone43, (long) 0);
        org.joda.time.Chronology chronology48 = chronology20.withZone(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime8.toMutableDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField50 = chronology20.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = dateTimeField50.getType();
        int int52 = dateTimeField50.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3600000) + "'", int45 == (-3600000));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test02884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02884");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone4.getName(0L, locale6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZone(dateTimeZone4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.DateTime dateTime28 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str32 = dateTimeZone30.getShortName((long) 0);
        org.joda.time.DateTime dateTime33 = dateTime28.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime18.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime38.minusDays(7);
        org.joda.time.DateTime dateTime42 = dateTime38.withYear(1);
        org.joda.time.DateTime dateTime43 = dateTime42.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str47 = dateTimeZone45.getShortName((long) 0);
        org.joda.time.DateTime dateTime48 = dateTime43.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays(7);
        org.joda.time.DateTime dateTime56 = dateTime52.withYear(1);
        boolean boolean57 = dateTime48.isBefore((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = dateTime56.isEqualNow();
        org.joda.time.DateTime dateTime60 = dateTime56.minusSeconds(22);
        boolean boolean61 = dateTime34.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime.Property property62 = dateTime56.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = dateTimeFormatter9.print((org.joda.time.ReadableInstant) dateTime56);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-01:00" + "'", str32, "-01:00");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-01:00" + "'", str47, "-01:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test02885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02885");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 9, dateTimeZone2);
        int int5 = dateTimeZone2.getStandardOffset(31525542082800L);
        int int7 = dateTimeZone2.getStandardOffset((long) 8);
        java.lang.String str9 = dateTimeZone2.getName((long) 79680);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3600000) + "'", int5 == (-3600000));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3600000) + "'", int7 == (-3600000));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
    }

    @Test
    public void test02886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02886");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime22 = property21.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfYear(8);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        int int27 = dateTime9.get(dateTimeField26);
        int int29 = dateTimeField26.getMaximumValue((long) 69);
        org.joda.time.DurationField durationField30 = dateTimeField26.getLeapDurationField();
        int int33 = dateTimeField26.getDifference((long) 244, 82079756L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 292278993 + "'", int29 == 292278993);
        org.junit.Assert.assertNull(durationField30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test02887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02887");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        int int13 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property17 = dateTime11.monthOfYear();
        long long18 = dateTime11.getMillis();
        java.util.Locale locale19 = null;
        java.util.Calendar calendar20 = dateTime11.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime11.withMillis((long) 42);
        int int23 = dateTime22.getYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-62104057919900L) + "'", long18 == (-62104057919900L));
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62104057919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=48,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1969 + "'", int23 == 1969);
    }

    @Test
    public void test02888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02888");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray15 = chronology8.get(readablePeriod13, (long) 114);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test02889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02889");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime15);
        org.joda.time.DateTime dateTime17 = timeOfDay16.toDateTimeToday();
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime dateTime20 = dateTime17.plus((long) 70);
        org.joda.time.DateTime.Property property21 = dateTime17.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test02890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02890");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        long long25 = dateTimeZone19.nextTransition((-1693695600000L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1693695600000L) + "'", long25 == (-1693695600000L));
    }

    @Test
    public void test02891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02891");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.minus(readablePeriod3);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime8 = property5.getLocalTime();
        org.joda.time.LocalTime localTime10 = localTime8.plusMinutes(1200000);
        org.joda.time.LocalTime localTime12 = localTime8.minusMinutes(859);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay17 = dateTime14.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.millisOfSecond();
        int int19 = property18.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay21 = property18.addToCopy(100);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.millisOfSecond();
        boolean boolean28 = timeOfDay21.isEqual((org.joda.time.ReadablePartial) timeOfDay26);
        int int29 = timeOfDay26.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = timeOfDay26.getFieldTypes();
        org.joda.time.TimeOfDay.Property property31 = timeOfDay26.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay33 = property31.setCopy(1);
        java.lang.String str34 = timeOfDay33.toString();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay33.plus(readablePeriod35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = timeOfDay33.getFieldTypes();
        org.joda.time.TimeOfDay.Property property38 = timeOfDay33.minuteOfHour();
        int int39 = localTime8.compareTo((org.joda.time.ReadablePartial) timeOfDay33);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getDurationType();
        org.joda.time.LocalTime.Property property42 = localTime8.property(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(timeOfDay33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "T01:00:00.344" + "'", str34, "T01:00:00.344");
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test02892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02892");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        java.util.Date date2 = calendar0.getTime();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = calendar0.getMaximum(927);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 927");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test02893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02893");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withHourOfDay(7);
        org.joda.time.DateTime dateTime9 = dateTime3.plus((-62073219600000L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime9.withEra(74221000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74221000 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test02894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02894");
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        boolean boolean10 = dateTimeFormatter9.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter9.getParser();
        java.util.Locale locale12 = dateTimeFormatter9.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatter14.getParser();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        org.joda.time.LocalTime localTime21 = dateTime17.toLocalTime();
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.hours();
        long long27 = chronology22.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter14.withChronology(chronology22);
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withLocale(locale29);
        org.joda.time.Chronology chronology31 = dateTimeFormatter28.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(99, (int) (byte) 1, 85680100, 30961509, 16, 3600096, 11, chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30961509 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(dateTimeParser11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(dateTimeParser15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    public void test02895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02895");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        java.util.Date date2 = calendar0.getTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay7 = dateTime4.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.millisOfSecond();
        int int9 = property8.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addToCopy(100);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        boolean boolean18 = timeOfDay11.isEqual((org.joda.time.ReadablePartial) timeOfDay16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology20);
        boolean boolean22 = timeOfDay16.isBefore((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay16.withFieldAdded(durationFieldType23, 2);
        boolean boolean26 = calendar0.before((java.lang.Object) durationFieldType23);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.Chronology chronology35 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology35.withZone(dateTimeZone41);
        org.joda.time.DurationField durationField43 = chronology42.hours();
        org.joda.time.DurationField durationField44 = durationFieldType23.getField(chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.dayOfYear();
        org.joda.time.DurationField durationField47 = chronology42.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((java.lang.Object) chronology42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test02896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02896");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime31 = property13.roundFloorCopy();
        org.joda.time.LocalTime localTime33 = property13.addNoWrapToCopy((int) (byte) 0);
        int int34 = localTime33.size();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
    }

    @Test
    public void test02897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02897");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.withYearOfEra(70);
        org.joda.time.DateTime dateTime12 = dateTime7.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime7.withDurationAdded(0L, 0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test02898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02898");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.millisOfSecond();
        int int7 = property6.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay9 = property6.addToCopy(100);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.millisOfSecond();
        boolean boolean16 = timeOfDay9.isEqual((org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay9.withMinuteOfHour((int) '#');
        java.lang.String str19 = timeOfDay18.toString();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay18.plusHours(2);
        org.joda.time.Chronology chronology22 = timeOfDay21.getChronology();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property32 = dateTime30.hourOfDay();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        boolean boolean36 = dateTimeZone34.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime37 = dateTime30.withZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int41 = dateTimeZone39.getStandardOffset((long) (short) 0);
        long long43 = dateTimeZone34.getMillisKeepLocal(dateTimeZone39, (long) 0);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone39);
        java.lang.String str45 = dateTimeZone39.getID();
        org.joda.time.Chronology chronology46 = chronology22.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 16, chronology46);
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.parse("19");
        int[] intArray51 = chronology46.get((org.joda.time.ReadablePartial) localTime49, 0L);
        org.joda.time.LocalTime localTime53 = localTime49.plusMinutes(13);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "T23:35:00.200" + "'", str19, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3600000) + "'", int41 == (-3600000));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-01:00" + "'", str45, "-01:00");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[23, 0, 0, 0]");
        org.junit.Assert.assertNotNull(localTime53);
    }

    @Test
    public void test02899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02899");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(39600010L);
    }

    @Test
    public void test02900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02900");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime11 = localTime9.withSecondOfMinute(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime11.minus(readablePeriod12);
        java.lang.String str14 = localTime11.toString();
        int[] intArray16 = new int[] { 10 };
        int int17 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime11, intArray16);
        long long19 = dateTimeField8.roundCeiling(9L);
        boolean boolean20 = dateTimeField8.isSupported();
        int int22 = dateTimeField8.getMinimumValue((long) (short) 100);
        org.joda.time.DurationField durationField23 = dateTimeField8.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "08:38:01.100" + "'", str14, "08:38:01.100");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 999 + "'", int17 == 999);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9L + "'", long19 == 9L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test02901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02901");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.centuryOfEra();
        boolean boolean14 = dateTimeField13.isLenient();
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeField13.getAsShortText(31128547, locale16);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "31128547" + "'", str17, "31128547");
    }

    @Test
    public void test02902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02902");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalTime localTime16 = localTime12.withFieldAdded(durationFieldType14, 0);
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfDay();
        java.util.Locale locale21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = dateTimeField18.set((long) 31021223, "0001-12-31T22:07:38.100-01:00", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0001-12-31T22:07:38.100-01:00\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test02903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02903");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology13 = chronology8.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.centuryOfEra();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay((long) 32772);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localTime16, (-3600000), locale18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay24 = dateTime21.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.millisOfSecond();
        int int26 = timeOfDay24.getMillisOfSecond();
        int int27 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay24);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.Chronology chronology36 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.hourOfHalfday();
        org.joda.time.Chronology chronology40 = chronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) timeOfDay24, chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.TimeOfDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-3600000" + "'", str19, "-3600000");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2922789 + "'", int27 == 2922789);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test02904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02904");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        int int12 = property11.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = property11.setCopy("79200000");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79200000 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test02905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02905");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        java.util.Locale locale17 = null;
        java.util.Calendar calendar18 = dateTime15.toCalendar(locale17);
        calendar18.clear();
        java.lang.String str20 = calendar18.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = calendar18.getMinimum(1439);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1439");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
    }

    @Test
    public void test02906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02906");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter2.getParser();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(712);
        org.joda.time.Chronology chronology9 = dateTimeFormatter8.getChronology();
        java.io.Writer writer10 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay15 = dateTime12.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.millisOfSecond();
        int int17 = property16.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay19 = property16.addToCopy(100);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay24 = dateTime21.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.millisOfSecond();
        boolean boolean26 = timeOfDay19.isEqual((org.joda.time.ReadablePartial) timeOfDay24);
        int int27 = timeOfDay24.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = timeOfDay24.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay24.withPeriodAdded(readablePeriod29, (int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay31.plusMinutes(12);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay38 = dateTime35.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property39 = timeOfDay38.millisOfSecond();
        int int40 = property39.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay42 = property39.addToCopy(100);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay47 = dateTime44.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property48 = timeOfDay47.millisOfSecond();
        boolean boolean49 = timeOfDay42.isEqual((org.joda.time.ReadablePartial) timeOfDay47);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay42.withMinuteOfHour((int) '#');
        java.lang.String str52 = timeOfDay51.toString();
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay51.plusHours(2);
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay54.plusHours(9);
        org.joda.time.LocalTime localTime57 = timeOfDay54.toLocalTime();
        boolean boolean58 = timeOfDay33.isEqual((org.joda.time.ReadablePartial) localTime57);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(writer10, (org.joda.time.ReadablePartial) localTime57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "T23:35:00.200" + "'", str52, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test02907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02907");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.yearOfCentury();
        int int14 = dateTimeField12.get((long) 22);
        boolean boolean15 = dateTimeField12.isSupported();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 69 + "'", int14 == 69);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test02908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02908");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime13.getEra();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime26 = dateTime13.withDurationAdded(readableDuration24, (int) '4');
        org.joda.time.DateTime dateTime28 = dateTime13.withYear(365);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(1969);
        org.joda.time.Instant instant31 = dateTime28.toInstant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant31);
    }

    @Test
    public void test02909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02909");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.hourOfHalfday();
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.DurationField durationField14 = chronology9.millis();
        org.joda.time.Chronology chronology15 = chronology9.withUTC();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 1969, chronology15);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test02910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02910");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology13 = chronology8.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.centuryOfEra();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay((long) 32772);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localTime16, (-3600000), locale18);
        long long21 = dateTimeField14.roundHalfEven(25L);
        long long23 = dateTimeField14.roundHalfFloor(24L);
        long long26 = dateTimeField14.add((long) 937, (long) 32772);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.Chronology chronology36 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.clockhourOfDay();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(946771200000L, chronology36);
        org.joda.time.LocalTime localTime41 = localTime39.plusSeconds(214);
        int[] intArray48 = new int[] { 56, 79200000, 69, 2922789, 2922789, 427 };
        int int49 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localTime41, intArray48);
        org.joda.time.LocalTime.Property property50 = localTime41.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-3600000" + "'", str19, "-3600000");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 946688400000L + "'", long21 == 946688400000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 946688400000L + "'", long23 == 946688400000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 103418443094400937L + "'", long26 == 103418443094400937L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[56, 79200000, 69, 2922789, 2922789, 427]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2922789 + "'", int49 == 2922789);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test02911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02911");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology8.getDateTimeMillis((long) (short) 1, 292278993, 999, 999, (-1028363091));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test02912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02912");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.LocalDate localDate10 = dateTime8.toLocalDate();
        org.joda.time.DateTime dateTime12 = dateTime8.plusYears(8);
        boolean boolean14 = dateTime8.isAfter(366L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02913");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        long long11 = dateTimeField9.roundFloor((long) 3);
        int int13 = dateTimeField9.getMaximumValue((long) (-3600000));
        org.joda.time.DurationField durationField14 = dateTimeField9.getLeapDurationField();
        java.util.Locale locale15 = null;
        int int16 = dateTimeField9.getMaximumShortTextLength(locale15);
        long long18 = dateTimeField9.remainder((long) 82800);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay25 = dateTime22.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property26 = timeOfDay25.millisOfSecond();
        org.joda.time.DurationField durationField27 = property26.getDurationField();
        java.lang.String str28 = property26.getAsShortText();
        java.util.Locale locale29 = null;
        int int30 = property26.getMaximumTextLength(locale29);
        org.joda.time.TimeOfDay timeOfDay31 = property26.getTimeOfDay();
        int[] intArray32 = timeOfDay31.getValues();
        java.util.Locale locale34 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray35 = dateTimeField9.set((org.joda.time.ReadablePartial) localTime19, 3, intArray32, "08:38:01.712", locale34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"08:38:01.712\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-82800000L) + "'", long11 == (-82800000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 82882800L + "'", long18 == 82882800L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100" + "'", str28, "100");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[23, 0, 0, 100]");
    }

    @Test
    public void test02914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02914");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.Chronology chronology13 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology13);
        java.lang.String str17 = localTime16.toString();
        org.joda.time.Chronology chronology18 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        org.joda.time.DurationField durationField21 = chronology18.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(17661728, 61200002, 762, 82800000, chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17661728 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "01:00:00.000" + "'", str17, "01:00:00.000");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test02915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02915");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setDate(13, 85680, 517);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.DateTime dateTime15 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str19 = dateTimeZone17.getShortName((long) 0);
        org.joda.time.DateTime dateTime20 = dateTime15.withZone(dateTimeZone17);
        java.util.TimeZone timeZone21 = dateTimeZone17.toTimeZone();
        java.util.Calendar.Builder builder22 = builder6.setTimeZone(timeZone21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone21);
        // The following exception was thrown during execution in test generation
        try {
            calendar23.clear(115);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 115");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-01:00" + "'", str19, "-01:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644572330473,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=50,MILLISECOND=473,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test02916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02916");
        java.util.Date date1 = new java.util.Date((long) 115);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test02917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02917");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfDay();
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeField13.getAsShortText((long) 13, locale15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int20 = dateTimeZone18.getStandardOffset((long) (short) 0);
        long long23 = dateTimeZone18.convertLocalToUTC(480100L, false);
        java.lang.String str25 = dateTimeZone18.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property36 = dateTime34.hourOfDay();
        org.joda.time.DateTime dateTime37 = property36.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str41 = dateTimeZone39.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime37.toMutableDateTime(dateTimeZone39);
        long long44 = dateTimeZone18.getMillisKeepLocal(dateTimeZone39, 0L);
        int int46 = dateTimeZone18.getOffsetFromLocal((long) 20);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int51 = dateTimeZone49.getStandardOffset((long) (short) 0);
        long long54 = dateTimeZone49.convertLocalToUTC(480100L, false);
        java.lang.String str55 = dateTimeZone49.getID();
        long long57 = dateTimeZone18.getMillisKeepLocal(dateTimeZone49, (long) 8);
        java.lang.String str59 = dateTimeZone18.getNameKey(103418443094400937L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((java.lang.Object) 13, dateTimeZone18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "23" + "'", str16, "23");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3600000) + "'", int20 == (-3600000));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4080100L + "'", long23 == 4080100L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-01:00" + "'", str25, "-01:00");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-01:00" + "'", str41, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3600000) + "'", int46 == (-3600000));
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3600000) + "'", int51 == (-3600000));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 4080100L + "'", long54 == 4080100L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-01:00" + "'", str55, "-01:00");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 8L + "'", long57 == 8L);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test02918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02918");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.getLocalTime();
        org.joda.time.LocalTime localTime18 = property13.addCopy((int) (byte) 100);
        org.joda.time.LocalTime.Property property19 = localTime18.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime21 = property19.addNoWrapToCopy((-292278));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test02919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02919");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        calendar7.setLenient(false);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone10);
        java.lang.Object obj12 = calendar11.clone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572330711,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=50,MILLISECOND=711,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "java.util.GregorianCalendar[time=1644572330711,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=50,MILLISECOND=711,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "java.util.GregorianCalendar[time=1644572330711,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=50,MILLISECOND=711,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "java.util.GregorianCalendar[time=1644572330711,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=50,MILLISECOND=711,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test02920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02920");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean9 = property5.equals((java.lang.Object) dateTimeFieldType8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.hourOfHalfday();
        org.joda.time.Chronology chronology23 = chronology19.withUTC();
        boolean boolean24 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField25 = chronology23.seconds();
        long long29 = chronology23.add(1644572205789L, (-61200000L), 1439);
        org.joda.time.DateTimeField dateTimeField30 = chronology23.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1556505405789L + "'", long29 == 1556505405789L);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test02921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02921");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeField8.getAsText(62L, locale10);
        long long13 = dateTimeField8.remainder((long) 79200000);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "62" + "'", str11, "62");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test02922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02922");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(79200000, (int) (byte) 1, 4);
        java.util.Calendar.Builder builder8 = builder0.setDate(0, 31, 114);
        java.util.Calendar.Builder builder12 = builder0.setDate(11, 200, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder14 = builder12.setInstant(780004L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test02923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02923");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = chronology8.getDateTimeMillis(2022, 516, 1378, 17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 516 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test02924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02924");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        long long16 = dateTimeField14.roundFloor((-9469100436480000L));
        java.lang.String str18 = dateTimeField14.getAsText(1904342666442000L);
        java.lang.Class<?> wildcardClass19 = dateTimeField14.getClass();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-9469100436480000L) + "'", long16 == (-9469100436480000L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test02925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02925");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property13.getLocalTime();
        org.joda.time.DateTimeField dateTimeField16 = property13.getField();
        org.joda.time.DateTimeField dateTimeField17 = property13.getField();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property30 = dateTime29.monthOfYear();
        int int31 = dateTime29.getSecondOfDay();
        org.joda.time.DateTime dateTime33 = dateTime29.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = dateTime33.isSupported(dateTimeFieldType34);
        long long36 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay((java.lang.Object) long36);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 85680 + "'", int31 == 85680);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 62104061484900L + "'", long36 == 62104061484900L);
    }

    @Test
    public void test02926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02926");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((-1), 927, 5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02927");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.getLocalTime();
        org.joda.time.LocalTime localTime18 = property13.addNoWrapToCopy(1200000);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay23 = dateTime20.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.millisOfSecond();
        java.util.Locale locale25 = null;
        int int26 = property24.getMaximumShortTextLength(locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean28 = property24.equals((java.lang.Object) dateTimeFieldType27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property24.getFieldType();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.Chronology chronology38 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.hourOfHalfday();
        org.joda.time.Chronology chronology42 = chronology38.withUTC();
        boolean boolean43 = dateTimeFieldType29.isSupported(chronology42);
        org.joda.time.DurationField durationField44 = chronology42.seconds();
        org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay(chronology42);
        org.joda.time.Chronology chronology46 = chronology42.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) 1200000, chronology42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test02928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02928");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withYearOfCentury(22);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str20 = dateTimeZone18.getShortName((long) 0);
        org.joda.time.DateTime dateTime21 = dateTime16.withZone(dateTimeZone18);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str24 = dateTimeFieldType23.toString();
        boolean boolean25 = localTime22.isSupported(dateTimeFieldType23);
        org.joda.time.DateTime dateTime27 = dateTime6.withField(dateTimeFieldType23, 3);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str40 = dateTimeZone38.getShortName((long) 0);
        org.joda.time.DateTime dateTime41 = dateTime36.withZone(dateTimeZone38);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = dateTime27.toDateTime(dateTimeZone38);
        org.joda.time.DateTime.Property property44 = dateTime27.yearOfCentury();
        org.joda.time.DateTime.Property property45 = dateTime27.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime27.getZone();
        boolean boolean47 = dateTimeZone46.isFixed();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1483228799900L) + "'", long7 == (-1483228799900L));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:00" + "'", str20, "-01:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "monthOfYear" + "'", str24, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-01:00" + "'", str40, "-01:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test02929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02929");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("ISOChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"ISOChronology[UTC]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02930");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime7.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime7.minus(readableDuration26);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime7.getZone();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime7.withPeriodAdded(readablePeriod29, (int) '4');
        boolean boolean33 = dateTime31.isAfter(7200035L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02931");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02932");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime10 = localTime9.toDateTimeToday();
        int int11 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        boolean boolean13 = dateTime3.isEqual((-82799998L));
        org.joda.time.Chronology chronology14 = dateTime3.getChronology();
        org.joda.time.DateTime dateTime16 = dateTime3.minusHours(46);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test02933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02933");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(14);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMillis(9499);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test02934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02934");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str28 = dateTimeZone26.getShortName((long) 0);
        org.joda.time.DateTime dateTime29 = dateTime24.withZone(dateTimeZone26);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str32 = dateTimeFieldType31.toString();
        boolean boolean33 = localTime30.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay38 = dateTime35.toTimeOfDay();
        org.joda.time.LocalTime localTime39 = dateTime35.toLocalTime();
        org.joda.time.Chronology chronology40 = localTime39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.years();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType31.getField(chronology40);
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.now(chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int45 = localTime43.indexOf(dateTimeFieldType44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays(7);
        org.joda.time.DateTime dateTime53 = dateTime49.withYear(1);
        org.joda.time.DateTime dateTime54 = dateTime53.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property55 = dateTime53.hourOfDay();
        org.joda.time.DateTime dateTime56 = property55.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property57 = dateTime56.weekOfWeekyear();
        java.util.Locale locale58 = null;
        int int59 = property57.getMaximumShortTextLength(locale58);
        org.joda.time.DateTime dateTime60 = property57.withMaximumValue();
        org.joda.time.DateTime dateTime61 = dateTime60.withTimeAtStartOfDay();
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        boolean boolean65 = dateTimeZone63.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime66 = dateTime61.withZoneRetainFields(dateTimeZone63);
        org.joda.time.DateTime dateTime67 = localTime43.toDateTimeToday(dateTimeZone63);
        org.joda.time.Chronology chronology68 = chronology11.withZone(dateTimeZone63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay69 = new org.joda.time.TimeOfDay(7, 1869, 2000, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1869 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:00" + "'", str28, "-01:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "monthOfYear" + "'", str32, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
    }

    @Test
    public void test02935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02935");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        boolean boolean10 = property8.isLeap();
        org.joda.time.DateTime dateTime11 = property8.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.plusWeeks(0);
        java.lang.String str14 = dateTime11.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime11.withTime(79680100, 114, (int) ' ', 762);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79680100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0002-01-01T00:00:00.000+00:00:00.014" + "'", str14, "0002-01-01T00:00:00.000+00:00:00.014");
    }

    @Test
    public void test02936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02936");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime10.toLocalTime();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        long long20 = chronology15.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.Chronology chronology22 = dateTimeFormatter21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter21.withPivotYear(86399999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = dateTimeFormatter21.parseLocalDateTime("+00:00:00.014");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test02937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02937");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str20 = dateTimeZone18.getShortName((long) 0);
        org.joda.time.DateTime dateTime21 = dateTime16.withZone(dateTimeZone18);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone18);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone18.getName((long) 712, locale24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = timeOfDay7.toDateTimeToday(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay7.withHourOfDay(0);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay7.minusSeconds((int) 'a');
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plusMinutes(59);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:00" + "'", str20, "-01:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-01:00" + "'", str25, "-01:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
    }

    @Test
    public void test02938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02938");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.DurationField durationField29 = chronology26.months();
        boolean boolean30 = dateTimeFieldType17.isSupported(chronology26);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 100, chronology26);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = chronology26.add(readablePeriod32, (long) 100, 17);
        org.joda.time.DurationField durationField36 = chronology26.months();
        org.joda.time.DurationField durationField37 = chronology26.years();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(chronology26);
        boolean boolean39 = localTime14.isBefore((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.LocalTime.Property property40 = localTime38.minuteOfHour();
        java.util.Locale locale41 = null;
        int int42 = property40.getMaximumTextLength(locale41);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test02939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02939");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2880, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02940");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.DateTime dateTime10 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime10.plusHours(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(chronology22);
        org.joda.time.DurationField durationField24 = chronology22.weeks();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology22.add(readablePeriod25, 1L, 8);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property38 = dateTime36.hourOfDay();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        boolean boolean42 = dateTimeZone40.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime43 = dateTime36.withZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int47 = dateTimeZone45.getStandardOffset((long) (short) 0);
        long long49 = dateTimeZone40.getMillisKeepLocal(dateTimeZone45, (long) 0);
        org.joda.time.Chronology chronology50 = chronology22.withZone(dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime10.toMutableDateTime(chronology22);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(3600009L, chronology22);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) (byte) 100, chronology22);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime57.minusDays(7);
        org.joda.time.DateTime dateTime61 = dateTime57.withYear(1);
        org.joda.time.DateTime dateTime62 = dateTime61.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime63 = dateTime62.toDateTimeISO();
        int int64 = dateTime63.getEra();
        org.joda.time.DateTime.Property property65 = dateTime63.weekyear();
        org.joda.time.DateTime.Property property66 = dateTime63.yearOfCentury();
        org.joda.time.DateTime dateTime68 = property66.addToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime70 = property66.addWrapFieldToCopy((int) (short) 100);
        int int71 = property66.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property66.getFieldType();
        boolean boolean73 = localTime53.isSupported(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3600000) + "'", int47 == (-3600000));
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test02941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02941");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        java.lang.String str7 = property5.getAsShortText(locale6);
        org.joda.time.TimeOfDay timeOfDay9 = property5.addNoWrapToCopy(7);
        java.util.Locale locale10 = null;
        int int11 = property5.getMaximumTextLength(locale10);
        int int12 = property5.get();
        java.lang.String str13 = property5.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[millisOfSecond]" + "'", str13, "Property[millisOfSecond]");
    }

    @Test
    public void test02942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02942");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        long long11 = dateTimeField9.roundFloor((long) 3);
        int int13 = dateTimeField9.getMaximumValue((long) (-3600000));
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeField9.getAsText((long) (short) 0, locale15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay21 = dateTime18.toTimeOfDay();
        org.joda.time.LocalTime localTime22 = dateTime18.toLocalTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes((int) (short) 100);
        java.lang.String str35 = dateTime34.toString();
        int int36 = dateTime34.getSecondOfMinute();
        boolean boolean37 = dateTime18.equals((java.lang.Object) dateTime34);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((java.lang.Object) dateTime34);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalTime localTime40 = localTime38.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay45 = dateTime42.toTimeOfDay();
        org.joda.time.LocalTime localTime46 = dateTime42.toLocalTime();
        int int47 = localTime46.getMillisOfSecond();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay52 = dateTime49.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property53 = timeOfDay52.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay52.withPeriodAdded(readablePeriod54, (int) '4');
        boolean boolean57 = localTime46.equals((java.lang.Object) timeOfDay56);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime61.minusDays(7);
        org.joda.time.DateTime dateTime65 = dateTime61.withYear(1);
        org.joda.time.Chronology chronology66 = dateTime61.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        long long71 = chronology66.add(readablePeriod68, 9L, 5);
        org.joda.time.TimeOfDay timeOfDay72 = timeOfDay56.withChronologyRetainFields(chronology66);
        boolean boolean73 = localTime40.isAfter((org.joda.time.ReadablePartial) timeOfDay56);
        java.util.Locale locale75 = null;
        java.lang.String str76 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime40, 3, locale75);
        org.joda.time.DurationField durationField77 = dateTimeField9.getRangeDurationField();
        int int80 = dateTimeField9.getDifference(3600214L, 480100L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-82800000L) + "'", long11 == (-82800000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "31" + "'", str16, "31");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str35, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(localTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 9L + "'", long71 == 9L);
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "3" + "'", str76, "3");
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test02943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02943");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        java.lang.String str21 = timeOfDay20.toString();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plus(readablePeriod22);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property26 = timeOfDay25.secondOfMinute();
        boolean boolean27 = timeOfDay20.isBefore((org.joda.time.ReadablePartial) timeOfDay25);
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = timeOfDay20.toString("0002-01-04T09:38:01.861+00:00:00.244", locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "T01:00:00.100" + "'", str21, "T01:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test02944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02944");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        boolean boolean2 = calendar0.isWeekDateSupported();
        calendar0.set((int) ' ', 86399999, 292278993, 16, (-738188));
        int int9 = calendar0.getWeeksInWeekYear();
        calendar0.add(4, (-738188));
        // The following exception was thrown during execution in test generation
        try {
            int int14 = calendar0.getMaximum(115);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 115");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=251959964345520000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7986263,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=156,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=52,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
    }

    @Test
    public void test02945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02945");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay7 = property5.withMaximumValue();
        java.util.Locale locale8 = null;
        int int9 = property5.getMaximumShortTextLength(locale8);
        java.util.Locale locale10 = null;
        int int11 = property5.getMaximumShortTextLength(locale10);
        org.joda.time.TimeOfDay timeOfDay12 = property5.getTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withHourOfDay(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test02946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02946");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int4 = dateTimeZone2.getStandardOffset((long) (short) 0);
        long long7 = dateTimeZone2.convertLocalToUTC(480100L, false);
        java.lang.String str9 = dateTimeZone2.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property20 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str25 = dateTimeZone23.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime21.toMutableDateTime(dateTimeZone23);
        long long28 = dateTimeZone2.getMillisKeepLocal(dateTimeZone23, 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) 31081121, dateTimeZone23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3600000) + "'", int4 == (-3600000));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4080100L + "'", long7 == 4080100L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-01:00" + "'", str25, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test02947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02947");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfDay();
        long long40 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime38.minus((long) 1970);
        org.joda.time.DateTime dateTime45 = dateTime43.withMillisOfDay(79200);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays(7);
        org.joda.time.DateTime dateTime53 = dateTime49.withYear(1);
        org.joda.time.DateTime dateTime54 = dateTime53.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime55 = dateTime54.toDateTimeISO();
        org.joda.time.DateTime dateTime57 = dateTime55.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property58 = dateTime57.monthOfYear();
        int int59 = dateTime57.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str63 = dateTimeZone61.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime57.toMutableDateTime(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(15, (int) (short) 1);
        int int69 = dateTimeZone67.getOffset(0L);
        boolean boolean70 = dateTimeZone61.equals((java.lang.Object) int69);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime72 = dateTime43.toDateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime74 = dateTime72.plusMillis(1428);
        org.joda.time.DateTime dateTime76 = dateTime72.minusMillis(79680);
        int int77 = dateTime76.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 85680 + "'", int59 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-01:00" + "'", str63, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 54060000 + "'", int69 == 54060000);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 6 + "'", int77 == 6);
    }

    @Test
    public void test02948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02948");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(0, (int) (short) 10, 17);
        java.util.Calendar.Builder builder9 = builder5.setTimeOfDay((-3600000), (int) (byte) 10, 10);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(chronology18);
        org.joda.time.DurationField durationField20 = chronology18.weeks();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime24 = dateTime21.withField(dateTimeFieldType22, 17);
        org.joda.time.DateTime.Property property25 = dateTime21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        java.lang.String str28 = dateTimeField26.getAsText((long) 14);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str41 = dateTimeZone39.getShortName((long) 0);
        org.joda.time.DateTime dateTime42 = dateTime37.withZone(dateTimeZone39);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(dateTimeZone39);
        org.joda.time.LocalTime localTime45 = localTime43.minusSeconds(2);
        org.joda.time.LocalTime localTime47 = localTime43.plusMinutes((-292275054));
        org.joda.time.LocalTime localTime49 = localTime47.withSecondOfMinute(15);
        int[] intArray52 = new int[] { 17661728, (short) 100 };
        int int53 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localTime47, intArray52);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder54 = builder5.setFields(intArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1969" + "'", str28, "1969");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-01:00" + "'", str41, "-01:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[17661728, 100]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test02949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02949");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(292278993);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear((int) (short) 0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay12 = dateTime9.toTimeOfDay();
        java.util.Date date13 = dateTime9.toDate();
        long long14 = date13.getTime();
        int int15 = date13.getDate();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromDateFields(date13);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromDateFields(date13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = dateTimeFormatter7.print((org.joda.time.ReadablePartial) localTime17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test02950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02950");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = dateTimeField11.getRangeDurationField();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.minuteOfDay();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology22);
        org.joda.time.LocalTime.Property property26 = localTime25.millisOfSecond();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property36 = dateTime34.hourOfDay();
        org.joda.time.DateTime dateTime37 = property36.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfYear(8);
        org.joda.time.DateTime dateTime41 = dateTime39.withMillis((long) 10);
        long long42 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalTime localTime43 = property26.withMinimumValue();
        int[] intArray44 = localTime43.getValues();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays(7);
        org.joda.time.DateTime dateTime53 = dateTime49.withYear(1);
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.minuteOfDay();
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology54);
        java.lang.String str58 = localTime57.toString();
        org.joda.time.Chronology chronology59 = localTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone61 = chronology59.getZone();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay66 = dateTime63.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property67 = timeOfDay66.millisOfSecond();
        java.util.Locale locale68 = null;
        int int69 = property67.getMaximumShortTextLength(locale68);
        int int70 = property67.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField71 = property67.getField();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime75 = dateTime73.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay76 = dateTime73.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property77 = timeOfDay76.millisOfSecond();
        int int78 = property77.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay80 = property77.addToCopy(100);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime84 = dateTime82.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay85 = dateTime82.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property86 = timeOfDay85.millisOfSecond();
        boolean boolean87 = timeOfDay80.isEqual((org.joda.time.ReadablePartial) timeOfDay85);
        int int88 = timeOfDay85.size();
        java.util.Locale locale90 = null;
        java.lang.String str91 = dateTimeField71.getAsText((org.joda.time.ReadablePartial) timeOfDay85, 14, locale90);
        org.joda.time.TimeOfDay timeOfDay93 = timeOfDay85.plusMillis(16);
        int[] intArray95 = chronology59.get((org.joda.time.ReadablePartial) timeOfDay93, (long) 23);
        int int96 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localTime43, intArray95);
        java.util.Locale locale98 = null;
        java.lang.String str99 = dateTimeField11.getAsText(980581260000L, locale98);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 62134912800000L + "'", long42 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "01:00:00.000" + "'", str58, "01:00:00.000");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(timeOfDay80);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(timeOfDay85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "14" + "'", str91, "14");
        org.junit.Assert.assertNotNull(timeOfDay93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 0, 0, 23]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 59 + "'", int96 == 59);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "41" + "'", str99, "41");
    }

    @Test
    public void test02951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02951");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField12 = dateTimeField11.getDurationField();
        long long15 = dateTimeField11.addWrapField((long) '4', 712);
        java.lang.String str16 = dateTimeField11.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-43679948L) + "'", long15 == (-43679948L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "minuteOfDay" + "'", str16, "minuteOfDay");
    }

    @Test
    public void test02952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02952");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        java.lang.String str30 = property29.getName();
        boolean boolean31 = property29.isLeap();
        org.joda.time.DateTime dateTime32 = property29.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime34 = dateTime32.plusWeeks(0);
        org.joda.time.DateTime dateTime35 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths(85680);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTime37.toString("100", locale39);
        org.joda.time.DateTime dateTime42 = dateTime37.minusDays(2922789);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = dateTime37.withHourOfDay(34620000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34620000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "yearOfEra" + "'", str30, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100" + "'", str40, "100");
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test02953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02953");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay10 = dateTime7.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property11 = timeOfDay10.millisOfSecond();
        int int12 = property11.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay14 = property11.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusMinutes((int) (byte) 10);
        boolean boolean17 = date5.equals((java.lang.Object) (byte) 10);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02954");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale5);
        int int7 = dateTimeFormatter6.getDefaultYear();
        java.lang.StringBuffer stringBuffer8 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        java.lang.String str18 = property17.getName();
        org.joda.time.DateTime dateTime20 = property17.addToCopy(10L);
        org.joda.time.DurationField durationField21 = property17.getRangeDurationField();
        java.util.Locale locale23 = null;
        org.joda.time.DateTime dateTime24 = property17.setCopy("999", locale23);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(stringBuffer8, (org.joda.time.ReadableInstant) dateTime24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "yearOfEra" + "'", str18, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test02955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02955");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        int int13 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime11.plus(readableDuration17);
        boolean boolean19 = dateTime11.isEqualNow();
        org.joda.time.DateTime dateTime21 = dateTime11.withMillisOfDay(9);
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = null;
        org.joda.time.format.DateTimeParser dateTimeParser23 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter22, dateTimeParser23);
        boolean boolean25 = dateTimeFormatter24.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser26 = dateTimeFormatter24.getParser();
        java.util.Locale locale27 = dateTimeFormatter24.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter24.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser30 = dateTimeFormatter29.getParser();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay35 = dateTime32.toTimeOfDay();
        org.joda.time.LocalTime localTime36 = dateTime32.toLocalTime();
        org.joda.time.Chronology chronology37 = localTime36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.hours();
        long long42 = chronology37.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter29.withChronology(chronology37);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime21.toMutableDateTime(chronology37);
        org.joda.time.DateTime dateTime46 = dateTime21.plus((long) 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(dateTimeParser26);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(dateTimeParser30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test02956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02956");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        calendar1.setFirstDayOfWeek(13);
        int int4 = calendar1.getWeeksInWeekYear();
        boolean boolean5 = calendar1.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            calendar1.set(937, 122);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 937");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=13,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test02957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02957");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean17 = dateTime11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTime.Property property18 = dateTime11.secondOfMinute();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property31 = dateTime30.monthOfYear();
        int int32 = dateTime30.getSecondOfDay();
        org.joda.time.DateTime dateTime34 = dateTime30.plusSeconds((int) '#');
        org.joda.time.DateTime dateTime35 = dateTime34.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfDay();
        long long37 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime34);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 85680 + "'", int32 == 85680);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-35L) + "'", long37 == (-35L));
    }

    @Test
    public void test02958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02958");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField12.getType();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
    }

    @Test
    public void test02959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02959");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        int int7 = date5.getHours();
        date5.setSeconds((int) (short) 0);
        int int10 = date5.getYear();
        date5.setHours(2000);
        date5.setTime((-288675054L));
        int int15 = date5.getYear();
        date5.setMonth(712);
        date5.setYear(18);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue May 28 15:48:44 UTC 1918");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 70 + "'", int10 == 70);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 69 + "'", int15 == 69);
    }

    @Test
    public void test02960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02960");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        long long11 = property9.remainder();
        org.joda.time.Interval interval12 = property9.toInterval();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property9.getAsText(locale13);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyearOfCentury();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime27 = localTime25.withSecondOfMinute(1);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localTime27, 14, locale29);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = localTime27.getFields();
        int int32 = localTime27.size();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.DateTime dateTime41 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime42 = dateTime41.toDateTimeISO();
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property45 = dateTime44.monthOfYear();
        int int46 = dateTime44.getSecondOfDay();
        org.joda.time.DateTime dateTime48 = dateTime44.withMillisOfDay(70);
        org.joda.time.DateTime dateTime49 = localTime27.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = dateTime49.withWeekyear((int) (short) 0);
        long long52 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime51);
        int int53 = property9.getMinimumValue();
        java.lang.String str54 = property9.getAsString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 480100L + "'", long11 == 480100L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "22" + "'", str14, "22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "14" + "'", str30, "14");
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 85680 + "'", int46 == 85680);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 17485L + "'", long52 == 17485L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "22" + "'", str54, "22");
    }

    @Test
    public void test02961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02961");
        java.util.Date date1 = new java.util.Date(3600009L);
        java.util.Date date3 = new java.util.Date((-82799998L));
        int int4 = date3.getHours();
        boolean boolean5 = date1.after(date3);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 01:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 01:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test02962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02962");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale5);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        java.lang.String str18 = property17.getName();
        boolean boolean19 = property17.isLeap();
        org.joda.time.DateTime dateTime20 = property17.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime22 = dateTime20.minus((long) 12);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis(70);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter6.withChronology(chronology25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime28 = dateTimeFormatter26.parseMutableDateTime("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "yearOfEra" + "'", str18, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test02963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02963");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property13.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test02964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02964");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField12.getAsText(54060000, locale14);
        long long17 = dateTimeField12.roundFloor((-31532400000L));
        long long20 = dateTimeField12.set((long) 32769, 13);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "54060000" + "'", str15, "54060000");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-31532400000L) + "'", long17 == (-31532400000L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-82786231L) + "'", long20 == (-82786231L));
    }

    @Test
    public void test02965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02965");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.Chronology chronology13 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withChronology(chronology13);
        java.lang.Integer int17 = dateTimeFormatter2.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime19 = dateTimeFormatter2.parseMutableDateTime("Sat Jan 10 00:00:00 UTC 1970");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test02966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02966");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime7.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime7.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths(2000);
        int int30 = dateTime29.getDayOfYear();
        int int31 = dateTime29.getDayOfMonth();
        org.joda.time.Instant instant32 = dateTime29.toInstant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 244 + "'", int30 == 244);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
        org.junit.Assert.assertNotNull(instant32);
    }

    @Test
    public void test02967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02967");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalTime localTime5 = localTime2.withFieldAdded(durationFieldType3, (int) (byte) 0);
        int int6 = localTime5.getHourOfDay();
        int int7 = localTime5.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField9 = localTime5.getField(712);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 712");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test02968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02968");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        boolean boolean14 = dateTimeZone12.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology15 = chronology10.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(366, 762, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test02969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02969");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime13.getEra();
        org.joda.time.LocalTime localTime24 = dateTime13.toLocalTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime27 = localTime24.withPeriodAdded(readablePeriod25, 9);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property37 = dateTime35.hourOfDay();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(7);
        org.joda.time.DateTime dateTime45 = dateTime41.withYear(1);
        org.joda.time.Chronology chronology46 = dateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekyearOfCentury();
        boolean boolean48 = property37.equals((java.lang.Object) dateTimeField47);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay53 = dateTime50.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property54 = timeOfDay53.millisOfSecond();
        int int55 = property54.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay57 = property54.addToCopy(100);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay62 = dateTime59.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property63 = timeOfDay62.millisOfSecond();
        boolean boolean64 = timeOfDay57.isEqual((org.joda.time.ReadablePartial) timeOfDay62);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay57.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay68 = timeOfDay66.withMillisOfSecond((int) '#');
        int int69 = dateTimeField47.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay68);
        int int70 = timeOfDay68.size();
        int int71 = localTime27.compareTo((org.joda.time.ReadablePartial) timeOfDay68);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
    }

    @Test
    public void test02970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02970");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfYear();
        java.lang.String str14 = dateTimeField13.getName();
        long long17 = dateTimeField13.add((-62133180719900L), 59);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "dayOfYear" + "'", str14, "dayOfYear");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-62128083119900L) + "'", long17 == (-62128083119900L));
    }

    @Test
    public void test02971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02971");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime13.getEra();
        org.joda.time.LocalTime localTime24 = dateTime13.toLocalTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime27 = localTime24.withPeriodAdded(readablePeriod25, 9);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.Chronology chronology39 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.minuteOfDay();
        org.joda.time.DurationField durationField42 = chronology39.months();
        boolean boolean43 = dateTimeFieldType30.isSupported(chronology39);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (byte) 100, chronology39);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        long long48 = chronology39.add(readablePeriod45, (long) 100, 17);
        org.joda.time.DurationField durationField49 = chronology39.months();
        org.joda.time.DurationField durationField50 = chronology39.years();
        org.joda.time.DateTimeField dateTimeField51 = chronology39.weekyear();
        org.joda.time.DurationField durationField52 = chronology39.weeks();
        org.joda.time.DateTimeField dateTimeField53 = chronology39.halfdayOfDay();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(0L, chronology39);
        int int55 = localTime24.compareTo((org.joda.time.ReadablePartial) localTime54);
        org.joda.time.DateTime dateTime56 = localTime24.toDateTimeToday();
        org.joda.time.Chronology chronology57 = localTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        long long60 = dateTimeField58.roundFloor((-169200000L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L + "'", long48 == 100L);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-31536000000L) + "'", long60 == (-31536000000L));
    }

    @Test
    public void test02972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02972");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime14 = dateTime11.withField(dateTimeFieldType12, 17);
        org.joda.time.DateTime.Property property15 = dateTime11.yearOfEra();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property15.getAsText(locale16);
        org.joda.time.DurationField durationField18 = property15.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertNull(durationField18);
    }

    @Test
    public void test02973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02973");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withLocale(locale8);
        java.lang.StringBuffer stringBuffer10 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(7);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(1);
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(chronology21);
        org.joda.time.DurationField durationField23 = chronology21.weeks();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = chronology21.add(readablePeriod24, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay28 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology21);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((-82799998L), chronology21);
        org.joda.time.LocalTime.Property property30 = localTime29.hourOfDay();
        org.joda.time.LocalTime localTime32 = property30.addCopy(0L);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int36 = dateTimeZone34.getStandardOffset((long) (short) 0);
        long long39 = dateTimeZone34.convertLocalToUTC(480100L, false);
        org.joda.time.DateTime dateTime40 = localTime32.toDateTimeToday(dateTimeZone34);
        org.joda.time.Instant instant41 = dateTime40.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(stringBuffer10, (org.joda.time.ReadableInstant) instant41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3600000) + "'", int36 == (-3600000));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4080100L + "'", long39 == 4080100L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant41);
    }

    @Test
    public void test02974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02974");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date5);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = timeOfDay7.getValue(17661728);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17661728");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(timeOfDay7);
    }

    @Test
    public void test02975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02975");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        calendar0.clear((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.setWeekDate((-738188), 79200000, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=?,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=38,SECOND=53,MILLISECOND=596,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test02976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02976");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int19 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withPivotYear((int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.Chronology chronology31 = dateTime26.getChronology();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        boolean boolean35 = dateTimeZone33.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology36 = chronology31.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField37 = chronology31.dayOfYear();
        org.joda.time.DurationField durationField38 = chronology31.millis();
        org.joda.time.DateTimeField dateTimeField39 = chronology31.millisOfDay();
        long long43 = chronology31.add(1644572216639L, 31525459285680L, 3);
        org.joda.time.DurationField durationField44 = chronology31.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) dateTimeFormatter2, chronology31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.format.DateTimeFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 96220950073679L + "'", long43 == 96220950073679L);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test02977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02977");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.Instant instant6 = dateTime5.toInstant();
        long long7 = dateTime5.getMillis();
        int int8 = dateTime5.getEra();
        int int9 = dateTime5.getYearOfCentury();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = dateTime11.toCalendar(locale16);
        calendar17.setLenient(false);
        java.util.TimeZone timeZone20 = calendar17.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTime dateTime23 = dateTime5.toDateTime(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-607919900L) + "'", long7 == (-607919900L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 69 + "'", int9 == 69);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test02978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02978");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property30 = dateTime29.monthOfYear();
        org.joda.time.DateTime dateTime32 = property30.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime33 = property30.getDateTime();
        org.joda.time.DateTime dateTime34 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property35 = dateTime33.dayOfYear();
        org.joda.time.DateTime dateTime36 = property35.roundCeilingCopy();
        org.joda.time.TimeOfDay timeOfDay37 = dateTime36.toTimeOfDay();
        java.lang.String str38 = dateTime36.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0002-01-01T00:00:00.000-01:00" + "'", str38, "0002-01-01T00:00:00.000-01:00");
    }

    @Test
    public void test02979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02979");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter6.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = dateTimeFormatter6.parseLocalTime("3");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeZone7);
    }

    @Test
    public void test02980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02980");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(8);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 10);
        org.joda.time.DateTime dateTime17 = dateTime12.withDurationAdded((long) 16, 5);
        org.joda.time.DateTime dateTime19 = dateTime12.minus((long) 12);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test02981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02981");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        int int21 = timeOfDay20.getSecondOfMinute();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.millisOfSecond();
        int int28 = property27.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay30 = property27.addToCopy(100);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay35 = dateTime32.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property36 = timeOfDay35.millisOfSecond();
        boolean boolean37 = timeOfDay30.isEqual((org.joda.time.ReadablePartial) timeOfDay35);
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay30.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay39.minusMillis(100);
        boolean boolean42 = timeOfDay20.isAfter((org.joda.time.ReadablePartial) timeOfDay39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int46 = dateTimeZone44.getStandardOffset((long) (short) 0);
        long long49 = dateTimeZone44.convertLocalToUTC(480100L, false);
        java.lang.String str51 = dateTimeZone44.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay20, dateTimeZone44);
        java.lang.String str54 = dateTimeZone44.getID();
        org.joda.time.ReadableInstant readableInstant55 = null;
        int int56 = dateTimeZone44.getOffset(readableInstant55);
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.now(dateTimeZone44);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localTime57.toDateTime(readableInstant58);
        int int60 = dateTime59.getEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3600000) + "'", int46 == (-3600000));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 4080100L + "'", long49 == 4080100L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-01:00" + "'", str51, "-01:00");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-01:00" + "'", str54, "-01:00");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3600000) + "'", int56 == (-3600000));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test02982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02982");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.withMinimumValue();
        org.joda.time.LocalTime localTime32 = localTime30.withMinuteOfHour(11);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay37 = dateTime34.toTimeOfDay();
        org.joda.time.LocalTime localTime38 = dateTime34.toLocalTime();
        org.joda.time.Chronology chronology39 = localTime38.getChronology();
        int int40 = localTime30.compareTo((org.joda.time.ReadablePartial) localTime38);
        int int41 = localTime38.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 82800100 + "'", int41 == 82800100);
    }

    @Test
    public void test02983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02983");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.Chronology chronology15 = dateTime10.getChronology();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        boolean boolean19 = dateTimeZone17.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology20 = chronology15.withZone(dateTimeZone17);
        org.joda.time.DurationField durationField21 = chronology20.minutes();
        org.joda.time.Chronology chronology22 = chronology20.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(82800100, 82800, 0, 358, 80, 1378, 115, chronology20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 358 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test02984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02984");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.DurationField durationField13 = chronology9.years();
        org.joda.time.DurationField durationField14 = chronology9.centuries();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test02985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02985");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str17 = dateTimeZone15.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime11.toMutableDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime20 = dateTime11.plusDays(100);
        org.joda.time.DateTime dateTime22 = dateTime20.withMillisOfSecond(100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = dateTime22.toString("seconds");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:00" + "'", str17, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test02986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02986");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        int int13 = dateTime12.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 79680100 + "'", int13 == 79680100);
    }

    @Test
    public void test02987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02987");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.DateTime dateTime32 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str36 = dateTimeZone34.getShortName((long) 0);
        org.joda.time.DateTime dateTime37 = dateTime32.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(7);
        org.joda.time.DateTime dateTime45 = dateTime41.withYear(1);
        boolean boolean46 = dateTime37.isBefore((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean47 = dateTime45.isEqualNow();
        org.joda.time.DateTime dateTime49 = dateTime45.minusSeconds(22);
        boolean boolean50 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime.Property property51 = dateTime45.dayOfYear();
        org.joda.time.DateTime dateTime53 = dateTime45.withYear(23);
        org.joda.time.DateTime dateTime55 = dateTime45.minusSeconds(675);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-01:00" + "'", str36, "-01:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test02988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02988");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        java.time.Instant instant6 = date5.toInstant();
        int int7 = date5.getHours();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay12 = dateTime9.toTimeOfDay();
        java.util.Date date13 = dateTime9.toDate();
        long long14 = date13.getTime();
        int int15 = date13.getHours();
        date13.setSeconds((int) (short) 0);
        boolean boolean18 = date5.before(date13);
        int int19 = date5.getSeconds();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test02989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02989");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime.Property property22 = dateTime17.centuryOfEra();
        org.joda.time.Chronology chronology23 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.minuteOfHour();
        java.lang.String str25 = dateTimeField24.getName();
        java.util.Locale locale26 = null;
        int int27 = dateTimeField24.getMaximumShortTextLength(locale26);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "minuteOfHour" + "'", str25, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test02990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02990");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear(8);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(3600000, 675, 3599990, chronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3600000 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test02991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02991");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        int int10 = property9.get();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property20 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property22 = dateTime21.weekOfWeekyear();
        java.util.Locale locale23 = null;
        int int24 = property22.getMaximumShortTextLength(locale23);
        org.joda.time.DateTime dateTime25 = property22.withMaximumValue();
        org.joda.time.DateTime dateTime26 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime27 = dateTime25.withEarlierOffsetAtOverlap();
        boolean boolean28 = property9.equals((java.lang.Object) dateTime25);
        boolean boolean29 = property9.isLeap();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test02992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02992");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTime dateTime11 = dateTime8.minusMinutes(17);
        org.joda.time.DateTime dateTime15 = dateTime8.withDate((int) (short) 0, 10, 22);
        org.joda.time.DateTime dateTime17 = dateTime15.withMillis(0L);
        org.joda.time.DateTime.Property property18 = dateTime15.minuteOfDay();
        org.joda.time.DateTime dateTime19 = property18.roundHalfFloorCopy();
        boolean boolean20 = property18.isLeap();
        org.joda.time.DateTime dateTime21 = property18.getDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test02993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02993");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight9 = dateTime7.toDateMidnight();
        org.joda.time.DateTime dateTime11 = dateTime7.withWeekOfWeekyear(10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withPeriodAdded(readablePeriod12, 122);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(chronology23);
        org.joda.time.DurationField durationField25 = chronology23.weeks();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = chronology23.add(readablePeriod26, 1L, 8);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(chronology23);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(chronology23);
        org.joda.time.DurationField durationField32 = chronology23.hours();
        org.joda.time.DateTime dateTime33 = dateTime14.toDateTime(chronology23);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test02994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02994");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.weekyear();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.minuteOfDay();
        boolean boolean26 = durationFieldType14.isSupported(chronology23);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 3, chronology23);
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology23);
        org.joda.time.LocalTime localTime30 = localTime28.plusMinutes((-292275054));
        org.joda.time.LocalTime localTime32 = localTime28.plusMinutes(0);
        java.util.Locale locale33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localTime28, locale33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
    }

    @Test
    public void test02995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02995");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property13.withMinimumValue();
        org.joda.time.LocalTime localTime17 = localTime15.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime19 = localTime15.plusMillis(30961509);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.DateTime dateTime28 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property29 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime30 = property29.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfYear(8);
        org.joda.time.Chronology chronology33 = dateTime30.getChronology();
        long long34 = dateTime30.getMillis();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str38 = dateTimeZone36.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone36.getName((-1L), locale41);
        long long45 = dateTimeZone36.adjustOffset((long) (short) 10, true);
        org.joda.time.DateTime dateTime46 = dateTime30.toDateTime(dateTimeZone36);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        boolean boolean49 = dateTime30.isSupported(dateTimeFieldType47);
        int int50 = localTime19.get(dateTimeFieldType47);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay55 = dateTime52.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property56 = timeOfDay55.millisOfSecond();
        int int57 = property56.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay59 = property56.addToCopy(100);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime63 = dateTime61.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay64 = dateTime61.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property65 = timeOfDay64.millisOfSecond();
        boolean boolean66 = timeOfDay59.isEqual((org.joda.time.ReadablePartial) timeOfDay64);
        org.joda.time.TimeOfDay timeOfDay68 = timeOfDay59.withMinuteOfHour((int) '#');
        java.lang.String str69 = timeOfDay68.toString();
        org.joda.time.TimeOfDay timeOfDay71 = timeOfDay68.plusHours(2);
        org.joda.time.TimeOfDay timeOfDay73 = timeOfDay71.plusHours(9);
        org.joda.time.LocalTime localTime74 = timeOfDay71.toLocalTime();
        org.joda.time.LocalTime localTime75 = localTime19.withFields((org.joda.time.ReadablePartial) timeOfDay71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay77 = timeOfDay71.withHourOfDay(457);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 457 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-62104064400000L) + "'", long34 == (-62104064400000L));
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-01:00" + "'", str38, "-01:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "T23:35:00.200" + "'", str69, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(localTime75);
    }

    @Test
    public void test02996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02996");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter7.getPrinter();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getRangeDurationType();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekyearOfCentury();
        long long23 = dateTimeField21.roundHalfEven(480100L);
        boolean boolean25 = dateTimeField21.isLeap((-82800000L));
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay30 = dateTime27.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property31 = timeOfDay30.millisOfSecond();
        int int32 = property31.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay34 = property31.addToCopy(100);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay39 = dateTime36.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property40 = timeOfDay39.millisOfSecond();
        boolean boolean41 = timeOfDay34.isEqual((org.joda.time.ReadablePartial) timeOfDay39);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay39.withSecondOfMinute(12);
        int int44 = dateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay43);
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay43.withMinuteOfHour(15);
        org.joda.time.Chronology chronology47 = timeOfDay46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.weekyears();
        org.joda.time.DurationField durationField49 = durationFieldType11.getField(chronology47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter7.withChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField51 = chronology47.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long56 = chronology47.getDateTimeMillis(31, 75, 56, 518);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 75 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3600000L + "'", long23 == 3600000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test02997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02997");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter15.withChronology(chronology26);
        boolean boolean30 = durationFieldType12.isSupported(chronology26);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) dateTime10, chronology26);
        org.joda.time.DateTimeField dateTimeField32 = chronology26.era();
        // The following exception was thrown during execution in test generation
        try {
            long long38 = chronology26.getDateTimeMillis(62104088281801L, 516, 518, 86399, 32770);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 516 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test02998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02998");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        java.time.Instant instant6 = date5.toInstant();
        int int7 = date5.getHours();
        date5.setDate((int) (byte) 10);
        java.lang.String str10 = date5.toLocaleString();
        java.lang.String str11 = date5.toLocaleString();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.plusMinutes(0);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay13.withSecondOfMinute(17);
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.minuteOfHour();
        java.lang.String str20 = timeOfDay18.toString();
        int int21 = timeOfDay18.getMinuteOfHour();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.millisOfSecond();
        int int28 = property27.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay30 = property27.addToCopy(100);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay35 = dateTime32.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property36 = timeOfDay35.millisOfSecond();
        boolean boolean37 = timeOfDay30.isEqual((org.joda.time.ReadablePartial) timeOfDay35);
        int int38 = timeOfDay35.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = timeOfDay35.getFieldTypes();
        org.joda.time.TimeOfDay.Property property40 = timeOfDay35.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay35.plus(readablePeriod41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay35.minus(readablePeriod43);
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay35.plusHours(70);
        java.lang.String str47 = timeOfDay35.toString();
        int int48 = timeOfDay18.compareTo((org.joda.time.ReadablePartial) timeOfDay35);
        boolean boolean49 = date5.equals((java.lang.Object) timeOfDay18);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Jan 10 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Jan 10, 1970 12:00:00 AM" + "'", str10, "Jan 10, 1970 12:00:00 AM");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan 10, 1970 12:00:00 AM" + "'", str11, "Jan 10, 1970 12:00:00 AM");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "T00:00:17.254" + "'", str20, "T00:00:17.254");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "T00:00:00.344" + "'", str47, "T00:00:00.344");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02999");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTime dateTime43 = dateTime38.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime28.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime28.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime28.minus(readableDuration47);
        int int49 = property18.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DurationField durationField50 = property18.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay51 = property18.withMinimumValue();
        java.util.Locale locale52 = null;
        java.lang.String str53 = property18.getAsShortText(locale52);
        java.lang.String str54 = property18.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay56 = property18.setCopy("08:36:01.912");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"08:36:01.912\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(timeOfDay51);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0" + "'", str53, "0");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hourOfDay" + "'", str54, "hourOfDay");
    }

    @Test
    public void test03000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test03000");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Calendar.Builder builder7 = builder2.setDate(516, 2322845, 937);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder7);
    }
}

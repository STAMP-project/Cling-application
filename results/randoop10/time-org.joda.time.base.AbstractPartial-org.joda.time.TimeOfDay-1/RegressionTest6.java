import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test03001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03001");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minusMillis(100);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.plusHours((int) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.plusHours(16);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.withHourOfDay(0);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        calendar26.clear();
        java.util.Date date28 = calendar26.getTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay33 = dateTime30.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        int int35 = property34.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay37 = property34.addToCopy(100);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay42 = dateTime39.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property43 = timeOfDay42.millisOfSecond();
        boolean boolean44 = timeOfDay37.isEqual((org.joda.time.ReadablePartial) timeOfDay42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology46);
        boolean boolean48 = timeOfDay42.isBefore((org.joda.time.ReadablePartial) localTime47);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay42.withFieldAdded(durationFieldType49, 2);
        boolean boolean52 = calendar26.before((java.lang.Object) durationFieldType49);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime56.minusDays(7);
        org.joda.time.DateTime dateTime60 = dateTime56.withYear(1);
        org.joda.time.Chronology chronology61 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.secondOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology61.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology68 = chronology61.withZone(dateTimeZone67);
        org.joda.time.DurationField durationField69 = chronology68.hours();
        org.joda.time.DurationField durationField70 = durationFieldType49.getField(chronology68);
        org.joda.time.DateTimeField dateTimeField71 = chronology68.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField72 = chronology68.dayOfYear();
        org.joda.time.DurationField durationField73 = chronology68.years();
        boolean boolean74 = timeOfDay23.equals((java.lang.Object) durationField73);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test03002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03002");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withLocale(locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withDefaultYear(31021256);
        org.joda.time.Chronology chronology12 = dateTimeFormatter11.getChronology();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(7);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(1);
        org.joda.time.DateTime dateTime21 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property22 = dateTime20.hourOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        boolean boolean26 = dateTimeZone24.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime27 = dateTime20.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTime();
        org.joda.time.LocalTime localTime29 = dateTime27.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = dateTimeFormatter11.print((org.joda.time.ReadableInstant) dateTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
    }

    @Test
    public void test03003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03003");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.weekOfWeekyear();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(3600035L, chronology9);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfCentury(59);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes((int) (short) 100);
        java.lang.String str31 = dateTime30.toString();
        int int32 = dateTime30.getSecondOfMinute();
        org.joda.time.DateTime dateTime34 = dateTime30.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime35 = dateTime30.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime30.plus(readableDuration36);
        org.joda.time.DateTime dateTime39 = dateTime30.minus((long) 1);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime43.minusDays(7);
        org.joda.time.DateTime dateTime47 = dateTime43.withYear(1);
        org.joda.time.DateTime dateTime48 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight49 = dateTime48.toDateMidnight();
        int int50 = dateMidnight49.getSecondOfDay();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime54.minusDays(7);
        org.joda.time.DateTime dateTime58 = dateTime54.withYear(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime63 = dateTime61.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime63.minusDays(7);
        org.joda.time.DateTime dateTime67 = dateTime63.withYear(1);
        org.joda.time.Chronology chronology68 = dateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.minuteOfDay();
        org.joda.time.DurationField durationField71 = chronology68.months();
        boolean boolean72 = dateTimeFieldType59.isSupported(chronology68);
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType59.getDurationType();
        boolean boolean74 = dateTime58.isSupported(dateTimeFieldType59);
        boolean boolean75 = dateMidnight49.isSupported(dateTimeFieldType59);
        int int76 = dateTime39.get(dateTimeFieldType59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime78 = dateTime18.withField(dateTimeFieldType59, (-291478858));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -291478858 for weekyearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0002-01-01T00:48:00.344+00:00:00.244" + "'", str31, "0002-01-01T00:48:00.344+00:00:00.244");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test03004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03004");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        calendar7.setLenient(false);
        calendar7.clear();
        calendar7.setMinimalDaysInFirstWeek(2000);
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap16 = calendar7.getDisplayNames(24, 31077130, locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=+00:00:00.244,offset=244,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=2000,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test03005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03005");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay23 = property21.addWrapFieldToCopy(100);
        int int24 = property21.get();
        java.lang.String str25 = property21.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hourOfDay" + "'", str25, "hourOfDay");
    }

    @Test
    public void test03006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03006");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay(13, 22, 13, 11);
        java.util.Calendar.Builder builder10 = builder0.setTimeOfDay(54060000, (-1), 1969);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay15 = dateTime12.toTimeOfDay();
        java.util.Date date16 = dateTime12.toDate();
        long long17 = date16.getTime();
        int int18 = date16.getHours();
        date16.setSeconds((int) (short) 0);
        java.time.Instant instant21 = date16.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder22 = builder10.setInstant(date16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(instant21);
    }

    @Test
    public void test03007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03007");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        int int15 = gregorianCalendar13.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = gregorianCalendar13.getGreatestMinimum(1378);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1378");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0002-01-01T00:48:00.344+00:00:00.244" + "'", str12, "0002-01-01T00:48:00.344+00:00:00.244");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test03008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03008");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay8.secondOfMinute();
        int int17 = property16.getMinimumValueOverall();
        java.lang.String str18 = property16.getAsShortText();
        java.lang.String str19 = property16.getAsShortText();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
    }

    @Test
    public void test03009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03009");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        calendar7.clear();
        boolean boolean10 = calendar7.after((java.lang.Object) (short) 0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        java.lang.String str20 = property19.getName();
        boolean boolean21 = property19.isLeap();
        org.joda.time.DateTime dateTime22 = property19.roundHalfFloorCopy();
        int int23 = dateTime22.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        boolean boolean25 = calendar7.before((java.lang.Object) dateTime24);
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setFirstDayOfWeek(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str41 = dateTimeZone39.getShortName((long) 0);
        org.joda.time.DateTime dateTime42 = dateTime37.withZone(dateTimeZone39);
        java.util.TimeZone timeZone43 = dateTimeZone39.toTimeZone();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone43);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone43);
        calendar7.setTimeZone(timeZone43);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = calendar7.getActualMinimum(292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 292278993");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=3600000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "yearOfEra" + "'", str20, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-01:00" + "'", str41, "-01:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572335675,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=55,MILLISECOND=675,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644572335675,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=55,MILLISECOND=675,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test03010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03010");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.plus(readableDuration30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withDurationAdded(readableDuration34, 23);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromCalendarFields(calendar38);
        org.joda.time.DateTime dateTime40 = localTime39.toDateTimeToday();
        org.joda.time.DateTime dateTime41 = dateTime40.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime41, chronology42);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-62134909199000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test03011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03011");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        int int12 = property11.getMinimumValue();
        int int13 = property11.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test03012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03012");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        boolean boolean13 = dateTimeZone11.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime14 = dateTime7.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int18 = dateTimeZone16.getStandardOffset((long) (short) 0);
        long long20 = dateTimeZone11.getMillisKeepLocal(dateTimeZone16, (long) 0);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.millisOfSecond();
        java.util.Locale locale28 = null;
        int int29 = property27.getMaximumShortTextLength(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean31 = property27.equals((java.lang.Object) dateTimeFieldType30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property27.getFieldType();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.Chronology chronology41 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.hourOfHalfday();
        org.joda.time.Chronology chronology45 = chronology41.withUTC();
        boolean boolean46 = dateTimeFieldType32.isSupported(chronology45);
        java.lang.String str47 = dateTimeFieldType32.toString();
        int int48 = dateTime21.get(dateTimeFieldType32);
        java.lang.String str49 = dateTimeFieldType32.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3600000) + "'", int18 == (-3600000));
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "millisOfSecond" + "'", str47, "millisOfSecond");
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 949 + "'", int48 == 949);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "millisOfSecond" + "'", str49, "millisOfSecond");
    }

    @Test
    public void test03013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03013");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DurationField durationField12 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DurationField durationField15 = chronology8.months();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.yearOfCentury();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusHours(13);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.withPeriodAdded(readablePeriod21, 4);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) timeOfDay20, 3600000, locale25);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "3600000" + "'", str26, "3600000");
    }

    @Test
    public void test03014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03014");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        calendar24.clear();
        calendar24.clear();
        java.util.TimeZone timeZone27 = calendar24.getTimeZone();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone27);
        calendar28.setTimeInMillis((long) 75);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = calendar28.getLeastMaximum(86399);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86399");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=75,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=75,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test03015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03015");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.setWeekDefinition(5, 1);
        java.util.Calendar.Builder builder7 = builder3.setDate(79200, 1328, 365);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder9 = builder7.setInstant((long) 292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03016");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.monthOfYear();
        int int30 = dateTime28.getSecondOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.withMillisOfDay(70);
        boolean boolean33 = timeOfDay16.equals((java.lang.Object) dateTime28);
        org.joda.time.DateTime.Property property34 = dateTime28.minuteOfDay();
        java.lang.String str35 = property34.getAsString();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 85680 + "'", int30 == 85680);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1428" + "'", str35, "1428");
    }

    @Test
    public void test03017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03017");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime1 = localTime0.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime4 = localTime0.withPeriodAdded(readablePeriod2, (int) 'a');
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.minuteOfDay();
        org.joda.time.DurationField durationField25 = chronology22.months();
        boolean boolean26 = dateTimeFieldType13.isSupported(chronology22);
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType13.getDurationType();
        boolean boolean28 = dateTime12.isSupported(dateTimeFieldType13);
        boolean boolean29 = localTime0.isSupported(dateTimeFieldType13);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay34 = dateTime31.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property35 = timeOfDay34.millisOfSecond();
        int int36 = property35.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay38 = property35.addToCopy(100);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay43 = dateTime40.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property44 = timeOfDay43.millisOfSecond();
        boolean boolean45 = timeOfDay38.isEqual((org.joda.time.ReadablePartial) timeOfDay43);
        org.joda.time.TimeOfDay.Property property46 = timeOfDay38.secondOfMinute();
        java.lang.String str47 = property46.getName();
        org.joda.time.TimeOfDay timeOfDay49 = property46.setCopy((int) '4');
        org.joda.time.TimeOfDay timeOfDay51 = property46.setCopy("1");
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime57.minusDays(7);
        org.joda.time.DateTime dateTime61 = dateTime57.withYear(1);
        org.joda.time.Chronology chronology62 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.minuteOfDay();
        boolean boolean65 = durationFieldType53.isSupported(chronology62);
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((long) 3, chronology62);
        org.joda.time.LocalTime.Property property67 = localTime66.secondOfMinute();
        org.joda.time.LocalTime localTime68 = property67.getLocalTime();
        boolean boolean69 = property46.equals((java.lang.Object) property67);
        org.joda.time.DateTimeField dateTimeField70 = property67.getField();
        org.joda.time.LocalTime localTime71 = property67.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean73 = localTime71.isSupported(dateTimeFieldType72);
        org.joda.time.DurationFieldType durationFieldType74 = dateTimeFieldType72.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property75 = localTime0.property(dateTimeFieldType72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "secondOfMinute" + "'", str47, "secondOfMinute");
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(durationFieldType74);
    }

    @Test
    public void test03018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03018");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean17 = timeOfDay8.isSupported(dateTimeFieldType16);
        java.lang.String str18 = dateTimeFieldType16.toString();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType16.getDurationType();
        java.lang.String str20 = dateTimeFieldType16.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "dayOfWeek" + "'", str18, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "dayOfWeek" + "'", str20, "dayOfWeek");
    }

    @Test
    public void test03019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03019");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.set((int) (short) 1, (int) 'a', (int) (short) 1);
        gregorianCalendar13.add((int) (byte) 0, (-3600000));
        java.lang.String str21 = gregorianCalendar13.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar13.setWeekDate(23, (int) (byte) 1, 43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 43");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gregory" + "'", str21, "gregory");
    }

    @Test
    public void test03020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03020");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime10.toLocalTime();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        long long20 = chronology15.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.LocalTime localTime27 = dateTime23.toLocalTime();
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter7.withChronology(chronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = dateTimeFormatter7.parseLocalDate("Wed Dec 31 01:00:00 UTC 1969");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
    }

    @Test
    public void test03021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03021");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime7.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime7.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property37 = dateTime35.hourOfDay();
        org.joda.time.DateTime dateTime38 = property37.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property39 = dateTime38.weekOfWeekyear();
        java.util.Locale locale40 = null;
        int int41 = property39.getMaximumShortTextLength(locale40);
        org.joda.time.DateTime dateTime42 = property39.withMaximumValue();
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfDay();
        int int44 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime46 = dateTime7.plusMinutes(15);
        org.joda.time.DateTime dateTime48 = dateTime46.minusYears((-292275054));
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime48.getZone();
        java.lang.String str51 = dateTimeZone49.getShortName((long) 952);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-01:00" + "'", str51, "-01:00");
    }

    @Test
    public void test03022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03022");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.Chronology chronology15 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.year();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(114, 2322845, 31115675, 31115675, 0, 31115675, (int) (byte) 1, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31115675 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test03023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03023");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        java.lang.String str18 = timeOfDay17.toString();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours(2);
        org.joda.time.Chronology chronology21 = timeOfDay20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.clockhourOfDay();
        org.joda.time.DurationField durationField25 = chronology21.eras();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "T23:35:00.200" + "'", str18, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test03024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03024");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        java.time.Instant instant7 = date5.toInstant();
        date5.setMinutes((int) (short) 10);
        int int10 = date5.getMinutes();
        int int11 = date5.getDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:10:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test03025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03025");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay8.hourOfDay();
        int int12 = timeOfDay8.size();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay8.plusMillis(14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property27 = dateTime26.monthOfYear();
        org.joda.time.DateTime dateTime28 = property27.roundHalfEvenCopy();
        boolean boolean29 = dateTime28.isEqualNow();
        boolean boolean30 = dateTime28.isEqualNow();
        org.joda.time.DateTime dateTime31 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime32 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime28.withTime(82800100, 992, 79200, 672);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82800100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test03026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03026");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.getLocalTime();
        org.joda.time.LocalTime localTime18 = property13.addCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime20 = property13.addNoWrapToCopy((int) '4');
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test03027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03027");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(557, 61199999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 61199999");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03028");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 1);
        boolean boolean4 = dateTimeZone2.isStandardOffset((long) 952);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test03029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03029");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        java.util.Date date6 = dateTime2.toDate();
        java.time.Instant instant7 = date6.toInstant();
        int int8 = date6.getSeconds();
        java.util.Calendar.Builder builder9 = builder0.setInstant(date6);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = dateTime11.toCalendar(locale16);
        calendar17.setLenient(false);
        java.util.TimeZone timeZone20 = calendar17.getTimeZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone20);
        java.util.Calendar.Builder builder22 = builder0.setTimeZone(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572336453,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=56,MILLISECOND=453,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
    }

    @Test
    public void test03030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03030");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.Instant instant6 = dateTime5.toInstant();
        org.joda.time.DateTime.Property property7 = dateTime5.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime5.plus(readableDuration8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime5.withMillisOfDay((-738188));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -738188 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test03031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03031");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        boolean boolean15 = gregorianCalendar13.isWeekDateSupported();
        java.util.Date date16 = gregorianCalendar13.getTime();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar13.roll(25, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 03 00:48:00 UTC 2");
    }

    @Test
    public void test03032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03032");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = chronology8.days();
        org.joda.time.DurationField durationField13 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.millisOfSecond();
        org.joda.time.DurationField durationField22 = property21.getDurationField();
        java.lang.String str23 = property21.getAsShortText();
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        org.joda.time.TimeOfDay timeOfDay26 = property21.addToCopy(5);
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.fromMillisOfDay(3110L);
        int int29 = timeOfDay26.compareTo((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.Chronology chronology39 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.minuteOfDay();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology39);
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(chronology39);
        org.joda.time.LocalTime localTime44 = localTime28.withFields((org.joda.time.ReadablePartial) timeOfDay43);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime(12, 11, 24, (int) (byte) 1);
        org.joda.time.LocalTime localTime50 = localTime44.withFields((org.joda.time.ReadablePartial) localTime49);
        long long52 = chronology8.set((org.joda.time.ReadablePartial) localTime49, (long) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalTime localTime54 = localTime49.minus(readablePeriod53);
        org.joda.time.LocalTime localTime56 = localTime54.withMillisOfSecond((int) (byte) 10);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100" + "'", str23, "100");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(localTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime50);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-38915999L) + "'", long52 == (-38915999L));
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime56);
    }

    @Test
    public void test03033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03033");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        calendar7.clear();
        boolean boolean10 = calendar7.after((java.lang.Object) (short) 0);
        calendar7.set(23, 14, 2);
        int int15 = calendar7.getWeekYear();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        java.util.Date date21 = dateTime17.toDate();
        long long22 = date21.getTime();
        int int23 = date21.getDate();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromDateFields(date21);
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromDateFields(date21);
        boolean boolean26 = calendar7.after((java.lang.Object) date21);
        int int27 = calendar7.getWeekYear();
        java.time.Instant instant28 = calendar7.toInstant();
        java.lang.String str29 = calendar7.getCalendarType();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-61404735600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=24,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=62,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 24 + "'", int27 == 24);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "gregory" + "'", str29, "gregory");
    }

    @Test
    public void test03034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03034");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(7, (int) ' ', chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str26 = dateTimeZone24.getShortName((long) 0);
        org.joda.time.DateTime dateTime27 = dateTime22.withZone(dateTimeZone24);
        org.joda.time.DateTime.Property property28 = dateTime27.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime27.toMutableDateTime();
        boolean boolean31 = dateTime27.isAfter(62L);
        org.joda.time.Chronology chronology32 = dateTime27.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay13.withChronologyRetainFields(chronology32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType35 = timeOfDay13.getFieldType(70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 70");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-01:00" + "'", str26, "-01:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(timeOfDay33);
    }

    @Test
    public void test03035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03035");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setLenient(true);
        int int14 = calendar7.getLeastMaximum(16);
        calendar7.set(0, 13, (int) (byte) -1);
        long long19 = calendar7.getTimeInMillis();
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromCalendarFields(calendar7);
        java.util.Date date21 = calendar7.getTime();
        java.util.Locale locale24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = calendar7.getDisplayName(58, 1869, locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-62133180719900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=6,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1200000 + "'", int14 == 1200000);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62133180719900L) + "'", long19 == (-62133180719900L));
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Jan 30 23:08:00 UTC 1");
    }

    @Test
    public void test03036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03036");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) (-3600000));
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone2.getShortName(10L, locale6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((-62104064400000L), dateTimeZone2);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology10);
        org.joda.time.LocalTime localTime13 = localTime11.plusHours((int) (byte) 10);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfDay();
        org.joda.time.LocalTime localTime16 = localTime13.minusHours(17);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localTime16.getFields();
        int int18 = localTime8.compareTo((org.joda.time.ReadablePartial) localTime16);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test03037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03037");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(48, 36, 244, 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03038");
        java.util.Date date5 = new java.util.Date(937, 23, 100, 0, (int) (short) 1);
        int int6 = date5.getMonth();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Mar 10 00:01:00 UTC 2839");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test03039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03039");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addWrapFieldToCopy(97);
        org.joda.time.TimeOfDay timeOfDay9 = property5.withMaximumValue();
        org.joda.time.ReadablePartial readablePartial10 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = timeOfDay9.isBefore(readablePartial10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test03040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03040");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        long long11 = property9.remainder();
        java.lang.String str12 = property9.toString();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(7);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(1);
        org.joda.time.DateTime dateTime21 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property25 = dateTime24.monthOfYear();
        org.joda.time.DateTime dateTime26 = property25.roundHalfEvenCopy();
        java.lang.Object obj27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str31 = dateTimeZone29.getShortName((long) 0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(obj27, dateTimeZone29);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.Chronology chronology41 = dateTime36.getChronology();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(chronology41);
        org.joda.time.DurationField durationField43 = chronology41.weeks();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        long long47 = chronology41.add(readablePeriod44, 1L, 8);
        org.joda.time.DateTime dateTime48 = dateTime32.toDateTime(chronology41);
        org.joda.time.DateTime dateTime49 = dateTime26.withChronology(chronology41);
        int int50 = property9.compareTo((org.joda.time.ReadableInstant) dateTime26);
        java.util.Locale locale51 = null;
        int int52 = property9.getMaximumShortTextLength(locale51);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 480100L + "'", long11 == 480100L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[hourOfDay]" + "'", str12, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-01:00" + "'", str31, "-01:00");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
    }

    @Test
    public void test03041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03041");
        long long6 = java.util.Date.UTC(357, 841, 34620000, 79200000, 3600096, (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3287772380159000L + "'", long6 == 3287772380159000L);
    }

    @Test
    public void test03042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03042");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(2000, 1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03043");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        boolean boolean18 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale19);
        org.joda.time.Chronology chronology21 = dateTimeFormatter20.getChronology();
        boolean boolean22 = dateTimeFormatter20.isParser();
        java.io.Writer writer23 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter20.printTo(writer23, (long) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test03044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03044");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        boolean boolean13 = dateTimeZone11.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime14 = dateTime7.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime16.withTime(31021786, 937, 457, 214);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31021786 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test03045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03045");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        long long12 = dateTimeField10.roundFloor((long) 12);
        boolean boolean13 = dateTimeField10.isSupported();
        long long15 = dateTimeField10.roundFloor(1296000100L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1296000000L + "'", long15 == 1296000000L);
    }

    @Test
    public void test03046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03046");
        java.util.Date date5 = new java.util.Date(69, 32772, 0, 16, (-292275054));
        int int6 = date5.getDate();
        long long7 = date5.getTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay12 = dateTime9.toTimeOfDay();
        java.util.Date date13 = dateTime9.toDate();
        long long14 = date13.getTime();
        int int15 = date13.getHours();
        date13.setSeconds((int) (short) 0);
        int int18 = date13.getYear();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay23 = dateTime20.toTimeOfDay();
        java.util.Date date24 = dateTime20.toDate();
        boolean boolean25 = date13.before(date24);
        boolean boolean26 = date5.before(date13);
        date13.setMonth(937);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Apr 15 21:06:00 UTC 4144");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 68613944760000L + "'", long7 == 68613944760000L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 01 00:00:00 UTC 2048");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 70 + "'", int18 == 70);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test03047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03047");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        java.util.Date date6 = dateTime2.toDate();
        java.time.Instant instant7 = date6.toInstant();
        int int8 = date6.getSeconds();
        java.util.Calendar.Builder builder9 = builder0.setInstant(date6);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = dateTime11.toCalendar(locale16);
        calendar17.setLenient(false);
        java.util.TimeZone timeZone20 = calendar17.getTimeZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone20);
        java.util.Calendar.Builder builder22 = builder0.setTimeZone(timeZone20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder25 = builder22.setWeekDefinition(516, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572337464,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=57,MILLISECOND=464,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test03048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03048");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.millisOfSecond();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        java.lang.String str8 = property6.getAsShortText();
        boolean boolean9 = localTime0.equals((java.lang.Object) property6);
        org.joda.time.TimeOfDay timeOfDay11 = property6.setCopy("3");
        org.joda.time.TimeOfDay timeOfDay13 = null; // flaky: property6.addNoWrapToCopy((-3600000));
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100" + "'", str8, "100");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeOfDay11);
// flaky:         org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test03049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03049");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int19 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withPivotYear((int) (byte) 1);
        org.joda.time.Chronology chronology22 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1380);
        java.lang.Appendable appendable25 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property38 = dateTime37.monthOfYear();
        int int39 = dateTime37.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str43 = dateTimeZone41.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime37.toMutableDateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime46 = dateTime37.plusDays(100);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter24.printTo(appendable25, (org.joda.time.ReadableInstant) dateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 85680 + "'", int39 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-01:00" + "'", str43, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test03050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03050");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.yearOfCentury();
        long long14 = dateTimeField12.roundHalfFloor((-62198751600000L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-62198751600000L) + "'", long14 == (-62198751600000L));
    }

    @Test
    public void test03051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03051");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfDay();
        long long40 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime38.plusWeeks(2022);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(7);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(1);
        org.joda.time.Chronology chronology52 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime38.toMutableDateTime(chronology52);
        org.joda.time.DateTimeField dateTimeField55 = chronology52.yearOfCentury();
        int int57 = dateTimeField55.get(2871866106000L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 61 + "'", int57 == 61);
    }

    @Test
    public void test03052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03052");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.year();
        java.util.Locale locale12 = null;
        int int13 = dateTimeField11.getMaximumShortTextLength(locale12);
        boolean boolean14 = dateTimeField11.isSupported();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = property24.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear(8);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillis((long) 10);
        org.joda.time.LocalDate localDate30 = dateTime27.toLocalDate();
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDate30, 794, locale32);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "794" + "'", str33, "794");
    }

    @Test
    public void test03053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03053");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.get();
        java.util.Locale locale9 = null;
        int int10 = property5.getMaximumShortTextLength(locale9);
        java.util.Locale locale11 = null;
        int int12 = property5.getMaximumShortTextLength(locale11);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test03054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03054");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.withPeriodAdded(readablePeriod6, (int) '4');
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime11 = localTime9.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime13 = localTime11.withMillisOfDay(2);
        boolean boolean14 = timeOfDay4.isAfter((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.LocalTime.Property property15 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime16 = property15.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = localTime16.withSecondOfMinute(557);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 557 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test03055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03055");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str33 = dateTimeZone31.getShortName((long) 0);
        org.joda.time.DateTime dateTime34 = dateTime29.withZone(dateTimeZone31);
        long long37 = dateTimeZone31.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        boolean boolean41 = dateTimeZone39.equals((java.lang.Object) (-3600000));
        long long43 = dateTimeZone31.getMillisKeepLocal(dateTimeZone39, 100L);
        org.joda.time.DateTime dateTime44 = timeOfDay20.toDateTimeToday(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        boolean boolean47 = dateTime44.isSupported(dateTimeFieldType45);
        org.joda.time.DateTime.Property property48 = dateTime44.weekyear();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays(7);
        org.joda.time.DateTime dateTime56 = dateTime52.withYear(1);
        org.joda.time.DateTime dateTime57 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str61 = dateTimeZone59.getShortName((long) 0);
        org.joda.time.DateTime dateTime62 = dateTime57.withZone(dateTimeZone59);
        long long65 = dateTimeZone59.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        boolean boolean69 = dateTimeZone67.equals((java.lang.Object) (-3600000));
        long long71 = dateTimeZone59.getMillisKeepLocal(dateTimeZone67, 100L);
        java.lang.String str73 = dateTimeZone67.getName(3110L);
        java.lang.String str75 = dateTimeZone67.getShortName((long) 23);
        org.joda.time.DateTime dateTime76 = dateTime44.toDateTime(dateTimeZone67);
        java.lang.String str78 = dateTime76.toString("08:36:01.293");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime80 = dateTime76.withDayOfMonth(48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:00" + "'", str33, "-01:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 5L + "'", long37 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-01:00" + "'", str61, "-01:00");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 5L + "'", long65 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 100L + "'", long71 == 100L);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "-01:00" + "'", str73, "-01:00");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-01:00" + "'", str75, "-01:00");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "08:36:01.293" + "'", str78, "08:36:01.293");
    }

    @Test
    public void test03056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03056");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay((long) 794, chronology9);
        org.joda.time.DurationField durationField13 = chronology9.years();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = chronology9.get(readablePeriod14, 85740000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test03057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03057");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology13 = chronology8.withZone(dateTimeZone10);
        org.joda.time.DurationField durationField14 = chronology8.days();
        org.joda.time.DurationField durationField15 = chronology8.eras();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test03058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03058");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        long long11 = property9.remainder();
        org.joda.time.Interval interval12 = property9.toInterval();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property9.getAsText(locale13);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyearOfCentury();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime27 = localTime25.withSecondOfMinute(1);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localTime27, 14, locale29);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = localTime27.getFields();
        int int32 = localTime27.size();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.DateTime dateTime41 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime42 = dateTime41.toDateTimeISO();
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property45 = dateTime44.monthOfYear();
        int int46 = dateTime44.getSecondOfDay();
        org.joda.time.DateTime dateTime48 = dateTime44.withMillisOfDay(70);
        org.joda.time.DateTime dateTime49 = localTime27.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = dateTime49.withWeekyear((int) (short) 0);
        long long52 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime51);
        java.util.Locale locale53 = null;
        int int54 = property9.getMaximumShortTextLength(locale53);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 480100L + "'", long11 == 480100L);
        org.junit.Assert.assertNotNull(interval12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "22" + "'", str14, "22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "14" + "'", str30, "14");
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 85680 + "'", int46 == 85680);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 17485L + "'", long52 == 17485L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test03059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03059");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setLenient(true);
        calendar7.setTimeInMillis((-43679948L));
        // The following exception was thrown during execution in test generation
        try {
            calendar7.setWeekDate(18, 2880, 31081803);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 31081803");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-43679948,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=52,SECOND=0,MILLISECOND=52,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test03060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03060");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        java.lang.String str7 = property5.getAsShortText();
        java.lang.String str8 = property5.getName();
        java.lang.String str9 = property5.getAsText();
        org.joda.time.TimeOfDay timeOfDay10 = property5.withMinimumValue();
        java.lang.String str11 = property5.getAsShortText();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "millisOfSecond" + "'", str8, "millisOfSecond");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100" + "'", str9, "100");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100" + "'", str11, "100");
    }

    @Test
    public void test03061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03061");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime.Property property14 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(chronology25);
        org.joda.time.DurationField durationField27 = chronology25.weeks();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology25.add(readablePeriod28, 1L, 8);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear(1);
        org.joda.time.DateTime dateTime40 = dateTime39.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property41 = dateTime39.hourOfDay();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        boolean boolean45 = dateTimeZone43.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime46 = dateTime39.withZone(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int50 = dateTimeZone48.getStandardOffset((long) (short) 0);
        long long52 = dateTimeZone43.getMillisKeepLocal(dateTimeZone48, (long) 0);
        org.joda.time.Chronology chronology53 = chronology25.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime54 = dateTime16.withZoneRetainFields(dateTimeZone48);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMonths(59);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime54.toMutableDateTime(dateTimeZone58);
        java.lang.String str60 = dateTimeZone58.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3600000) + "'", int50 == (-3600000));
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-01:00" + "'", str60, "-01:00");
    }

    @Test
    public void test03062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03062");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minusMillis(100);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.plusHours((int) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.plusHours(16);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.withHourOfDay(0);
        org.joda.time.TimeOfDay.Property property26 = timeOfDay25.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType28 = timeOfDay25.getFieldType((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test03063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03063");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        java.time.Instant instant11 = calendar7.toInstant();
        int int12 = calendar7.getMinimalDaysInFirstWeek();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(7);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(1);
        org.joda.time.DateTime dateTime21 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes((int) (short) 100);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.plusMinutes(54060000);
        boolean boolean28 = calendar7.after((java.lang.Object) 54060000);
        long long29 = calendar7.getTimeInMillis();
        // The following exception was thrown during execution in test generation
        try {
            calendar7.roll(115, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str25, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-3119900L) + "'", long29 == (-3119900L));
    }

    @Test
    public void test03064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03064");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str3 = dateTimeZone1.getShortName((long) 0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property5 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.plusMinutes(54060000);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths(999);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTime();
        int int24 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property25 = dateTime22.monthOfYear();
        org.joda.time.DateTime dateTime27 = dateTime22.minusSeconds(10);
        org.joda.time.DateTime.Property property28 = dateTime22.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTime22.withDayOfMonth(672);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 672 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test03065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03065");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        java.lang.String str18 = timeOfDay17.toString();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours(2);
        int[] intArray21 = timeOfDay20.getValues();
        org.joda.time.TimeOfDay.Property property22 = timeOfDay20.millisOfSecond();
        java.lang.String str23 = property22.getAsText();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "T23:35:00.200" + "'", str18, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 35, 0, 200]");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "200" + "'", str23, "200");
    }

    @Test
    public void test03066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03066");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName(0L, locale3);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone1);
        int int6 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property7 = dateTime5.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = property7.setCopy(85680);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 85680 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test03067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03067");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        java.lang.String str14 = property13.getAsString();
        int int15 = property13.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test03068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03068");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        java.util.TimeZone timeZone14 = dateTimeZone10.toTimeZone();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone14);
        calendar15.clear();
        calendar15.clear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test03069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03069");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTime dateTime43 = dateTime38.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime28.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime28.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime28.minus(readableDuration47);
        int int49 = property18.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime51 = dateTime28.minus(readablePeriod50);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test03070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03070");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(0, 3600000, 0, 31021786);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3600000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03071");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay23 = property21.addWrapFieldToCopy(100);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        java.util.Locale locale26 = null;
        int int27 = property21.getMaximumTextLength(locale26);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test03072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03072");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalTime localTime15 = property13.getLocalTime();
        int int16 = localTime15.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = localTime15.toString("AD");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test03073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03073");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.get();
        int int9 = property5.get();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        int int16 = property5.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime18 = dateTime11.withYearOfCentury(24);
        org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfDay(0);
        org.joda.time.DateTime dateTime22 = dateTime11.plusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property23 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime11.plusYears(8);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test03074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03074");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay8.secondOfMinute();
        java.lang.String str17 = property16.getName();
        org.joda.time.TimeOfDay timeOfDay19 = property16.setCopy((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = property16.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "secondOfMinute" + "'", str17, "secondOfMinute");
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay20);
    }

    @Test
    public void test03075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03075");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(2);
        java.util.Locale locale6 = null;
        java.lang.String str7 = localTime4.toString("00:00:00.010", locale6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType9 = localTime4.getFieldType(292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 292278993");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00:00:00.010" + "'", str7, "00:00:00.010");
    }

    @Test
    public void test03076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03076");
        java.util.Date date1 = new java.util.Date(62104088281801L);
        org.junit.Assert.assertEquals(date1.toString(), "Sat Jan 01 07:38:01 UTC 3938");
    }

    @Test
    public void test03077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03077");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        java.io.Writer writer6 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (short) 0, 14, 31);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        int int21 = dateTime20.getEra();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.millisOfSecond();
        java.util.Locale locale28 = null;
        int int29 = property27.getMaximumShortTextLength(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean31 = property27.equals((java.lang.Object) dateTimeFieldType30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property27.getFieldType();
        boolean boolean33 = dateTime20.isSupported(dateTimeFieldType32);
        int int34 = localTime10.get(dateTimeFieldType32);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer6, (org.joda.time.ReadablePartial) localTime10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test03078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03078");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.addCopy(1L);
        org.joda.time.LocalTime localTime18 = property13.addNoWrapToCopy(54060000);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localTime18.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
    }

    @Test
    public void test03079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03079");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        calendar7.roll(10, 86399);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        java.lang.String str20 = property19.getName();
        boolean boolean21 = property19.isLeap();
        org.joda.time.DateTime dateTime22 = property19.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime24 = dateTime22.plusWeeks(0);
        java.lang.String str25 = dateTime22.toString();
        int int26 = dateTime22.getYearOfEra();
        org.joda.time.DateTime dateTime28 = dateTime22.plusWeeks(75);
        boolean boolean29 = calendar7.after((java.lang.Object) dateTime28);
        int int30 = calendar7.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-3599900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "yearOfEra" + "'", str20, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0002-01-01T00:00:00.000-01:00" + "'", str25, "0002-01-01T00:00:00.000-01:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test03080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03080");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight39 = dateTime37.toDateMidnight();
        org.joda.time.DateTime dateTime41 = dateTime37.withSecondOfMinute(13);
        java.lang.String str42 = dateTime37.toString();
        int int43 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime37);
        int int44 = dateTime26.getMillisOfDay();
        org.joda.time.DateTime dateTime46 = dateTime26.withYearOfEra(2000);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0001-12-31T22:08:00.100-01:00" + "'", str42, "0001-12-31T22:08:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 79200000 + "'", int44 == 79200000);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test03081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03081");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.minus(readablePeriod15);
        org.joda.time.TimeOfDay.Property property17 = timeOfDay14.secondOfMinute();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property23 = timeOfDay22.millisOfSecond();
        int int24 = property23.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay26 = property23.addToCopy(100);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay31 = dateTime28.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property32 = timeOfDay31.millisOfSecond();
        boolean boolean33 = timeOfDay26.isEqual((org.joda.time.ReadablePartial) timeOfDay31);
        int int34 = timeOfDay31.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = timeOfDay31.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay31.withPeriodAdded(readablePeriod36, (int) (short) -1);
        int int39 = timeOfDay38.getSecondOfMinute();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay44 = dateTime41.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property45 = timeOfDay44.millisOfSecond();
        int int46 = property45.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay48 = property45.addToCopy(100);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay53 = dateTime50.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property54 = timeOfDay53.millisOfSecond();
        boolean boolean55 = timeOfDay48.isEqual((org.joda.time.ReadablePartial) timeOfDay53);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay48.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay57.minusMillis(100);
        boolean boolean60 = timeOfDay38.isAfter((org.joda.time.ReadablePartial) timeOfDay57);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int64 = dateTimeZone62.getStandardOffset((long) (short) 0);
        long long67 = dateTimeZone62.convertLocalToUTC(480100L, false);
        java.lang.String str69 = dateTimeZone62.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay38, dateTimeZone62);
        java.lang.String str72 = dateTimeZone62.getID();
        org.joda.time.ReadableInstant readableInstant73 = null;
        int int74 = dateTimeZone62.getOffset(readableInstant73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((java.lang.Object) timeOfDay14, dateTimeZone62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.TimeOfDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3600000) + "'", int64 == (-3600000));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 4080100L + "'", long67 == 4080100L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-01:00" + "'", str69, "-01:00");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-01:00" + "'", str72, "-01:00");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3600000) + "'", int74 == (-3600000));
    }

    @Test
    public void test03082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03082");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.set((int) (short) 1, (int) 'a', (int) (short) 1);
        gregorianCalendar13.add((int) (byte) 0, (-3600000));
        java.lang.String str21 = gregorianCalendar13.getCalendarType();
        gregorianCalendar13.set(12, (-1), (int) ' ', 100, 712, 32770);
        java.time.Instant instant29 = gregorianCalendar13.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar13.set(31115675, (-292278));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31115675");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gregory" + "'", str21, "gregory");
        org.junit.Assert.assertNotNull(instant29);
    }

    @Test
    public void test03083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03083");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        int int13 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime11.plus(readableDuration17);
        boolean boolean19 = dateTime11.isEqualNow();
        org.joda.time.DateTime dateTime21 = dateTime11.withMillisOfDay(9);
        java.util.GregorianCalendar gregorianCalendar22 = dateTime11.toGregorianCalendar();
        gregorianCalendar22.set(79200000, 8, (-292275054));
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap30 = gregorianCalendar22.getDisplayNames(82800100, 11, locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(gregorianCalendar22);
    }

    @Test
    public void test03084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03084");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfDay();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.DateTimeField dateTimeField17 = property15.getField();
        org.joda.time.DateTime dateTime18 = property15.roundFloorCopy();
        int int19 = dateTime18.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "79200000" + "'", str16, "79200000");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test03085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03085");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology10.add(readablePeriod16, (long) 100, 17);
        org.joda.time.DurationField durationField20 = chronology10.months();
        org.joda.time.DurationField durationField21 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology10.millisOfDay();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        java.util.Locale locale29 = null;
        int int30 = property28.getMaximumShortTextLength(locale29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean32 = property28.equals((java.lang.Object) dateTimeFieldType31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property28.getFieldType();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(7);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(1);
        org.joda.time.Chronology chronology42 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.hourOfHalfday();
        org.joda.time.Chronology chronology46 = chronology42.withUTC();
        boolean boolean47 = dateTimeFieldType33.isSupported(chronology46);
        org.joda.time.DurationField durationField48 = chronology46.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) chronology10, chronology46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test03086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03086");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(8);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        long long14 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime10.era();
        org.joda.time.DateTime dateTime17 = dateTime10.withWeekyear(4);
        org.joda.time.DateTime dateTime19 = dateTime10.minusWeeks((-1));
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-62104064400000L) + "'", long14 == (-62104064400000L));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test03087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03087");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((-526694399904L));
    }

    @Test
    public void test03088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03088");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        java.lang.String str30 = property13.getName();
        org.joda.time.LocalTime localTime32 = property13.setCopy(516);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((java.lang.Object) property13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "millisOfSecond" + "'", str30, "millisOfSecond");
        org.junit.Assert.assertNotNull(localTime32);
    }

    @Test
    public void test03089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03089");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(79680100, 9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79680100 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03090");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(0L);
        org.joda.time.DateTime dateTime3 = dateTime1.plus((long) 3);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay8 = dateTime5.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.millisOfSecond();
        int int10 = property9.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay12 = property9.addToCopy(100);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay17 = dateTime14.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.millisOfSecond();
        boolean boolean19 = timeOfDay12.isEqual((org.joda.time.ReadablePartial) timeOfDay17);
        int int20 = timeOfDay17.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = timeOfDay17.getFieldTypes();
        org.joda.time.TimeOfDay.Property property22 = timeOfDay17.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay24 = property22.setCopy(1);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(7);
        org.joda.time.DateTime dateTime32 = dateTime28.withYear(1);
        org.joda.time.DateTime.Property property33 = dateTime32.yearOfEra();
        java.lang.String str34 = property33.getName();
        boolean boolean35 = property33.isLeap();
        org.joda.time.DateTime dateTime36 = property33.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime38 = dateTime36.plusWeeks(0);
        org.joda.time.DateTime dateTime39 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMonths(85680);
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTime41.toString("100", locale43);
        boolean boolean46 = dateTime41.isBefore(84153614100L);
        org.joda.time.DateTime dateTime48 = dateTime41.plusSeconds(17);
        boolean boolean49 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay54 = dateTime51.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property55 = timeOfDay54.millisOfSecond();
        java.util.Locale locale56 = null;
        int int57 = property55.getMaximumShortTextLength(locale56);
        int int58 = property55.get();
        java.util.Locale locale59 = null;
        java.lang.String str60 = property55.getAsText(locale59);
        java.lang.String str61 = property55.getAsText();
        org.joda.time.TimeOfDay timeOfDay62 = property55.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay62.minusSeconds(22);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int68 = dateTimeZone66.getStandardOffset((long) (short) 0);
        int int70 = dateTimeZone66.getOffsetFromLocal((long) 4);
        int int72 = dateTimeZone66.getStandardOffset((-62073219600000L));
        long long74 = dateTimeZone66.convertUTCToLocal((long) 1200000);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime78 = dateTime76.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime80 = dateTime78.minusDays(7);
        org.joda.time.DateTime dateTime82 = dateTime78.withYear(1);
        org.joda.time.DateTime dateTime83 = dateTime82.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime84 = dateTime83.toDateTimeISO();
        org.joda.time.DateTime dateTime86 = dateTime84.plusMinutes((int) (short) 100);
        java.lang.String str87 = dateTime86.toString();
        org.joda.time.DateTime dateTime89 = dateTime86.plusMinutes(54060000);
        org.joda.time.DateTime dateTime91 = dateTime89.plusMonths(999);
        org.joda.time.DateTime dateTime92 = dateTime91.toDateTime();
        int int93 = dateTime92.getYearOfEra();
        int int94 = dateTimeZone66.getOffset((org.joda.time.ReadableInstant) dateTime92);
        long long96 = dateTimeZone66.nextTransition(25L);
        org.joda.time.DateTime dateTime97 = timeOfDay64.toDateTimeToday(dateTimeZone66);
        boolean boolean98 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime97);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "yearOfEra" + "'", str34, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "100" + "'", str44, "100");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "100" + "'", str60, "100");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "100" + "'", str61, "100");
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3600000) + "'", int68 == (-3600000));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3600000) + "'", int70 == (-3600000));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3600000) + "'", int72 == (-3600000));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-2400000L) + "'", long74 == (-2400000L));
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str87, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 188 + "'", int93 == 188);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-3600000) + "'", int94 == (-3600000));
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 25L + "'", long96 == 25L);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test03091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03091");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology10);
        java.lang.String str14 = localTime13.toString();
        org.joda.time.Chronology chronology15 = localTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.minuteOfHour();
        org.joda.time.Chronology chronology18 = chronology15.withUTC();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromMillisOfDay(90000000L, chronology18);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "01:00:00.000" + "'", str14, "01:00:00.000");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test03092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03092");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        long long11 = property9.remainder();
        int int12 = property9.getMinimumValue();
        org.joda.time.DateTime dateTime13 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        int int16 = property15.getMinimumValueOverall();
        org.joda.time.DurationField durationField17 = property15.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 480100L + "'", long11 == 480100L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(durationField17);
    }

    @Test
    public void test03093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03093");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime15 = property13.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime17 = property13.setCopy(79200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79200000 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test03094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03094");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.minuteOfDay();
        int int10 = dateTimeField9.getMaximumValue();
        int int12 = dateTimeField9.get(62104088221982L);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay17 = dateTime14.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.millisOfSecond();
        int int19 = property18.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay21 = property18.addToCopy(100);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.millisOfSecond();
        boolean boolean28 = timeOfDay21.isEqual((org.joda.time.ReadablePartial) timeOfDay26);
        org.joda.time.TimeOfDay.Property property29 = timeOfDay21.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay21.plus(readablePeriod30);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(7);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(1);
        org.joda.time.Chronology chronology42 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.minuteOfDay();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology42);
        org.joda.time.LocalTime.Property property46 = localTime45.millisOfSecond();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime50.minusDays(7);
        org.joda.time.DateTime dateTime54 = dateTime50.withYear(1);
        org.joda.time.DateTime dateTime55 = dateTime54.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property56 = dateTime54.hourOfDay();
        org.joda.time.DateTime dateTime57 = property56.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfYear(8);
        org.joda.time.DateTime dateTime61 = dateTime59.withMillis((long) 10);
        long long62 = property46.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.LocalTime localTime63 = property46.withMinimumValue();
        org.joda.time.LocalTime localTime65 = localTime63.withMinuteOfHour(11);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime69 = dateTime67.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay70 = dateTime67.toTimeOfDay();
        org.joda.time.LocalTime localTime71 = dateTime67.toLocalTime();
        org.joda.time.Chronology chronology72 = localTime71.getChronology();
        int int73 = localTime63.compareTo((org.joda.time.ReadablePartial) localTime71);
        org.joda.time.LocalTime localTime75 = localTime63.plusMillis((int) (byte) 1);
        org.joda.time.LocalTime.Property property76 = localTime75.secondOfMinute();
        java.util.Locale locale78 = null;
        java.lang.String str79 = localTime75.toString("97", locale78);
        int[] intArray80 = localTime75.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = dateTimeField9.set((org.joda.time.ReadablePartial) timeOfDay21, 718, intArray80, (-292278));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292278 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 457 + "'", int12 == 457);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 62134912800000L + "'", long62 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "97" + "'", str79, "97");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 0, 0, 1]");
    }

    @Test
    public void test03095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03095");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str33 = dateTimeZone31.getShortName((long) 0);
        org.joda.time.DateTime dateTime34 = dateTime29.withZone(dateTimeZone31);
        long long37 = dateTimeZone31.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        boolean boolean41 = dateTimeZone39.equals((java.lang.Object) (-3600000));
        long long43 = dateTimeZone31.getMillisKeepLocal(dateTimeZone39, 100L);
        org.joda.time.DateTime dateTime44 = timeOfDay20.toDateTimeToday(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        boolean boolean47 = dateTime44.isSupported(dateTimeFieldType45);
        org.joda.time.DateTime.Property property48 = dateTime44.weekyear();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays(7);
        org.joda.time.DateTime dateTime56 = dateTime52.withYear(1);
        org.joda.time.DateTime dateTime57 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str61 = dateTimeZone59.getShortName((long) 0);
        org.joda.time.DateTime dateTime62 = dateTime57.withZone(dateTimeZone59);
        long long65 = dateTimeZone59.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        boolean boolean69 = dateTimeZone67.equals((java.lang.Object) (-3600000));
        long long71 = dateTimeZone59.getMillisKeepLocal(dateTimeZone67, 100L);
        java.lang.String str73 = dateTimeZone67.getName(3110L);
        java.lang.String str75 = dateTimeZone67.getShortName((long) 23);
        org.joda.time.DateTime dateTime76 = dateTime44.toDateTime(dateTimeZone67);
        long long78 = dateTimeZone67.convertUTCToLocal(43200023L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:00" + "'", str33, "-01:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 5L + "'", long37 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-01:00" + "'", str61, "-01:00");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 5L + "'", long65 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 100L + "'", long71 == 100L);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "-01:00" + "'", str73, "-01:00");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-01:00" + "'", str75, "-01:00");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 39600023L + "'", long78 == 39600023L);
    }

    @Test
    public void test03096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03096");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        java.lang.String str7 = property5.getAsShortText();
        java.lang.String str8 = property5.getName();
        java.lang.String str9 = property5.getAsText();
        org.joda.time.TimeOfDay timeOfDay10 = property5.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField12 = timeOfDay10.getField(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 12");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "millisOfSecond" + "'", str8, "millisOfSecond");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100" + "'", str9, "100");
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test03097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03097");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime1 = localTime0.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime4 = localTime0.withPeriodAdded(readablePeriod2, (int) 'a');
        org.joda.time.LocalTime localTime6 = localTime0.minusMinutes(69);
        org.joda.time.LocalTime localTime8 = localTime6.plusSeconds(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str10 = dateTimeFieldType9.getName();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType9.getRangeDurationType();
        org.joda.time.LocalTime.Property property12 = localTime6.property(dateTimeFieldType9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = property12.addNoWrapToCopy(712);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "halfdayOfDay" + "'", str10, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test03098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03098");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime7.minusHours((int) 'a');
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = chronology34.add(readablePeriod36, 9L, 5);
        org.joda.time.DateTime dateTime40 = dateTime25.toDateTime(chronology34);
        java.util.Locale locale41 = null;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        calendar42.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            calendar42.set(2000, 99);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9L + "'", long39 == 9L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-62104413119900,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=11,WEEK_OF_YEAR=53,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=363,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test03099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03099");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.add(11, 11);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        int int18 = localTime17.getHourOfDay();
        int int19 = localTime17.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test03100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03100");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        long long11 = property9.remainder();
        int int12 = property9.getMinimumValue();
        org.joda.time.DateTime dateTime13 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = property9.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = property9.addToCopy((-62104060800000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -62104060800000 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 480100L + "'", long11 == 480100L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test03101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03101");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.set(14, 15, 1);
        gregorianCalendar13.set(14, 82800, 5, 5, (-3600000), 2000);
        int int26 = gregorianCalendar13.getMinimum(6);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar13.roll(86399999, 14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test03102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03102");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int19 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withPivotYear((int) (byte) 1);
        java.io.Writer writer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter21.printTo(writer22, (long) 17661728);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test03103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03103");
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.hourOfHalfday();
        org.joda.time.Chronology chronology20 = chronology16.withUTC();
        boolean boolean21 = durationFieldType7.isSupported(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekOfWeekyear();
        org.joda.time.DurationField durationField23 = chronology20.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(0, 122, 31114187, (int) 'a', 1968, 53, 46, chronology20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test03104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03104");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfYear();
        java.util.Locale locale14 = null;
        int int15 = dateTimeField13.getMaximumShortTextLength(locale14);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test03105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03105");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(7);
        org.joda.time.DateTime dateTime32 = dateTime28.withYear(1);
        org.joda.time.Chronology chronology33 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.year();
        boolean boolean37 = calendar24.before((java.lang.Object) dateTimeField36);
        org.joda.time.TimeOfDay timeOfDay38 = org.joda.time.TimeOfDay.fromCalendarFields(calendar24);
        java.lang.String str39 = calendar24.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]" + "'", str39, "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test03106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03106");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property25 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime27 = dateTime23.withYearOfEra(70);
        org.joda.time.DateTime dateTime29 = dateTime27.minusSeconds(6);
        int int30 = property15.compareTo((org.joda.time.ReadableInstant) dateTime29);
        int int31 = dateTime29.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 365 + "'", int31 == 365);
    }

    @Test
    public void test03107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03107");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfDay();
        long long40 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay46 = dateTime43.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property47 = timeOfDay46.millisOfSecond();
        int int48 = property47.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay50 = property47.addToCopy(100);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay55 = dateTime52.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property56 = timeOfDay55.millisOfSecond();
        boolean boolean57 = timeOfDay50.isEqual((org.joda.time.ReadablePartial) timeOfDay55);
        int int58 = timeOfDay55.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = timeOfDay55.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay55.withPeriodAdded(readablePeriod60, (int) (short) -1);
        int int63 = timeOfDay62.getSecondOfMinute();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay68 = dateTime65.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property69 = timeOfDay68.millisOfSecond();
        int int70 = property69.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay72 = property69.addToCopy(100);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime76 = dateTime74.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay77 = dateTime74.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property78 = timeOfDay77.millisOfSecond();
        boolean boolean79 = timeOfDay72.isEqual((org.joda.time.ReadablePartial) timeOfDay77);
        org.joda.time.TimeOfDay timeOfDay81 = timeOfDay72.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay83 = timeOfDay81.minusMillis(100);
        boolean boolean84 = timeOfDay62.isAfter((org.joda.time.ReadablePartial) timeOfDay81);
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int88 = dateTimeZone86.getStandardOffset((long) (short) 0);
        long long91 = dateTimeZone86.convertLocalToUTC(480100L, false);
        java.lang.String str93 = dateTimeZone86.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone86);
        org.joda.time.LocalTime localTime95 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay62, dateTimeZone86);
        org.joda.time.DateTime dateTime96 = new org.joda.time.DateTime((java.lang.Object) dateTime38, dateTimeZone86);
        int int97 = dateTime96.getSecondOfMinute();
        java.lang.String str98 = dateTime96.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(timeOfDay81);
        org.junit.Assert.assertNotNull(timeOfDay83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3600000) + "'", int88 == (-3600000));
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 4080100L + "'", long91 == 4080100L);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "-01:00" + "'", str93, "-01:00");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "0001-12-31T22:08:00.100-01:00" + "'", str98, "0001-12-31T22:08:00.100-01:00");
    }

    @Test
    public void test03108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03108");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        calendar7.clear();
        int int9 = calendar7.getWeekYear();
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromCalendarFields(calendar7);
        calendar7.set(17661728, 31021460, 672, (-738188), 16, 82800100);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17661728,MONTH=31021460,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=672,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=-738188,MINUTE=16,SECOND=82800100,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test03109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03109");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.minus(readablePeriod3);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime8 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = property9.setCopy(1869);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1869 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test03110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03110");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        java.util.Date date6 = dateTime2.toDate();
        java.time.Instant instant7 = date6.toInstant();
        int int8 = date6.getSeconds();
        java.util.Calendar.Builder builder9 = builder0.setInstant(date6);
        java.util.Calendar.Builder builder11 = builder0.setInstant((long) 20);
        java.util.Calendar.Builder builder13 = builder11.setInstant((long) 8);
        java.util.Calendar.Builder builder15 = builder11.setInstant(0L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str28 = dateTimeZone26.getShortName((long) 0);
        org.joda.time.DateTime dateTime29 = dateTime24.withZone(dateTimeZone26);
        java.util.TimeZone timeZone30 = dateTimeZone26.toTimeZone();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone30);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone30);
        java.util.Calendar.Builder builder33 = builder15.setTimeZone(timeZone30);
        java.util.Locale locale34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone30, locale34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:00" + "'", str28, "-01:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572340623,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=39,SECOND=0,MILLISECOND=623,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644572340623,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=39,SECOND=0,MILLISECOND=623,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test03111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03111");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime3 = localTime2.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalTime localTime6 = localTime2.withPeriodAdded(readablePeriod4, (int) 'a');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay11 = dateTime8.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.millisOfSecond();
        int int13 = property12.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property12.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay15.hourOfDay();
        int int19 = timeOfDay15.size();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay24 = dateTime21.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.millisOfSecond();
        org.joda.time.DurationField durationField26 = property25.getDurationField();
        java.lang.String str27 = property25.getAsShortText();
        java.util.Locale locale28 = null;
        int int29 = property25.getMaximumTextLength(locale28);
        org.joda.time.TimeOfDay timeOfDay30 = property25.getTimeOfDay();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay35 = dateTime32.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property36 = timeOfDay35.millisOfSecond();
        int int37 = property36.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay39 = property36.addToCopy(100);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay44 = dateTime41.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property45 = timeOfDay44.millisOfSecond();
        boolean boolean46 = timeOfDay39.isEqual((org.joda.time.ReadablePartial) timeOfDay44);
        int[] intArray47 = timeOfDay39.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = timeOfDay39.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        boolean boolean51 = timeOfDay30.isSupported(dateTimeFieldType49);
        boolean boolean52 = timeOfDay15.isSupported(dateTimeFieldType49);
        boolean boolean53 = localTime2.isSupported(dateTimeFieldType49);
        org.joda.time.DateTime.Property property54 = dateTime1.property(dateTimeFieldType49);
        org.joda.time.DateTime dateTime56 = dateTime1.plus((long) 0);
        org.joda.time.DateTime.Property property57 = dateTime1.secondOfMinute();
        int int58 = property57.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime60 = property57.setCopy("minutes");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"minutes\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 59 + "'", int58 == 59);
    }

    @Test
    public void test03112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03112");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay7 = dateTime4.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.millisOfSecond();
        int int9 = property8.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addToCopy(100);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        boolean boolean18 = timeOfDay11.isEqual((org.joda.time.ReadablePartial) timeOfDay16);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay11.withMinuteOfHour((int) '#');
        int int21 = property2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay11.minusMillis((int) (short) 100);
        int[] intArray24 = timeOfDay11.getValues();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay11.minus(readablePeriod25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay29 = timeOfDay26.withFieldAdded(durationFieldType27, 214);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyears' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(durationFieldType27);
    }

    @Test
    public void test03113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03113");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test03114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03114");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DurationField durationField12 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DurationField durationField15 = chronology8.months();
        org.joda.time.DurationField durationField16 = chronology8.months();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test03115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03115");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay15 = dateTime12.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.millisOfSecond();
        java.util.Locale locale17 = null;
        int int18 = property16.getMaximumShortTextLength(locale17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean20 = property16.equals((java.lang.Object) dateTimeFieldType19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        boolean boolean22 = dateTime9.isSupported(dateTimeFieldType21);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType21.getDurationType();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.Chronology chronology32 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.secondOfDay();
        long long40 = chronology32.add((long) 7, 5L, 11);
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType21.getField(chronology32);
        long long43 = dateTimeField41.roundHalfCeiling(85680100L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 62L + "'", long40 == 62L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 85680100L + "'", long43 == 85680100L);
    }

    @Test
    public void test03116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03116");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 2022);
        org.joda.time.DateTime dateTime3 = dateTime1.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = calendar6.getActualMaximum(24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 24");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-169200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test03117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03117");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime3 = localTime2.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalTime localTime6 = localTime2.withPeriodAdded(readablePeriod4, (int) 'a');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay11 = dateTime8.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.millisOfSecond();
        int int13 = property12.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property12.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay15.hourOfDay();
        int int19 = timeOfDay15.size();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay24 = dateTime21.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.millisOfSecond();
        org.joda.time.DurationField durationField26 = property25.getDurationField();
        java.lang.String str27 = property25.getAsShortText();
        java.util.Locale locale28 = null;
        int int29 = property25.getMaximumTextLength(locale28);
        org.joda.time.TimeOfDay timeOfDay30 = property25.getTimeOfDay();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay35 = dateTime32.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property36 = timeOfDay35.millisOfSecond();
        int int37 = property36.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay39 = property36.addToCopy(100);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay44 = dateTime41.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property45 = timeOfDay44.millisOfSecond();
        boolean boolean46 = timeOfDay39.isEqual((org.joda.time.ReadablePartial) timeOfDay44);
        int[] intArray47 = timeOfDay39.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = timeOfDay39.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        boolean boolean51 = timeOfDay30.isSupported(dateTimeFieldType49);
        boolean boolean52 = timeOfDay15.isSupported(dateTimeFieldType49);
        boolean boolean53 = localTime2.isSupported(dateTimeFieldType49);
        org.joda.time.DateTime.Property property54 = dateTime1.property(dateTimeFieldType49);
        org.joda.time.DateTime dateTime56 = dateTime1.plus((long) 0);
        org.joda.time.DateTime.Property property57 = dateTime1.secondOfMinute();
        int int58 = property57.getMaximumValue();
        org.joda.time.DateTime dateTime59 = property57.roundFloorCopy();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 59 + "'", int58 == 59);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test03118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03118");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("0001-12-31T22:00:00.000-01:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0001-12-31T22:00:00.000-01:00\" is malformed at \"01-12-31T22:00:00.000-01:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03119");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        int int6 = dateTimeFormatter5.getDefaultYear();
        boolean boolean7 = dateTimeFormatter5.isParser();
        org.joda.time.Chronology chronology8 = dateTimeFormatter5.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withDefaultYear(427);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTimeFormatter10.parseDateTime("0");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test03120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03120");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str33 = dateTimeZone31.getShortName((long) 0);
        org.joda.time.DateTime dateTime34 = dateTime29.withZone(dateTimeZone31);
        long long37 = dateTimeZone31.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        boolean boolean41 = dateTimeZone39.equals((java.lang.Object) (-3600000));
        long long43 = dateTimeZone31.getMillisKeepLocal(dateTimeZone39, 100L);
        org.joda.time.DateTime dateTime44 = timeOfDay20.toDateTimeToday(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        boolean boolean47 = dateTime44.isSupported(dateTimeFieldType45);
        org.joda.time.DateTime.Property property48 = dateTime44.weekyear();
        org.joda.time.DurationField durationField49 = property48.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:00" + "'", str33, "-01:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 5L + "'", long37 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test03121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03121");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setLenient(true);
        int int14 = calendar7.getLeastMaximum(16);
        calendar7.set(0, 13, (int) (byte) -1);
        long long19 = calendar7.getTimeInMillis();
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromCalendarFields(calendar7);
        java.util.TimeZone timeZone21 = calendar7.getTimeZone();
        java.lang.String str22 = calendar7.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-62133180719900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=6,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1200000 + "'", int14 == 1200000);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62133180719900L) + "'", long19 == (-62133180719900L));
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.util.GregorianCalendar[time=-62133180719900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=6,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]" + "'", str22, "java.util.GregorianCalendar[time=-62133180719900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=6,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test03122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03122");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(999);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter7.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter7.withOffsetParsed();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test03123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03123");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.millisOfSecond();
        int int16 = property15.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay18 = property15.addToCopy(100);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay23 = dateTime20.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.millisOfSecond();
        boolean boolean25 = timeOfDay18.isEqual((org.joda.time.ReadablePartial) timeOfDay23);
        int int26 = timeOfDay23.size();
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) timeOfDay23, 14, locale28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay34 = dateTime31.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property35 = timeOfDay34.millisOfSecond();
        int int36 = property35.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay38 = property35.addToCopy(100);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay43 = dateTime40.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property44 = timeOfDay43.millisOfSecond();
        boolean boolean45 = timeOfDay38.isEqual((org.joda.time.ReadablePartial) timeOfDay43);
        int[] intArray46 = timeOfDay38.getValues();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay52 = dateTime49.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property53 = timeOfDay52.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay52.withPeriodAdded(readablePeriod54, (int) '4');
        int[] intArray57 = timeOfDay56.getValues();
        int[] intArray59 = dateTimeField9.addWrapPartial((org.joda.time.ReadablePartial) timeOfDay38, (int) (short) 0, intArray57, 712);
        int int60 = timeOfDay38.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay62 = timeOfDay38.withSecondOfMinute(79680100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79680100 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "14" + "'", str29, "14");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[735, 0, 0, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[735, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test03124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03124");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.secondOfMinute();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property27 = dateTime26.monthOfYear();
        int int28 = dateTime26.getSecondOfDay();
        org.joda.time.DateTime dateTime30 = dateTime26.withMillisOfDay(70);
        org.joda.time.DateTime dateTime32 = dateTime26.withMillis(111600000L);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        int int34 = property14.compareTo((org.joda.time.ReadableInstant) dateTime32);
        java.util.GregorianCalendar gregorianCalendar35 = dateTime32.toGregorianCalendar();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        org.joda.time.DateTime dateTime44 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str48 = dateTimeZone46.getShortName((long) 0);
        org.joda.time.DateTime dateTime49 = dateTime44.withZone(dateTimeZone46);
        org.joda.time.DateTime.Property property50 = dateTime44.minuteOfDay();
        org.joda.time.DateTime dateTime52 = property50.addToCopy((int) (byte) 0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime56.minusDays(7);
        org.joda.time.DateTime dateTime60 = dateTime56.withYear(1);
        org.joda.time.Chronology chronology61 = dateTime56.getChronology();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime(chronology61);
        org.joda.time.DurationField durationField63 = chronology61.weeks();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        long long67 = chronology61.add(readablePeriod64, 1L, 8);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime71 = dateTime69.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime73 = dateTime71.minusDays(7);
        org.joda.time.DateTime dateTime75 = dateTime71.withYear(1);
        org.joda.time.DateTime dateTime76 = dateTime75.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property77 = dateTime75.hourOfDay();
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        boolean boolean81 = dateTimeZone79.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime82 = dateTime75.withZone(dateTimeZone79);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int86 = dateTimeZone84.getStandardOffset((long) (short) 0);
        long long88 = dateTimeZone79.getMillisKeepLocal(dateTimeZone84, (long) 0);
        org.joda.time.Chronology chronology89 = chronology61.withZone(dateTimeZone84);
        org.joda.time.DateTime dateTime90 = dateTime52.withZoneRetainFields(dateTimeZone84);
        org.joda.time.DateTime dateTime92 = dateTime90.plusMonths(59);
        org.joda.time.DateTimeZone dateTimeZone94 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        org.joda.time.MutableDateTime mutableDateTime95 = dateTime90.toMutableDateTime(dateTimeZone94);
        java.util.TimeZone timeZone96 = dateTimeZone94.toTimeZone();
        gregorianCalendar35.setTimeZone(timeZone96);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 85680 + "'", int28 == 85680);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(gregorianCalendar35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-01:00" + "'", str48, "-01:00");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3600000) + "'", int86 == (-3600000));
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTimeZone94);
        org.junit.Assert.assertNotNull(mutableDateTime95);
        org.junit.Assert.assertNotNull(timeZone96);
        org.junit.Assert.assertEquals(timeZone96.getDisplayName(), "GMT-01:00");
    }

    @Test
    public void test03125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03125");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        java.lang.Object obj14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str18 = dateTimeZone16.getShortName((long) 0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj14, dateTimeZone16);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(chronology28);
        org.joda.time.DurationField durationField30 = chronology28.weeks();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = chronology28.add(readablePeriod31, 1L, 8);
        org.joda.time.DateTime dateTime35 = dateTime19.toDateTime(chronology28);
        org.joda.time.DateTime dateTime36 = dateTime13.withChronology(chronology28);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays(7);
        org.joda.time.DateTime dateTime44 = dateTime40.withYear(1);
        org.joda.time.Chronology chronology45 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.dayOfMonth();
        long long48 = dateTimeField46.roundFloor((long) 3);
        int int50 = dateTimeField46.getMaximumValue((long) (-3600000));
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeField46.getAsText((long) (short) 0, locale52);
        int int56 = dateTimeField46.getDifference(0L, 25L);
        int int57 = dateTime36.get(dateTimeField46);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = dateTimeField46.getType();
        java.lang.String str59 = dateTimeFieldType58.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-01:00" + "'", str18, "-01:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-82800000L) + "'", long48 == (-82800000L));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 31 + "'", int50 == 31);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "31" + "'", str53, "31");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "dayOfMonth" + "'", str59, "dayOfMonth");
    }

    @Test
    public void test03126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03126");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        java.util.Locale locale8 = null;
        int int9 = property5.getMaximumTextLength(locale8);
        org.joda.time.TimeOfDay timeOfDay10 = property5.getTimeOfDay();
        java.lang.String str11 = property5.getAsText();
        org.joda.time.TimeOfDay timeOfDay13 = property5.addToCopy(3600096);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        int int20 = property19.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property19.addToCopy(100);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        boolean boolean29 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) timeOfDay27);
        int[] intArray30 = timeOfDay22.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = timeOfDay22.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getDurationType();
        org.joda.time.Chronology chronology34 = null;
        boolean boolean35 = durationFieldType33.isSupported(chronology34);
        java.lang.String str36 = durationFieldType33.toString();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays(7);
        org.joda.time.DateTime dateTime44 = dateTime40.withYear(1);
        org.joda.time.DateTime dateTime45 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime46 = dateTime45.toDateTimeISO();
        org.joda.time.DateTime dateTime48 = dateTime46.plusMinutes((int) (short) 100);
        java.lang.String str49 = dateTime48.toString();
        java.util.GregorianCalendar gregorianCalendar50 = dateTime48.toGregorianCalendar();
        boolean boolean51 = gregorianCalendar50.isWeekDateSupported();
        boolean boolean52 = gregorianCalendar50.isWeekDateSupported();
        int int53 = gregorianCalendar50.getWeekYear();
        gregorianCalendar50.setMinimalDaysInFirstWeek(357);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime61 = dateTime59.minusDays(7);
        org.joda.time.DateTime dateTime63 = dateTime59.withYear(1);
        org.joda.time.Chronology chronology64 = dateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.weekyearOfCentury();
        long long67 = dateTimeField65.roundHalfEven(480100L);
        boolean boolean69 = dateTimeField65.isLeap((-82800000L));
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime73 = dateTime71.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay74 = dateTime71.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property75 = timeOfDay74.millisOfSecond();
        int int76 = property75.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay78 = property75.addToCopy(100);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime82 = dateTime80.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay83 = dateTime80.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property84 = timeOfDay83.millisOfSecond();
        boolean boolean85 = timeOfDay78.isEqual((org.joda.time.ReadablePartial) timeOfDay83);
        org.joda.time.TimeOfDay timeOfDay87 = timeOfDay83.withSecondOfMinute(12);
        int int88 = dateTimeField65.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay87);
        org.joda.time.TimeOfDay timeOfDay90 = timeOfDay87.withMinuteOfHour(15);
        org.joda.time.Chronology chronology91 = timeOfDay90.getChronology();
        org.joda.time.DurationField durationField92 = chronology91.weekyears();
        org.joda.time.DurationField durationField93 = chronology91.weeks();
        boolean boolean94 = gregorianCalendar50.before((java.lang.Object) chronology91);
        boolean boolean95 = durationFieldType33.isSupported(chronology91);
        org.joda.time.Chronology chronology96 = chronology91.withUTC();
        org.joda.time.DateTimeField dateTimeField97 = chronology91.minuteOfHour();
        boolean boolean98 = timeOfDay13.equals((java.lang.Object) chronology91);
        int[] intArray99 = timeOfDay13.getValues();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100" + "'", str11, "100");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hours" + "'", str36, "hours");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str49, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 3600000L + "'", long67 == 3600000L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(timeOfDay78);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(timeOfDay83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(timeOfDay87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(timeOfDay90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[0, 0, 0, 196]");
    }

    @Test
    public void test03127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03127");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime14.toMutableDateTime();
        org.joda.time.DateTime dateTime18 = dateTime14.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfDay(100);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.LocalDateTime localDateTime27 = dateTime26.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = localDateTime27.getFieldType((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime18.withField(dateTimeFieldType29, 118);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 118 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
    }

    @Test
    public void test03128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03128");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setDate((int) (short) 100, (int) (byte) 100, 13);
        java.util.Calendar.Builder builder8 = builder6.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder10 = builder6.setInstant(62104088221982L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test03129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03129");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.monthOfYear();
        int int30 = dateTime28.getSecondOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.withMillisOfDay(70);
        boolean boolean33 = timeOfDay16.equals((java.lang.Object) dateTime28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField35 = timeOfDay16.getField(99);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 99");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 85680 + "'", int30 == 85680);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test03130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03130");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.Chronology chronology8 = dateTimeFormatter7.getChronolgy();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        java.util.TimeZone timeZone23 = dateTimeZone19.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter7.withZone(dateTimeZone19);
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withLocale(locale25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime28 = dateTimeFormatter24.parseMutableDateTime("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=13,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test03131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03131");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        long long11 = dateTimeField9.roundFloor((long) 3);
        int int13 = dateTimeField9.getMaximumValue((long) (-3600000));
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeField9.getAsText((long) (short) 0, locale15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay21 = dateTime18.toTimeOfDay();
        org.joda.time.LocalTime localTime22 = dateTime18.toLocalTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes((int) (short) 100);
        java.lang.String str35 = dateTime34.toString();
        int int36 = dateTime34.getSecondOfMinute();
        boolean boolean37 = dateTime18.equals((java.lang.Object) dateTime34);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((java.lang.Object) dateTime34);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalTime localTime40 = localTime38.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay45 = dateTime42.toTimeOfDay();
        org.joda.time.LocalTime localTime46 = dateTime42.toLocalTime();
        int int47 = localTime46.getMillisOfSecond();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay52 = dateTime49.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property53 = timeOfDay52.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay52.withPeriodAdded(readablePeriod54, (int) '4');
        boolean boolean57 = localTime46.equals((java.lang.Object) timeOfDay56);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime61.minusDays(7);
        org.joda.time.DateTime dateTime65 = dateTime61.withYear(1);
        org.joda.time.Chronology chronology66 = dateTime61.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        long long71 = chronology66.add(readablePeriod68, 9L, 5);
        org.joda.time.TimeOfDay timeOfDay72 = timeOfDay56.withChronologyRetainFields(chronology66);
        boolean boolean73 = localTime40.isAfter((org.joda.time.ReadablePartial) timeOfDay56);
        java.util.Locale locale75 = null;
        java.lang.String str76 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime40, 3, locale75);
        org.joda.time.LocalTime localTime78 = localTime40.plusMinutes(8);
        org.joda.time.LocalTime.Property property79 = localTime40.minuteOfHour();
        org.joda.time.LocalTime localTime80 = property79.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-82800000L) + "'", long11 == (-82800000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "31" + "'", str16, "31");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str35, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 9L + "'", long71 == 9L);
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "3" + "'", str76, "3");
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localTime80);
    }

    @Test
    public void test03132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03132");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter2.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.Chronology chronology15 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.minuteOfDay();
        org.joda.time.DurationField durationField19 = chronology15.millis();
        boolean boolean20 = dateTimeFieldType5.isSupported(chronology15);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology15);
        java.lang.Integer int23 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 365);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str29 = dateTimeZone27.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone27.getName((-1L), locale32);
        java.lang.String str35 = dateTimeZone27.getNameKey((long) (short) 10);
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.plusHours(100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) timeOfDay38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-01:00" + "'", str29, "-01:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:00" + "'", str33, "-01:00");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(timeOfDay38);
    }

    @Test
    public void test03133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03133");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = gregorianCalendar13.get(17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test03134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03134");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime10.toLocalTime();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        long long20 = chronology15.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = dateTimeFormatter21.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withZoneUTC();
        java.lang.Appendable appendable24 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter21.printTo(appendable24, 31798800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(dateTimePrinter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
    }

    @Test
    public void test03135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03135");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        java.time.Instant instant7 = date5.toInstant();
        date5.setMinutes((int) (short) 10);
        date5.setMonth((-292275054));
        java.time.Instant instant12 = date5.toInstant();
        date5.setMonth((int) (short) 10);
        java.lang.Object obj15 = date5.clone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 01 00:10:00 UTC 24354286");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "Thu Nov 01 00:10:00 UTC 24354286");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "Thu Nov 01 00:10:00 UTC 24354286");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "Thu Nov 01 00:10:00 UTC 24354286");
    }

    @Test
    public void test03136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03136");
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay12 = dateTime9.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property13 = timeOfDay12.millisOfSecond();
        int int14 = property13.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay16 = property13.addToCopy(100);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay21 = dateTime18.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        boolean boolean23 = timeOfDay16.isEqual((org.joda.time.ReadablePartial) timeOfDay21);
        int int24 = timeOfDay21.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = timeOfDay21.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay21.withPeriodAdded(readablePeriod26, (int) (short) -1);
        int int29 = timeOfDay28.getSecondOfMinute();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay34 = dateTime31.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property35 = timeOfDay34.millisOfSecond();
        int int36 = property35.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay38 = property35.addToCopy(100);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay43 = dateTime40.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property44 = timeOfDay43.millisOfSecond();
        boolean boolean45 = timeOfDay38.isEqual((org.joda.time.ReadablePartial) timeOfDay43);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay38.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay47.minusMillis(100);
        boolean boolean50 = timeOfDay28.isAfter((org.joda.time.ReadablePartial) timeOfDay47);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int54 = dateTimeZone52.getStandardOffset((long) (short) 0);
        long long57 = dateTimeZone52.convertLocalToUTC(480100L, false);
        java.lang.String str59 = dateTimeZone52.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay28, dateTimeZone52);
        java.lang.String str63 = dateTimeZone52.getName((long) (short) 100);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (short) 10, dateTimeZone52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(31114187, 31021223, 31021460, 59, 11, 30961340, 74221000, dateTimeZone52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3600000) + "'", int54 == (-3600000));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 4080100L + "'", long57 == 4080100L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-01:00" + "'", str59, "-01:00");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-01:00" + "'", str63, "-01:00");
    }

    @Test
    public void test03137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03137");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(8);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfDay();
        long long17 = dateTimeField14.add(972048816035499L, 122);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 972048816035621L + "'", long17 == 972048816035621L);
    }

    @Test
    public void test03138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03138");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime31 = property13.addCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime32 = property13.roundFloorCopy();
        org.joda.time.LocalTime localTime34 = property13.setCopy(13);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime38.minusDays(7);
        org.joda.time.DateTime dateTime42 = dateTime38.withYear(1);
        org.joda.time.DateTime dateTime43 = dateTime42.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property44 = dateTime42.hourOfDay();
        org.joda.time.DateTime dateTime45 = property44.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfYear(8);
        org.joda.time.Chronology chronology48 = dateTime45.getChronology();
        long long49 = dateTime45.getMillis();
        java.util.Date date50 = dateTime45.toDate();
        org.joda.time.LocalDateTime localDateTime51 = dateTime45.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = localTime34.isAfter((org.joda.time.ReadablePartial) localDateTime51);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-62104064400000L) + "'", long49 == (-62104064400000L));
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Mon Jan 02 23:00:00 UTC 2");
        org.junit.Assert.assertNotNull(localDateTime51);
    }

    @Test
    public void test03139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03139");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        boolean boolean13 = dateTimeZone11.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime14 = dateTime7.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int18 = dateTimeZone16.getStandardOffset((long) (short) 0);
        long long20 = dateTimeZone11.getMillisKeepLocal(dateTimeZone16, (long) 0);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfDay();
        boolean boolean23 = dateTime21.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3600000) + "'", int18 == (-3600000));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test03140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03140");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter2.getParser();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter2.getZone();
        java.lang.StringBuffer stringBuffer7 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str20 = dateTimeZone18.getShortName((long) 0);
        org.joda.time.DateTime dateTime21 = dateTime16.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        boolean boolean30 = dateTime21.isBefore((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = dateTime29.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime29.getZone();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(dateTimeZone32);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer7, (org.joda.time.ReadablePartial) localTime33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:00" + "'", str20, "-01:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(localTime33);
    }

    @Test
    public void test03141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03141");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str16 = dateTimeFieldType15.toString();
        boolean boolean17 = localTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        org.joda.time.LocalTime localTime23 = dateTime19.toLocalTime();
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.years();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology24);
        org.joda.time.LocalTime.Property property28 = localTime27.minuteOfHour();
        org.joda.time.LocalTime localTime30 = property28.addWrapFieldToCopy(85680);
        org.joda.time.LocalTime localTime32 = localTime30.minusMillis(7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "monthOfYear" + "'", str16, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
    }

    @Test
    public void test03142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03142");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.plus(readableDuration30);
        org.joda.time.DateTime.Property property32 = dateTime26.dayOfMonth();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.Chronology chronology41 = dateTime36.getChronology();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime43 = localTime42.toDateTimeToday();
        int int44 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime43);
        int int45 = property32.getDifference((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeField dateTimeField46 = property32.getField();
        java.lang.String str47 = property32.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-738188) + "'", int45 == (-738188));
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "dayOfMonth" + "'", str47, "dayOfMonth");
    }

    @Test
    public void test03143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03143");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(82800100, 31021786, 580);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82800100 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03144");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("08:38:01.485");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03145");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology13 = chronology8.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.months();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test03146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03146");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(61, 114);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03147");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        int int21 = timeOfDay20.getSecondOfMinute();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.millisOfSecond();
        int int28 = property27.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay30 = property27.addToCopy(100);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay35 = dateTime32.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property36 = timeOfDay35.millisOfSecond();
        boolean boolean37 = timeOfDay30.isEqual((org.joda.time.ReadablePartial) timeOfDay35);
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay30.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay39.minusMillis(100);
        boolean boolean42 = timeOfDay20.isAfter((org.joda.time.ReadablePartial) timeOfDay39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int46 = dateTimeZone44.getStandardOffset((long) (short) 0);
        long long49 = dateTimeZone44.convertLocalToUTC(480100L, false);
        java.lang.String str51 = dateTimeZone44.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay20, dateTimeZone44);
        java.lang.String str55 = dateTimeZone44.getName((long) (short) 100);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime(dateTimeZone44);
        org.joda.time.LocalTime localTime58 = localTime56.withMillisOfDay(1970);
        int int59 = localTime58.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3600000) + "'", int46 == (-3600000));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 4080100L + "'", long49 == 4080100L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-01:00" + "'", str51, "-01:00");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-01:00" + "'", str55, "-01:00");
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test03148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03148");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.get();
        int int9 = property5.get();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        int int16 = property5.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.TimeOfDay timeOfDay18 = property5.addToCopy(15);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes((int) (short) 100);
        java.lang.String str31 = dateTime30.toString();
        java.util.GregorianCalendar gregorianCalendar32 = dateTime30.toGregorianCalendar();
        gregorianCalendar32.add(11, 11);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        org.joda.time.DateTime dateTime44 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property48 = dateTime47.monthOfYear();
        int int49 = dateTime47.getSecondOfDay();
        org.joda.time.DateTime dateTime51 = dateTime47.withMillisOfDay(70);
        boolean boolean52 = gregorianCalendar32.after((java.lang.Object) dateTime47);
        org.joda.time.DateTime.Property property53 = dateTime47.dayOfMonth();
        int int54 = property5.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime60.minusDays(7);
        org.joda.time.DateTime dateTime64 = dateTime60.withYear(1);
        org.joda.time.Chronology chronology65 = dateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.minuteOfDay();
        org.joda.time.DurationField durationField68 = chronology65.months();
        boolean boolean69 = dateTimeFieldType56.isSupported(chronology65);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (byte) 100, chronology65);
        org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str75 = dateTimeZone73.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone73);
        java.util.Locale locale78 = null;
        java.lang.String str79 = dateTimeZone73.getName((-1L), locale78);
        long long82 = dateTimeZone73.adjustOffset((long) (short) 10, true);
        org.joda.time.DateTime dateTime83 = dateTime70.withZone(dateTimeZone73);
        org.joda.time.DateTime.Property property84 = dateTime70.centuryOfEra();
        int int85 = property5.compareTo((org.joda.time.ReadableInstant) dateTime70);
        int int86 = dateTime70.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str31, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar32);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 85680 + "'", int49 == 85680);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-01:00" + "'", str75, "-01:00");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "-01:00" + "'", str79, "-01:00");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10L + "'", long82 == 10L);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 82800 + "'", int86 == 82800);
    }

    @Test
    public void test03149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03149");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        int int5 = timeOfDay4.getSecondOfMinute();
        int[] intArray6 = timeOfDay4.getValues();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime8 = localTime7.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime11 = localTime7.withPeriodAdded(readablePeriod9, (int) 'a');
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        int int18 = property17.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay20 = property17.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property23 = timeOfDay20.hourOfDay();
        int int24 = timeOfDay20.size();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.millisOfSecond();
        org.joda.time.DurationField durationField31 = property30.getDurationField();
        java.lang.String str32 = property30.getAsShortText();
        java.util.Locale locale33 = null;
        int int34 = property30.getMaximumTextLength(locale33);
        org.joda.time.TimeOfDay timeOfDay35 = property30.getTimeOfDay();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay40 = dateTime37.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property41 = timeOfDay40.millisOfSecond();
        int int42 = property41.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay44 = property41.addToCopy(100);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay49 = dateTime46.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property50 = timeOfDay49.millisOfSecond();
        boolean boolean51 = timeOfDay44.isEqual((org.joda.time.ReadablePartial) timeOfDay49);
        int[] intArray52 = timeOfDay44.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = timeOfDay44.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        boolean boolean56 = timeOfDay35.isSupported(dateTimeFieldType54);
        boolean boolean57 = timeOfDay20.isSupported(dateTimeFieldType54);
        boolean boolean58 = localTime7.isSupported(dateTimeFieldType54);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime62 = dateTime60.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay63 = dateTime60.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property64 = timeOfDay63.millisOfSecond();
        java.util.Locale locale65 = null;
        int int66 = property64.getMaximumShortTextLength(locale65);
        int int67 = property64.get();
        int int68 = property64.get();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime72 = dateTime70.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay73 = dateTime70.toTimeOfDay();
        org.joda.time.LocalTime localTime74 = dateTime70.toLocalTime();
        int int75 = property64.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology76 = dateTime70.getChronology();
        org.joda.time.TimeOfDay timeOfDay77 = new org.joda.time.TimeOfDay((java.lang.Object) localTime7, chronology76);
        org.joda.time.TimeOfDay timeOfDay78 = timeOfDay4.withChronologyRetainFields(chronology76);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime82 = dateTime80.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime84 = dateTime82.minusDays(7);
        org.joda.time.DateTime dateTime86 = dateTime82.withYear(1);
        org.joda.time.Chronology chronology87 = dateTime82.getChronology();
        org.joda.time.LocalTime localTime88 = new org.joda.time.LocalTime(chronology87);
        org.joda.time.DurationField durationField89 = chronology87.weeks();
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime(chronology87);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime93 = dateTime90.withField(dateTimeFieldType91, 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTime.Property property95 = dateTime93.property(dateTimeFieldType94);
        org.joda.time.TimeOfDay.Property property96 = timeOfDay4.property(dateTimeFieldType94);
        org.joda.time.TimeOfDay.Property property97 = timeOfDay4.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay99 = property97.addToCopy(12);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[23, 0, 0, 100]");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "100" + "'", str32, "100");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(timeOfDay78);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertNotNull(timeOfDay99);
    }

    @Test
    public void test03150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03150");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime12 = localTime10.withSecondOfMinute(1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime12, 14, locale14);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.DurationField durationField28 = chronology26.weeks();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = chronology26.add(readablePeriod29, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay33 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology26);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((-82799998L), chronology26);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay40 = dateTime37.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property41 = timeOfDay40.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay40.withPeriodAdded(readablePeriod42, (int) '4');
        int[] intArray45 = timeOfDay44.getValues();
        int[] intArray47 = dateTimeField9.set((org.joda.time.ReadablePartial) localTime34, (int) (short) 0, intArray45, (int) '4');
        int int49 = localTime34.getValue(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = localTime34.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "14" + "'", str15, "14");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[52, 0, 0, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[52, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
    }

    @Test
    public void test03151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03151");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.plus(readableDuration30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withDurationAdded(readableDuration34, 23);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromCalendarFields(calendar38);
        calendar38.set(3600096, 23, 42, 59, 859);
        // The following exception was thrown during execution in test generation
        try {
            calendar38.roll(18, 658);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3600096,MONTH=23,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=42,DAY_OF_YEAR=10,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=59,MINUTE=859,SECOND=1,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime39);
    }

    @Test
    public void test03152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03152");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTime dateTime11 = dateTime8.minusMinutes(17);
        org.joda.time.DateTime dateTime15 = dateTime8.withDate((int) (short) 0, 10, 22);
        org.joda.time.DateTime dateTime17 = dateTime15.withMillis(0L);
        org.joda.time.DateTime dateTime19 = dateTime15.plus((long) 1439);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime15.withMinuteOfHour(31115675);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31115675 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test03153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03153");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, 672, 32769);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 672 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03154");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.Chronology chronology13 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withChronology(chronology13);
        java.lang.Integer int17 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-2337983));
        java.lang.Appendable appendable20 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay25 = dateTime22.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property26 = timeOfDay25.millisOfSecond();
        java.util.Locale locale27 = null;
        int int28 = property26.getMaximumShortTextLength(locale27);
        int int29 = property26.get();
        java.util.Locale locale30 = null;
        java.lang.String str31 = property26.getAsText(locale30);
        java.lang.String str32 = property26.getAsText();
        org.joda.time.TimeOfDay timeOfDay33 = property26.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusSeconds(22);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay33.minusHours(79200000);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable20, (org.joda.time.ReadablePartial) timeOfDay37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100" + "'", str31, "100");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "100" + "'", str32, "100");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
    }

    @Test
    public void test03155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03155");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(15, (int) (short) 1);
        int int4 = dateTimeZone2.getOffset(0L);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 54060000 + "'", int4 == 54060000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test03156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03156");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-19), 25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03157");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        long long11 = dateTimeField9.roundHalfEven(480100L);
        boolean boolean13 = dateTimeField9.isLeap((-82800000L));
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        int int20 = property19.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property19.addToCopy(100);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        boolean boolean29 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) timeOfDay27);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay27.withSecondOfMinute(12);
        int int32 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay31);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay31.withMinuteOfHour(15);
        org.joda.time.Chronology chronology35 = timeOfDay34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.centuries();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.millisOfDay();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField39 = chronology35.dayOfMonth();
        org.joda.time.ReadablePartial readablePartial40 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay46 = dateTime43.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property47 = timeOfDay46.millisOfSecond();
        int int48 = property47.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay50 = property47.addToCopy(100);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay55 = dateTime52.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property56 = timeOfDay55.millisOfSecond();
        boolean boolean57 = timeOfDay50.isEqual((org.joda.time.ReadablePartial) timeOfDay55);
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay50.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay59.withMillisOfSecond((int) '#');
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime69 = dateTime67.minusDays(7);
        org.joda.time.DateTime dateTime71 = dateTime67.withYear(1);
        org.joda.time.Chronology chronology72 = dateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField74 = chronology72.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay75 = new org.joda.time.TimeOfDay(7, (int) ' ', chronology72);
        boolean boolean76 = timeOfDay59.isAfter((org.joda.time.ReadablePartial) timeOfDay75);
        int[] intArray77 = timeOfDay59.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray79 = dateTimeField39.set(readablePartial40, 992, intArray77, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3600000L + "'", long11 == 3600000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[23, 35, 0, 200]");
    }

    @Test
    public void test03158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03158");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        int int25 = dateTime21.getWeekyear();
        org.joda.time.DateTime dateTime27 = dateTime21.plusMillis(4);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property37 = dateTime35.hourOfDay();
        int int38 = property37.get();
        org.joda.time.DateTime dateTime39 = property37.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime39.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey((-61200000L));
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(7);
        org.joda.time.DateTime dateTime50 = dateTime46.withYear(1);
        org.joda.time.DateTime dateTime51 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str55 = dateTimeZone53.getShortName((long) 0);
        org.joda.time.DateTime dateTime56 = dateTime51.withZone(dateTimeZone53);
        long long59 = dateTimeZone53.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        boolean boolean63 = dateTimeZone61.equals((java.lang.Object) (-3600000));
        long long65 = dateTimeZone53.getMillisKeepLocal(dateTimeZone61, 100L);
        org.joda.time.ReadableInstant readableInstant66 = null;
        int int67 = dateTimeZone53.getOffset(readableInstant66);
        boolean boolean68 = dateTimeZone53.isFixed();
        long long70 = dateTimeZone40.getMillisKeepLocal(dateTimeZone53, (long) 2000);
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime21.toMutableDateTime(dateTimeZone40);
        org.joda.time.YearMonthDay yearMonthDay72 = dateTime21.toYearMonthDay();
        boolean boolean73 = dateTime21.isAfterNow();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 22 + "'", int38 == 22);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-01:00" + "'", str55, "-01:00");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 5L + "'", long59 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3600000) + "'", int67 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 2000L + "'", long70 == 2000L);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test03159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03159");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) (short) 0);
        boolean boolean12 = dateTime8.isEqual((long) (byte) 0);
        java.util.Locale locale13 = null;
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale13);
        java.lang.String str16 = dateTime8.toString("08:37:01.290");
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "08:37:01.290" + "'", str16, "08:37:01.290");
    }

    @Test
    public void test03160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03160");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime7.minusHours((int) 'a');
        org.joda.time.DateTime dateTime27 = dateTime7.minusWeeks(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.parse("0");
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay35 = dateTime32.toTimeOfDay();
        org.joda.time.LocalTime localTime36 = dateTime32.toLocalTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays(7);
        org.joda.time.DateTime dateTime44 = dateTime40.withYear(1);
        org.joda.time.DateTime dateTime45 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime46 = dateTime45.toDateTimeISO();
        org.joda.time.DateTime dateTime48 = dateTime46.plusMinutes((int) (short) 100);
        java.lang.String str49 = dateTime48.toString();
        int int50 = dateTime48.getSecondOfMinute();
        boolean boolean51 = dateTime32.equals((java.lang.Object) dateTime48);
        org.joda.time.DateTime.Property property52 = dateTime48.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getDurationType();
        boolean boolean55 = dateTime48.isSupported(dateTimeFieldType53);
        java.lang.String str56 = dateTimeFieldType53.getName();
        boolean boolean57 = dateTime29.isSupported(dateTimeFieldType53);
        java.lang.String str58 = dateTimeFieldType53.toString();
        org.joda.time.DateTime dateTime60 = dateTime27.withField(dateTimeFieldType53, 2022);
        int int61 = dateTime60.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.DateTime dateTime63 = dateTime60.minus(readablePeriod62);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str49, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "year" + "'", str56, "year");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "year" + "'", str58, "year");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test03161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03161");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property13.getLocalTime();
        org.joda.time.LocalTime localTime17 = property13.addNoWrapToCopy(30961509);
        org.joda.time.LocalTime localTime18 = property13.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField19 = property13.getField();
        java.lang.String str20 = property13.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "millisOfSecond" + "'", str20, "millisOfSecond");
    }

    @Test
    public void test03162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03162");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        calendar7.clear();
        boolean boolean10 = calendar7.after((java.lang.Object) (short) 0);
        calendar7.set(23, 14, 2);
        int int15 = calendar7.getWeekYear();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        java.util.Date date21 = dateTime17.toDate();
        long long22 = date21.getTime();
        int int23 = date21.getDate();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromDateFields(date21);
        date21.setTime((long) 357);
        calendar7.setTime(date21);
        calendar7.set(48, 59, (-3600000), 24, 200, 80);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=48,MONTH=59,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=-3600000,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=24,MINUTE=200,SECOND=80,MILLISECOND=357,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test03163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03163");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        int int16 = property13.getMaximumValueOverall();
        org.joda.time.LocalTime localTime18 = property13.addNoWrapToCopy(48);
        org.joda.time.LocalTime localTime19 = property13.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 999 + "'", int16 == 999);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test03164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03164");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property6.addNoWrapToCopy((int) ' ');
        org.joda.time.Chronology chronology9 = timeOfDay8.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay((int) (short) 0, 44, 115, (-292275054), chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 115 for secondOfMinute must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test03165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03165");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property11 = dateTime8.secondOfDay();
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = property11.setCopy("halfdayOfDay", locale13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"halfdayOfDay\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test03166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03166");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setLenient(true);
        int int14 = calendar7.getLeastMaximum(16);
        calendar7.set(0, 13, (int) (byte) -1);
        calendar7.setFirstDayOfWeek(16);
        java.util.TimeZone timeZone21 = calendar7.getTimeZone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=16,minimalDaysInFirstWeek=1,ERA=1,YEAR=0,MONTH=13,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=-1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1200000 + "'", int14 == 1200000);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT-01:00");
    }

    @Test
    public void test03167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03167");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime14 = dateTime11.withField(dateTimeFieldType12, 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.property(dateTimeFieldType15);
        org.joda.time.DurationField durationField17 = property16.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test03168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03168");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfMinute();
        org.joda.time.DateTime dateTime15 = property14.getDateTime();
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = dateTime15.isBefore(readableInstant16);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime15.plusHours((-292278));
        org.joda.time.DateTime dateTime22 = dateTime20.plusDays((-1028363091));
        org.joda.time.DateTime dateTime23 = dateTime20.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test03169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03169");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 9);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = dateTimeFormatter7.parseMillis("+00:00:00.032");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test03170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03170");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        java.lang.String str30 = property29.getName();
        boolean boolean31 = property29.isLeap();
        org.joda.time.DateTime dateTime32 = property29.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime34 = dateTime32.plusWeeks(0);
        org.joda.time.DateTime dateTime35 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property36 = dateTime34.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime34.withDayOfMonth((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "yearOfEra" + "'", str30, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test03171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03171");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str16 = dateTimeFieldType15.toString();
        boolean boolean17 = localTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        org.joda.time.LocalTime localTime23 = dateTime19.toLocalTime();
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.years();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology24);
        org.joda.time.LocalTime.Property property28 = localTime27.minuteOfHour();
        org.joda.time.LocalTime localTime29 = property28.roundHalfEvenCopy();
        java.lang.String str30 = property28.getAsShortText();
        org.joda.time.LocalTime localTime31 = property28.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "monthOfYear" + "'", str16, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "39" + "'", str30, "39");
        org.junit.Assert.assertNotNull(localTime31);
    }

    @Test
    public void test03172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03172");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = dateTimeField15.getDifference(85729940L, 299724572240163L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -299724486510223");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test03173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03173");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        boolean boolean15 = gregorianCalendar13.isWeekDateSupported();
        java.util.Date date16 = gregorianCalendar13.getTime();
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromDateFields(date16);
        long long18 = date16.getTime();
        date16.setDate(15);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Jan 15 00:48:00 UTC 2");
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-62104057919900L) + "'", long18 == (-62104057919900L));
    }

    @Test
    public void test03174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03174");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(366, 63, 52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03175");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime31 = property13.addCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime32 = property13.roundFloorCopy();
        org.joda.time.LocalTime localTime33 = property13.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
    }

    @Test
    public void test03176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03176");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale5);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfDay();
        org.joda.time.DurationField durationField22 = chronology19.months();
        boolean boolean23 = dateTimeFieldType10.isSupported(chronology19);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 100, chronology19);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology19.add(readablePeriod25, (long) 100, 17);
        org.joda.time.DurationField durationField29 = chronology19.months();
        org.joda.time.DurationField durationField30 = chronology19.years();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter8.withChronology(chronology19);
        java.io.Writer writer33 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime38.minusDays(7);
        org.joda.time.DateTime dateTime42 = dateTime38.withYear(1);
        org.joda.time.Chronology chronology43 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.minuteOfDay();
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology43);
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay(chronology43);
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(chronology43);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.minus(readablePeriod49);
        int int51 = timeOfDay50.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(writer33, (org.joda.time.ReadablePartial) timeOfDay50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(timeOfDay50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 39 + "'", int51 == 39);
    }

    @Test
    public void test03177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03177");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(7);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(1);
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        boolean boolean16 = dateTimeZone14.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology17 = chronology12.withZone(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter3.withZone(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter3.withOffsetParsed();
        java.lang.Integer int20 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter3.withPivotYear((int) (byte) 1);
        org.joda.time.Chronology chronology23 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 1380);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.parse("0001-12-31T23:48:35.100-01:00", dateTimeFormatter25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
    }

    @Test
    public void test03178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03178");
        java.util.Date date1 = new java.util.Date("1 Jan 1970 00:00:00 GMT");
        date1.setSeconds(31);
        java.lang.String str4 = date1.toString();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:31 UTC 1970");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Thu Jan 01 00:00:31 UTC 1970" + "'", str4, "Thu Jan 01 00:00:31 UTC 1970");
    }

    @Test
    public void test03179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03179");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.addCopy(1L);
        org.joda.time.LocalTime localTime18 = property13.addNoWrapToCopy(31128547);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test03180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03180");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime10.toLocalTime();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        long long20 = chronology15.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.Chronology chronology22 = dateTimeFormatter21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter21.withPivotYear(86399999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = dateTimeFormatter21.parseMutableDateTime("31021460");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test03181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03181");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.addCopy(1L);
        org.joda.time.LocalTime localTime17 = property13.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime19 = property13.addCopy(480100L);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime19.plus(readablePeriod20);
        org.joda.time.LocalTime.Property property22 = localTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        java.util.Locale locale29 = null;
        int int30 = property28.getMaximumShortTextLength(locale29);
        int int31 = property28.get();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property28.getAsText(locale32);
        java.lang.String str34 = property28.getAsText();
        org.joda.time.TimeOfDay timeOfDay35 = property28.withMaximumValue();
        int int36 = timeOfDay35.getMillisOfSecond();
        int int37 = localTime21.compareTo((org.joda.time.ReadablePartial) timeOfDay35);
        int int38 = localTime21.size();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100" + "'", str33, "100");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 999 + "'", int36 == 999);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
    }

    @Test
    public void test03182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03182");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        long long16 = dateTimeZone10.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        boolean boolean20 = dateTimeZone18.equals((java.lang.Object) (-3600000));
        long long22 = dateTimeZone10.getMillisKeepLocal(dateTimeZone18, 100L);
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone10.getOffset(readableInstant23);
        long long28 = dateTimeZone10.convertLocalToUTC((long) (-292275054), false, (long) 100);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.LocalDateTime localDateTime35 = dateTime34.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = localDateTime35.getFieldType((int) (short) 1);
        boolean boolean38 = dateTimeZone10.isLocalDateTimeGap(localDateTime35);
        int int40 = dateTimeZone10.getOffsetFromLocal((-82785756L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5L + "'", long16 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3600000) + "'", int24 == (-3600000));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-288675054L) + "'", long28 == (-288675054L));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3600000) + "'", int40 == (-3600000));
    }

    @Test
    public void test03183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03183");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime13.getEra();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime26 = dateTime13.withDurationAdded(readableDuration24, (int) '4');
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property36 = dateTime34.hourOfDay();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        boolean boolean40 = dateTimeZone38.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime41 = dateTime34.withZone(dateTimeZone38);
        boolean boolean42 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateMidnight dateMidnight43 = dateTime41.toDateMidnight();
        org.joda.time.TimeOfDay timeOfDay44 = dateTime41.toTimeOfDay();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay49 = dateTime46.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property50 = timeOfDay49.millisOfSecond();
        int int51 = property50.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay53 = property50.addToCopy(100);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay58 = dateTime55.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property59 = timeOfDay58.millisOfSecond();
        boolean boolean60 = timeOfDay53.isEqual((org.joda.time.ReadablePartial) timeOfDay58);
        int int61 = timeOfDay58.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = timeOfDay58.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.TimeOfDay timeOfDay65 = timeOfDay58.withPeriodAdded(readablePeriod63, (int) (short) -1);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime69 = dateTime67.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime69.minusDays(7);
        org.joda.time.DateTime dateTime73 = dateTime69.withYear(1);
        org.joda.time.DateTime dateTime74 = dateTime73.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str78 = dateTimeZone76.getShortName((long) 0);
        org.joda.time.DateTime dateTime79 = dateTime74.withZone(dateTimeZone76);
        long long82 = dateTimeZone76.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone83 = null;
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forTimeZone(timeZone83);
        boolean boolean86 = dateTimeZone84.equals((java.lang.Object) (-3600000));
        long long88 = dateTimeZone76.getMillisKeepLocal(dateTimeZone84, 100L);
        org.joda.time.DateTime dateTime89 = timeOfDay65.toDateTimeToday(dateTimeZone84);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType91 = dateTimeFieldType90.getDurationType();
        boolean boolean92 = dateTime89.isSupported(dateTimeFieldType90);
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType90.getDurationType();
        int int94 = timeOfDay44.indexOf(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-01:00" + "'", str78, "-01:00");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 5L + "'", long82 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 100L + "'", long88 == 100L);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(durationFieldType93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test03184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03184");
        long long6 = java.util.Date.UTC(7, 937, 22, 82800010, 2322845, 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 298697285101000L + "'", long6 == 298697285101000L);
    }

    @Test
    public void test03185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03185");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        boolean boolean15 = gregorianCalendar13.isWeekDateSupported();
        java.util.Date date16 = gregorianCalendar13.getTime();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getTimezoneOffset();
        gregorianCalendar13.setTime(date17);
        gregorianCalendar13.set(357, 5, 0, 52, 8, 79200000);
        gregorianCalendar13.set((int) (short) 10, (int) (byte) 0);
        java.time.Instant instant30 = gregorianCalendar13.toInstant();
        gregorianCalendar13.setMinimalDaysInFirstWeek((int) (byte) 10);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 03 00:48:00 UTC 2");
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Fri Feb 11 09:39:04 UTC 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(instant30);
    }

    @Test
    public void test03186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03186");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay11 = dateTime8.toTimeOfDay();
        org.joda.time.LocalTime localTime12 = dateTime8.toLocalTime();
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(680, 358, 658, 4, (-35748), 1378, 15, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -35748 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test03187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03187");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime31 = property13.addCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime32 = property13.roundFloorCopy();
        org.joda.time.LocalTime localTime34 = property13.setCopy(13);
        java.util.Locale locale36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = localTime34.toString("2022-02-11T08:37:56.124-01:00", locale36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
    }

    @Test
    public void test03188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03188");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.Chronology chronology13 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.hourOfHalfday();
        org.joda.time.Chronology chronology17 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(31021296, 1968, 0, 357, (-14640), chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 357 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test03189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03189");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekOfWeekyear(13);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTime16.toString("1380", locale20);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.Chronology chronology31 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfDay();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology31);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.joda.time.LocalTime localTime37 = property35.getLocalTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(7);
        org.joda.time.DateTime dateTime45 = dateTime41.withYear(1);
        org.joda.time.DateTime dateTime46 = dateTime45.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTimeISO();
        int int48 = dateTime47.getEra();
        org.joda.time.DateTime.Property property49 = dateTime47.weekyear();
        org.joda.time.DateTime.Property property50 = dateTime47.yearOfCentury();
        org.joda.time.DateTime dateTime52 = property50.addToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime54 = property50.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime55 = localTime37.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = dateTime54.withDurationAdded(3600009L, 13);
        int int59 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime54);
        int int60 = dateTime54.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1380" + "'", str21, "1380");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1328 + "'", int60 == 1328);
    }

    @Test
    public void test03190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03190");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.plus(readableDuration30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withDurationAdded(readableDuration34, 23);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        java.util.TimeZone timeZone39 = calendar38.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int41 = calendar38.getLeastMaximum(457);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 457");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-62134909199000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT-01:00");
    }

    @Test
    public void test03191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03191");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        java.util.TimeZone timeZone14 = dateTimeZone10.toTimeZone();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone14);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone14);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = calendar16.getMinimum(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644572344726,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=39,SECOND=4,MILLISECOND=726,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644572344726,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=39,SECOND=4,MILLISECOND=726,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test03192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03192");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.plus(readableDuration30);
        org.joda.time.DateTime.Property property32 = dateTime26.dayOfMonth();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.Chronology chronology41 = dateTime36.getChronology();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime43 = localTime42.toDateTimeToday();
        int int44 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime43);
        int int45 = property32.getDifference((org.joda.time.ReadableInstant) dateTime43);
        int int46 = property32.getMaximumValue();
        org.joda.time.DateTime dateTime47 = property32.roundHalfEvenCopy();
        java.lang.String str48 = property32.getName();
        org.joda.time.DateTime dateTime49 = property32.roundHalfEvenCopy();
        java.util.Locale locale50 = null;
        int int51 = property32.getMaximumTextLength(locale50);
        org.joda.time.DateTime dateTime52 = property32.withMaximumValue();
        java.lang.String str53 = property32.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-738188) + "'", int45 == (-738188));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 31 + "'", int46 == 31);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "dayOfMonth" + "'", str48, "dayOfMonth");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "dayOfMonth" + "'", str53, "dayOfMonth");
    }

    @Test
    public void test03193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03193");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.minus(readablePeriod3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str6 = durationFieldType5.toString();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType5, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localTime8.getValue(22);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 22");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "seconds" + "'", str6, "seconds");
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test03194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03194");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        java.lang.StringBuffer stringBuffer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(stringBuffer7, 6842880000010L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test03195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03195");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str16 = dateTimeFieldType15.toString();
        boolean boolean17 = localTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        org.joda.time.LocalTime localTime23 = dateTime19.toLocalTime();
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.years();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int29 = localTime27.indexOf(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property39 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = property39.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property41 = dateTime40.weekOfWeekyear();
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        org.joda.time.DateTime dateTime44 = property41.withMaximumValue();
        org.joda.time.DateTime dateTime45 = dateTime44.withTimeAtStartOfDay();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime50 = dateTime45.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = localTime27.toDateTimeToday(dateTimeZone47);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMonths(712);
        org.joda.time.DateTime.Property property54 = dateTime51.millisOfDay();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.minusDays(7);
        org.joda.time.DateTime dateTime62 = dateTime58.withYear(1);
        org.joda.time.DateTime dateTime63 = dateTime62.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime65 = dateTime63.plusYears((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = dateTime63.isSupported(dateTimeFieldType66);
        int int68 = property54.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime70 = dateTime63.plusMonths((-1));
        org.joda.time.DateTime dateTime72 = dateTime70.minusYears(31021256);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "monthOfYear" + "'", str16, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test03196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03196");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay23 = property21.addToCopy(2);
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = timeOfDay23.toString("0002-01-03T08:38:01.415-01:00", locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(timeOfDay23);
    }

    @Test
    public void test03197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03197");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        java.util.Date date2 = calendar0.getTime();
        calendar0.setLenient(false);
        calendar0.set(61200002, 91, 1970);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant9 = calendar0.toInstant();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=61200002,MONTH=91,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1970,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test03198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03198");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(999L);
    }

    @Test
    public void test03199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03199");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        java.lang.String str21 = timeOfDay20.toString();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plus(readablePeriod22);
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.secondOfMinute();
        org.joda.time.LocalTime localTime25 = timeOfDay23.toLocalTime();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int28 = localTime27.getSecondOfMinute();
        int int29 = localTime27.getMinuteOfHour();
        org.joda.time.DateTime dateTime30 = localTime27.toDateTimeToday();
        boolean boolean31 = dateTime30.isAfterNow();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay36 = dateTime33.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.millisOfSecond();
        int int38 = property37.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay40 = property37.addToCopy(100);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay45 = dateTime42.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property46 = timeOfDay45.millisOfSecond();
        boolean boolean47 = timeOfDay40.isEqual((org.joda.time.ReadablePartial) timeOfDay45);
        int[] intArray48 = timeOfDay40.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = timeOfDay40.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        int int52 = dateTime30.get(dateTimeFieldType50);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime56.minusDays(7);
        org.joda.time.DateTime dateTime60 = dateTime56.withYear(1);
        org.joda.time.DateTime.Property property61 = dateTime60.yearOfEra();
        java.lang.String str62 = property61.getName();
        boolean boolean63 = property61.isLeap();
        org.joda.time.DateTime dateTime64 = property61.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime66 = dateTime64.minus((long) 12);
        org.joda.time.DateTime dateTime68 = dateTime66.minusMillis(70);
        org.joda.time.Chronology chronology69 = dateTime68.getChronology();
        boolean boolean70 = dateTimeFieldType50.isSupported(chronology69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime72 = localTime25.withField(dateTimeFieldType50, (-738188));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -738188 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "T01:00:00.100" + "'", str21, "T01:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "yearOfEra" + "'", str62, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test03200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03200");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        long long11 = chronology6.add(0L, (long) (short) 0, 0);
        org.joda.time.DateTimeField dateTimeField12 = chronology6.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.secondOfDay();
        long long16 = dateTimeField13.addWrapField((-2020L), 37);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-86365020L) + "'", long16 == (-86365020L));
    }

    @Test
    public void test03201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03201");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        java.lang.String str18 = timeOfDay17.toString();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours(2);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay17.withPeriodAdded(readablePeriod21, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(15, (int) (short) 1);
        int int28 = dateTimeZone26.getOffset(0L);
        org.joda.time.DateTime dateTime29 = timeOfDay17.toDateTimeToday(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = dateTime29.withDayOfWeek(85680);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 85680 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "T23:35:00.200" + "'", str18, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 54060000 + "'", int28 == 54060000);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
    }

    @Test
    public void test03202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03202");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property5.getFieldType();
        org.joda.time.TimeOfDay timeOfDay11 = property5.setCopy("1");
        org.joda.time.DateTime dateTime12 = timeOfDay11.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test03203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03203");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay6 = dateTime3.toTimeOfDay();
        java.util.Date date7 = dateTime3.toDate();
        long long8 = date7.getTime();
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        java.util.Date date15 = dateTime11.toDate();
        java.time.Instant instant16 = date15.toInstant();
        int int17 = date15.getSeconds();
        java.util.Calendar.Builder builder18 = builder9.setInstant(date15);
        boolean boolean19 = date7.before(date15);
        calendar1.setTime(date15);
        int int21 = calendar1.getWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            calendar1.clear(31021786);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31021786");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
    }

    @Test
    public void test03204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03204");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusHours(13);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.plusMinutes(85680100);
        java.util.Locale locale7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = timeOfDay1.toString("0002-01-01T00:48:00.344+00:00:00.244", locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
    }

    @Test
    public void test03205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03205");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay8.withChronologyRetainFields(chronology19);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str35 = dateTimeZone33.getShortName((long) 0);
        org.joda.time.DateTime dateTime36 = dateTime31.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays(7);
        org.joda.time.DateTime dateTime44 = dateTime40.withYear(1);
        boolean boolean45 = dateTime36.isBefore((org.joda.time.ReadableInstant) dateTime44);
        int int46 = dateTime36.getEra();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime49 = dateTime36.withDurationAdded(readableDuration47, (int) '4');
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime53.minusDays(7);
        org.joda.time.DateTime dateTime57 = dateTime53.withYear(1);
        org.joda.time.DateTime dateTime58 = dateTime57.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property59 = dateTime57.hourOfDay();
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        boolean boolean63 = dateTimeZone61.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime64 = dateTime57.withZone(dateTimeZone61);
        boolean boolean65 = dateTime36.isAfter((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime66 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime68 = dateTime66.withHourOfDay(762);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 762 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-01:00" + "'", str35, "-01:00");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test03206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03206");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withChronology(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfDay();
        org.joda.time.DurationField durationField22 = chronology19.months();
        boolean boolean23 = dateTimeFieldType10.isSupported(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime9.withField(dateTimeFieldType10, 8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime9.withDayOfYear(85680);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 85680 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test03207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03207");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        long long11 = property9.remainder();
        int int12 = property9.getMinimumValue();
        org.joda.time.DateTime dateTime13 = property9.roundFloorCopy();
        int int14 = property9.getMaximumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = property9.setCopy(949);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 949 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 480100L + "'", long11 == 480100L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
    }

    @Test
    public void test03208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03208");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        long long11 = property9.remainder();
        org.joda.time.Interval interval12 = property9.toInterval();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property9.getAsText(locale13);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyearOfCentury();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime27 = localTime25.withSecondOfMinute(1);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localTime27, 14, locale29);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = localTime27.getFields();
        int int32 = localTime27.size();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.DateTime dateTime41 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime42 = dateTime41.toDateTimeISO();
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property45 = dateTime44.monthOfYear();
        int int46 = dateTime44.getSecondOfDay();
        org.joda.time.DateTime dateTime48 = dateTime44.withMillisOfDay(70);
        org.joda.time.DateTime dateTime49 = localTime27.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = dateTime49.withWeekyear((int) (short) 0);
        long long52 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = property9.roundCeilingCopy();
        org.joda.time.DateTime dateTime54 = property9.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = dateTime54.withSecondOfMinute((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 480100L + "'", long11 == 480100L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "22" + "'", str14, "22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "14" + "'", str30, "14");
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 85680 + "'", int46 == 85680);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 17485L + "'", long52 == 17485L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test03209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03209");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone4.getName(0L, locale6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZone(dateTimeZone4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear(86399999);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfDay();
        org.joda.time.DurationField durationField22 = chronology19.hours();
        org.joda.time.DurationField durationField23 = chronology19.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter8.withChronology(chronology19);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = dateTimeFormatter8.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(dateTimePrinter25);
    }

    @Test
    public void test03210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03210");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        calendar7.clear();
        boolean boolean10 = calendar7.after((java.lang.Object) (short) 0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        java.lang.String str20 = property19.getName();
        boolean boolean21 = property19.isLeap();
        org.joda.time.DateTime dateTime22 = property19.roundHalfFloorCopy();
        int int23 = dateTime22.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        boolean boolean25 = calendar7.before((java.lang.Object) dateTime24);
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setFirstDayOfWeek(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str41 = dateTimeZone39.getShortName((long) 0);
        org.joda.time.DateTime dateTime42 = dateTime37.withZone(dateTimeZone39);
        java.util.TimeZone timeZone43 = dateTimeZone39.toTimeZone();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone43);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone43);
        calendar7.setTimeZone(timeZone43);
        java.util.Locale locale47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone43, locale47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=3600000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "yearOfEra" + "'", str20, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-01:00" + "'", str41, "-01:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572345819,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=39,SECOND=5,MILLISECOND=819,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644572345819,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=39,SECOND=5,MILLISECOND=819,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test03211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03211");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime31 = property13.roundFloorCopy();
        org.joda.time.DurationField durationField32 = property13.getRangeDurationField();
        org.joda.time.LocalTime localTime33 = property13.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalTime localTime35 = localTime33.minus(readablePeriod34);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = localTime33.getValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
    }

    @Test
    public void test03212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03212");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-62104063919900L));
    }

    @Test
    public void test03213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03213");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getName(62L, locale2);
        int int5 = dateTimeZone0.getOffset((-607919900L));
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str28 = dateTimeZone26.getShortName((long) 0);
        org.joda.time.DateTime dateTime29 = dateTime24.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime14.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime dateTime39 = dateTime38.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str43 = dateTimeZone41.getShortName((long) 0);
        org.joda.time.DateTime dateTime44 = dateTime39.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays(7);
        org.joda.time.DateTime dateTime52 = dateTime48.withYear(1);
        boolean boolean53 = dateTime44.isBefore((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = dateTime52.isEqualNow();
        org.joda.time.DateTime dateTime56 = dateTime52.minusSeconds(22);
        boolean boolean57 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.era();
        boolean boolean59 = dateTime30.isSupported(dateTimeFieldType58);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime63 = dateTime61.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime63.minusDays(7);
        org.joda.time.DateTime dateTime67 = dateTime63.withYear(1);
        org.joda.time.DateTime dateTime68 = dateTime67.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime69 = dateTime68.toDateTimeISO();
        org.joda.time.DateTime dateTime71 = dateTime69.plusMinutes((int) (short) 100);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.DateTime dateTime74 = dateTime71.plusYears(14);
        java.util.Locale locale75 = null;
        java.util.Calendar calendar76 = dateTime71.toCalendar(locale75);
        org.joda.time.DateTime dateTime78 = dateTime71.plus((long) 7);
        boolean boolean79 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime78);
        int int80 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3600000) + "'", int5 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:00" + "'", str28, "-01:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-01:00" + "'", str43, "-01:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str72, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=-62104057919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=48,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3600000) + "'", int80 == (-3600000));
    }

    @Test
    public void test03214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03214");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.add(11, 11);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        java.lang.String str18 = gregorianCalendar13.getCalendarType();
        java.lang.Object obj19 = gregorianCalendar13.clone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "gregory" + "'", str18, "gregory");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "java.util.GregorianCalendar[time=-62104018319900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=48,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "java.util.GregorianCalendar[time=-62104018319900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=48,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "java.util.GregorianCalendar[time=-62104018319900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=48,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test03215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03215");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        java.lang.Object obj14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str18 = dateTimeZone16.getShortName((long) 0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj14, dateTimeZone16);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(chronology28);
        org.joda.time.DurationField durationField30 = chronology28.weeks();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = chronology28.add(readablePeriod31, 1L, 8);
        org.joda.time.DateTime dateTime35 = dateTime19.toDateTime(chronology28);
        org.joda.time.DateTime dateTime36 = dateTime13.withChronology(chronology28);
        org.joda.time.DateTime.Property property37 = dateTime13.minuteOfHour();
        java.util.Locale locale38 = null;
        java.util.Calendar calendar39 = dateTime13.toCalendar(locale38);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-01:00" + "'", str18, "-01:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-62104057200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test03216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03216");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (short) 0, 14, 31);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalTime localTime5 = localTime3.plus(readablePeriod4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology7);
        org.joda.time.LocalTime localTime10 = localTime8.plusHours((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay15 = dateTime12.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.millisOfSecond();
        int int17 = property16.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay19 = property16.addToCopy(100);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay24 = dateTime21.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.millisOfSecond();
        boolean boolean26 = timeOfDay19.isEqual((org.joda.time.ReadablePartial) timeOfDay24);
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay19.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay28.minusMillis(100);
        int int31 = localTime8.compareTo((org.joda.time.ReadablePartial) timeOfDay28);
        boolean boolean32 = localTime5.isAfter((org.joda.time.ReadablePartial) timeOfDay28);
        org.joda.time.LocalTime localTime34 = localTime5.withMillisOfDay(54060000);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localTime34);
    }

    @Test
    public void test03217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03217");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime3 = localTime2.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalTime localTime6 = localTime2.withPeriodAdded(readablePeriod4, (int) 'a');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay11 = dateTime8.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.millisOfSecond();
        int int13 = property12.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property12.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay15.hourOfDay();
        int int19 = timeOfDay15.size();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay24 = dateTime21.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.millisOfSecond();
        org.joda.time.DurationField durationField26 = property25.getDurationField();
        java.lang.String str27 = property25.getAsShortText();
        java.util.Locale locale28 = null;
        int int29 = property25.getMaximumTextLength(locale28);
        org.joda.time.TimeOfDay timeOfDay30 = property25.getTimeOfDay();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay35 = dateTime32.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property36 = timeOfDay35.millisOfSecond();
        int int37 = property36.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay39 = property36.addToCopy(100);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay44 = dateTime41.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property45 = timeOfDay44.millisOfSecond();
        boolean boolean46 = timeOfDay39.isEqual((org.joda.time.ReadablePartial) timeOfDay44);
        int[] intArray47 = timeOfDay39.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = timeOfDay39.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        boolean boolean51 = timeOfDay30.isSupported(dateTimeFieldType49);
        boolean boolean52 = timeOfDay15.isSupported(dateTimeFieldType49);
        boolean boolean53 = localTime2.isSupported(dateTimeFieldType49);
        org.joda.time.DateTime.Property property54 = dateTime1.property(dateTimeFieldType49);
        org.joda.time.DateTime dateTime56 = dateTime1.plus((long) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime58 = dateTime1.withSecondOfMinute(794);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 794 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test03218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03218");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(8);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfDay();
        org.joda.time.DurationField durationField28 = chronology25.months();
        boolean boolean29 = dateTimeFieldType16.isSupported(chronology25);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 100, chronology25);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime30);
        org.joda.time.DateTime dateTime32 = timeOfDay31.toDateTimeToday();
        org.joda.time.DateTime dateTime33 = dateTime14.withFields((org.joda.time.ReadablePartial) timeOfDay31);
        boolean boolean34 = dateTime14.isEqualNow();
        org.joda.time.DateTime.Property property35 = dateTime14.secondOfDay();
        java.util.Locale locale36 = null;
        java.lang.String str37 = property35.getAsShortText(locale36);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "82800" + "'", str37, "82800");
    }

    @Test
    public void test03219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03219");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str16 = dateTimeFieldType15.toString();
        boolean boolean17 = localTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        org.joda.time.LocalTime localTime23 = dateTime19.toLocalTime();
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.years();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long36 = chronology24.getDateTimeMillis(100, 85680, 9, 357, 516, 680, 518);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 357 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "monthOfYear" + "'", str16, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test03220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03220");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property13.getLocalTime();
        org.joda.time.DateTimeField dateTimeField16 = property13.getField();
        org.joda.time.LocalTime localTime18 = property13.addNoWrapToCopy((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) localTime18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test03221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03221");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str3 = dateTimeZone1.getShortName((long) 0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property5 = dateTime4.weekyear();
        org.joda.time.DurationField durationField6 = property5.getRangeDurationField();
        org.joda.time.DurationField durationField7 = property5.getRangeDurationField();
        org.joda.time.DateTime dateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = property5.getDateTime();
        org.joda.time.DateTime dateTime10 = property5.withMinimumValue();
        org.joda.time.DateTime dateTime12 = property5.setCopy("-1");
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay17 = dateTime14.toTimeOfDay();
        org.joda.time.LocalTime localTime18 = dateTime14.toLocalTime();
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.hours();
        long long24 = chronology19.add(0L, (long) (short) 0, 0);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime12.toMutableDateTime(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test03222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03222");
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        boolean boolean19 = durationFieldType7.isSupported(chronology16);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.Chronology chronology29 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology29);
        org.joda.time.LocalTime.Property property33 = localTime32.millisOfSecond();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(7);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(1);
        org.joda.time.DateTime dateTime42 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property43 = dateTime41.hourOfDay();
        org.joda.time.DateTime dateTime44 = property43.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfYear(8);
        org.joda.time.DateTime dateTime48 = dateTime46.withMillis((long) 10);
        long long49 = property33.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime51 = dateTime46.withYear(365);
        org.joda.time.DateTime dateTime53 = dateTime46.withYear((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime46.getZone();
        org.joda.time.Chronology chronology55 = chronology16.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(17661728, 18, 388, 365, 1968, 85680, 82800010, chronology55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 62134912800000L + "'", long49 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test03223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03223");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int[] intArray16 = timeOfDay8.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = timeOfDay8.getFieldType(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime22 = localTime21.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalTime localTime25 = localTime21.withPeriodAdded(readablePeriod23, (int) 'a');
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay30 = dateTime27.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property31 = timeOfDay30.millisOfSecond();
        int int32 = property31.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay34 = property31.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property37 = timeOfDay34.hourOfDay();
        int int38 = timeOfDay34.size();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay43 = dateTime40.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property44 = timeOfDay43.millisOfSecond();
        org.joda.time.DurationField durationField45 = property44.getDurationField();
        java.lang.String str46 = property44.getAsShortText();
        java.util.Locale locale47 = null;
        int int48 = property44.getMaximumTextLength(locale47);
        org.joda.time.TimeOfDay timeOfDay49 = property44.getTimeOfDay();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay54 = dateTime51.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property55 = timeOfDay54.millisOfSecond();
        int int56 = property55.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay58 = property55.addToCopy(100);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime62 = dateTime60.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay63 = dateTime60.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property64 = timeOfDay63.millisOfSecond();
        boolean boolean65 = timeOfDay58.isEqual((org.joda.time.ReadablePartial) timeOfDay63);
        int[] intArray66 = timeOfDay58.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = timeOfDay58.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType68.getDurationType();
        boolean boolean70 = timeOfDay49.isSupported(dateTimeFieldType68);
        boolean boolean71 = timeOfDay34.isSupported(dateTimeFieldType68);
        boolean boolean72 = localTime21.isSupported(dateTimeFieldType68);
        org.joda.time.DateTime.Property property73 = dateTime20.property(dateTimeFieldType68);
        boolean boolean74 = timeOfDay8.isSupported(dateTimeFieldType68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay76 = timeOfDay8.withHourOfDay(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test03224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03224");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay15.getFieldTypes();
        java.lang.String str17 = timeOfDay15.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "T23:48:00.100" + "'", str17, "T23:48:00.100");
    }

    @Test
    public void test03225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03225");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        java.util.Locale locale10 = null;
        int int11 = dateTimeField9.getMaximumShortTextLength(locale10);
        long long14 = dateTimeField9.add(328458178800816L, (-62135593200000L));
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay19 = dateTime16.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property20 = timeOfDay19.millisOfSecond();
        org.joda.time.DurationField durationField21 = property20.getDurationField();
        java.lang.String str22 = property20.getAsShortText();
        java.util.Locale locale23 = null;
        int int24 = property20.getMaximumTextLength(locale23);
        org.joda.time.TimeOfDay timeOfDay25 = property20.getTimeOfDay();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property20.getAsShortText(locale26);
        org.joda.time.TimeOfDay timeOfDay28 = property20.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay28.withPeriodAdded(readablePeriod29, (-292275054));
        int int32 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay31);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 266322585600816L + "'", long14 == 266322585600816L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "100" + "'", str22, "100");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test03226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03226");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        long long14 = dateTimeField11.getDifferenceAsLong((long) 11, (long) 100);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology16);
        org.joda.time.LocalTime localTime19 = localTime17.plusHours((int) (byte) 10);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfDay();
        org.joda.time.LocalTime localTime22 = localTime19.minusHours(17);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = localTime22.getFields();
        org.joda.time.LocalTime.Property property24 = localTime22.millisOfDay();
        int int25 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.Chronology chronology26 = localTime22.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long34 = chronology26.getDateTimeMillis(1869, 63, 0, 949, 19, 0, (-3600000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 949 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test03227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03227");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str33 = dateTimeZone31.getShortName((long) 0);
        org.joda.time.DateTime dateTime34 = dateTime29.withZone(dateTimeZone31);
        long long37 = dateTimeZone31.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        boolean boolean41 = dateTimeZone39.equals((java.lang.Object) (-3600000));
        long long43 = dateTimeZone31.getMillisKeepLocal(dateTimeZone39, 100L);
        org.joda.time.DateTime dateTime44 = timeOfDay20.toDateTimeToday(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        boolean boolean47 = dateTime44.isSupported(dateTimeFieldType45);
        org.joda.time.DateTime.Property property48 = dateTime44.weekyear();
        int int49 = property48.getLeapAmount();
        org.joda.time.DurationField durationField50 = property48.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:00" + "'", str33, "-01:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 5L + "'", long37 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(durationField50);
    }

    @Test
    public void test03228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03228");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(7);
        org.joda.time.DateTime dateTime32 = dateTime28.withYear(1);
        org.joda.time.Chronology chronology33 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.year();
        boolean boolean37 = calendar24.before((java.lang.Object) dateTimeField36);
        org.joda.time.TimeOfDay timeOfDay38 = org.joda.time.TimeOfDay.fromCalendarFields(calendar24);
        java.time.Instant instant39 = calendar24.toInstant();
        java.util.Date date40 = java.util.Date.from(instant39);
        java.util.Date date41 = java.util.Date.from(instant39);
        date41.setMonth(357);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay48 = dateTime45.toTimeOfDay();
        java.util.Date date49 = dateTime45.toDate();
        java.time.Instant instant50 = date49.toInstant();
        int int51 = date49.getHours();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay56 = dateTime53.toTimeOfDay();
        java.util.Date date57 = dateTime53.toDate();
        long long58 = date57.getTime();
        int int59 = date57.getHours();
        date57.setSeconds((int) (short) 0);
        boolean boolean62 = date49.before(date57);
        long long63 = date49.getTime();
        // The following exception was thrown during execution in test generation
        try {
            int int64 = date41.compareTo(date49);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: sun.util.calendar.JulianCalendar$Date cannot be cast to sun.util.calendar.Gregorian$Date");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Mon Jan 02 23:08:00 UTC 2");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Oct 02 23:08:00 UTC 31");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L + "'", long58 == 100L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
    }

    @Test
    public void test03229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03229");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        long long16 = chronology8.add((long) 7, 5L, 11);
        org.joda.time.DateTimeField dateTimeField17 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str31 = dateTimeZone29.getShortName((long) 0);
        org.joda.time.DateTime dateTime32 = dateTime27.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        boolean boolean41 = dateTime32.isBefore((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean42 = dateTime40.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime40.getZone();
        org.joda.time.Chronology chronology44 = chronology8.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.dayOfWeek();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay50 = dateTime47.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property51 = timeOfDay50.millisOfSecond();
        int int52 = property51.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay54 = property51.addToCopy(100);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay59 = dateTime56.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property60 = timeOfDay59.millisOfSecond();
        boolean boolean61 = timeOfDay54.isEqual((org.joda.time.ReadablePartial) timeOfDay59);
        java.lang.String str62 = timeOfDay54.toString();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime66 = dateTime64.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime68 = dateTime66.minusDays(7);
        org.joda.time.DateTime dateTime70 = dateTime66.withYear(1);
        org.joda.time.Chronology chronology71 = dateTime66.getChronology();
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean74 = localTime72.isSupported(dateTimeFieldType73);
        boolean boolean75 = timeOfDay54.isBefore((org.joda.time.ReadablePartial) localTime72);
        java.util.Locale locale76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = dateTimeField45.getAsText((org.joda.time.ReadablePartial) timeOfDay54, locale76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 62L + "'", long16 == 62L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-01:00" + "'", str31, "-01:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "T23:00:00.200" + "'", str62, "T23:00:00.200");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test03230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03230");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        java.util.Date date6 = dateTime2.toDate();
        java.time.Instant instant7 = date6.toInstant();
        int int8 = date6.getSeconds();
        java.util.Calendar.Builder builder9 = builder0.setInstant(date6);
        java.util.Calendar.Builder builder11 = builder0.setInstant((long) 20);
        java.util.Locale locale12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder13 = builder11.setLocale(locale12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test03231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03231");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime15);
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.minuteOfHour();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property27 = dateTime25.hourOfDay();
        org.joda.time.DateTime dateTime28 = property27.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property29 = dateTime28.weekOfWeekyear();
        java.util.Locale locale30 = null;
        int int31 = property29.getMaximumShortTextLength(locale30);
        org.joda.time.DateTime dateTime32 = property29.withMaximumValue();
        org.joda.time.DateTime dateTime33 = dateTime32.withLaterOffsetAtOverlap();
        int int34 = dateTime33.getYearOfCentury();
        org.joda.time.DateTime dateTime36 = dateTime33.plusSeconds(79200);
        org.joda.time.DateTime dateTime38 = dateTime33.minus(31525542082800L);
        int int39 = property17.compareTo((org.joda.time.ReadableInstant) dateTime33);
        int int40 = dateTime33.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 23 + "'", int40 == 23);
    }

    @Test
    public void test03232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03232");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone4.getName(0L, locale6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZone(dateTimeZone4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear(86399999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 24);
        java.lang.StringBuffer stringBuffer13 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        org.joda.time.DateTime dateTime31 = dateTime26.withDurationAdded((long) 16, 5);
        org.joda.time.DateTime dateTime33 = dateTime26.minus((long) 12);
        org.joda.time.DateTime dateTime34 = dateTime33.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime36 = dateTime34.plusMinutes(0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(stringBuffer13, (org.joda.time.ReadableInstant) dateTime36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test03233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03233");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfEra();
        int int16 = dateTimeField15.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test03234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03234");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.plusYears(14);
        java.util.Locale locale15 = null;
        java.util.Calendar calendar16 = dateTime11.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime11.plus((long) 7);
        org.joda.time.DateTime dateTime19 = dateTime11.toDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-62104057919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=48,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test03235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03235");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(chronology10);
        org.joda.time.DurationField durationField12 = chronology10.weeks();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology10.add(readablePeriod13, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology10);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((-82799998L), chronology10);
        org.joda.time.LocalTime.Property property19 = localTime18.hourOfDay();
        org.joda.time.LocalTime localTime21 = property19.addCopy(0L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int25 = dateTimeZone23.getStandardOffset((long) (short) 0);
        long long28 = dateTimeZone23.convertLocalToUTC(480100L, false);
        org.joda.time.DateTime dateTime29 = localTime21.toDateTimeToday(dateTimeZone23);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(53);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) (short) 10);
        org.joda.time.DateTime.Property property34 = dateTime31.secondOfMinute();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime38.minusDays(7);
        org.joda.time.DateTime dateTime42 = dateTime38.withYear(1);
        org.joda.time.DateTime dateTime43 = dateTime42.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight44 = dateTime42.toDateMidnight();
        org.joda.time.DateTime dateTime46 = dateTime42.withWeekOfWeekyear(10);
        boolean boolean47 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3600000) + "'", int25 == (-3600000));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 4080100L + "'", long28 == 4080100L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test03236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03236");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str16 = dateTimeFieldType15.toString();
        boolean boolean17 = localTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        org.joda.time.LocalTime localTime23 = dateTime19.toLocalTime();
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.years();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int29 = localTime27.indexOf(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property39 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = property39.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property41 = dateTime40.weekOfWeekyear();
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        org.joda.time.DateTime dateTime44 = property41.withMaximumValue();
        org.joda.time.DateTime dateTime45 = dateTime44.withTimeAtStartOfDay();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime50 = dateTime45.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = localTime27.toDateTimeToday(dateTimeZone47);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMonths(712);
        org.joda.time.DateTime.Property property54 = dateTime51.millisOfDay();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.minusDays(7);
        org.joda.time.DateTime dateTime62 = dateTime58.withYear(1);
        org.joda.time.DateTime dateTime63 = dateTime62.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime65 = dateTime63.plusYears((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = dateTime63.isSupported(dateTimeFieldType66);
        int int68 = property54.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DurationField durationField69 = property54.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "monthOfYear" + "'", str16, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(durationField69);
    }

    @Test
    public void test03237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03237");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime10.toLocalTime();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        long long20 = chronology15.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.DurationField durationField22 = chronology15.centuries();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test03238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03238");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.getLocalTime();
        org.joda.time.LocalTime localTime18 = property13.addNoWrapToCopy(1200000);
        org.joda.time.LocalTime localTime20 = property13.addNoWrapToCopy(99);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime22 = property13.setCopy("00:00:00.100");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"00:00:00.100\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test03239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03239");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        java.time.Instant instant6 = date5.toInstant();
        date5.setTime(82801328L);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        int int14 = timeOfDay13.getSecondOfMinute();
        int[] intArray15 = timeOfDay13.getValues();
        boolean boolean16 = date5.equals((java.lang.Object) timeOfDay13);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 23:00:01 UTC 1970");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test03240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03240");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay10 = dateTime7.toTimeOfDay();
        org.joda.time.LocalTime localTime11 = dateTime7.toLocalTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.DateTime dateTime23 = dateTime21.plusMinutes((int) (short) 100);
        java.lang.String str24 = dateTime23.toString();
        int int25 = dateTime23.getSecondOfMinute();
        boolean boolean26 = dateTime7.equals((java.lang.Object) dateTime23);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((java.lang.Object) dateTime23);
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = chronology28.add(readablePeriod30, 480100L, 32769);
        org.joda.time.DateTimeField dateTimeField34 = chronology28.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(31, 58, 1969, 61199999, (-2337983), 366, chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61199999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str24, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 480100L + "'", long33 == 480100L);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test03241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03241");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(999);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter7.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withOffsetParsed();
        java.lang.Appendable appendable10 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay15 = dateTime12.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.millisOfSecond();
        int int17 = property16.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay19 = property16.addToCopy(100);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay24 = dateTime21.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.millisOfSecond();
        boolean boolean26 = timeOfDay19.isEqual((org.joda.time.ReadablePartial) timeOfDay24);
        int int27 = timeOfDay24.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = timeOfDay24.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay24.withPeriodAdded(readablePeriod29, (int) (short) -1);
        int int32 = timeOfDay31.getSecondOfMinute();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay37 = dateTime34.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property38 = timeOfDay37.millisOfSecond();
        int int39 = property38.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay41 = property38.addToCopy(100);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay46 = dateTime43.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property47 = timeOfDay46.millisOfSecond();
        boolean boolean48 = timeOfDay41.isEqual((org.joda.time.ReadablePartial) timeOfDay46);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay41.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay50.minusMillis(100);
        boolean boolean53 = timeOfDay31.isAfter((org.joda.time.ReadablePartial) timeOfDay50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int57 = dateTimeZone55.getStandardOffset((long) (short) 0);
        long long60 = dateTimeZone55.convertLocalToUTC(480100L, false);
        java.lang.String str62 = dateTimeZone55.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay31, dateTimeZone55);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay31.withSecondOfMinute(36);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(appendable10, (org.joda.time.ReadablePartial) timeOfDay66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3600000) + "'", int57 == (-3600000));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 4080100L + "'", long60 == 4080100L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-01:00" + "'", str62, "-01:00");
        org.junit.Assert.assertNotNull(timeOfDay66);
    }

    @Test
    public void test03242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03242");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.DateTime.Property property21 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime23 = dateTime17.withYearOfCentury(70);
        int int24 = dateTime17.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 31 + "'", int24 == 31);
    }

    @Test
    public void test03243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03243");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(62134912800000L);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime4 = localTime1.withPeriodAdded(readablePeriod2, 79200);
        int int5 = localTime4.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test03244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03244");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTime dateTime43 = dateTime38.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime28.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime28.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime28.minus(readableDuration47);
        int int49 = property18.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DurationField durationField50 = property18.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay52 = property18.addToCopy(32769);
        int int53 = timeOfDay52.getHourOfDay();
        int int54 = timeOfDay52.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
    }

    @Test
    public void test03245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03245");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        boolean boolean15 = gregorianCalendar13.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay21 = dateTime18.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        int int23 = property22.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay25 = property22.addToCopy(100);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay30 = dateTime27.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property31 = timeOfDay30.millisOfSecond();
        boolean boolean32 = timeOfDay25.isEqual((org.joda.time.ReadablePartial) timeOfDay30);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay25.withMinuteOfHour((int) '#');
        java.lang.String str35 = timeOfDay34.toString();
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay34.plusHours(2);
        boolean boolean38 = timeOfDay16.isAfter((org.joda.time.ReadablePartial) timeOfDay34);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay34.withHourOfDay((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType42 = timeOfDay34.getFieldType(470);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 470");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "T23:35:00.200" + "'", str35, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(timeOfDay40);
    }

    @Test
    public void test03246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03246");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int2 = localTime1.getSecondOfMinute();
        org.joda.time.LocalTime localTime4 = localTime1.withMillisOfDay(2022);
        java.lang.String str6 = localTime1.toString("08:37:02.493");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "08:37:02.493" + "'", str6, "08:37:02.493");
    }

    @Test
    public void test03247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03247");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.minus(readablePeriod3);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay12 = dateTime9.toTimeOfDay();
        org.joda.time.DateTime dateTime14 = dateTime9.withYearOfCentury(22);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str28 = dateTimeZone26.getShortName((long) 0);
        org.joda.time.DateTime dateTime29 = dateTime24.withZone(dateTimeZone26);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str32 = dateTimeFieldType31.toString();
        boolean boolean33 = localTime30.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime35 = dateTime14.withField(dateTimeFieldType31, 3);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        org.joda.time.DateTime dateTime44 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str48 = dateTimeZone46.getShortName((long) 0);
        org.joda.time.DateTime dateTime49 = dateTime44.withZone(dateTimeZone46);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(dateTimeZone46);
        org.joda.time.DateTime dateTime51 = dateTime35.toDateTime(dateTimeZone46);
        org.joda.time.DateTime.Property property52 = dateTime35.yearOfCentury();
        org.joda.time.DateTime.Property property53 = dateTime35.yearOfEra();
        int int54 = property5.compareTo((org.joda.time.ReadableInstant) dateTime35);
        java.lang.String str55 = dateTime35.toString();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1483228799900L) + "'", long15 == (-1483228799900L));
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:00" + "'", str28, "-01:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "monthOfYear" + "'", str32, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-01:00" + "'", str48, "-01:00");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1922-03-31T23:00:00.100-01:00" + "'", str55, "1922-03-31T23:00:00.100-01:00");
    }

    @Test
    public void test03248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03248");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minus(readablePeriod2);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(7);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(1);
        org.joda.time.DateTime dateTime12 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str16 = dateTimeZone14.getShortName((long) 0);
        org.joda.time.DateTime dateTime17 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str20 = dateTimeFieldType19.toString();
        boolean boolean21 = localTime18.isSupported(dateTimeFieldType19);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.LocalTime localTime27 = dateTime23.toLocalTime();
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.years();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType19.getField(chronology28);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int33 = localTime31.indexOf(dateTimeFieldType32);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay1.property(dateTimeFieldType32);
        java.util.Locale locale35 = null;
        int int36 = property34.getMaximumShortTextLength(locale35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay38 = property34.setCopy(74221000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74221000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-01:00" + "'", str16, "-01:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "monthOfYear" + "'", str20, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test03249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03249");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime14 = dateTime11.withField(dateTimeFieldType12, 17);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.minus(readablePeriod15);
        org.joda.time.DateTime.Property property17 = dateTime16.weekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test03250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03250");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter2.getZone();
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTimeFormatter2.parseDateTime("10 Sep 24354391 00:00:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test03251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03251");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime10.hourOfDay();
        org.joda.time.DurationField durationField13 = property12.getLeapDurationField();
        org.joda.time.DateTime dateTime15 = property12.setCopy((int) (short) 1);
        int int16 = dateTime15.getCenturyOfEra();
        org.joda.time.Chronology chronology17 = dateTime15.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(16, 70, 22, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test03252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03252");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        java.util.Date date2 = calendar0.getTime();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.clear(841);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 841");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test03253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03253");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        calendar7.setLenient(false);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int15 = dateTimeZone13.getOffsetFromLocal((long) 7);
        long long17 = dateTimeZone13.convertUTCToLocal((long) 388);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572348183,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=39,SECOND=8,MILLISECOND=183,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3600000) + "'", int15 == (-3600000));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3599612L) + "'", long17 == (-3599612L));
    }

    @Test
    public void test03254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03254");
        java.util.Date date3 = new java.util.Date((int) 'a', 22, 70);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Jan 09 00:00:00 UTC 1999");
    }

    @Test
    public void test03255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03255");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean9 = property5.equals((java.lang.Object) dateTimeFieldType8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.hourOfHalfday();
        org.joda.time.Chronology chronology23 = chronology19.withUTC();
        boolean boolean24 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField25 = chronology23.seconds();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(chronology23);
        org.joda.time.Chronology chronology27 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test03256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03256");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone10.getName((long) 712, locale16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.LocalTime localTime19 = dateTime18.toLocalTime();
        org.joda.time.LocalTime localTime21 = localTime19.minusMinutes((-14640));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:00" + "'", str17, "-01:00");
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test03257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03257");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(7, (int) ' ', chronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(927, 31128547, 31114187, 3, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 927 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test03258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03258");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalTime localTime23 = localTime21.plus(readablePeriod22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalTime localTime25 = localTime23.plus(readablePeriod24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test03259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03259");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        int int6 = date5.getHours();
        int int7 = date5.getHours();
        date5.setHours(25);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 02 01:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test03260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03260");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str14 = dateTimeZone12.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime10.toMutableDateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime10.weekOfWeekyear();
        org.joda.time.DateTime dateTime17 = property16.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = property16.setCopy("T08:36:42.197");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T08:36:42.197\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test03261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03261");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime18 = dateTime15.toLocalDateTime();
        org.joda.time.DateTime.Property property19 = dateTime15.era();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime15.minus(readablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        long long24 = dateTimeZone22.convertUTCToLocal((long) (short) 1);
        java.lang.String str25 = dateTimeZone22.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(59, 8, (int) (short) 0, 427, 31081803, 100, dateTimeZone22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 427 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599999L) + "'", long24 == (-3599999L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-01:00" + "'", str25, "-01:00");
    }

    @Test
    public void test03262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03262");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        int int6 = dateTimeFormatter5.getDefaultYear();
        boolean boolean7 = dateTimeFormatter5.isParser();
        org.joda.time.Chronology chronology8 = dateTimeFormatter5.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter5.getParser();
        org.joda.time.Chronology chronology10 = dateTimeFormatter5.getChronology();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNull(dateTimeParser9);
        org.junit.Assert.assertNull(chronology10);
    }

    @Test
    public void test03263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03263");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(15, 59, 32769);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32769 for secondOfMinute must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03264");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        boolean boolean9 = dateTimeZone7.equals((java.lang.Object) (-3600000));
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone7.getShortName(10L, locale11);
        long long14 = dateTimeZone7.nextTransition((long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZone(dateTimeZone7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = dateTimeFormatter2.parseLocalDateTime("0001-12-31T23:48:35.100-01:00");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test03265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03265");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(32769, 13, 35, 762, 79680, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 762 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03266");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(42, 31021460, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03267");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property13.addCopy(62134912800000L);
        org.joda.time.LocalTime localTime17 = property13.setCopy(91);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test03268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03268");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime17.withWeekOfWeekyear(61200002);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61200002 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test03269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03269");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        java.util.Date date2 = calendar0.getTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay7 = dateTime4.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.millisOfSecond();
        int int9 = property8.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addToCopy(100);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        boolean boolean18 = timeOfDay11.isEqual((org.joda.time.ReadablePartial) timeOfDay16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology20);
        boolean boolean22 = timeOfDay16.isBefore((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay16.withFieldAdded(durationFieldType23, 2);
        boolean boolean26 = calendar0.before((java.lang.Object) durationFieldType23);
        java.lang.String str27 = durationFieldType23.getName();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "seconds" + "'", str27, "seconds");
    }

    @Test
    public void test03270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03270");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((long) 53, chronology9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = localTime12.getFieldType(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 12");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test03271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03271");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(0, (int) (short) 10, 17);
        java.util.Calendar.Builder builder9 = builder5.setTimeOfDay((-3600000), (int) (byte) 10, 10);
        java.util.Calendar calendar10 = builder9.build();
        int int11 = calendar10.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = calendar10.getMaximum(9499);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9499");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-12958876190000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1559,MONTH=3,WEEK_OF_YEAR=17,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=119,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=10,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test03272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03272");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay8.secondOfMinute();
        java.lang.String str17 = property16.getName();
        org.joda.time.TimeOfDay timeOfDay19 = property16.setCopy((int) '4');
        org.joda.time.TimeOfDay timeOfDay21 = property16.setCopy("1");
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.Chronology chronology32 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.minuteOfDay();
        boolean boolean35 = durationFieldType23.isSupported(chronology32);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) 3, chronology32);
        org.joda.time.LocalTime.Property property37 = localTime36.secondOfMinute();
        org.joda.time.LocalTime localTime38 = property37.getLocalTime();
        boolean boolean39 = property16.equals((java.lang.Object) property37);
        org.joda.time.DateTimeField dateTimeField40 = property37.getField();
        org.joda.time.LocalTime localTime42 = property37.addCopy((-292275054));
        org.joda.time.LocalTime localTime43 = property37.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "secondOfMinute" + "'", str17, "secondOfMinute");
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime43);
    }

    @Test
    public void test03273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03273");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMillis(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.minuteOfDay();
        org.joda.time.DurationField durationField17 = chronology14.months();
        boolean boolean18 = dateTimeFieldType5.isSupported(chronology14);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 100, chronology14);
        int int20 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime1.getMillisOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime24 = dateTime1.withDurationAdded(readableDuration22, 24);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 82800100 + "'", int21 == 82800100);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test03274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03274");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime31 = property13.addCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime33 = localTime31.withMillisOfDay((int) (short) 1);
        org.joda.time.LocalTime.Property property34 = localTime31.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test03275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03275");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.monthOfYear();
        int int30 = dateTime28.getSecondOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.withMillisOfDay(70);
        boolean boolean33 = timeOfDay16.equals((java.lang.Object) dateTime28);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(7);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(1);
        org.joda.time.DateTime dateTime42 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTimeISO();
        org.joda.time.DateTime dateTime45 = dateTime43.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property46 = dateTime45.monthOfYear();
        int int47 = dateTime45.getSecondOfDay();
        org.joda.time.DateTime dateTime49 = dateTime45.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean51 = dateTime45.isSupported(dateTimeFieldType50);
        boolean boolean52 = dateTime28.isSupported(dateTimeFieldType50);
        org.joda.time.DateTime dateTime54 = dateTime28.minusSeconds(31114187);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 85680 + "'", int30 == 85680);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 85680 + "'", int47 == 85680);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test03276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03276");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property12.roundHalfFloorCopy();
        int int15 = property12.getMaximumValueOverall();
        org.joda.time.DateTime dateTime16 = property12.withMaximumValue();
        int int17 = property12.get();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
    }

    @Test
    public void test03277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03277");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        java.lang.String str7 = property5.getAsShortText(locale6);
        int int8 = property5.getMaximumValue();
        java.lang.String str9 = property5.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 999 + "'", int8 == 999);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
    }

    @Test
    public void test03278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03278");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        boolean boolean10 = property8.isLeap();
        long long11 = property8.remainder();
        org.joda.time.DateTime dateTime12 = property8.roundCeilingCopy();
        boolean boolean14 = dateTime12.isBefore(100L);
        org.joda.time.DateTime dateTime17 = dateTime12.withDurationAdded((long) 12, 30961509);
        org.joda.time.Instant instant18 = dateTime12.toInstant();
        long long19 = dateTime12.getMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 31529280100L + "'", long11 == 31529280100L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62104057200000L) + "'", long19 == (-62104057200000L));
    }

    @Test
    public void test03279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03279");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        calendar0.clear((int) (short) 1);
        int int5 = calendar0.getLeastMaximum((int) (short) 10);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay10 = dateTime7.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property11 = timeOfDay10.millisOfSecond();
        org.joda.time.DurationField durationField12 = property11.getDurationField();
        java.lang.String str13 = property11.getAsShortText();
        java.util.Locale locale14 = null;
        int int15 = property11.getMaximumTextLength(locale14);
        org.joda.time.TimeOfDay timeOfDay16 = property11.getTimeOfDay();
        java.lang.String str17 = property11.getAsText();
        org.joda.time.DateTimeField dateTimeField18 = property11.getField();
        boolean boolean19 = calendar0.before((java.lang.Object) property11);
        java.lang.Object obj20 = calendar0.clone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=?,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=9,MILLISECOND=857,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 11 + "'", int5 == 11);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100" + "'", str13, "100");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "100" + "'", str17, "100");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=?,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=9,MILLISECOND=857,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=?,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=9,MILLISECOND=857,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=?,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=9,MILLISECOND=857,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test03280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03280");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str13 = dateTimeZone11.getShortName((long) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.withZone(dateTimeZone11);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str17 = dateTimeFieldType16.toString();
        boolean boolean18 = localTime15.isSupported(dateTimeFieldType16);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay23 = dateTime20.toTimeOfDay();
        org.joda.time.LocalTime localTime24 = dateTime20.toLocalTime();
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.years();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType16.getField(chronology25);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.DurationField durationField29 = chronology25.years();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 0, chronology25);
        int int31 = dateTime30.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-01:00" + "'", str13, "-01:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "monthOfYear" + "'", str17, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test03281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03281");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setFirstDayOfWeek(8);
        // The following exception was thrown during execution in test generation
        try {
            int int4 = calendar0.getMaximum(1970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572349902,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=8,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=9,MILLISECOND=902,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test03282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03282");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property25 = dateTime24.weekOfWeekyear();
        java.util.Locale locale26 = null;
        int int27 = property25.getMaximumShortTextLength(locale26);
        org.joda.time.DateTime dateTime28 = property25.withMaximumValue();
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        boolean boolean33 = dateTimeZone31.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime34 = dateTime29.withZoneRetainFields(dateTimeZone31);
        org.joda.time.Chronology chronology35 = chronology8.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        org.joda.time.DateTime dateTime44 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property45 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime46 = property45.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfYear(8);
        org.joda.time.Chronology chronology49 = dateTime46.getChronology();
        long long50 = dateTime46.getMillis();
        org.joda.time.DateTime.Property property51 = dateTime46.hourOfDay();
        int int52 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime53 = dateTime46.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime55 = dateTime53.withEra(388);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 388 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-62104064400000L) + "'", long50 == (-62104064400000L));
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3600000) + "'", int52 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test03283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03283");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(2L);
    }

    @Test
    public void test03284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03284");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        boolean boolean18 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        boolean boolean24 = dateTimeZone22.equals((java.lang.Object) (-3600000));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter2.withOffsetParsed();
        int int27 = dateTimeFormatter2.getDefaultYear();
        java.io.Writer writer28 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer28, (long) 46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2000 + "'", int27 == 2000);
    }

    @Test
    public void test03285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03285");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        long long5 = dateTimeZone1.convertLocalToUTC((long) 31081803, true, 1556505405789L);
        boolean boolean6 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 31081771L + "'", long5 == 31081771L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test03286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03286");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        int int13 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property17 = dateTime11.monthOfYear();
        long long18 = dateTime11.getMillis();
        java.util.Locale locale19 = null;
        java.util.Calendar calendar20 = dateTime11.toCalendar(locale19);
        calendar20.setLenient(false);
        java.lang.String str23 = calendar20.getCalendarType();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-62104057919900L) + "'", long18 == (-62104057919900L));
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-62104057919900,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=48,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "gregory" + "'", str23, "gregory");
    }

    @Test
    public void test03287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03287");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(712);
        long long4 = dateTimeZone1.convertLocalToUTC(3617499L, true);
        boolean boolean6 = dateTimeZone1.isStandardOffset(8L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 3616787L + "'", long4 == 3616787L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test03288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03288");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property13.addCopy(62134912800000L);
        org.joda.time.LocalTime localTime17 = property13.addCopy((long) 75);
        org.joda.time.LocalTime localTime19 = property13.addNoWrapToCopy((int) (short) 1);
        int int20 = property13.get();
        java.util.Locale locale21 = null;
        int int22 = property13.getMaximumShortTextLength(locale21);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
    }

    @Test
    public void test03289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03289");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder0.setDate((int) '#', (-1), (int) '4');
        java.util.Calendar.Builder builder11 = builder6.setTimeOfDay((int) (short) 10, 59, (-1), (int) (short) 10);
        java.util.Date date18 = new java.util.Date(10, 1, 100, (-292275054), 53, 3);
        date18.setHours(3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder21 = builder11.setInstant(date18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals(date18.toString(), "Fri Jun 17 03:53:03 UTC 31433");
    }

    @Test
    public void test03290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03290");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        java.util.TimeZone timeZone14 = dateTimeZone10.toTimeZone();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone14);
        calendar15.clear();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime20.toCalendar(locale23);
        int int26 = calendar24.getMaximum(9);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.fromCalendarFields(calendar24);
        java.time.Instant instant28 = calendar24.toInstant();
        int int29 = calendar24.getMinimalDaysInFirstWeek();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime dateTime41 = dateTime39.plusMinutes((int) (short) 100);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.DateTime dateTime44 = dateTime41.plusMinutes(54060000);
        boolean boolean45 = calendar24.after((java.lang.Object) 54060000);
        calendar24.setMinimalDaysInFirstWeek(0);
        int int48 = calendar24.getWeeksInWeekYear();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays(7);
        org.joda.time.DateTime dateTime56 = dateTime52.withYear(1);
        org.joda.time.Chronology chronology57 = dateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.weekyearOfCentury();
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime61 = localTime59.withSecondOfMinute(1);
        java.util.Locale locale63 = null;
        java.lang.String str64 = dateTimeField58.getAsText((org.joda.time.ReadablePartial) localTime61, 14, locale63);
        org.joda.time.DateTimeField[] dateTimeFieldArray65 = localTime61.getFields();
        int int66 = localTime61.size();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime70 = dateTime68.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime72 = dateTime70.minusDays(7);
        org.joda.time.DateTime dateTime74 = dateTime70.withYear(1);
        org.joda.time.DateTime dateTime75 = dateTime74.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime76 = dateTime75.toDateTimeISO();
        org.joda.time.DateTime dateTime78 = dateTime76.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property79 = dateTime78.monthOfYear();
        int int80 = dateTime78.getSecondOfDay();
        org.joda.time.DateTime dateTime82 = dateTime78.withMillisOfDay(70);
        org.joda.time.DateTime dateTime83 = localTime61.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime85 = dateTime83.withWeekyear((int) (short) 0);
        org.joda.time.DateTime dateTime87 = dateTime85.withYear(2);
        java.lang.String str88 = dateTime87.toString();
        boolean boolean89 = calendar24.before((java.lang.Object) str88);
        calendar24.setLenient(false);
        int int92 = calendar15.compareTo(calendar24);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str42, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "14" + "'", str64, "14");
        org.junit.Assert.assertNotNull(dateTimeFieldArray65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 85680 + "'", int80 == 85680);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "0002-01-03T08:39:01.353-01:00" + "'", str88, "0002-01-03T08:39:01.353-01:00");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test03291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03291");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime32 = localTime30.withMillisOfSecond(13);
        org.joda.time.DateTime dateTime33 = localTime32.toDateTimeToday();
        org.joda.time.DateTime.Property property34 = dateTime33.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = dateTime33.withWeekOfWeekyear(118);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 118 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test03292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03292");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.LocalTime localTime17 = localTime15.plusMinutes((-292275054));
        org.joda.time.LocalTime.Property property18 = localTime17.minuteOfHour();
        org.joda.time.LocalTime localTime19 = property18.withMinimumValue();
        org.joda.time.LocalTime localTime20 = property18.withMinimumValue();
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test03293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03293");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime.Property property11 = dateTime9.weekyear();
        java.util.Locale locale12 = null;
        java.util.Calendar calendar13 = dateTime9.toCalendar(locale12);
        int int14 = calendar13.getWeekYear();
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        java.util.Date date21 = dateTime17.toDate();
        java.time.Instant instant22 = date21.toInstant();
        int int23 = date21.getSeconds();
        java.util.Calendar.Builder builder24 = builder15.setInstant(date21);
        java.util.Calendar.Builder builder28 = builder15.setWeekDate(59, 32770, 79680);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str41 = dateTimeZone39.getShortName((long) 0);
        org.joda.time.DateTime dateTime42 = dateTime37.withZone(dateTimeZone39);
        java.util.TimeZone timeZone43 = dateTimeZone39.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.util.Calendar.Builder builder45 = builder15.setTimeZone(timeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        calendar13.setTimeZone(timeZone43);
        java.lang.Object obj48 = calendar13.clone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-01:00" + "'", str41, "-01:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test03294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03294");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setDate(13, 85680, 517);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.DateTime dateTime15 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str19 = dateTimeZone17.getShortName((long) 0);
        org.joda.time.DateTime dateTime20 = dateTime15.withZone(dateTimeZone17);
        java.util.TimeZone timeZone21 = dateTimeZone17.toTimeZone();
        java.util.Calendar.Builder builder22 = builder6.setTimeZone(timeZone21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone21);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = calendar23.getActualMinimum(30961509);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 30961509");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-01:00" + "'", str19, "-01:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644572350532,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=39,SECOND=10,MILLISECOND=532,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test03295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03295");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        int int7 = date5.getHours();
        date5.setSeconds((int) (short) 0);
        date5.setHours(114);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        java.util.Date date17 = dateTime13.toDate();
        long long18 = date17.getTime();
        java.time.Instant instant19 = date17.toInstant();
        java.util.Date date20 = java.util.Date.from(instant19);
        boolean boolean21 = date5.before(date20);
        java.util.Date date27 = new java.util.Date(12, 70, 0, 2022, 0);
        boolean boolean28 = date20.before(date27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay33 = dateTime30.toTimeOfDay();
        java.util.Date date34 = dateTime30.toDate();
        int int35 = date34.getHours();
        int int36 = date34.getHours();
        java.lang.String str37 = date34.toGMTString();
        boolean boolean38 = date27.before(date34);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Jan 05 18:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Jan 23 06:00:00 UTC 1918");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str37, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test03296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03296");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.DurationField durationField16 = chronology10.seconds();
        org.joda.time.Chronology chronology17 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyearOfCentury();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(4080100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalTime localTime23 = localTime20.withField(dateTimeFieldType21, 1);
        org.joda.time.LocalTime localTime25 = localTime20.plusHours(292278993);
        org.joda.time.LocalTime localTime27 = localTime20.plusSeconds(85680);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.Chronology chronology38 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.minuteOfDay();
        boolean boolean41 = durationFieldType29.isSupported(chronology38);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) 3, chronology38);
        org.joda.time.LocalTime.Property property43 = localTime42.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalTime localTime46 = localTime42.withFieldAdded(durationFieldType44, 9);
        org.joda.time.LocalTime localTime48 = localTime27.withFieldAdded(durationFieldType44, 31021786);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime53.minusDays(7);
        org.joda.time.DateTime dateTime57 = dateTime53.withYear(1);
        org.joda.time.Chronology chronology58 = dateTime53.getChronology();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime(chronology58);
        org.joda.time.DurationField durationField60 = chronology58.weeks();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime64 = dateTime61.withField(dateTimeFieldType62, 17);
        org.joda.time.DateTime.Property property65 = dateTime61.yearOfEra();
        org.joda.time.DateTimeField dateTimeField66 = property65.getField();
        java.lang.String str68 = dateTimeField66.getAsText((long) 14);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime72 = dateTime70.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime74 = dateTime72.minusDays(7);
        org.joda.time.DateTime dateTime76 = dateTime72.withYear(1);
        org.joda.time.DateTime dateTime77 = dateTime76.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str81 = dateTimeZone79.getShortName((long) 0);
        org.joda.time.DateTime dateTime82 = dateTime77.withZone(dateTimeZone79);
        org.joda.time.LocalTime localTime83 = new org.joda.time.LocalTime(dateTimeZone79);
        org.joda.time.LocalTime localTime85 = localTime83.minusSeconds(2);
        org.joda.time.LocalTime localTime87 = localTime83.plusMinutes((-292275054));
        org.joda.time.LocalTime localTime89 = localTime87.withSecondOfMinute(15);
        int[] intArray92 = new int[] { 17661728, (short) 100 };
        int int93 = dateTimeField66.getMinimumValue((org.joda.time.ReadablePartial) localTime87, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray95 = dateTimeField18.addWrapField((org.joda.time.ReadablePartial) localTime48, (-738188), intArray92, 31081121);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -738188");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1969" + "'", str68, "1969");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "-01:00" + "'", str81, "-01:00");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[17661728, 100]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test03297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03297");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusMinutes(0);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.withSecondOfMinute(17);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = property7.addToCopy(9);
        org.joda.time.TimeOfDay timeOfDay11 = property7.addWrapFieldToCopy(1);
        org.joda.time.TimeOfDay timeOfDay12 = property7.withMinimumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test03298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03298");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime.Property property11 = dateTime9.weekyear();
        java.util.Locale locale12 = null;
        java.util.Calendar calendar13 = dateTime9.toCalendar(locale12);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = calendar13.get(53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test03299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03299");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(7, 9, 11);
        java.util.Calendar.Builder builder6 = builder4.setLenient(true);
        java.util.Calendar.Builder builder11 = builder4.setTimeOfDay(17, 0, (int) '#', 365);
        java.util.Calendar.Builder builder15 = builder4.setDate(1328, 188, (int) ' ');
        java.util.Calendar calendar16 = builder4.build();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-19761778764635,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1343,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=275,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=35,MILLISECOND=365,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test03300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03300");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime7.minusHours((int) 'a');
        org.joda.time.DateTime dateTime27 = dateTime7.minusWeeks(0);
        org.joda.time.DateTime.Property property28 = dateTime7.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test03301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03301");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.getLocalTime();
        org.joda.time.LocalTime localTime18 = property13.addNoWrapToCopy(1200000);
        org.joda.time.LocalTime localTime19 = property13.getLocalTime();
        org.joda.time.LocalTime localTime20 = property13.getLocalTime();
        int int21 = property13.getMinimumValue();
        org.joda.time.DurationField durationField22 = property13.getLeapDurationField();
        org.joda.time.LocalTime localTime23 = property13.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(durationField22);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test03302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03302");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = dateTime9.plusHours(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(7);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(1);
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(chronology21);
        org.joda.time.DurationField durationField23 = chronology21.weeks();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = chronology21.add(readablePeriod24, 1L, 8);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property37 = dateTime35.hourOfDay();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        boolean boolean41 = dateTimeZone39.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime42 = dateTime35.withZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int46 = dateTimeZone44.getStandardOffset((long) (short) 0);
        long long48 = dateTimeZone39.getMillisKeepLocal(dateTimeZone44, (long) 0);
        org.joda.time.Chronology chronology49 = chronology21.withZone(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime9.toMutableDateTime(chronology21);
        org.joda.time.DurationField durationField51 = chronology21.months();
        org.joda.time.TimeOfDay timeOfDay52 = org.joda.time.TimeOfDay.fromMillisOfDay((-82798570L), chronology21);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3600000) + "'", int46 == (-3600000));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(timeOfDay52);
    }

    @Test
    public void test03303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03303");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.era();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology8);
        int int13 = dateTime12.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 519 + "'", int13 == 519);
    }

    @Test
    public void test03304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03304");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime11 = localTime9.withSecondOfMinute(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime11.minus(readablePeriod12);
        java.lang.String str14 = localTime11.toString();
        int[] intArray16 = new int[] { 10 };
        int int17 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime11, intArray16);
        long long20 = dateTimeField8.add((long) 11, 14);
        long long22 = dateTimeField8.roundHalfFloor(62134989839200L);
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long26 = dateTimeField8.set((-2400000L), "31109918", locale25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31109918 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "08:39:01.999" + "'", str14, "08:39:01.999");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 999 + "'", int17 == 999);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 25L + "'", long20 == 25L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 62134989839200L + "'", long22 == 62134989839200L);
    }

    @Test
    public void test03305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03305");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter15.withChronology(chronology26);
        boolean boolean30 = durationFieldType12.isSupported(chronology26);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) dateTime10, chronology26);
        org.joda.time.DateTimeField dateTimeField32 = chronology26.era();
        org.joda.time.DurationField durationField33 = dateTimeField32.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNull(durationField33);
    }

    @Test
    public void test03306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03306");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter2.getParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = dateTimeFormatter2.print((long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNull(dateTimeParser6);
    }

    @Test
    public void test03307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03307");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property13.getLocalTime();
        org.joda.time.LocalTime localTime17 = property13.addNoWrapToCopy(30961509);
        org.joda.time.LocalTime localTime18 = property13.withMaximumValue();
        int int19 = localTime18.size();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
    }

    @Test
    public void test03308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03308");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("22");
        org.joda.time.DateTimeZone dateTimeZone2 = dateTime1.getZone();
        int int3 = dateTime1.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test03309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03309");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.DateTime.Property property21 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.LocalTime localTime27 = dateTime23.toLocalTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        org.joda.time.DateTime dateTime39 = dateTime37.plusMinutes((int) (short) 100);
        java.lang.String str40 = dateTime39.toString();
        int int41 = dateTime39.getSecondOfMinute();
        boolean boolean42 = dateTime23.equals((java.lang.Object) dateTime39);
        org.joda.time.DateTime.Property property43 = dateTime39.weekyear();
        int int44 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays(7);
        org.joda.time.DateTime dateTime52 = dateTime48.withYear(1);
        org.joda.time.Chronology chronology53 = dateTime48.getChronology();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(chronology53);
        org.joda.time.DurationField durationField55 = chronology53.weeks();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime59 = dateTime56.withField(dateTimeFieldType57, 17);
        int int60 = dateTime56.getYear();
        boolean boolean61 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadableInstant readableInstant62 = null;
        boolean boolean63 = dateTime56.isAfter(readableInstant62);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str40, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test03310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03310");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(7);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(1);
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        boolean boolean16 = dateTimeZone14.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology17 = chronology12.withZone(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter3.withZone(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter3.withOffsetParsed();
        java.lang.Integer int20 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter3.withPivotYear((int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter22.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.parse("DateTimeField[weekOfWeekyear]", dateTimeFormatter23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
    }

    @Test
    public void test03311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03311");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str4 = dateTimeZone2.getShortName((long) 0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj0, dateTimeZone2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.weeks();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology14.add(readablePeriod17, 1L, 8);
        org.joda.time.DateTime dateTime21 = dateTime5.toDateTime(chronology14);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = chronology14.add(readablePeriod22, (long) 59, 30961509);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = chronology14.get(readablePeriod26, 946771200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 59L + "'", long25 == 59L);
    }

    @Test
    public void test03312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03312");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property16 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology26);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfSecond();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime dateTime39 = dateTime38.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property40 = dateTime38.hourOfDay();
        org.joda.time.DateTime dateTime41 = property40.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime43 = dateTime41.withDayOfYear(8);
        org.joda.time.DateTime dateTime45 = dateTime43.withMillis((long) 10);
        long long46 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.LocalTime localTime48 = property30.addCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime49 = property30.roundFloorCopy();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay54 = dateTime51.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property55 = timeOfDay54.millisOfSecond();
        java.util.Locale locale56 = null;
        int int57 = property55.getMaximumShortTextLength(locale56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean59 = property55.equals((java.lang.Object) dateTimeFieldType58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property55.getFieldType();
        boolean boolean61 = localTime49.isSupported(dateTimeFieldType60);
        boolean boolean62 = dateTime15.isSupported(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 62134912800000L + "'", long46 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test03313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03313");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.get();
        int int9 = property5.get();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        int int16 = property5.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime11.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusYears(79680);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.Chronology chronology30 = dateTime25.getChronology();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(chronology30);
        org.joda.time.DurationField durationField32 = chronology30.weeks();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.secondOfDay();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now(chronology30);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(3600035L, chronology30);
        org.joda.time.DateTime dateTime37 = dateTime18.toDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField38 = chronology30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology30.hourOfDay();
        org.joda.time.DurationField durationField40 = chronology30.days();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test03314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03314");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        long long11 = dateTimeField9.roundHalfEven(480100L);
        boolean boolean13 = dateTimeField9.isLeap((-82800000L));
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        int int20 = property19.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property19.addToCopy(100);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        boolean boolean29 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) timeOfDay27);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay27.withSecondOfMinute(12);
        int int32 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay31);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay31.withMinuteOfHour(15);
        int int35 = timeOfDay34.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = timeOfDay34.toString("seconds");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3600000L + "'", long11 == 3600000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 15 + "'", int35 == 15);
    }

    @Test
    public void test03315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03315");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str6 = dateTimeZone4.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getName((-1L), locale9);
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withHourOfDay(7);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        boolean boolean26 = dateTimeZone24.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology27 = chronology22.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField28 = chronology27.minutes();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay11.withChronologyRetainFields(chronology27);
        boolean boolean30 = durationFieldType2.isSupported(chronology27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-79200000L), chronology27);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:00" + "'", str10, "-01:00");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test03316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03316");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.Chronology chronology8 = dateTimeFormatter7.getChronolgy();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        java.util.TimeZone timeZone23 = dateTimeZone19.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter7.withZone(dateTimeZone19);
        int int25 = dateTimeFormatter7.getDefaultYear();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property35 = dateTime33.hourOfDay();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        boolean boolean39 = dateTimeZone37.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime40 = dateTime33.withZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int44 = dateTimeZone42.getStandardOffset((long) (short) 0);
        long long46 = dateTimeZone37.getMillisKeepLocal(dateTimeZone42, (long) 0);
        long long48 = dateTimeZone37.convertUTCToLocal((long) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) int25, dateTimeZone37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2000 + "'", int25 == 2000);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3600000) + "'", int44 == (-3600000));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-3600001L) + "'", long48 == (-3600001L));
    }

    @Test
    public void test03317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03317");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = dateTime21.isEqualNow();
        org.joda.time.DateTime dateTime25 = dateTime21.minusSeconds(22);
        org.joda.time.DateTime.Property property26 = dateTime21.weekOfWeekyear();
        long long27 = dateTime21.getMillis();
        org.joda.time.DateTime.Property property28 = dateTime21.millisOfSecond();
        java.util.Locale locale30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = property28.setCopy("08:37:01.735", locale30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"08:37:01.735\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62104063919900L) + "'", long27 == (-62104063919900L));
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test03318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03318");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter6.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withDefaultYear(742);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withZoneUTC();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay15 = dateTime12.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.millisOfSecond();
        int int17 = property16.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay19 = property16.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.Chronology chronology30 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay19.withChronologyRetainFields(chronology30);
        int[] intArray34 = timeOfDay33.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = dateTimeFormatter9.print((org.joda.time.ReadablePartial) timeOfDay33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 0, 0, 200]");
    }

    @Test
    public void test03319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03319");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((-1));
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology8 = dateTimeFormatter2.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = dateTimeFormatter2.parseLocalDate("DateTimeField[hourOfHalfday]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(chronology8);
    }

    @Test
    public void test03320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03320");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        java.lang.String str21 = timeOfDay20.toString();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plus(readablePeriod22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = timeOfDay23.getFieldTypes();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int27 = localTime26.getSecondOfMinute();
        int int28 = localTime26.getMinuteOfHour();
        org.joda.time.DateTime dateTime29 = localTime26.toDateTimeToday();
        boolean boolean31 = dateTime29.isBefore((long) 6);
        org.joda.time.DateTime dateTime32 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTime.Property property34 = dateTime29.property(dateTimeFieldType33);
        int int35 = timeOfDay23.indexOf(dateTimeFieldType33);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay23.withMillisOfSecond(357);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int39 = timeOfDay23.get(dateTimeFieldType38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "T01:00:00.100" + "'", str21, "T01:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(timeOfDay37);
    }

    @Test
    public void test03321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03321");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = dateTime13.plus(349200000L);
        org.joda.time.DateTime dateTime17 = dateTime13.withWeekyear((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = dateTime13.toString("DateTimeField[halfdayOfDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test03322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03322");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        long long11 = dateTimeField9.roundHalfFloor((long) 1200000);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeField9.getAsText((-1), locale13);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3600000L + "'", long11 == 3600000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1" + "'", str14, "-1");
    }

    @Test
    public void test03323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03323");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        calendar7.setLenient(false);
        calendar7.clear();
        calendar7.setFirstDayOfWeek(672);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField15 = localTime13.getField(32772);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32772");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=672,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test03324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03324");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(8);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 10);
        org.joda.time.DateTime dateTime17 = dateTime12.withDurationAdded((long) 16, 5);
        org.joda.time.DateTime dateTime19 = dateTime12.minus((long) 12);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(15, (int) (short) 1);
        int int25 = dateTimeZone23.getOffset(0L);
        org.joda.time.DateTime dateTime26 = dateTime20.withZone(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 54060000 + "'", int25 == 54060000);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test03325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03325");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.secondOfDay();
        boolean boolean23 = property8.equals((java.lang.Object) dateTimeField22);
        org.joda.time.DurationField durationField24 = property8.getRangeDurationField();
        org.joda.time.DateTime dateTime25 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime26 = dateTime25.withTimeAtStartOfDay();
        boolean boolean28 = dateTime26.isBefore((long) 1439);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test03326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03326");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTime dateTime43 = dateTime38.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime28.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime28.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime28.minus(readableDuration47);
        int int49 = property18.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DurationField durationField50 = property18.getRangeDurationField();
        java.util.Locale locale51 = null;
        java.lang.String str52 = property18.getAsText(locale51);
        org.joda.time.DurationField durationField53 = property18.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property18.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay56 = property18.setCopy("secondOfDay");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"secondOfDay\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "23" + "'", str52, "23");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
    }

    @Test
    public void test03327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03327");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter15.withChronology(chronology26);
        boolean boolean30 = durationFieldType12.isSupported(chronology26);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) dateTime10, chronology26);
        org.joda.time.DateTimeField dateTimeField32 = chronology26.era();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.monthOfYear();
        java.util.Locale locale34 = null;
        int int35 = dateTimeField33.getMaximumShortTextLength(locale34);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
    }

    @Test
    public void test03328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03328");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTime dateTime43 = dateTime38.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime28.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime28.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime28.minus(readableDuration47);
        int int49 = property18.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DurationField durationField50 = property18.getRangeDurationField();
        java.util.Locale locale51 = null;
        java.lang.String str52 = property18.getAsText(locale51);
        org.joda.time.DurationField durationField53 = property18.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property18.getFieldType();
        java.util.Locale locale55 = null;
        java.lang.String str56 = property18.getAsText(locale55);
        int int57 = property18.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay58 = property18.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "23" + "'", str52, "23");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "23" + "'", str56, "23");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(timeOfDay58);
    }

    @Test
    public void test03329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03329");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(7, 9, 11);
        java.util.Calendar.Builder builder6 = builder4.setLenient(true);
        java.util.Calendar calendar7 = builder4.build();
        java.util.Calendar.Builder builder11 = builder4.setTimeOfDay(1328, 30961509, (int) (short) 1);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str24 = dateTimeZone22.getShortName((long) 0);
        org.joda.time.DateTime dateTime25 = dateTime20.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        boolean boolean34 = dateTime25.isBefore((org.joda.time.ReadableInstant) dateTime33);
        java.util.Locale locale35 = null;
        java.util.Calendar calendar36 = dateTime33.toCalendar(locale35);
        calendar36.clear();
        calendar36.clear();
        java.util.TimeZone timeZone39 = calendar36.getTimeZone();
        java.util.Calendar.Builder builder40 = builder4.setTimeZone(timeZone39);
        java.util.Calendar.Builder builder44 = builder4.setWeekDate((int) (byte) -1, 32772, 58);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-61922016000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=284,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:00" + "'", str24, "-01:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test03330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03330");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay7 = property5.withMaximumValue();
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay10 = property8.setCopy(3600000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3600000 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test03331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03331");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.LocalTime localTime16 = localTime14.minusSeconds(2);
        org.joda.time.LocalTime localTime18 = localTime16.plusSeconds((-1));
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = null;
        org.joda.time.format.DateTimeParser dateTimeParser20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter19, dateTimeParser20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.Chronology chronology30 = dateTime25.getChronology();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        boolean boolean34 = dateTimeZone32.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology35 = chronology30.withZone(dateTimeZone32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter21.withZone(dateTimeZone32);
        boolean boolean37 = dateTimeFormatter21.isPrinter();
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter21.withLocale(locale38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter21.withOffsetParsed();
        boolean boolean41 = dateTimeFormatter21.isOffsetParsed();
        boolean boolean42 = dateTimeFormatter21.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = localTime18.toString(dateTimeFormatter21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test03332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03332");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.year();
        java.util.Locale locale12 = null;
        int int13 = dateTimeField11.getMaximumShortTextLength(locale12);
        boolean boolean14 = dateTimeField11.isSupported();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((long) (short) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str29 = dateTimeZone27.getShortName((long) 0);
        org.joda.time.DateTime dateTime30 = dateTime25.withZone(dateTimeZone27);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(dateTimeZone27);
        org.joda.time.LocalTime localTime33 = localTime31.minusSeconds(2);
        org.joda.time.LocalTime localTime35 = localTime31.plusMinutes((-292275054));
        boolean boolean36 = timeOfDay16.isBefore((org.joda.time.ReadablePartial) localTime35);
        org.joda.time.LocalTime.Property property37 = localTime35.minuteOfHour();
        org.joda.time.LocalTime localTime38 = property37.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime43.minusDays(7);
        org.joda.time.DateTime dateTime47 = dateTime43.withYear(1);
        org.joda.time.Chronology chronology48 = dateTime43.getChronology();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime(chronology48);
        org.joda.time.DurationField durationField50 = chronology48.weeks();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime54 = dateTime51.withField(dateTimeFieldType52, 17);
        org.joda.time.DateTime.Property property55 = dateTime51.yearOfEra();
        org.joda.time.DateTimeField dateTimeField56 = property55.getField();
        java.lang.String str58 = dateTimeField56.getAsText((long) 14);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime62 = dateTime60.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime62.minusDays(7);
        org.joda.time.DateTime dateTime66 = dateTime62.withYear(1);
        org.joda.time.DateTime dateTime67 = dateTime66.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str71 = dateTimeZone69.getShortName((long) 0);
        org.joda.time.DateTime dateTime72 = dateTime67.withZone(dateTimeZone69);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime(dateTimeZone69);
        org.joda.time.LocalTime localTime75 = localTime73.minusSeconds(2);
        org.joda.time.LocalTime localTime77 = localTime73.plusMinutes((-292275054));
        org.joda.time.LocalTime localTime79 = localTime77.withSecondOfMinute(15);
        int[] intArray82 = new int[] { 17661728, (short) 100 };
        int int83 = dateTimeField56.getMinimumValue((org.joda.time.ReadablePartial) localTime77, intArray82);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray85 = dateTimeField11.addWrapField((org.joda.time.ReadablePartial) localTime38, 18, intArray82, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 18");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-01:00" + "'", str29, "-01:00");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1969" + "'", str58, "1969");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-01:00" + "'", str71, "-01:00");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[17661728, 100]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test03333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03333");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.minus(readablePeriod3);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property5.getAsShortText(locale8);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "31141328" + "'", str9, "31141328");
    }

    @Test
    public void test03334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03334");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property13.addCopy(62134912800000L);
        org.joda.time.LocalTime localTime17 = property13.addNoWrapToCopy(0);
        org.joda.time.DurationField durationField18 = property13.getRangeDurationField();
        org.joda.time.LocalTime localTime19 = property13.getLocalTime();
        java.util.Locale locale21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime22 = property13.setCopy("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=9,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=40,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=9,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=40,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test03335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03335");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        boolean boolean3 = dateTimeZone1.equals((java.lang.Object) (-3600000));
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName(10L, locale5);
        java.lang.String str7 = dateTimeZone1.getID();
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(dateTimeZone1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        java.util.Date date14 = dateTime10.toDate();
        long long15 = date14.getTime();
        int int16 = date14.getHours();
        date14.setSeconds((int) (short) 0);
        int int19 = date14.getYear();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay24 = dateTime21.toTimeOfDay();
        java.util.Date date25 = dateTime21.toDate();
        boolean boolean26 = date14.before(date25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay31 = dateTime28.toTimeOfDay();
        java.util.Date date32 = dateTime28.toDate();
        long long33 = date32.getTime();
        org.joda.time.TimeOfDay timeOfDay34 = org.joda.time.TimeOfDay.fromDateFields(date32);
        java.lang.String str35 = date32.toGMTString();
        java.lang.String str36 = date32.toLocaleString();
        int int37 = date32.getSeconds();
        boolean boolean38 = date25.before(date32);
        boolean boolean39 = timeOfDay8.equals((java.lang.Object) boolean38);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 70 + "'", int19 == 70);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str35, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str36, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test03336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03336");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property5.getAsText(locale8);
        org.joda.time.DurationField durationField10 = property5.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100" + "'", str9, "100");
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test03337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03337");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = dateTime13.withCenturyOfEra(365);
        org.joda.time.DateTime dateTime18 = dateTime15.withDurationAdded(2871866106000L, 1268);
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfSecond();
        org.joda.time.DateTime.Property property20 = dateTime18.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test03338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03338");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfDay();
        long long14 = dateTimeField12.roundCeiling(85729940L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay19 = dateTime16.toTimeOfDay();
        org.joda.time.LocalTime localTime20 = dateTime16.toLocalTime();
        org.joda.time.LocalTime localTime22 = localTime20.minusSeconds(79680);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        boolean boolean27 = dateTimeFormatter26.isOffsetParsed();
        java.util.Locale locale28 = dateTimeFormatter26.getLocale();
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter26.withLocale(locale29);
        int int31 = dateTimeFormatter30.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter30.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime38.minusDays(7);
        org.joda.time.DateTime dateTime42 = dateTime38.withYear(1);
        org.joda.time.Chronology chronology43 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.minuteOfDay();
        org.joda.time.DurationField durationField46 = chronology43.months();
        boolean boolean47 = dateTimeFieldType34.isSupported(chronology43);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 100, chronology43);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        long long52 = chronology43.add(readablePeriod49, (long) 100, 17);
        org.joda.time.DurationField durationField53 = chronology43.months();
        org.joda.time.DurationField durationField54 = chronology43.years();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(chronology43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter32.withChronology(chronology43);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime61.minusDays(7);
        org.joda.time.DateTime dateTime65 = dateTime61.withYear(1);
        org.joda.time.Chronology chronology66 = dateTime61.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.minuteOfDay();
        org.joda.time.LocalTime localTime69 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology66);
        org.joda.time.LocalTime.Property property70 = localTime69.millisOfSecond();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime74 = dateTime72.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime76 = dateTime74.minusDays(7);
        org.joda.time.DateTime dateTime78 = dateTime74.withYear(1);
        org.joda.time.DateTime dateTime79 = dateTime78.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property80 = dateTime78.hourOfDay();
        org.joda.time.DateTime dateTime81 = property80.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime83 = dateTime81.withDayOfYear(8);
        org.joda.time.DateTime dateTime85 = dateTime83.withMillis((long) 10);
        long long86 = property70.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime83);
        java.lang.String str87 = property70.getName();
        org.joda.time.LocalTime localTime89 = property70.setCopy(516);
        int[] intArray91 = chronology43.get((org.joda.time.ReadablePartial) localTime89, 0L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray93 = dateTimeField12.addWrapPartial((org.joda.time.ReadablePartial) localTime20, (-3600000), intArray91, 34680000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 85740000L + "'", long14 == 85740000L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(locale28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2000 + "'", int31 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 62134912800000L + "'", long86 == 62134912800000L);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "millisOfSecond" + "'", str87, "millisOfSecond");
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[23, 0, 0, 0]");
    }

    @Test
    public void test03339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03339");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay13.plusMinutes(79680);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay24 = dateTime21.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.millisOfSecond();
        int int26 = property25.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay28 = property25.setCopy("14");
        int int29 = timeOfDay19.compareTo((org.joda.time.ReadablePartial) timeOfDay28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property39 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = property39.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfYear(8);
        org.joda.time.DateTime dateTime44 = dateTime42.withMillis((long) 10);
        org.joda.time.DateTime dateTime47 = dateTime42.withDurationAdded((long) 16, 5);
        org.joda.time.DateTime dateTime52 = dateTime47.withTime(0, (int) (byte) 10, (int) ' ', 4);
        boolean boolean53 = timeOfDay19.equals((java.lang.Object) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter54 = null;
        org.joda.time.format.DateTimeParser dateTimeParser55 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter54, dateTimeParser55);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.util.Locale locale60 = null;
        java.lang.String str61 = dateTimeZone58.getName(0L, locale60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter56.withZone(dateTimeZone58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter62.withPivotYear(86399999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter62.withPivotYear((java.lang.Integer) 24);
        org.joda.time.Chronology chronology67 = dateTimeFormatter62.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter62.withDefaultYear(2000);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = timeOfDay19.toString(dateTimeFormatter62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-01:00" + "'", str61, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
    }

    @Test
    public void test03340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03340");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.DateTime dateTime15 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime14.hourOfDay();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.weekOfWeekyear();
        java.util.Locale locale19 = null;
        int int20 = property18.getMaximumShortTextLength(locale19);
        org.joda.time.DateTime dateTime21 = property18.withMaximumValue();
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        boolean boolean26 = dateTimeZone24.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime27 = dateTime22.withZoneRetainFields(dateTimeZone24);
        java.lang.String str29 = dateTimeZone24.getName(8991L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(17, 18, 52, 16, 949, 0, 16, dateTimeZone24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 949 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-01:00" + "'", str29, "-01:00");
    }

    @Test
    public void test03341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03341");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 44);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test03342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03342");
        java.util.Date date5 = new java.util.Date((int) '#', (int) (byte) 10, 17, (int) (short) 10, (int) ' ');
        int int6 = date5.getTimezoneOffset();
        org.junit.Assert.assertEquals(date5.toString(), "Sun Nov 17 10:32:00 UTC 1935");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test03343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03343");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DurationField durationField12 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DurationField durationField15 = chronology8.months();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.year();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test03344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03344");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter7.getPrinter();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.minuteOfDay();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology20);
        java.lang.String str24 = localTime23.toString();
        org.joda.time.Chronology chronology25 = localTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology25.getZone();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(31525459285680L, dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter7.withZone(dateTimeZone27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime31 = dateTimeFormatter29.parseMutableDateTime("46");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "01:00:00.000" + "'", str24, "01:00:00.000");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
    }

    @Test
    public void test03345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03345");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime10 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay15 = dateTime12.toTimeOfDay();
        java.util.Date date16 = dateTime12.toDate();
        boolean boolean17 = property8.equals((java.lang.Object) dateTime12);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property27 = dateTime25.hourOfDay();
        org.joda.time.DateTime dateTime28 = property27.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfYear(8);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.plus(readablePeriod31);
        boolean boolean33 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime35 = dateTime12.minusSeconds(19);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfWeek();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property36.getAsShortText(locale37);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Wed" + "'", str38, "Wed");
    }

    @Test
    public void test03346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03346");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.millisOfSecond();
        int int7 = property6.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay9 = property6.addToCopy(100);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.millisOfSecond();
        boolean boolean16 = timeOfDay9.isEqual((org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay9.withMinuteOfHour((int) '#');
        java.lang.String str19 = timeOfDay18.toString();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay18.plusHours(2);
        org.joda.time.Chronology chronology22 = timeOfDay21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weekyears();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay((long) 24352386, chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray27 = chronology22.get(readablePeriod25, (long) 31081121);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "T23:35:00.200" + "'", str19, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test03347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03347");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        java.lang.String str14 = property13.getAsText();
        org.joda.time.DateTime dateTime15 = property13.getDateTime();
        java.util.Locale locale16 = null;
        int int17 = property13.getMaximumTextLength(locale16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = property13.setCopy(557);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 557 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AD" + "'", str14, "AD");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test03348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03348");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        calendar1.setFirstDayOfWeek(13);
        int int4 = calendar1.getWeeksInWeekYear();
        calendar1.set(83280, (int) '4', (int) (short) 10);
        calendar1.setFirstDayOfWeek(927);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=927,minimalDaysInFirstWeek=1,ERA=?,YEAR=83280,MONTH=52,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=10,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
    }

    @Test
    public void test03349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03349");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.LocalTime localTime16 = localTime14.minusSeconds(2);
        org.joda.time.LocalTime localTime18 = localTime16.plusSeconds((-1));
        org.joda.time.LocalTime.Property property19 = localTime16.millisOfDay();
        org.joda.time.LocalTime localTime20 = property19.withMinimumValue();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property30 = dateTime28.hourOfDay();
        org.joda.time.DateTime dateTime31 = property30.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear(1);
        org.joda.time.DateTime dateTime40 = dateTime39.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str44 = dateTimeZone42.getShortName((long) 0);
        org.joda.time.DateTime dateTime45 = dateTime40.withZone(dateTimeZone42);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime(dateTimeZone42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str48 = dateTimeFieldType47.toString();
        boolean boolean49 = localTime46.isSupported(dateTimeFieldType47);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay54 = dateTime51.toTimeOfDay();
        org.joda.time.LocalTime localTime55 = dateTime51.toLocalTime();
        org.joda.time.Chronology chronology56 = localTime55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.years();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType47.getField(chronology56);
        boolean boolean59 = dateTime31.equals((java.lang.Object) dateTimeFieldType47);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = localTime20.get(dateTimeFieldType47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-01:00" + "'", str44, "-01:00");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "monthOfYear" + "'", str48, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test03350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03350");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime18 = dateTime15.plusMinutes((-2337983));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test03351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03351");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(31021256);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03352");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.Chronology chronology13 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withChronology(chronology13);
        int int17 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatter2.getParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.minuteOfDay();
        org.joda.time.DurationField durationField31 = chronology28.months();
        boolean boolean32 = dateTimeFieldType19.isSupported(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withChronology(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 31021223);
        java.lang.StringBuffer stringBuffer36 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays(7);
        org.joda.time.DateTime dateTime44 = dateTime40.withYear(1);
        org.joda.time.DateTime dateTime45 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str49 = dateTimeZone47.getShortName((long) 0);
        org.joda.time.DateTime dateTime50 = dateTime45.withZone(dateTimeZone47);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(dateTimeZone47);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str53 = dateTimeFieldType52.toString();
        boolean boolean54 = localTime51.isSupported(dateTimeFieldType52);
        org.joda.time.LocalTime localTime56 = localTime51.minusMinutes(79680);
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime58 = localTime57.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalTime localTime61 = localTime57.withPeriodAdded(readablePeriod59, (int) 'a');
        org.joda.time.LocalTime localTime63 = localTime57.minusMinutes(69);
        int int64 = localTime56.compareTo((org.joda.time.ReadablePartial) localTime63);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime68 = dateTime66.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime70 = dateTime68.minusDays(7);
        org.joda.time.DateTime dateTime72 = dateTime68.withYear(1);
        org.joda.time.DateTime dateTime73 = dateTime72.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime74 = dateTime73.toDateTimeISO();
        org.joda.time.DateTime dateTime76 = dateTime74.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property77 = dateTime76.monthOfYear();
        org.joda.time.DateTime dateTime79 = property77.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime80 = property77.getDateTime();
        org.joda.time.DateTime dateTime82 = dateTime80.minusWeeks(17);
        org.joda.time.DateTime dateTime83 = localTime63.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.LocalTime localTime85 = localTime63.withHourOfDay((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer36, (org.joda.time.ReadablePartial) localTime85);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2000 + "'", int17 == 2000);
        org.junit.Assert.assertNull(dateTimeParser18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-01:00" + "'", str49, "-01:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "monthOfYear" + "'", str53, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(localTime85);
    }

    @Test
    public void test03353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03353");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str17 = dateTimeZone15.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime11.toMutableDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime20 = dateTime11.plusDays(100);
        org.joda.time.DateTime dateTime22 = dateTime20.withMillisOfSecond(100);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.plus(readableDuration23);
        boolean boolean25 = dateTime20.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:00" + "'", str17, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test03354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03354");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean27 = dateTime25.isSupported(dateTimeFieldType26);
        org.joda.time.TimeOfDay.Property property28 = timeOfDay15.property(dateTimeFieldType26);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay15.minusMillis(70);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay15.minus(readablePeriod31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.withMillisOfSecond(1268);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1268 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
    }

    @Test
    public void test03355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03355");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property5.getAsText(locale8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay11 = property5.setCopy("DateTimeField[dayOfMonth]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[dayOfMonth]\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100" + "'", str9, "100");
    }

    @Test
    public void test03356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03356");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int2 = localTime1.getSecondOfMinute();
        int int3 = localTime1.getMinuteOfHour();
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime1.minus(readablePeriod5);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay11 = dateTime8.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.millisOfSecond();
        int int13 = property12.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property12.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay15.hourOfDay();
        boolean boolean19 = localTime6.isBefore((org.joda.time.ReadablePartial) timeOfDay15);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay24 = dateTime21.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.millisOfSecond();
        int int26 = property25.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay28 = property25.addToCopy(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property25.getFieldType();
        int int30 = localTime6.get(dateTimeFieldType29);
        org.joda.time.LocalTime.Property property31 = localTime6.minuteOfHour();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        java.util.Locale locale38 = null;
        java.util.Calendar calendar39 = dateTime35.toCalendar(locale38);
        calendar39.clear();
        boolean boolean42 = calendar39.after((java.lang.Object) (short) 0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(7);
        org.joda.time.DateTime dateTime50 = dateTime46.withYear(1);
        org.joda.time.DateTime.Property property51 = dateTime50.yearOfEra();
        java.lang.String str52 = property51.getName();
        boolean boolean53 = property51.isLeap();
        org.joda.time.DateTime dateTime54 = property51.roundHalfFloorCopy();
        int int55 = dateTime54.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime56 = dateTime54.toDateTime();
        boolean boolean57 = calendar39.before((java.lang.Object) dateTime56);
        org.joda.time.Chronology chronology58 = dateTime56.getChronology();
        int int59 = property31.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.LocalTime localTime61 = property31.addWrapFieldToCopy(53);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "yearOfEra" + "'", str52, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(localTime61);
    }

    @Test
    public void test03357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03357");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        java.lang.String str18 = timeOfDay17.toString();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours(2);
        org.joda.time.Chronology chronology21 = timeOfDay20.getChronology();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime dateTime30 = dateTime29.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property31 = dateTime29.hourOfDay();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        boolean boolean35 = dateTimeZone33.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime36 = dateTime29.withZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int40 = dateTimeZone38.getStandardOffset((long) (short) 0);
        long long42 = dateTimeZone33.getMillisKeepLocal(dateTimeZone38, (long) 0);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone38);
        java.lang.String str44 = dateTimeZone38.getID();
        org.joda.time.Chronology chronology45 = chronology21.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField46 = chronology21.minuteOfHour();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay51 = dateTime48.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property52 = timeOfDay51.millisOfSecond();
        org.joda.time.DurationField durationField53 = property52.getDurationField();
        java.lang.String str54 = property52.getAsShortText();
        java.util.Locale locale55 = null;
        int int56 = property52.getMaximumTextLength(locale55);
        org.joda.time.TimeOfDay timeOfDay57 = property52.getTimeOfDay();
        java.util.Locale locale58 = null;
        java.lang.String str59 = property52.getAsShortText(locale58);
        org.joda.time.TimeOfDay timeOfDay60 = property52.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay60.withPeriodAdded(readablePeriod61, (-292275054));
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay68 = dateTime65.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property69 = timeOfDay68.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.TimeOfDay timeOfDay72 = timeOfDay68.withPeriodAdded(readablePeriod70, (int) '4');
        org.joda.time.TimeOfDay timeOfDay74 = timeOfDay72.plusSeconds((-3600000));
        java.lang.String str75 = timeOfDay72.toString();
        org.joda.time.TimeOfDay timeOfDay77 = timeOfDay72.withHourOfDay(4);
        int[] intArray78 = timeOfDay72.getValues();
        chronology21.validate((org.joda.time.ReadablePartial) timeOfDay63, intArray78);
        org.joda.time.DateTimeField dateTimeField80 = chronology21.yearOfEra();
        long long84 = chronology21.add((long) 37, 3600035L, 3600096);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "T23:35:00.200" + "'", str18, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3600000) + "'", int40 == (-3600000));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-01:00" + "'", str44, "-01:00");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "100" + "'", str54, "100");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "100" + "'", str59, "100");
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "T23:00:00.100" + "'", str75, "T23:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[23, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 12960471603397L + "'", long84 == 12960471603397L);
    }

    @Test
    public void test03358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03358");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter2.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.Chronology chronology15 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.minuteOfDay();
        org.joda.time.DurationField durationField19 = chronology15.millis();
        boolean boolean20 = dateTimeFieldType5.isSupported(chronology15);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology15);
        java.lang.Integer int23 = dateTimeFormatter2.getPivotYear();
        java.io.Writer writer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer24, (-31535999900L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(int23);
    }

    @Test
    public void test03359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03359");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        long long13 = dateTimeField10.add(0L, 31);
        long long16 = dateTimeField10.getDifferenceAsLong((long) 82800, (long) (-3600000));
        java.lang.String str18 = dateTimeField10.getAsShortText((long) (-738188));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 111600000L + "'", long13 == 111600000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "22" + "'", str18, "22");
    }

    @Test
    public void test03360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03360");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setDate(13, 85680, 517);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.DateTime dateTime15 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str19 = dateTimeZone17.getShortName((long) 0);
        org.joda.time.DateTime dateTime20 = dateTime15.withZone(dateTimeZone17);
        java.util.TimeZone timeZone21 = dateTimeZone17.toTimeZone();
        java.util.Calendar.Builder builder22 = builder6.setTimeZone(timeZone21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone21);
        calendar23.set(42, 34680000, 3600096);
        // The following exception was thrown during execution in test generation
        try {
            calendar23.clear((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-01:00" + "'", str19, "-01:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=42,MONTH=34680000,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=3600096,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=39,SECOND=13,MILLISECOND=899,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test03361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03361");
        java.util.Date date6 = new java.util.Date(10, 1, 100, (-292275054), 53, 3);
        int int7 = date6.getMinutes();
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jun 17 18:53:03 UTC 31433");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
    }

    @Test
    public void test03362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03362");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        long long13 = dateTimeField10.add(0L, 31);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(4080100L);
        int[] intArray17 = null;
        int[] intArray19 = dateTimeField10.add((org.joda.time.ReadablePartial) localTime15, 9, intArray17, (int) (short) 0);
        long long22 = dateTimeField10.addWrapField((-79200000L), (-19));
        org.joda.time.ReadablePartial readablePartial23 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        org.joda.time.DurationField durationField37 = chronology34.months();
        boolean boolean38 = dateTimeFieldType25.isSupported(chronology34);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 100, chronology34);
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime39);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime44.minusDays(7);
        org.joda.time.DateTime dateTime48 = dateTime44.withYear(1);
        org.joda.time.DateTime dateTime49 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime50 = dateTime49.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property53 = dateTime52.monthOfYear();
        int int54 = dateTime52.getSecondOfDay();
        org.joda.time.DateTime dateTime56 = dateTime52.withMillisOfDay(70);
        boolean boolean57 = timeOfDay40.equals((java.lang.Object) dateTime52);
        int int58 = timeOfDay40.getMillisOfSecond();
        int[] intArray59 = timeOfDay40.getValues();
        int int60 = dateTimeField10.getMaximumValue(readablePartial23, intArray59);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 111600000L + "'", long13 == 111600000L);
        org.junit.Assert.assertNull(intArray19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61200000L) + "'", long22 == (-61200000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 85680 + "'", int54 == 85680);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[23, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 24 + "'", int60 == 24);
    }

    @Test
    public void test03363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03363");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(6522789L);
    }

    @Test
    public void test03364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03364");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        org.joda.time.LocalTime localTime17 = property15.addWrapFieldToCopy((-3600000));
        int int18 = property15.getMinimumValue();
        java.lang.String str19 = property15.getAsShortText();
        org.joda.time.LocalTime localTime20 = property15.roundHalfFloorCopy();
        java.util.Locale locale22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = property15.setCopy("200", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 200 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test03365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03365");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.millisOfSecond();
        int int16 = property15.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay18 = property15.addToCopy(100);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay23 = dateTime20.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.millisOfSecond();
        boolean boolean25 = timeOfDay18.isEqual((org.joda.time.ReadablePartial) timeOfDay23);
        int int26 = timeOfDay23.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = timeOfDay23.getFieldTypes();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay23.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay30 = property28.setCopy(1);
        java.lang.String str31 = timeOfDay30.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = timeOfDay30.getFieldTypes();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime38.minusDays(7);
        org.joda.time.DateTime dateTime42 = dateTime38.withYear(1);
        org.joda.time.Chronology chronology43 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.minuteOfDay();
        boolean boolean46 = durationFieldType34.isSupported(chronology43);
        org.joda.time.DateTimeField dateTimeField47 = chronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.halfdayOfDay();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays(7);
        org.joda.time.DateTime dateTime56 = dateTime52.withYear(1);
        org.joda.time.DateTime dateTime57 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str61 = dateTimeZone59.getShortName((long) 0);
        org.joda.time.DateTime dateTime62 = dateTime57.withZone(dateTimeZone59);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime(dateTimeZone59);
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeZone59.getName((long) 712, locale65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone59);
        org.joda.time.Chronology chronology68 = chronology43.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField69 = chronology68.year();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime73 = dateTime71.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay74 = dateTime71.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property75 = timeOfDay74.millisOfSecond();
        int int76 = property75.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay78 = property75.addToCopy(100);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime82 = dateTime80.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay83 = dateTime80.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property84 = timeOfDay83.millisOfSecond();
        boolean boolean85 = timeOfDay78.isEqual((org.joda.time.ReadablePartial) timeOfDay83);
        int int86 = timeOfDay83.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray87 = timeOfDay83.getFieldTypes();
        org.joda.time.TimeOfDay.Property property88 = timeOfDay83.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay90 = property88.setCopy(1);
        java.lang.String str91 = timeOfDay90.toString();
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        org.joda.time.TimeOfDay timeOfDay93 = timeOfDay90.plus(readablePeriod92);
        int[] intArray95 = chronology68.get((org.joda.time.ReadablePartial) timeOfDay93, (long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray97 = dateTimeField9.addWrapPartial((org.joda.time.ReadablePartial) timeOfDay30, (-35748), intArray95, 31114187);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "T01:00:00.100" + "'", str31, "T01:00:00.100");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-01:00" + "'", str61, "-01:00");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-01:00" + "'", str66, "-01:00");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(timeOfDay78);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(timeOfDay83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(timeOfDay90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "T01:00:00.100" + "'", str91, "T01:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[23, 0, 0, 10]");
    }

    @Test
    public void test03366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03366");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.LocalTime localTime17 = localTime15.plusMinutes((-292275054));
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.Chronology chronology27 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.minuteOfDay();
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology27);
        org.joda.time.LocalTime.Property property31 = localTime30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.joda.time.LocalTime localTime33 = property31.getLocalTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(7);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(1);
        org.joda.time.DateTime dateTime42 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTimeISO();
        int int44 = dateTime43.getEra();
        org.joda.time.DateTime.Property property45 = dateTime43.weekyear();
        org.joda.time.DateTime.Property property46 = dateTime43.yearOfCentury();
        org.joda.time.DateTime dateTime48 = property46.addToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime50 = property46.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime51 = localTime33.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = localTime17.isBefore((org.joda.time.ReadablePartial) localTime33);
        org.joda.time.LocalTime localTime54 = localTime33.minusMinutes(69);
        org.joda.time.LocalTime localTime56 = localTime33.plusMillis((int) (short) -1);
        int int57 = localTime33.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime59 = localTime33.withMinuteOfHour(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test03367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03367");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DurationField durationField10 = property9.getLeapDurationField();
        java.lang.String str11 = property9.getName();
        org.joda.time.DateTime dateTime12 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(79680100);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hourOfDay" + "'", str11, "hourOfDay");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test03368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03368");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(427);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(2000, 31128547, 53, 0, 80, 580, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 80 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test03369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03369");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(999, 952);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03370");
        java.util.Date date6 = new java.util.Date((int) (byte) 0, 937, 188, 672, 937, 658);
        date6.setHours(427);
        int int9 = date6.getMonth();
        org.junit.Assert.assertEquals(date6.toString(), "Thu Sep 21 19:47:58 UTC 1978");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test03371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03371");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.millisOfSecond();
        java.util.Locale locale7 = null;
        int int8 = property6.getMaximumShortTextLength(locale7);
        int int9 = property6.get();
        int int10 = property6.get();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay15 = dateTime12.toTimeOfDay();
        org.joda.time.LocalTime localTime16 = dateTime12.toLocalTime();
        int int17 = property6.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology18 = dateTime12.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfWeek();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((-82798570L), chronology18);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) chronology18, dateTimeZone24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
    }

    @Test
    public void test03372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03372");
        java.util.Date date3 = new java.util.Date(14, 86399999, 79200000);
        int int4 = date3.getDate();
        date3.setSeconds(3);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Feb 24 00:00:03 UTC 7418756");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 24 + "'", int4 == 24);
    }

    @Test
    public void test03373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03373");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        org.joda.time.LocalTime localTime17 = property15.addCopy(24);
        org.joda.time.DateTimeField dateTimeField18 = property15.getField();
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plusMinutes(0);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay20.withSecondOfMinute(17);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay20.plusHours(15);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) timeOfDay20, locale28);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
    }

    @Test
    public void test03374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03374");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime32 = localTime30.withMillisOfSecond(13);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime35 = localTime32.withFieldAdded(durationFieldType33, 357);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        org.joda.time.Chronology chronology44 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.dayOfMonth();
        org.joda.time.DurationField durationField46 = chronology44.halfdays();
        boolean boolean47 = durationFieldType33.isSupported(chronology44);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test03375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03375");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        boolean boolean17 = dateTime13.isAfter(62L);
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology18.getZone();
        org.joda.time.Chronology chronology20 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfMonth();
        org.joda.time.DurationField durationField22 = chronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test03376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03376");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        long long16 = dateTimeField14.roundFloor((-9469100436480000L));
        int int18 = dateTimeField14.getMaximumValue((long) 30961509);
        java.lang.String str20 = dateTimeField14.getAsShortText(349200000L);
        int int22 = dateTimeField14.getLeapAmount(23L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-9469100436480000L) + "'", long16 == (-9469100436480000L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 999 + "'", int18 == 999);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test03377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03377");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        java.util.Date date8 = calendar7.getTime();
        calendar7.setTimeInMillis(3776666062236000L);
        int int11 = calendar7.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=3776666062236000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=121647,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=286,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=10,SECOND=36,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test03378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03378");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology10.add(readablePeriod16, (long) 100, 17);
        org.joda.time.DurationField durationField20 = chronology10.months();
        org.joda.time.DurationField durationField21 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology10.weekyear();
        org.joda.time.DurationField durationField23 = chronology10.weeks();
        org.joda.time.DateTimeField dateTimeField24 = chronology10.weekOfWeekyear();
        long long28 = chronology10.add((-61200000L), 6842880000017L, 48);
        org.joda.time.DurationField durationField29 = chronology10.hours();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 328458178800816L + "'", long28 == 328458178800816L);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test03379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03379");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.lang.Object obj12 = null;
        boolean boolean13 = dateTime10.equals(obj12);
        org.joda.time.DateTime.Property property14 = dateTime10.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime10.withDayOfWeek(712);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 712 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test03380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03380");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime.Property property11 = dateTime9.weekyear();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.minus(readableDuration12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay19 = dateTime16.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property20 = timeOfDay19.millisOfSecond();
        int int21 = property20.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay23 = property20.addToCopy(100);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay28 = dateTime25.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property29 = timeOfDay28.millisOfSecond();
        boolean boolean30 = timeOfDay23.isEqual((org.joda.time.ReadablePartial) timeOfDay28);
        int int31 = timeOfDay28.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = timeOfDay28.getFieldTypes();
        org.joda.time.TimeOfDay.Property property33 = timeOfDay28.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay35 = property33.setCopy(1);
        java.lang.String str36 = timeOfDay35.toString();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay35.plus(readablePeriod37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = timeOfDay38.getFieldTypes();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int42 = localTime41.getSecondOfMinute();
        int int43 = localTime41.getMinuteOfHour();
        org.joda.time.DateTime dateTime44 = localTime41.toDateTimeToday();
        boolean boolean46 = dateTime44.isBefore((long) 6);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTime.Property property49 = dateTime44.property(dateTimeFieldType48);
        int int50 = timeOfDay38.indexOf(dateTimeFieldType48);
        org.joda.time.DateTime.Property property51 = dateTime13.property(dateTimeFieldType48);
        org.joda.time.DurationField durationField52 = property51.getDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "T01:00:00.100" + "'", str36, "T01:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test03381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03381");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        boolean boolean8 = dateTimeFormatter7.isOffsetParsed();
        java.util.Locale locale9 = dateTimeFormatter7.getLocale();
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter7.withLocale(locale10);
        int int12 = dateTimeFormatter11.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.Chronology chronology24 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        org.joda.time.DurationField durationField27 = chronology24.months();
        boolean boolean28 = dateTimeFieldType15.isSupported(chronology24);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 100, chronology24);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = chronology24.add(readablePeriod30, (long) 100, 17);
        org.joda.time.DurationField durationField34 = chronology24.months();
        org.joda.time.DurationField durationField35 = chronology24.years();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter13.withChronology(chronology24);
        java.lang.Integer int38 = dateTimeFormatter37.getPivotYear();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(7);
        org.joda.time.DateTime dateTime46 = dateTime42.withYear(1);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfEra();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime51.minusDays(7);
        org.joda.time.DateTime dateTime55 = dateTime51.withYear(1);
        org.joda.time.DateTime dateTime56 = dateTime55.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str60 = dateTimeZone58.getShortName((long) 0);
        org.joda.time.DateTime dateTime61 = dateTime56.withZone(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime46.withZone(dateTimeZone58);
        org.joda.time.DateTime dateTime64 = dateTime46.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime46.minus(readableDuration65);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime46.getZone();
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime46.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter37.withZone(dateTimeZone68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((java.lang.Object) dateTimeField4, dateTimeZone68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2000 + "'", int12 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-01:00" + "'", str60, "-01:00");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
    }

    @Test
    public void test03382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03382");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(31021296, 0, 91, 31128547, 8, 937, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31128547 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03383");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        boolean boolean15 = gregorianCalendar13.isWeekDateSupported();
        boolean boolean16 = gregorianCalendar13.isWeekDateSupported();
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = gregorianCalendar13.getDisplayName(31021296, (int) '4', locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test03384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03384");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        java.lang.String str14 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.clockhourOfHalfday();
        boolean boolean17 = dateTimeField15.isLeap((-6719900L));
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeField15.getAsShortText((-3599999L), locale19);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeField15.getAsText(15L, locale22);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[-01:00]" + "'", str14, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "10" + "'", str20, "10");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "11" + "'", str23, "11");
    }

    @Test
    public void test03385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03385");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(388, 365, (-3600000), 9499, 4, 516, 365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 9499 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03386");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(2);
        java.util.Locale locale6 = null;
        java.lang.String str7 = localTime4.toString("00:00:00.010", locale6);
        org.joda.time.LocalTime.Property property8 = localTime4.millisOfDay();
        org.joda.time.LocalTime localTime9 = property8.withMaximumValue();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00:00:00.010" + "'", str7, "00:00:00.010");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test03387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03387");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minusMillis(100);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.plusMillis(16);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.minusMinutes(2922789);
        int int24 = timeOfDay23.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 116 + "'", int24 == 116);
    }

    @Test
    public void test03388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03388");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.DateTime dateTime10 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str14 = dateTimeZone12.getShortName((long) 0);
        org.joda.time.DateTime dateTime15 = dateTime10.withZone(dateTimeZone12);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str18 = dateTimeFieldType17.toString();
        boolean boolean19 = localTime16.isSupported(dateTimeFieldType17);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay24 = dateTime21.toTimeOfDay();
        org.joda.time.LocalTime localTime25 = dateTime21.toLocalTime();
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.years();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType17.getField(chronology26);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(chronology26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(2000, 114, chronology26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "monthOfYear" + "'", str18, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localTime29);
    }

    @Test
    public void test03389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03389");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(24, 31021296, 658, 949);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03390");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        org.joda.time.DateTime dateTime16 = dateTime11.withDurationAdded((-61199L), 2000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime11.withEra(31021223);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31021223 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test03391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03391");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter2.getParser();
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTimeFormatter8.parseDateTime("T23:00:00.999");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test03392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03392");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded(readableDuration5, 9);
        org.joda.time.DateTime dateTime8 = dateTime7.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime8.withTime(69, 385, (int) (byte) 10, 801);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test03393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03393");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.set(14, 15, 1);
        int int18 = gregorianCalendar13.getMinimalDaysInFirstWeek();
        java.lang.Object obj19 = gregorianCalendar13.clone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=14,MONTH=15,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=48,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=14,MONTH=15,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=48,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=14,MONTH=15,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=48,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test03394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03394");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.add(11, 11);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.monthOfYear();
        int int30 = dateTime28.getSecondOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.withMillisOfDay(70);
        boolean boolean33 = gregorianCalendar13.after((java.lang.Object) dateTime28);
        java.time.Instant instant34 = gregorianCalendar13.toInstant();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay39 = dateTime36.toTimeOfDay();
        org.joda.time.LocalTime localTime40 = dateTime36.toLocalTime();
        java.util.Locale locale41 = null;
        java.util.Calendar calendar42 = dateTime36.toCalendar(locale41);
        calendar42.setLenient(false);
        java.util.TimeZone timeZone45 = calendar42.getTimeZone();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        gregorianCalendar13.setTimeZone(timeZone45);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = gregorianCalendar13.getActualMinimum(69);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 69");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 85680 + "'", int30 == 85680);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644572356113,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=39,SECOND=16,MILLISECOND=113,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
    }

    @Test
    public void test03395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03395");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withChronology(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfDay();
        org.joda.time.DurationField durationField22 = chronology19.months();
        boolean boolean23 = dateTimeFieldType10.isSupported(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime9.withField(dateTimeFieldType10, 8);
        org.joda.time.Instant instant26 = dateTime25.toInstant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(instant26);
    }

    @Test
    public void test03396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03396");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        boolean boolean18 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        boolean boolean24 = dateTimeZone22.equals((java.lang.Object) (-3600000));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear((java.lang.Integer) 365);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter26.withPivotYear(86399);
        java.lang.StringBuffer stringBuffer31 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear(1);
        org.joda.time.DateTime.Property property40 = dateTime39.secondOfDay();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay45 = dateTime42.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property46 = timeOfDay45.millisOfSecond();
        java.util.Locale locale47 = null;
        int int48 = property46.getMaximumShortTextLength(locale47);
        int int49 = property46.get();
        int int50 = property46.get();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay55 = dateTime52.toTimeOfDay();
        org.joda.time.LocalTime localTime56 = dateTime52.toLocalTime();
        int int57 = property46.compareTo((org.joda.time.ReadableInstant) dateTime52);
        int int58 = dateTime52.getSecondOfDay();
        boolean boolean59 = dateTime39.equals((java.lang.Object) int58);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter26.printTo(stringBuffer31, (org.joda.time.ReadableInstant) dateTime39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 82800 + "'", int58 == 82800);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test03397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03397");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime14 = dateTime11.withField(dateTimeFieldType12, 17);
        org.joda.time.DateTime.Property property15 = dateTime11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        java.lang.String str17 = property15.toString();
        org.joda.time.DurationField durationField18 = property15.getDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[yearOfEra]" + "'", str17, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test03398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03398");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setLenient(true);
        int int14 = calendar7.getLeastMaximum(16);
        boolean boolean15 = calendar7.isWeekDateSupported();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(7);
        org.joda.time.DateTime dateTime32 = dateTime28.withYear(1);
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str37 = dateTimeZone35.getShortName((long) 0);
        org.joda.time.DateTime dateTime38 = dateTime33.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = dateTime23.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime23.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime23.minus(readableDuration42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(7);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(1);
        org.joda.time.DateTime dateTime52 = dateTime51.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property53 = dateTime51.hourOfDay();
        org.joda.time.DateTime dateTime54 = property53.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property55 = dateTime54.weekOfWeekyear();
        java.util.Locale locale56 = null;
        int int57 = property55.getMaximumShortTextLength(locale56);
        org.joda.time.DateTime dateTime58 = property55.withMaximumValue();
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        int int60 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime62 = dateTime23.plusMinutes(15);
        boolean boolean63 = calendar7.after((java.lang.Object) dateTime23);
        calendar7.setMinimalDaysInFirstWeek(82800);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = calendar7.getMinimum(19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=82800,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1200000 + "'", int14 == 1200000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-01:00" + "'", str37, "-01:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test03399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03399");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        java.util.Locale locale8 = null;
        int int9 = property5.getMaximumTextLength(locale8);
        java.util.Locale locale10 = null;
        java.lang.String str11 = property5.getAsShortText(locale10);
        java.lang.String str12 = property5.toString();
        int int13 = property5.getMinimumValue();
        java.lang.String str14 = property5.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property5.getFieldType();
        org.joda.time.TimeOfDay timeOfDay17 = property5.addToCopy(517);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100" + "'", str11, "100");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[millisOfSecond]" + "'", str12, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100" + "'", str14, "100");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test03400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03400");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        boolean boolean3 = dateTimeZone1.equals((java.lang.Object) (-3600000));
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName(10L, locale5);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone1);
        long long8 = dateTime7.getMillis();
        int int9 = dateTime7.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572356543L + "'", long8 == 1644572356543L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6 + "'", int9 == 6);
    }

    @Test
    public void test03401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03401");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone4.getName(0L, locale6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZone(dateTimeZone4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear(86399999);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfDay();
        org.joda.time.DurationField durationField22 = chronology19.hours();
        org.joda.time.DurationField durationField23 = chronology19.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter8.withChronology(chronology19);
        java.io.Writer writer25 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay30 = dateTime27.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property31 = timeOfDay30.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay30.withPeriodAdded(readablePeriod32, (int) '4');
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.plusSeconds((-3600000));
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter24.printTo(writer25, (org.joda.time.ReadablePartial) timeOfDay34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
    }

    @Test
    public void test03402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03402");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime15);
        org.joda.time.LocalTime localTime17 = dateTime15.toLocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = localTime17.isSupported(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test03403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03403");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        boolean boolean18 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale19);
        org.joda.time.Chronology chronology21 = dateTimeFormatter20.getChronology();
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter20.withLocale(locale22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.DateTime dateTime32 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property33 = dateTime31.hourOfDay();
        org.joda.time.DateTime dateTime34 = property33.roundHalfFloorCopy();
        long long35 = property33.remainder();
        org.joda.time.Interval interval36 = property33.toInterval();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property33.getAsText(locale37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(7);
        org.joda.time.DateTime dateTime46 = dateTime42.withYear(1);
        org.joda.time.Chronology chronology47 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.weekyearOfCentury();
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime51 = localTime49.withSecondOfMinute(1);
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeField48.getAsText((org.joda.time.ReadablePartial) localTime51, 14, locale53);
        org.joda.time.DateTimeField[] dateTimeFieldArray55 = localTime51.getFields();
        int int56 = localTime51.size();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime60.minusDays(7);
        org.joda.time.DateTime dateTime64 = dateTime60.withYear(1);
        org.joda.time.DateTime dateTime65 = dateTime64.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime66 = dateTime65.toDateTimeISO();
        org.joda.time.DateTime dateTime68 = dateTime66.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property69 = dateTime68.monthOfYear();
        int int70 = dateTime68.getSecondOfDay();
        org.joda.time.DateTime dateTime72 = dateTime68.withMillisOfDay(70);
        org.joda.time.DateTime dateTime73 = localTime51.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = dateTime73.withWeekyear((int) (short) 0);
        long long76 = property33.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime75);
        int int77 = property33.getMinimumValue();
        org.joda.time.DateTime dateTime79 = property33.setCopy((int) (short) 10);
        org.joda.time.LocalTime localTime80 = dateTime79.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = dateTimeFormatter23.print((org.joda.time.ReadablePartial) localTime80);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 480100L + "'", long35 == 480100L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "22" + "'", str38, "22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "14" + "'", str54, "14");
        org.junit.Assert.assertNotNull(dateTimeFieldArray55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 85680 + "'", int70 == 85680);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 17485L + "'", long76 == 17485L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localTime80);
    }

    @Test
    public void test03404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03404");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded(readableDuration5, 9);
        int int8 = dateTime1.getWeekOfWeekyear();
        int int9 = dateTime1.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
    }

    @Test
    public void test03405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03405");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property25 = dateTime24.weekOfWeekyear();
        java.util.Locale locale26 = null;
        int int27 = property25.getMaximumShortTextLength(locale26);
        org.joda.time.DateTime dateTime28 = property25.withMaximumValue();
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        boolean boolean33 = dateTimeZone31.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime34 = dateTime29.withZoneRetainFields(dateTimeZone31);
        org.joda.time.Chronology chronology35 = chronology8.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        org.joda.time.DateTime dateTime44 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property45 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime46 = property45.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfYear(8);
        org.joda.time.Chronology chronology49 = dateTime46.getChronology();
        long long50 = dateTime46.getMillis();
        org.joda.time.DateTime.Property property51 = dateTime46.hourOfDay();
        int int52 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime54 = dateTime46.withMillisOfDay(31021223);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-62104064400000L) + "'", long50 == (-62104064400000L));
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3600000) + "'", int52 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test03406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03406");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readablePeriod14);
        org.joda.time.DateTime dateTime17 = dateTime9.minusHours(17);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime.Property property19 = dateTime17.dayOfMonth();
        long long20 = dateTime17.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime17.withDayOfMonth(38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-62104125119900L) + "'", long18 == (-62104125119900L));
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62104125119900L) + "'", long20 == (-62104125119900L));
    }

    @Test
    public void test03407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03407");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        java.time.Instant instant6 = date5.toInstant();
        int int7 = date5.getMinutes();
        long long8 = date5.getTime();
        java.lang.String str9 = date5.toGMTString();
        date5.setMinutes(85680);
        int int12 = date5.getTimezoneOffset();
        date5.setHours(20);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Mar 01 20:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str9, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test03408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03408");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property15 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear(8);
        org.joda.time.Chronology chronology19 = dateTime16.getChronology();
        long long20 = dateTime16.getMillis();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime16.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime21, "0002-01-03T08:39:01.679-01:00", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62104064400000L) + "'", long20 == (-62104064400000L));
        org.junit.Assert.assertNotNull(mutableDateTime21);
    }

    @Test
    public void test03409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03409");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withHourOfDay(7);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime3.withDurationAdded(readableDuration8, 34680000);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test03410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03410");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int19 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withPivotYear((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = dateTimeFormatter21.parseMillis("08:37:33.123");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test03411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03411");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter3.withChronology(chronology14);
        java.lang.Integer int18 = dateTimeFormatter3.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.parse("08:37:01.814", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test03412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03412");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime13.getEra();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime26 = dateTime13.withDurationAdded(readableDuration24, (int) '4');
        org.joda.time.DateTime dateTime28 = dateTime13.withYear(365);
        java.lang.String str29 = dateTime13.toString();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) dateTime13);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0001-12-31T22:08:00.100-01:00" + "'", str29, "0001-12-31T22:08:00.100-01:00");
    }

    @Test
    public void test03413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03413");
        java.util.Date date3 = new java.util.Date(0, 31021296, (-3600000));
        org.junit.Assert.assertEquals(date3.toString(), "Sat Jul 14 00:00:00 UTC 2577151");
    }

    @Test
    public void test03414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03414");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime10.toLocalTime();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        long long20 = chronology15.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = dateTimeFormatter21.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withZoneUTC();
        int int24 = dateTimeFormatter23.getDefaultYear();
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter23.withLocale(locale25);
        java.util.Locale locale27 = dateTimeFormatter26.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = dateTimeFormatter26.parseMillis("java.util.GregorianCalendar[time=1644572205789,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=45,MILLISECOND=789,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(dateTimePrinter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2000 + "'", int24 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(locale27);
    }

    @Test
    public void test03415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03415");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale5);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfDay();
        org.joda.time.DurationField durationField22 = chronology19.months();
        boolean boolean23 = dateTimeFieldType10.isSupported(chronology19);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 100, chronology19);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology19.add(readablePeriod25, (long) 100, 17);
        org.joda.time.DurationField durationField29 = chronology19.months();
        org.joda.time.DurationField durationField30 = chronology19.years();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter8.withChronology(chronology19);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay37 = dateTime34.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property38 = timeOfDay37.millisOfSecond();
        java.util.Locale locale39 = null;
        int int40 = property38.getMaximumShortTextLength(locale39);
        int int41 = property38.get();
        int int42 = property38.get();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay47 = dateTime44.toTimeOfDay();
        org.joda.time.LocalTime localTime48 = dateTime44.toLocalTime();
        int int49 = property38.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime44.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            int int53 = dateTimeFormatter32.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime50, "", (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime50);
    }

    @Test
    public void test03416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03416");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        java.util.Locale locale8 = null;
        int int9 = property5.getMaximumTextLength(locale8);
        org.joda.time.TimeOfDay timeOfDay10 = property5.getTimeOfDay();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property5.getAsShortText(locale11);
        org.joda.time.TimeOfDay timeOfDay14 = property5.addWrapFieldToCopy(16);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.minusHours((int) '4');
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100" + "'", str12, "100");
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test03417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03417");
        long long6 = java.util.Date.UTC((int) '4', 23, 0, 31141883, 8, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 111603092881000L + "'", long6 == 111603092881000L);
    }

    @Test
    public void test03418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03418");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime15);
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.minuteOfHour();
        java.lang.String str18 = timeOfDay16.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "T23:00:00.100" + "'", str18, "T23:00:00.100");
    }

    @Test
    public void test03419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03419");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str4 = dateTimeZone2.getShortName((long) 0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj0, dateTimeZone2);
        java.lang.String str7 = dateTimeZone2.getShortName((long) 3600000);
        boolean boolean8 = dateTimeZone2.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test03420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03420");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.yearOfEra();
        org.joda.time.DurationField durationField13 = dateTimeField12.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNull(durationField13);
    }

    @Test
    public void test03421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03421");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.minus(readablePeriod3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str6 = durationFieldType5.toString();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType5, (int) (short) 1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology10);
        org.joda.time.LocalTime localTime13 = localTime11.plusHours((int) (byte) 10);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfDay();
        org.joda.time.LocalTime localTime15 = localTime8.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        boolean boolean19 = dateTimeFormatter18.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter18.getParser();
        java.util.Locale locale21 = dateTimeFormatter18.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter18.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatter23.getParser();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.LocalTime localTime30 = dateTime26.toLocalTime();
        org.joda.time.Chronology chronology31 = localTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.hours();
        long long36 = chronology31.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter23.withChronology(chronology31);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay42 = dateTime39.toTimeOfDay();
        org.joda.time.LocalTime localTime43 = dateTime39.toLocalTime();
        org.joda.time.Chronology chronology44 = localTime43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.hours();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter23.withChronology(chronology44);
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter23.withLocale(locale48);
        java.util.Locale locale50 = dateTimeFormatter23.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter23.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = localTime13.toString(dateTimeFormatter23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "seconds" + "'", str6, "seconds");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(dateTimeParser20);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(dateTimeParser24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
    }

    @Test
    public void test03422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03422");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withWeekyear(12);
        org.joda.time.DateTime.Property property7 = dateTime1.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test03423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03423");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        boolean boolean10 = property8.isLeap();
        org.joda.time.DateTime dateTime11 = property8.roundHalfFloorCopy();
        int int12 = dateTime11.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond(24);
        int int15 = dateTime14.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test03424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03424");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology8.getDateTimeMillis(1428, 1, 1200000, 116);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1200000 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test03425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03425");
        java.util.Date date6 = new java.util.Date((-3600000), 32770, 52, 927, 18, 658);
        int int7 = date6.getTimezoneOffset();
        org.junit.Assert.assertEquals(date6.toString(), "Wed Jan 29 15:28:58 UTC 3595370");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test03426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03426");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        int int6 = dateTime1.getDayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.toDateTimeISO();
        org.joda.time.DateMidnight dateMidnight8 = dateTime1.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime1.withWeekOfWeekyear(82800);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82800 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
    }

    @Test
    public void test03427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03427");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(79200000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03428");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.millisOfSecond();
        int int22 = property21.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay24 = property21.addToCopy(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property21.getFieldType();
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay8.withField(dateTimeFieldType25, 53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType29 = timeOfDay8.getFieldType(358);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 358");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(timeOfDay27);
    }

    @Test
    public void test03429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03429");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        boolean boolean13 = dateTimeZone11.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime14 = dateTime7.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int18 = dateTimeZone16.getStandardOffset((long) (short) 0);
        long long20 = dateTimeZone11.getMillisKeepLocal(dateTimeZone16, (long) 0);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone16);
        java.lang.String str22 = dateTimeZone16.getID();
        long long24 = dateTimeZone16.nextTransition((long) 32769);
        long long26 = dateTimeZone16.previousTransition((long) 1439);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3600000) + "'", int18 == (-3600000));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-01:00" + "'", str22, "-01:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 32769L + "'", long24 == 32769L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1439L + "'", long26 == 1439L);
    }

    @Test
    public void test03430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03430");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime9 = property8.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean11 = dateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        java.util.Locale locale18 = null;
        int int19 = property17.getMaximumShortTextLength(locale18);
        int int20 = property17.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField21 = property17.getField();
        java.util.Locale locale22 = null;
        int int23 = dateTimeField21.getMaximumTextLength(locale22);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeField21.getAsText((int) (byte) 0, locale25);
        long long28 = dateTimeField21.roundHalfFloor((-607919900L));
        int int29 = dateTime9.get(dateTimeField21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime9.plusMinutes(61199999);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 9223372017122880100 + 3671999940000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-607919900L) + "'", long28 == (-607919900L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
    }

    @Test
    public void test03431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03431");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime.Property property11 = dateTime9.weekyear();
        org.joda.time.DateTime.Property property12 = dateTime9.yearOfCentury();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfMonth();
        int int14 = dateTime9.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03432");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withSecondOfMinute(12);
        org.joda.time.DateTime dateTime18 = timeOfDay13.toDateTimeToday();
        java.lang.String str19 = timeOfDay13.toString();
        int int20 = timeOfDay13.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay13.plus(readablePeriod21);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "T23:00:00.100" + "'", str19, "T23:00:00.100");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 23 + "'", int20 == 23);
        org.junit.Assert.assertNotNull(timeOfDay22);
    }

    @Test
    public void test03433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03433");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date5);
        java.lang.String str8 = date5.toGMTString();
        java.lang.String str9 = date5.toLocaleString();
        java.lang.String str10 = date5.toLocaleString();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay15 = dateTime12.toTimeOfDay();
        java.util.Date date16 = dateTime12.toDate();
        long long17 = date16.getTime();
        int int18 = date16.getDate();
        boolean boolean19 = date5.before(date16);
        java.lang.String str20 = date16.toGMTString();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromDateFields(date16);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime dateTime30 = dateTime29.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTimeISO();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes((int) (short) 100);
        java.lang.String str34 = dateTime33.toString();
        java.util.GregorianCalendar gregorianCalendar35 = dateTime33.toGregorianCalendar();
        gregorianCalendar35.add(11, 11);
        gregorianCalendar35.clear();
        java.util.Date date40 = gregorianCalendar35.getTime();
        boolean boolean41 = date16.after(date40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay46 = dateTime43.toTimeOfDay();
        java.util.Date date47 = dateTime43.toDate();
        long long48 = date47.getTime();
        int int49 = date47.getHours();
        date47.setSeconds((int) (short) 0);
        int int52 = date47.getYear();
        date47.setHours(2000);
        date47.setTime((-288675054L));
        boolean boolean57 = date16.after(date47);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay62 = dateTime59.toTimeOfDay();
        java.util.Date date63 = dateTime59.toDate();
        long long64 = date63.getTime();
        int int65 = date63.getDate();
        date63.setHours(3);
        int int68 = date63.getYear();
        int int69 = date47.compareTo(date63);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str8, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str9, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str10, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str20, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str34, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar35);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 01:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Dec 28 15:48:44 UTC 1969");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L + "'", long48 == 100L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 70 + "'", int52 == 70);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 03:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 70 + "'", int68 == 70);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test03434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03434");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        int int13 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay32 = dateTime29.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property33 = timeOfDay32.millisOfSecond();
        java.util.Locale locale34 = null;
        int int35 = property33.getMaximumShortTextLength(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean37 = property33.equals((java.lang.Object) dateTimeFieldType36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property33.getFieldType();
        boolean boolean39 = dateTime26.isSupported(dateTimeFieldType38);
        org.joda.time.DateTime.Property property40 = dateTime16.property(dateTimeFieldType38);
        org.joda.time.DurationField durationField41 = property40.getDurationField();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime45.minusDays(7);
        org.joda.time.DateTime dateTime49 = dateTime45.withYear(1);
        org.joda.time.DateTime dateTime50 = dateTime49.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property51 = dateTime49.hourOfDay();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        boolean boolean55 = dateTimeZone53.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime56 = dateTime49.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime58 = dateTime56.withDayOfYear((int) 'a');
        int int59 = property40.compareTo((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = property40.isLeap();
        java.lang.String str61 = property40.toString();
        org.joda.time.DateTime dateTime62 = property40.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Property[millisOfSecond]" + "'", str61, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test03435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03435");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekOfWeekyear();
        int int9 = dateTimeField8.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
    }

    @Test
    public void test03436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03436");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        boolean boolean18 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale19);
        org.joda.time.Chronology chronology21 = dateTimeFormatter20.getChronology();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.Chronology chronology30 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology30.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter20.withChronology(chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfWeek();
        int int41 = dateTimeField40.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 7 + "'", int41 == 7);
    }

    @Test
    public void test03437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03437");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeField14.getAsShortText(99, locale16);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeField14.getAsShortText(1644572266647L, locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = dateTimeField14.getType();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99" + "'", str17, "99");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "6" + "'", str20, "6");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
    }

    @Test
    public void test03438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03438");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfDay();
        long long23 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(7);
        org.joda.time.DateTime dateTime32 = dateTime28.withYear(1);
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTimeISO();
        org.joda.time.DateTime dateTime36 = dateTime34.plusMinutes((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime37 = dateTime34.toLocalDateTime();
        org.joda.time.DateTime.Property property38 = dateTime34.era();
        org.joda.time.DateTime.Property property39 = dateTime34.yearOfEra();
        int int40 = dateTime34.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str42 = dateTimeFieldType41.toString();
        org.joda.time.DateTime.Property property43 = dateTime34.property(dateTimeFieldType41);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = localTime2.get(dateTimeFieldType41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 79680 + "'", int40 == 79680);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "monthOfYear" + "'", str42, "monthOfYear");
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test03439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03439");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.weekyear();
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField12.getAsText(3L, locale14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeField12.getAsText(1378, locale17);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970" + "'", str15, "1970");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1378" + "'", str18, "1378");
    }

    @Test
    public void test03440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03440");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        long long11 = dateTimeField9.roundHalfEven(480100L);
        boolean boolean13 = dateTimeField9.isLeap((-82800000L));
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay((long) 11);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfDay();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology25);
        org.joda.time.LocalTime.Property property29 = localTime28.millisOfSecond();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property39 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = property39.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfYear(8);
        org.joda.time.DateTime dateTime44 = dateTime42.withMillis((long) 10);
        long long45 = property29.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime42.plus(readableDuration46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime50 = localTime15.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        boolean boolean54 = dateTimeZone52.equals((java.lang.Object) (-3600000));
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeZone52.getShortName(10L, locale56);
        boolean boolean58 = localTime15.equals((java.lang.Object) locale56);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime66 = dateTime64.minusDays(7);
        org.joda.time.DateTime dateTime68 = dateTime64.withYear(1);
        org.joda.time.Chronology chronology69 = dateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.minuteOfDay();
        boolean boolean72 = durationFieldType60.isSupported(chronology69);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) 3, chronology69);
        org.joda.time.LocalTime.Property property74 = localTime73.secondOfMinute();
        int int75 = localTime15.compareTo((org.joda.time.ReadablePartial) localTime73);
        int int76 = localTime15.getMillisOfDay();
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime81 = dateTime79.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay82 = dateTime79.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property83 = timeOfDay82.millisOfSecond();
        int int84 = property83.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay86 = property83.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay88 = timeOfDay86.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property89 = timeOfDay86.hourOfDay();
        int int90 = timeOfDay86.size();
        int[] intArray91 = timeOfDay86.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray93 = dateTimeField9.addWrapPartial((org.joda.time.ReadablePartial) localTime15, 18, intArray91, 1428);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3600000L + "'", long11 == 3600000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 62134912800000L + "'", long45 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-01:00" + "'", str57, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 11 + "'", int76 == 11);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(timeOfDay82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(timeOfDay86);
        org.junit.Assert.assertNotNull(timeOfDay88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[23, 0, 0, 200]");
    }

    @Test
    public void test03441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03441");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.plus(readableDuration30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withDurationAdded(readableDuration34, 23);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromCalendarFields(calendar38);
        org.joda.time.DateTime dateTime40 = localTime39.toDateTimeToday();
        org.joda.time.DateTime dateTime41 = dateTime40.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime45.minusDays(7);
        org.joda.time.DateTime dateTime49 = dateTime45.withYear(1);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        java.lang.String str51 = property50.getName();
        boolean boolean52 = property50.isLeap();
        long long53 = property50.remainder();
        org.joda.time.DateTime dateTime54 = property50.roundCeilingCopy();
        org.joda.time.DurationField durationField55 = property50.getDurationField();
        org.joda.time.DateTime dateTime56 = property50.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime58 = dateTime56.withCenturyOfEra(2922789);
        org.joda.time.DateTime dateTime61 = dateTime56.withDurationAdded((long) 70, 14);
        boolean boolean62 = dateTime40.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int66 = dateTimeZone64.getStandardOffset((long) (short) 0);
        long long69 = dateTimeZone64.convertLocalToUTC(480100L, false);
        java.lang.String str71 = dateTimeZone64.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone64);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime76 = dateTime74.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime78 = dateTime76.minusDays(7);
        org.joda.time.DateTime dateTime80 = dateTime76.withYear(1);
        org.joda.time.DateTime dateTime81 = dateTime80.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property82 = dateTime80.hourOfDay();
        org.joda.time.DateTime dateTime83 = property82.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str87 = dateTimeZone85.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime88 = dateTime83.toMutableDateTime(dateTimeZone85);
        long long90 = dateTimeZone64.getMillisKeepLocal(dateTimeZone85, 0L);
        boolean boolean92 = dateTimeZone85.isStandardOffset(300063L);
        org.joda.time.DateTime dateTime93 = dateTime40.withZone(dateTimeZone85);
        long long96 = dateTimeZone85.adjustOffset((long) ' ', false);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-62134909199000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "yearOfEra" + "'", str51, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 31529280100L + "'", long53 == 31529280100L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3600000) + "'", int66 == (-3600000));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 4080100L + "'", long69 == 4080100L);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-01:00" + "'", str71, "-01:00");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "-01:00" + "'", str87, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 32L + "'", long96 == 32L);
    }

    @Test
    public void test03442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03442");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime4 = localTime2.plusMinutes(4);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test03443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03443");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(7);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(1);
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.weeks();
        org.joda.time.DurationField durationField15 = chronology12.centuries();
        org.joda.time.DurationField durationField16 = chronology12.seconds();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology12.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(2022, 61200002, 992, 31077130, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test03444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03444");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar calendar3 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setInstant((-3599999L));
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay10 = dateTime7.toTimeOfDay();
        java.util.Date date11 = dateTime7.toDate();
        java.time.Instant instant12 = date11.toInstant();
        int int13 = date11.getMinutes();
        long long14 = date11.getTime();
        java.lang.String str15 = date11.toGMTString();
        int int16 = date11.getSeconds();
        int int17 = date11.getMonth();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        java.util.Date date23 = dateTime19.toDate();
        long long24 = date23.getTime();
        java.time.Instant instant25 = date23.toInstant();
        boolean boolean26 = date11.after(date23);
        java.util.Calendar.Builder builder27 = builder0.setInstant(date11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder29 = builder27.setCalendarType("Jan 1, 1970 3:00:00 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: Jan 1, 1970 3:00:00 AM");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str15, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test03445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03445");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int5 = dateTimeZone3.getStandardOffset((long) (short) 0);
        long long8 = dateTimeZone3.convertLocalToUTC(480100L, false);
        java.lang.String str10 = dateTimeZone3.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime22 = property21.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str26 = dateTimeZone24.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime22.toMutableDateTime(dateTimeZone24);
        long long29 = dateTimeZone3.getMillisKeepLocal(dateTimeZone24, 0L);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(25L, dateTimeZone24);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = dateTime34.toCalendar(locale37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = dateTime34.withChronology(chronology39);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime44.minusDays(7);
        org.joda.time.DateTime dateTime48 = dateTime44.withYear(1);
        org.joda.time.DateTime dateTime49 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime50 = dateTime49.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.plusMinutes((int) (short) 100);
        java.lang.String str53 = dateTime52.toString();
        int int54 = dateTime52.getSecondOfMinute();
        org.joda.time.DateTime dateTime56 = dateTime52.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime57 = dateTime52.withLaterOffsetAtOverlap();
        int int58 = dateTime40.compareTo((org.joda.time.ReadableInstant) dateTime57);
        int int59 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) -1, dateTimeZone24);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime65.minusDays(7);
        org.joda.time.DateTime dateTime69 = dateTime65.withYear(1);
        org.joda.time.Chronology chronology70 = dateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.minuteOfDay();
        org.joda.time.DurationField durationField73 = chronology70.months();
        boolean boolean74 = dateTimeFieldType61.isSupported(chronology70);
        org.joda.time.DateTimeField dateTimeField75 = chronology70.secondOfDay();
        boolean boolean76 = dateTimeZone24.equals((java.lang.Object) dateTimeField75);
        int int77 = dateTimeField75.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3600000) + "'", int5 == (-3600000));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4080100L + "'", long8 == 4080100L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:00" + "'", str10, "-01:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-01:00" + "'", str26, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str53, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3600000) + "'", int59 == (-3600000));
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test03446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03446");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTime dateTime43 = dateTime38.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime28.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime28.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime28.minus(readableDuration47);
        int int49 = property18.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DurationField durationField50 = property18.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay51 = property18.getTimeOfDay();
        java.lang.String str52 = property18.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Property[hourOfDay]" + "'", str52, "Property[hourOfDay]");
    }

    @Test
    public void test03447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03447");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.Chronology chronology13 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str20 = dateTimeZone18.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone18.getName((-1L), locale23);
        org.joda.time.Chronology chronology25 = chronology13.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:00" + "'", str20, "-01:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:00" + "'", str24, "-01:00");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test03448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03448");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        int int6 = localTime5.getMillisOfSecond();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay11 = dateTime8.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay11.withPeriodAdded(readablePeriod13, (int) '4');
        boolean boolean16 = localTime5.equals((java.lang.Object) timeOfDay15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = chronology25.add(readablePeriod27, 9L, 5);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay15.withChronologyRetainFields(chronology25);
        org.joda.time.DurationField durationField32 = chronology25.seconds();
        org.joda.time.DateTimeField dateTimeField33 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology25.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone36.getShortName(103117371305000L, locale38);
        org.joda.time.Chronology chronology40 = chronology25.withZone(dateTimeZone36);
        // The following exception was thrown during execution in test generation
        try {
            long long46 = chronology40.getDateTimeMillis(3287772380159000L, 26, 1968, 9511, 31114187);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.032" + "'", str39, "+00:00:00.032");
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test03449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03449");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeField8.getAsShortText((-607919900L), locale10);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100" + "'", str11, "100");
    }

    @Test
    public void test03450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03450");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        java.util.Locale locale7 = null;
        java.util.Calendar calendar8 = dateTime4.toCalendar(locale7);
        calendar8.clear();
        boolean boolean11 = calendar8.after((java.lang.Object) (short) 0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        java.lang.String str21 = property20.getName();
        boolean boolean22 = property20.isLeap();
        org.joda.time.DateTime dateTime23 = property20.roundHalfFloorCopy();
        int int24 = dateTime23.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        boolean boolean26 = calendar8.before((java.lang.Object) dateTime25);
        org.joda.time.Chronology chronology27 = dateTime25.getChronology();
        boolean boolean28 = durationFieldType0.isSupported(chronology27);
        long long32 = chronology27.add(0L, 9L, 999);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.minuteOfDay();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "yearOfEra" + "'", str21, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 8991L + "'", long32 == 8991L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test03451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03451");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology10.withZone(dateTimeZone16);
        boolean boolean18 = durationFieldType0.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField20 = chronology17.weeks();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "seconds" + "'", str1, "seconds");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test03452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03452");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.set((int) (short) 1, (int) 'a', (int) (short) 1);
        gregorianCalendar13.add((int) (byte) 0, (-3600000));
        java.lang.String str21 = gregorianCalendar13.getCalendarType();
        gregorianCalendar13.clear();
        int int23 = gregorianCalendar13.getWeekYear();
        java.time.Instant instant24 = gregorianCalendar13.toInstant();
        java.util.Date date25 = java.util.Date.from(instant24);
        date25.setYear(712);
        date25.setHours((int) (byte) 0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gregory" + "'", str21, "gregory");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 UTC 2612");
    }

    @Test
    public void test03453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03453");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalTime localTime18 = localTime14.withFieldAdded(durationFieldType16, 9);
        java.lang.String str19 = durationFieldType16.toString();
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "minutes" + "'", str19, "minutes");
    }

    @Test
    public void test03454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03454");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        java.lang.String str21 = timeOfDay20.toString();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plus(readablePeriod22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = timeOfDay20.getFieldTypes();
        org.joda.time.TimeOfDay.Property property25 = timeOfDay20.minuteOfHour();
        int int26 = property25.getMaximumValueOverall();
        org.joda.time.DurationField durationField27 = property25.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "T01:00:00.100" + "'", str21, "T01:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test03455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03455");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfDay();
        long long40 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime38);
        java.lang.String str42 = dateTime17.toString();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        boolean boolean47 = dateTimeZone45.equals((java.lang.Object) (-3600000));
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeZone45.getShortName(10L, locale49);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((-62104064400000L), dateTimeZone45);
        org.joda.time.DateTime dateTime52 = dateTime17.withZoneRetainFields(dateTimeZone45);
        int int53 = dateTime52.getYearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime52.toMutableDateTimeISO();
        java.lang.String str55 = mutableDateTime54.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str42, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-01:00" + "'", str50, "-01:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str55, "0001-12-31T23:48:00.100-01:00");
    }

    @Test
    public void test03456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03456");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = dateTimeFormatter2.parseMillis("-3600000");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test03457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03457");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime10.toLocalTime();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        long long20 = chronology15.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter7.withChronology(chronology15);
        java.lang.StringBuffer stringBuffer22 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.Chronology chronology32 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.minuteOfDay();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology32);
        org.joda.time.LocalTime.Property property36 = localTime35.millisOfSecond();
        org.joda.time.LocalTime localTime37 = property36.roundCeilingCopy();
        org.joda.time.LocalTime localTime38 = property36.getLocalTime();
        org.joda.time.LocalTime localTime39 = property36.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime40 = localTime39.toDateTimeToday();
        org.joda.time.DateTime dateTime41 = dateTime40.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(stringBuffer22, (org.joda.time.ReadableInstant) dateTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test03458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03458");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        java.lang.String str7 = property5.getAsShortText(locale6);
        org.joda.time.TimeOfDay timeOfDay9 = property5.addNoWrapToCopy(7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField11 = timeOfDay9.getField(31077130);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 31077130");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test03459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03459");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        long long11 = property9.remainder();
        java.lang.String str12 = property9.getAsShortText();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 480100L + "'", long11 == 480100L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "22" + "'", str12, "22");
    }

    @Test
    public void test03460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03460");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology9.months();
        boolean boolean13 = dateTimeFieldType0.isSupported(chronology9);
        java.lang.String str14 = chronology9.toString();
        org.joda.time.DurationField durationField15 = chronology9.centuries();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.millisOfSecond();
        java.util.Locale locale22 = null;
        int int23 = property21.getMaximumShortTextLength(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean25 = property21.equals((java.lang.Object) dateTimeFieldType24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property21.getFieldType();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.Chronology chronology35 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.hourOfHalfday();
        org.joda.time.Chronology chronology39 = chronology35.withUTC();
        boolean boolean40 = dateTimeFieldType26.isSupported(chronology39);
        org.joda.time.DurationField durationField41 = chronology39.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay((java.lang.Object) chronology9, chronology39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[-01:00]" + "'", str14, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test03461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03461");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone4.getName(0L, locale6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZone(dateTimeZone4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withOffsetParsed();
        java.lang.Appendable appendable11 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay16.withPeriodAdded(readablePeriod18, (int) '4');
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime23 = localTime21.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime25 = localTime23.withMillisOfDay(2);
        boolean boolean26 = timeOfDay16.isAfter((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.LocalTime.Property property27 = localTime23.secondOfMinute();
        org.joda.time.LocalTime localTime28 = property27.withMaximumValue();
        org.joda.time.DateTimeField[] dateTimeFieldArray29 = localTime28.getFields();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter10.printTo(appendable11, (org.joda.time.ReadablePartial) localTime28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray29);
    }

    @Test
    public void test03462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03462");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.add(11, 11);
        gregorianCalendar13.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar13.set(949, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 949");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
    }

    @Test
    public void test03463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03463");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.getLocalTime();
        org.joda.time.LocalTime localTime18 = property13.addCopy((int) (byte) 100);
        java.util.Locale locale19 = null;
        int int20 = property13.getMaximumTextLength(locale19);
        org.joda.time.LocalTime localTime21 = property13.roundFloorCopy();
        org.joda.time.LocalTime localTime23 = property13.setCopy((int) '4');
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test03464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03464");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setLenient(true);
        int int13 = calendar7.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            calendar7.add(34620000, 2022);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test03465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03465");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime14 = dateTime11.withField(dateTimeFieldType12, 17);
        int int15 = dateTime11.getYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int19 = dateTimeZone17.getStandardOffset((long) (short) 0);
        int int21 = dateTimeZone17.getOffsetFromLocal((long) 4);
        int int23 = dateTimeZone17.getStandardOffset((-62073219600000L));
        long long25 = dateTimeZone17.convertUTCToLocal((long) 1200000);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes((int) (short) 100);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DateTime dateTime40 = dateTime37.plusMinutes(54060000);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths(999);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTime();
        int int44 = dateTime43.getYearOfEra();
        int int45 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime43);
        long long47 = dateTimeZone17.nextTransition(25L);
        org.joda.time.DateTime dateTime48 = dateTime11.toDateTime(dateTimeZone17);
        boolean boolean49 = dateTimeZone17.isFixed();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3600000) + "'", int19 == (-3600000));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3600000) + "'", int21 == (-3600000));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3600000) + "'", int23 == (-3600000));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-2400000L) + "'", long25 == (-2400000L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str38, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 188 + "'", int44 == 188);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3600000) + "'", int45 == (-3600000));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 25L + "'", long47 == 25L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test03466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03466");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.withPeriodAdded(readablePeriod6, (int) '4');
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime11 = localTime9.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime13 = localTime11.withMillisOfDay(2);
        boolean boolean14 = timeOfDay4.isAfter((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.LocalTime.Property property15 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime16 = property15.withMinimumValue();
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfSecond();
        java.util.Locale locale18 = null;
        int int19 = property17.getMaximumShortTextLength(locale18);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
    }

    @Test
    public void test03467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03467");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        java.time.Instant instant6 = date5.toInstant();
        int int7 = date5.getMinutes();
        java.lang.Object obj8 = date5.clone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test03468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03468");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.DateTime.Property property21 = dateTime17.millisOfDay();
        org.joda.time.DateTime dateTime23 = property21.addToCopy((long) 2000);
        int int24 = property21.getLeapAmount();
        org.joda.time.Interval interval25 = property21.toInterval();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(interval25);
    }

    @Test
    public void test03469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03469");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("0");
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.DateTime dateTime4 = dateTime1.plusMillis(1439);
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes(122);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths(0);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test03470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03470");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(15, (int) (short) 1);
        int int4 = dateTimeZone2.getOffset(0L);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.Chronology chronology17 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.hourOfHalfday();
        org.joda.time.Chronology chronology21 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.clockhourOfHalfday();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(3, 0, 20, chronology17);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology26);
        org.joda.time.LocalTime localTime29 = localTime27.plusHours((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay34 = dateTime31.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property35 = timeOfDay34.millisOfSecond();
        int int36 = property35.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay38 = property35.addToCopy(100);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay43 = dateTime40.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property44 = timeOfDay43.millisOfSecond();
        boolean boolean45 = timeOfDay38.isEqual((org.joda.time.ReadablePartial) timeOfDay43);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay38.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay47.minusMillis(100);
        int int50 = localTime27.compareTo((org.joda.time.ReadablePartial) timeOfDay47);
        org.joda.time.LocalTime localTime52 = localTime27.plusMinutes(3);
        int int53 = timeOfDay24.compareTo((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay24.minusSeconds(69);
        org.joda.time.DateTime dateTime56 = dateTime5.withFields((org.joda.time.ReadablePartial) timeOfDay24);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay61 = dateTime58.toTimeOfDay();
        java.util.Date date62 = dateTime58.toDate();
        long long63 = date62.getTime();
        org.joda.time.TimeOfDay timeOfDay64 = org.joda.time.TimeOfDay.fromDateFields(date62);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime68 = dateTime66.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime70 = dateTime68.minusDays(7);
        org.joda.time.DateTime dateTime72 = dateTime68.withYear(1);
        org.joda.time.DateTime dateTime73 = dateTime72.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str77 = dateTimeZone75.getShortName((long) 0);
        org.joda.time.DateTime dateTime78 = dateTime73.withZone(dateTimeZone75);
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime(dateTimeZone75);
        java.util.Locale locale81 = null;
        java.lang.String str82 = dateTimeZone75.getName((long) 712, locale81);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(dateTimeZone75);
        org.joda.time.DateTime dateTime84 = timeOfDay64.toDateTimeToday(dateTimeZone75);
        org.joda.time.TimeOfDay timeOfDay86 = timeOfDay64.withHourOfDay(0);
        org.joda.time.Chronology chronology87 = timeOfDay64.getChronology();
        org.joda.time.TimeOfDay timeOfDay88 = timeOfDay24.withChronologyRetainFields(chronology87);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 54060000 + "'", int4 == 54060000);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-01:00" + "'", str77, "-01:00");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "-01:00" + "'", str82, "-01:00");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(timeOfDay86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(timeOfDay88);
    }

    @Test
    public void test03471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03471");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property13.withMinimumValue();
        org.joda.time.LocalTime localTime17 = localTime15.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime19 = localTime15.plusMillis(30961509);
        org.joda.time.DateTime dateTime20 = localTime15.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test03472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03472");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime13.getEra();
        org.joda.time.LocalTime localTime24 = dateTime13.toLocalTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime27 = localTime24.withPeriodAdded(readablePeriod25, 9);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.Chronology chronology39 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.minuteOfDay();
        org.joda.time.DurationField durationField42 = chronology39.months();
        boolean boolean43 = dateTimeFieldType30.isSupported(chronology39);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (byte) 100, chronology39);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        long long48 = chronology39.add(readablePeriod45, (long) 100, 17);
        org.joda.time.DurationField durationField49 = chronology39.months();
        org.joda.time.DurationField durationField50 = chronology39.years();
        org.joda.time.DateTimeField dateTimeField51 = chronology39.weekyear();
        org.joda.time.DurationField durationField52 = chronology39.weeks();
        org.joda.time.DateTimeField dateTimeField53 = chronology39.halfdayOfDay();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(0L, chronology39);
        int int55 = localTime24.compareTo((org.joda.time.ReadablePartial) localTime54);
        org.joda.time.LocalTime localTime57 = localTime24.minusSeconds(17661728);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime(300063L);
        org.joda.time.DateTime dateTime60 = localTime59.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalTime localTime62 = localTime59.plus(readablePeriod61);
        org.joda.time.LocalTime localTime64 = localTime62.plusMillis(365);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalTime localTime67 = localTime64.withPeriodAdded(readablePeriod65, 31);
        boolean boolean68 = localTime57.equals((java.lang.Object) localTime64);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L + "'", long48 == 100L);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test03473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03473");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        boolean boolean13 = dateTimeZone11.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime14 = dateTime7.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int18 = dateTimeZone16.getStandardOffset((long) (short) 0);
        long long20 = dateTimeZone11.getMillisKeepLocal(dateTimeZone16, (long) 0);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone16);
        int int22 = dateTime21.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.Chronology chronology32 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.minuteOfDay();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology32);
        org.joda.time.LocalTime.Property property36 = localTime35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        org.joda.time.DateTimeField dateTimeField38 = property36.getField();
        org.joda.time.LocalTime localTime39 = property36.getLocalTime();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalTime localTime41 = localTime39.minus(readablePeriod40);
        org.joda.time.LocalTime localTime43 = localTime41.minusMillis(2000);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays(7);
        org.joda.time.DateTime dateTime53 = dateTime49.withYear(1);
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(chronology54);
        org.joda.time.DurationField durationField56 = chronology54.weeks();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        long long60 = chronology54.add(readablePeriod57, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay61 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology54);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((-82799998L), chronology54);
        org.joda.time.LocalTime.Property property63 = localTime62.hourOfDay();
        org.joda.time.LocalTime localTime65 = property63.addCopy(0L);
        org.joda.time.LocalTime localTime67 = property63.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property63.getFieldType();
        int int69 = localTime41.get(dateTimeFieldType68);
        org.joda.time.DateTime dateTime71 = dateTime21.withField(dateTimeFieldType68, 2);
        org.joda.time.DateTime dateTime73 = dateTime21.withMillis((-1L));
        org.joda.time.DateTime dateTime75 = dateTime73.minusMillis(470);
        boolean boolean77 = dateTime75.isBefore((long) (-738188));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3600000) + "'", int18 == (-3600000));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test03474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03474");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        boolean boolean12 = durationFieldType0.isSupported(chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.halfdayOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str27 = dateTimeZone25.getShortName((long) 0);
        org.joda.time.DateTime dateTime28 = dateTime23.withZone(dateTimeZone25);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(dateTimeZone25);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone25.getName((long) 712, locale31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.Chronology chronology34 = chronology9.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay40 = dateTime37.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property41 = timeOfDay40.millisOfSecond();
        int int42 = property41.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay44 = property41.addToCopy(100);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay49 = dateTime46.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property50 = timeOfDay49.millisOfSecond();
        boolean boolean51 = timeOfDay44.isEqual((org.joda.time.ReadablePartial) timeOfDay49);
        int int52 = timeOfDay49.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = timeOfDay49.getFieldTypes();
        org.joda.time.TimeOfDay.Property property54 = timeOfDay49.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay56 = property54.setCopy(1);
        java.lang.String str57 = timeOfDay56.toString();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay56.plus(readablePeriod58);
        int[] intArray61 = chronology34.get((org.joda.time.ReadablePartial) timeOfDay59, (long) (byte) 10);
        org.joda.time.DateTimeField dateTimeField62 = chronology34.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long66 = chronology34.add(1644572273520L, 328458178800816L, 2322845);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 328458178800816 * 2322845");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-01:00" + "'", str32, "-01:00");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "T01:00:00.100" + "'", str57, "T01:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[23, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test03475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03475");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology10.add(readablePeriod16, (long) 100, 17);
        org.joda.time.DurationField durationField20 = chronology10.months();
        org.joda.time.DurationField durationField21 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology10.centuryOfEra();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay28 = dateTime25.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property29 = timeOfDay28.millisOfSecond();
        int int30 = property29.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay32 = property29.addToCopy(100);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay37 = dateTime34.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property38 = timeOfDay37.millisOfSecond();
        boolean boolean39 = timeOfDay32.isEqual((org.joda.time.ReadablePartial) timeOfDay37);
        int int40 = timeOfDay37.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = timeOfDay37.getFieldTypes();
        org.joda.time.TimeOfDay.Property property42 = timeOfDay37.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay44 = property42.setCopy(1);
        java.lang.String str45 = timeOfDay44.toString();
        java.lang.String str46 = timeOfDay44.toString();
        java.util.Locale locale48 = null;
        java.lang.String str49 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) timeOfDay44, (int) (short) 1, locale48);
        java.util.Locale locale51 = null;
        java.lang.String str52 = dateTimeField23.getAsText(31021460, locale51);
        java.lang.String str54 = dateTimeField23.getAsText(0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "T01:00:00.100" + "'", str45, "T01:00:00.100");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "T01:00:00.100" + "'", str46, "T01:00:00.100");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "31021460" + "'", str52, "31021460");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "19" + "'", str54, "19");
    }

    @Test
    public void test03476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03476");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setDate((int) (short) 100, (int) (byte) 100, 13);
        java.util.Calendar.Builder builder8 = builder6.setLenient(true);
        java.util.Calendar.Builder builder12 = builder6.setWeekDate(5, 1200000, 7);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay17 = dateTime14.toTimeOfDay();
        org.joda.time.LocalTime localTime18 = dateTime14.toLocalTime();
        java.util.Locale locale19 = null;
        java.util.Calendar calendar20 = dateTime14.toCalendar(locale19);
        calendar20.setLenient(false);
        java.util.TimeZone timeZone23 = calendar20.getTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        java.util.Calendar.Builder builder25 = builder6.setTimeZone(timeZone23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder27 = builder6.setInstant((-82798570L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572359757,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=39,SECOND=19,MILLISECOND=757,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test03477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03477");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology8.add(readablePeriod11, 1L, 8);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        boolean boolean28 = dateTimeZone26.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime29 = dateTime22.withZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int33 = dateTimeZone31.getStandardOffset((long) (short) 0);
        long long35 = dateTimeZone26.getMillisKeepLocal(dateTimeZone31, (long) 0);
        org.joda.time.Chronology chronology36 = chronology8.withZone(dateTimeZone31);
        int int38 = dateTimeZone31.getOffsetFromLocal(32770L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3600000) + "'", int33 == (-3600000));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3600000) + "'", int38 == (-3600000));
    }

    @Test
    public void test03478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03478");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) 1);
        org.joda.time.DateTime.Property property15 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime17 = property15.addToCopy((-3599999L));
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(10);
        long long20 = dateTime17.getMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62320057859900L) + "'", long20 == (-62320057859900L));
    }

    @Test
    public void test03479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03479");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(7);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test03480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03480");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime8.plusHours(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.weeks();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology20.add(readablePeriod23, 1L, 8);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property36 = dateTime34.hourOfDay();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        boolean boolean40 = dateTimeZone38.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime41 = dateTime34.withZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int45 = dateTimeZone43.getStandardOffset((long) (short) 0);
        long long47 = dateTimeZone38.getMillisKeepLocal(dateTimeZone43, (long) 0);
        org.joda.time.Chronology chronology48 = chronology20.withZone(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime8.toMutableDateTime(chronology20);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay54 = dateTime51.toTimeOfDay();
        java.util.Date date55 = dateTime51.toDate();
        java.time.Instant instant56 = date55.toInstant();
        int int57 = date55.getHours();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay62 = dateTime59.toTimeOfDay();
        java.util.Date date63 = dateTime59.toDate();
        long long64 = date63.getTime();
        int int65 = date63.getHours();
        date63.setSeconds((int) (short) 0);
        boolean boolean68 = date55.before(date63);
        java.lang.String str69 = date55.toLocaleString();
        int int70 = date55.getMinutes();
        boolean boolean71 = dateTime8.equals((java.lang.Object) int70);
        org.joda.time.DateTime.Property property72 = dateTime8.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3600000) + "'", int45 == (-3600000));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str69, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(property72);
    }

    @Test
    public void test03481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03481");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology9);
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.secondOfDay();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(3600035L, chronology9);
        org.joda.time.DurationField durationField16 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.halfdayOfDay();
        org.joda.time.DurationField durationField18 = dateTimeField17.getLeapDurationField();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int21 = localTime20.getSecondOfMinute();
        int int22 = localTime20.getMinuteOfHour();
        org.joda.time.DateTime dateTime23 = localTime20.toDateTimeToday();
        org.joda.time.LocalTime.Property property24 = localTime20.millisOfSecond();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.millisOfSecond();
        java.util.Locale locale31 = null;
        int int32 = property30.getMaximumShortTextLength(locale31);
        int int33 = property30.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField34 = property30.getField();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay39 = dateTime36.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property40 = timeOfDay39.millisOfSecond();
        int int41 = property40.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay43 = property40.addToCopy(100);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay48 = dateTime45.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property49 = timeOfDay48.millisOfSecond();
        boolean boolean50 = timeOfDay43.isEqual((org.joda.time.ReadablePartial) timeOfDay48);
        int int51 = timeOfDay48.size();
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) timeOfDay48, 14, locale53);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay59 = dateTime56.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property60 = timeOfDay59.millisOfSecond();
        int int61 = property60.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay63 = property60.addToCopy(100);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay68 = dateTime65.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property69 = timeOfDay68.millisOfSecond();
        boolean boolean70 = timeOfDay63.isEqual((org.joda.time.ReadablePartial) timeOfDay68);
        int[] intArray71 = timeOfDay63.getValues();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime76 = dateTime74.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay77 = dateTime74.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property78 = timeOfDay77.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.TimeOfDay timeOfDay81 = timeOfDay77.withPeriodAdded(readablePeriod79, (int) '4');
        int[] intArray82 = timeOfDay81.getValues();
        int[] intArray84 = dateTimeField34.addWrapPartial((org.joda.time.ReadablePartial) timeOfDay63, (int) (short) 0, intArray82, 712);
        int int85 = dateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) localTime20, intArray82);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNull(durationField18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "14" + "'", str54, "14");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(timeOfDay81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[735, 0, 0, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[735, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test03482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03482");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property13.getLocalTime();
        org.joda.time.LocalTime localTime16 = property13.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime18 = property13.addCopy(79680);
        org.joda.time.LocalTime localTime19 = property13.roundHalfEvenCopy();
        org.joda.time.DurationField durationField20 = property13.getRangeDurationField();
        org.joda.time.LocalTime localTime21 = property13.roundCeilingCopy();
        java.lang.String str22 = property13.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = property13.setCopy((-2337983));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2337983 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
    }

    @Test
    public void test03483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03483");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime8.plusHours(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.weeks();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology20.add(readablePeriod23, 1L, 8);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property36 = dateTime34.hourOfDay();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        boolean boolean40 = dateTimeZone38.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime41 = dateTime34.withZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int45 = dateTimeZone43.getStandardOffset((long) (short) 0);
        long long47 = dateTimeZone38.getMillisKeepLocal(dateTimeZone43, (long) 0);
        org.joda.time.Chronology chronology48 = chronology20.withZone(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime8.toMutableDateTime(chronology20);
        org.joda.time.DateTime.Property property50 = dateTime8.secondOfDay();
        java.lang.String str51 = property50.getName();
        int int52 = property50.get();
        org.joda.time.DurationField durationField53 = property50.getLeapDurationField();
        int int54 = property50.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3600000) + "'", int45 == (-3600000));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "secondOfDay" + "'", str51, "secondOfDay");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 79680 + "'", int52 == 79680);
        org.junit.Assert.assertNull(durationField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 86399 + "'", int54 == 86399);
    }

    @Test
    public void test03484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03484");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(1378);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03485");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int2 = localTime1.getSecondOfMinute();
        int int3 = localTime1.getMinuteOfHour();
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday();
        boolean boolean5 = dateTime4.isAfterNow();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay10 = dateTime7.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property11 = timeOfDay10.millisOfSecond();
        int int12 = property11.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay14 = property11.addToCopy(100);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay19 = dateTime16.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property20 = timeOfDay19.millisOfSecond();
        boolean boolean21 = timeOfDay14.isEqual((org.joda.time.ReadablePartial) timeOfDay19);
        int[] intArray22 = timeOfDay14.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = timeOfDay14.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getDurationType();
        int int26 = dateTime4.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        java.lang.String str36 = property35.getName();
        boolean boolean37 = property35.isLeap();
        org.joda.time.DateTime dateTime38 = property35.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime40 = dateTime38.minus((long) 12);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMillis(70);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        boolean boolean44 = dateTimeFieldType24.isSupported(chronology43);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.now(chronology43);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "yearOfEra" + "'", str36, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localTime45);
    }

    @Test
    public void test03486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03486");
        java.util.Date date1 = new java.util.Date(946688400000L);
        java.util.Date date7 = new java.util.Date(69, 32772, 0, 16, (-292275054));
        int int8 = date7.getDate();
        long long9 = date7.getTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        java.util.Date date15 = dateTime11.toDate();
        long long16 = date15.getTime();
        int int17 = date15.getHours();
        date15.setSeconds((int) (short) 0);
        int int20 = date15.getYear();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay25 = dateTime22.toTimeOfDay();
        java.util.Date date26 = dateTime22.toDate();
        boolean boolean27 = date15.before(date26);
        boolean boolean28 = date7.before(date15);
        boolean boolean29 = date1.after(date7);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime33 = localTime31.withSecondOfMinute(1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalTime localTime35 = localTime33.minus(readablePeriod34);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        org.joda.time.DateTime dateTime44 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime46 = dateTime44.plusYears((int) (short) 0);
        boolean boolean48 = dateTime44.isEqual((long) (byte) 0);
        int int49 = dateTime44.getYearOfCentury();
        org.joda.time.DateTime dateTime51 = dateTime44.withYearOfEra(1970);
        org.joda.time.DateTime dateTime52 = localTime35.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = localTime30.equals((java.lang.Object) dateTime51);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime55 = dateTime51.plus(readablePeriod54);
        java.util.GregorianCalendar gregorianCalendar56 = dateTime51.toGregorianCalendar();
        boolean boolean58 = gregorianCalendar56.isSet(15);
        org.junit.Assert.assertEquals(date1.toString(), "Sat Jan 01 01:00:00 UTC 2000");
        org.junit.Assert.assertEquals(date7.toString(), "Wed Apr 15 21:06:00 UTC 4144");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 68613944760000L + "'", long9 == 68613944760000L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 70 + "'", int20 == 70);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(gregorianCalendar56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test03487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03487");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        boolean boolean18 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withDefaultYear((-1));
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeFormatter23.getZone();
        boolean boolean25 = dateTimeFormatter23.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test03488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03488");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(247535040100L);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.DateTime dateTime10 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property11 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.weekOfWeekyear();
        java.util.Locale locale14 = null;
        int int15 = property13.getMaximumShortTextLength(locale14);
        org.joda.time.DateTime dateTime16 = property13.withMaximumValue();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfDay();
        java.lang.String str18 = property17.getAsString();
        org.joda.time.DateTime dateTime19 = property17.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay24 = dateTime21.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.millisOfSecond();
        org.joda.time.DurationField durationField26 = property25.getDurationField();
        java.lang.String str27 = property25.getAsShortText();
        java.util.Locale locale28 = null;
        int int29 = property25.getMaximumTextLength(locale28);
        java.util.Locale locale30 = null;
        java.lang.String str31 = property25.getAsShortText(locale30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property25.getFieldType();
        int int33 = dateTime19.get(dateTimeFieldType32);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay1.property(dateTimeFieldType32);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = timeOfDay1.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "79200000" + "'", str18, "79200000");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100" + "'", str31, "100");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test03489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03489");
        java.util.Date date3 = new java.util.Date(2022, (int) (byte) 100, 712);
        date3.setSeconds(30961509);
        date3.setYear(31);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Apr 03 08:25:09 UTC 1932");
    }

    @Test
    public void test03490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03490");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property11.getAsText(locale15);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
    }

    @Test
    public void test03491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03491");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.plus(readableDuration30);
        org.joda.time.DateTime.Property property32 = dateTime26.dayOfMonth();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.Chronology chronology41 = dateTime36.getChronology();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime43 = localTime42.toDateTimeToday();
        int int44 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime43);
        int int45 = property32.getDifference((org.joda.time.ReadableInstant) dateTime43);
        int int46 = property32.getMaximumValue();
        org.joda.time.DateTime dateTime47 = property32.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField48 = property32.getField();
        int int49 = property32.getMinimumValue();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay54 = dateTime51.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property55 = timeOfDay54.millisOfSecond();
        java.util.Locale locale56 = null;
        int int57 = property55.getMaximumShortTextLength(locale56);
        int int58 = property55.get();
        java.util.Locale locale59 = null;
        java.lang.String str60 = property55.getAsText(locale59);
        java.lang.String str61 = property55.getAsText();
        org.joda.time.TimeOfDay timeOfDay62 = property55.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay62.minusSeconds(22);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay62.minusHours(79200000);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = property32.compareTo((org.joda.time.ReadablePartial) timeOfDay62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-738188) + "'", int45 == (-738188));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 31 + "'", int46 == 31);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "100" + "'", str60, "100");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "100" + "'", str61, "100");
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(timeOfDay66);
    }

    @Test
    public void test03492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03492");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(75, (int) (byte) 0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test03493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03493");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        boolean boolean12 = durationFieldType0.isSupported(chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.monthOfYear();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(11, 1, 9, chronology25);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay34 = dateTime31.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property35 = timeOfDay34.millisOfSecond();
        int int36 = property35.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay38 = property35.addToCopy(100);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay43 = dateTime40.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property44 = timeOfDay43.millisOfSecond();
        boolean boolean45 = timeOfDay38.isEqual((org.joda.time.ReadablePartial) timeOfDay43);
        int[] intArray47 = chronology25.get((org.joda.time.ReadablePartial) timeOfDay43, (long) 6);
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay43.minusMinutes(82800000);
        int int50 = timeOfDay43.getMinuteOfHour();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime56.minusDays(7);
        org.joda.time.DateTime dateTime60 = dateTime56.withYear(1);
        org.joda.time.Chronology chronology61 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.minuteOfDay();
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology61);
        org.joda.time.LocalTime.Property property65 = localTime64.millisOfSecond();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime69 = dateTime67.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime69.minusDays(7);
        org.joda.time.DateTime dateTime73 = dateTime69.withYear(1);
        org.joda.time.DateTime dateTime74 = dateTime73.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property75 = dateTime73.hourOfDay();
        org.joda.time.DateTime dateTime76 = property75.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime78 = dateTime76.withDayOfYear(8);
        org.joda.time.DateTime dateTime80 = dateTime78.withMillis((long) 10);
        long long81 = property65.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime78);
        java.lang.String str82 = property65.getName();
        java.util.Locale locale83 = null;
        java.lang.String str84 = property65.getAsShortText(locale83);
        org.joda.time.LocalTime localTime85 = property65.roundFloorCopy();
        org.joda.time.Chronology chronology86 = localTime85.getChronology();
        org.joda.time.LocalTime localTime88 = localTime85.minusSeconds(1968);
        int[] intArray89 = localTime88.getValues();
        java.util.Locale locale91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray92 = dateTimeField13.set((org.joda.time.ReadablePartial) timeOfDay43, 34680000, intArray89, "08:37:03.619", locale91);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"08:37:03.619\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[23, 0, 0, 6]");
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 62134912800000L + "'", long81 == 62134912800000L);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "millisOfSecond" + "'", str82, "millisOfSecond");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0" + "'", str84, "0");
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 27, 12, 0]");
    }

    @Test
    public void test03494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03494");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.plus(readableDuration30);
        org.joda.time.DateTime.Property property32 = dateTime26.dayOfMonth();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.Chronology chronology41 = dateTime36.getChronology();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime43 = localTime42.toDateTimeToday();
        int int44 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime43);
        int int45 = property32.getDifference((org.joda.time.ReadableInstant) dateTime43);
        int int46 = property32.getMaximumValue();
        java.lang.Object obj47 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str51 = dateTimeZone49.getShortName((long) 0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(obj47, dateTimeZone49);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime56.minusDays(7);
        org.joda.time.DateTime dateTime60 = dateTime56.withYear(1);
        org.joda.time.Chronology chronology61 = dateTime56.getChronology();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime(chronology61);
        org.joda.time.DurationField durationField63 = chronology61.weeks();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        long long67 = chronology61.add(readablePeriod64, 1L, 8);
        org.joda.time.DateTime dateTime68 = dateTime52.toDateTime(chronology61);
        org.joda.time.DateTime dateTime70 = dateTime52.minusMinutes(712);
        org.joda.time.DateTime dateTime72 = dateTime70.withDayOfYear(52);
        long long73 = property32.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-738188) + "'", int45 == (-738188));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 31 + "'", int46 == 31);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-01:00" + "'", str51, "-01:00");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-738187L) + "'", long73 == (-738187L));
    }

    @Test
    public void test03495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03495");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean27 = dateTime25.isSupported(dateTimeFieldType26);
        org.joda.time.TimeOfDay.Property property28 = timeOfDay15.property(dateTimeFieldType26);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay15.minusMillis(70);
        org.joda.time.Chronology chronology31 = timeOfDay15.getChronology();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay36 = dateTime33.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.millisOfSecond();
        java.util.Locale locale38 = null;
        int int39 = property37.getMaximumShortTextLength(locale38);
        int int40 = property37.get();
        java.util.Locale locale41 = null;
        java.lang.String str42 = property37.getAsText(locale41);
        java.lang.String str43 = property37.getAsText();
        org.joda.time.TimeOfDay timeOfDay44 = property37.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.minusSeconds(22);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay46.minus(readablePeriod47);
        org.joda.time.TimeOfDay.Property property49 = timeOfDay48.millisOfSecond();
        boolean boolean50 = timeOfDay15.isBefore((org.joda.time.ReadablePartial) timeOfDay48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay52 = timeOfDay48.withMillisOfSecond(31115675);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31115675 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100" + "'", str42, "100");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100" + "'", str43, "100");
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test03496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03496");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(69, (int) (byte) 0, 952, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03497");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        long long11 = dateTimeField9.roundHalfEven(480100L);
        boolean boolean13 = dateTimeField9.isLeap((-82800000L));
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        int int20 = property19.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property19.addToCopy(100);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        boolean boolean29 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) timeOfDay27);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay27.withSecondOfMinute(12);
        int int32 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay31);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay31.withMinuteOfHour(15);
        org.joda.time.Chronology chronology35 = timeOfDay34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.weekyears();
        org.joda.time.DurationField durationField37 = chronology35.weeks();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3600000L + "'", long11 == 3600000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test03498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03498");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.year();
        java.lang.String str13 = dateTimeField11.getAsShortText((-61200000L));
        int int16 = dateTimeField11.getDifference((long) 0, (long) 658);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969" + "'", str13, "1969");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test03499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03499");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        java.lang.String str18 = timeOfDay17.toString();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours(2);
        int[] intArray21 = timeOfDay20.getValues();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plusSeconds(36);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.DateTime dateTime32 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property33 = dateTime31.hourOfDay();
        org.joda.time.DateTime dateTime34 = property33.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfYear(8);
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        long long38 = dateTime34.getMillis();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone40.getName((-1L), locale45);
        long long49 = dateTimeZone40.adjustOffset((long) (short) 10, true);
        org.joda.time.DateTime dateTime50 = dateTime34.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime51 = timeOfDay23.toDateTimeToday(dateTimeZone40);
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay23.plusSeconds(1378);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay23.minusHours(357);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "T23:35:00.200" + "'", str18, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 35, 0, 200]");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-62104064400000L) + "'", long38 == (-62104064400000L));
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-01:00" + "'", str46, "-01:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
    }

    @Test
    public void test03500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03500");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        java.lang.String str21 = timeOfDay20.toString();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plus(readablePeriod22);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay20.plusHours((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay30 = property28.addNoWrapToCopy((int) ' ');
        org.joda.time.Chronology chronology31 = timeOfDay30.getChronology();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay20.withChronologyRetainFields(chronology31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.DateTime dateTime41 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str45 = dateTimeZone43.getShortName((long) 0);
        org.joda.time.DateTime dateTime46 = dateTime41.withZone(dateTimeZone43);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime(dateTimeZone43);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str49 = dateTimeFieldType48.toString();
        boolean boolean50 = localTime47.isSupported(dateTimeFieldType48);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay55 = dateTime52.toTimeOfDay();
        org.joda.time.LocalTime localTime56 = dateTime52.toLocalTime();
        org.joda.time.Chronology chronology57 = localTime56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.years();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType48.getField(chronology57);
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.now(chronology57);
        org.joda.time.LocalTime.Property property61 = localTime60.minuteOfHour();
        org.joda.time.LocalTime localTime62 = property61.roundFloorCopy();
        int int63 = localTime62.getMillisOfDay();
        org.joda.time.LocalTime localTime65 = localTime62.withMinuteOfHour(12);
        boolean boolean66 = timeOfDay20.isEqual((org.joda.time.ReadablePartial) localTime62);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "T01:00:00.100" + "'", str21, "T01:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-01:00" + "'", str45, "-01:00");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "monthOfYear" + "'", str49, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 34740000 + "'", int63 == 34740000);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }
}

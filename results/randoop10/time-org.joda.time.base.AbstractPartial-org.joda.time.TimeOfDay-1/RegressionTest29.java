import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest29 {

    public static boolean debug = false;

    @Test
    public void test14501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14501");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(chronology10);
        org.joda.time.DurationField durationField12 = chronology10.weeks();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology10.add(readablePeriod13, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology10);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((-82799998L), chronology10);
        org.joda.time.LocalTime.Property property19 = localTime18.hourOfDay();
        org.joda.time.LocalTime localTime21 = property19.addCopy(0L);
        org.joda.time.LocalTime localTime23 = property19.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalTime localTime25 = property19.addCopy(348);
        java.util.Locale locale26 = null;
        int int27 = property19.getMaximumShortTextLength(locale26);
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime30 = property19.setCopy("2022-02-11T00:00:00.002-01:00", locale29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T00:00:00.002-01:00\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test14502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14502");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology13 = chronology8.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField15 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfDay();
        int int18 = dateTimeField16.getMaximumValue((long) 1970);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay23 = dateTime20.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.millisOfSecond();
        java.util.Locale locale25 = null;
        int int26 = property24.getMaximumShortTextLength(locale25);
        int int27 = property24.get();
        java.util.Locale locale28 = null;
        java.lang.String str29 = property24.getAsText(locale28);
        java.lang.String str30 = property24.getAsText();
        org.joda.time.TimeOfDay timeOfDay31 = property24.withMaximumValue();
        int int32 = timeOfDay31.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay31.minusMillis(4);
        int[] intArray35 = timeOfDay34.getValues();
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) timeOfDay34, 34680000, locale37);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 86399999 + "'", int18 == 86399999);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100" + "'", str29, "100");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 999 + "'", int32 == 999);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(intArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[23, 0, 0, 995]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "34680000" + "'", str38, "34680000");
    }

    @Test
    public void test14503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14503");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMinutes(54060000);
        int int15 = dateTime11.getEra();
        org.joda.time.DateTime dateTime16 = dateTime11.toDateTime();
        int int17 = dateTime16.getMillisOfDay();
        int int18 = dateTime16.getCenturyOfEra();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str40 = dateTimeZone38.getShortName((long) 0);
        org.joda.time.DateTime dateTime41 = dateTime36.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = dateTime26.withZone(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime16.toMutableDateTime(dateTimeZone38);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone38.getName(82080100L, locale45);
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay(dateTimeZone38);
        int[] intArray48 = timeOfDay47.getValues();
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay47.withMillisOfSecond(975);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 85680100 + "'", int17 == 85680100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-01:00" + "'", str40, "-01:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-01:00" + "'", str46, "-01:00");
        org.junit.Assert.assertNotNull(intArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[8, 45, 16, 716]");
        org.junit.Assert.assertNotNull(timeOfDay50);
    }

    @Test
    public void test14504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14504");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        long long11 = dateTimeField9.roundHalfEven(480100L);
        boolean boolean13 = dateTimeField9.isLeap((-82800000L));
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        int int20 = property19.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property19.addToCopy(100);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        boolean boolean29 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) timeOfDay27);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay27.withSecondOfMinute(12);
        int int32 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay31);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay31.withMinuteOfHour(15);
        org.joda.time.Chronology chronology35 = timeOfDay34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.millisOfSecond();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay41 = dateTime38.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property42 = timeOfDay41.millisOfSecond();
        int int43 = property42.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay45 = property42.addToCopy(100);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay50 = dateTime47.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property51 = timeOfDay50.millisOfSecond();
        boolean boolean52 = timeOfDay45.isEqual((org.joda.time.ReadablePartial) timeOfDay50);
        int int53 = timeOfDay50.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = timeOfDay50.getFieldTypes();
        org.joda.time.TimeOfDay.Property property55 = timeOfDay50.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay57 = property55.setCopy(1);
        java.lang.String str58 = timeOfDay57.toString();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay57.plus(readablePeriod59);
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay57.plusHours((int) '4');
        org.joda.time.LocalTime localTime63 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime65 = localTime63.withSecondOfMinute(1);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalTime localTime67 = localTime65.minus(readablePeriod66);
        org.joda.time.LocalTime.Property property68 = localTime65.millisOfDay();
        boolean boolean69 = timeOfDay62.isBefore((org.joda.time.ReadablePartial) localTime65);
        int int70 = dateTimeField36.getMinimumValue((org.joda.time.ReadablePartial) localTime65);
        long long72 = dateTimeField36.roundFloor(0L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3600000L + "'", long11 == 3600000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "T01:00:00.100" + "'", str58, "T01:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
    }

    @Test
    public void test14505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14505");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.plus(readableDuration30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withDurationAdded(readableDuration34, 23);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(7);
        org.joda.time.DateTime dateTime46 = dateTime42.withYear(1);
        org.joda.time.Chronology chronology47 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.secondOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology47.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime36.toMutableDateTime(chronology47);
        org.joda.time.DateTime dateTime56 = dateTime36.plusMonths(1380);
        org.joda.time.DateTime.Property property57 = dateTime36.secondOfDay();
        org.joda.time.DateTime.Property property58 = dateTime36.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-62134909199000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test14506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14506");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        long long16 = dateTimeZone10.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        boolean boolean20 = dateTimeZone18.equals((java.lang.Object) (-3600000));
        long long22 = dateTimeZone10.getMillisKeepLocal(dateTimeZone18, 100L);
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone10.getOffset(readableInstant23);
        long long28 = dateTimeZone10.convertLocalToUTC((long) (-292275054), false, (long) 100);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.LocalDateTime localDateTime35 = dateTime34.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = localDateTime35.getFieldType((int) (short) 1);
        boolean boolean38 = dateTimeZone10.isLocalDateTimeGap(localDateTime35);
        java.util.TimeZone timeZone39 = dateTimeZone10.toTimeZone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5L + "'", long16 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3600000) + "'", int24 == (-3600000));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-288675054L) + "'", long28 == (-288675054L));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT-01:00");
    }

    @Test
    public void test14507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14507");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        java.time.Instant instant11 = calendar7.toInstant();
        int int12 = calendar7.getMinimalDaysInFirstWeek();
        int int13 = calendar7.getWeeksInWeekYear();
        calendar7.add((int) (short) 0, 24);
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap20 = calendar7.getDisplayNames(31441349, 2086, locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test14508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14508");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        boolean boolean10 = property8.isLeap();
        org.joda.time.DateTime dateTime11 = property8.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.plusWeeks(0);
        java.lang.String str14 = dateTime11.toString();
        int int15 = dateTime11.getYearOfEra();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.Chronology chronology24 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology31 = chronology24.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = dateTime11.withChronology(chronology24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime11.withDurationAdded(6148302087005100L, 82800);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 6148302087005100 * 82800");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0002-01-01T00:00:00.000-01:00" + "'", str14, "0002-01-01T00:00:00.000-01:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test14509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14509");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DurationField durationField12 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.yearOfCentury();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str27 = dateTimeZone25.getShortName((long) 0);
        org.joda.time.DateTime dateTime28 = dateTime23.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        boolean boolean37 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime36);
        java.util.Locale locale38 = null;
        java.util.Calendar calendar39 = dateTime36.toCalendar(locale38);
        int int40 = dateTime36.getWeekyear();
        org.joda.time.DateTime dateTime42 = dateTime36.plusMillis(4);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(7);
        org.joda.time.DateTime dateTime50 = dateTime46.withYear(1);
        org.joda.time.DateTime dateTime51 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property52 = dateTime50.hourOfDay();
        int int53 = property52.get();
        org.joda.time.DateTime dateTime54 = property52.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime54.getZone();
        java.lang.String str57 = dateTimeZone55.getNameKey((-61200000L));
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime61.minusDays(7);
        org.joda.time.DateTime dateTime65 = dateTime61.withYear(1);
        org.joda.time.DateTime dateTime66 = dateTime65.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str70 = dateTimeZone68.getShortName((long) 0);
        org.joda.time.DateTime dateTime71 = dateTime66.withZone(dateTimeZone68);
        long long74 = dateTimeZone68.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        boolean boolean78 = dateTimeZone76.equals((java.lang.Object) (-3600000));
        long long80 = dateTimeZone68.getMillisKeepLocal(dateTimeZone76, 100L);
        org.joda.time.ReadableInstant readableInstant81 = null;
        int int82 = dateTimeZone68.getOffset(readableInstant81);
        boolean boolean83 = dateTimeZone68.isFixed();
        long long85 = dateTimeZone55.getMillisKeepLocal(dateTimeZone68, (long) 2000);
        org.joda.time.MutableDateTime mutableDateTime86 = dateTime36.toMutableDateTime(dateTimeZone55);
        org.joda.time.LocalTime localTime87 = org.joda.time.LocalTime.now(dateTimeZone55);
        org.joda.time.Chronology chronology88 = chronology8.withZone(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 22 + "'", int53 == 22);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-01:00" + "'", str70, "-01:00");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 5L + "'", long74 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long80 + "' != '" + 100L + "'", long80 == 100L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3600000) + "'", int82 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 2000L + "'", long85 == 2000L);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(chronology88);
    }

    @Test
    public void test14510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14510");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withYearOfCentury(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        org.joda.time.DurationField durationField19 = chronology16.months();
        boolean boolean20 = dateTimeFieldType7.isSupported(chronology16);
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType7.getDurationType();
        org.joda.time.DateTime dateTime23 = dateTime6.withFieldAdded(durationFieldType21, 2);
        org.joda.time.DateTime dateTime25 = dateTime6.withMillisOfDay(54060000);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        boolean boolean27 = dateTime26.isAfterNow();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test14511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14511");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int7 = dateTimeZone5.getStandardOffset((long) (short) 0);
        long long10 = dateTimeZone5.convertLocalToUTC(480100L, false);
        java.lang.String str12 = dateTimeZone5.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str28 = dateTimeZone26.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime24.toMutableDateTime(dateTimeZone26);
        long long31 = dateTimeZone5.getMillisKeepLocal(dateTimeZone26, 0L);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(25L, dateTimeZone26);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.Chronology chronology41 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekyearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.weeks();
        org.joda.time.DurationField durationField44 = chronology41.centuries();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.clockhourOfDay();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime50.minusDays(7);
        org.joda.time.DateTime dateTime54 = dateTime50.withYear(1);
        org.joda.time.DateTime dateTime55 = dateTime54.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property56 = dateTime54.hourOfDay();
        org.joda.time.DateTime dateTime57 = property56.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property58 = dateTime57.weekOfWeekyear();
        java.util.Locale locale59 = null;
        int int60 = property58.getMaximumShortTextLength(locale59);
        org.joda.time.DateTime dateTime61 = property58.withMaximumValue();
        org.joda.time.DateTime dateTime62 = dateTime61.withTimeAtStartOfDay();
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        boolean boolean66 = dateTimeZone64.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime67 = dateTime62.withZoneRetainFields(dateTimeZone64);
        org.joda.time.Chronology chronology68 = chronology41.withZone(dateTimeZone64);
        boolean boolean69 = dateTimeZone26.equals((java.lang.Object) chronology41);
        org.joda.time.TimeOfDay timeOfDay70 = new org.joda.time.TimeOfDay(chronology41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay(583, 228, 1408, chronology41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 583 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3600000) + "'", int7 == (-3600000));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4080100L + "'", long10 == 4080100L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:00" + "'", str28, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test14512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14512");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = property2.addNoWrapToCopy((int) ' ');
        org.joda.time.Chronology chronology5 = timeOfDay4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.era();
        java.util.Locale locale8 = null;
        int int9 = dateTimeField7.getMaximumShortTextLength(locale8);
        long long11 = dateTimeField7.roundCeiling(0L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 9223372036854775807L + "'", long11 == 9223372036854775807L);
    }

    @Test
    public void test14513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14513");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(719162L);
    }

    @Test
    public void test14514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14514");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str3 = dateTimeZone1.getShortName((long) 0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property5 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.plusMinutes(54060000);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths(999);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTime();
        int int24 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.TimeOfDay timeOfDay25 = dateTime22.toTimeOfDay();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        org.joda.time.DurationField durationField37 = chronology34.months();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology34.getZone();
        org.joda.time.DateTime dateTime39 = dateTime22.toDateTime(dateTimeZone38);
        java.lang.String str40 = dateTimeZone38.getID();
        java.util.TimeZone timeZone41 = dateTimeZone38.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-01:00" + "'", str40, "-01:00");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT-01:00");
    }

    @Test
    public void test14515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14515");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds(8);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(53);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear(4);
        org.joda.time.DateTime dateTime23 = dateTime19.minusMinutes(518);
        int int24 = dateTime23.getEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test14516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14516");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.millisOfSecond();
        int int16 = property15.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay18 = property15.addToCopy(100);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay23 = dateTime20.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.millisOfSecond();
        boolean boolean25 = timeOfDay18.isEqual((org.joda.time.ReadablePartial) timeOfDay23);
        int int26 = timeOfDay23.size();
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) timeOfDay23, 14, locale28);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay23.plusMillis(16);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay31);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.halfdays();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "14" + "'", str29, "14");
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test14517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14517");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        java.time.Instant instant6 = date5.toInstant();
        int int7 = date5.getMinutes();
        int int8 = date5.getDate();
        date5.setYear(1200000);
        date5.setSeconds(61200002);
        date5.setSeconds(525);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Jan 01 00:08:45 UTC 1201900");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test14518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14518");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        calendar0.setTimeInMillis((long) 56);
        java.lang.String str4 = calendar0.getCalendarType();
        calendar0.set(99, 1869, 427);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-54091324799944,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=255,MONTH=11,WEEK_OF_YEAR=48,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=56,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 53 + "'", int1 == 53);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test14519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14519");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property5.getAsShortText(locale8);
        org.joda.time.TimeOfDay timeOfDay11 = property5.addNoWrapToCopy((int) (byte) 1);
        java.lang.String str12 = property5.toString();
        org.joda.time.TimeOfDay timeOfDay14 = property5.setCopy(841);
        org.joda.time.TimeOfDay timeOfDay16 = property5.addWrapFieldToCopy(16);
        org.joda.time.TimeOfDay timeOfDay18 = property5.addToCopy(82800999);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100" + "'", str9, "100");
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[millisOfSecond]" + "'", str12, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test14520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14520");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfDay();
        long long40 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime38.plusWeeks(2022);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(7);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(1);
        org.joda.time.Chronology chronology52 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime38.toMutableDateTime(chronology52);
        org.joda.time.DateTimeField dateTimeField55 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTimeField dateTimeField57 = chronology52.dayOfWeek();
        org.joda.time.DurationField durationField58 = chronology52.eras();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
    }

    @Test
    public void test14521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14521");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withYearOfCentury(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        org.joda.time.DurationField durationField19 = chronology16.months();
        boolean boolean20 = dateTimeFieldType7.isSupported(chronology16);
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType7.getDurationType();
        org.joda.time.DateTime dateTime23 = dateTime6.withFieldAdded(durationFieldType21, 2);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(14);
        org.joda.time.DateTime dateTime26 = dateTime6.toDateTime(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.Chronology chronology37 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.minuteOfDay();
        org.joda.time.DurationField durationField40 = chronology37.months();
        boolean boolean41 = dateTimeFieldType28.isSupported(chronology37);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (byte) 100, chronology37);
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str47 = dateTimeZone45.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone45);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeZone45.getName((-1L), locale50);
        long long54 = dateTimeZone45.adjustOffset((long) (short) 10, true);
        org.joda.time.DateTime dateTime55 = dateTime42.withZone(dateTimeZone45);
        int int56 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime58 = dateTime26.withWeekOfWeekyear(597);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 597 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-01:00" + "'", str47, "-01:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-01:00" + "'", str51, "-01:00");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test14522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14522");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale5);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfDay();
        org.joda.time.DurationField durationField22 = chronology19.months();
        boolean boolean23 = dateTimeFieldType10.isSupported(chronology19);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 100, chronology19);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology19.add(readablePeriod25, (long) 100, 17);
        org.joda.time.DurationField durationField29 = chronology19.months();
        org.joda.time.DurationField durationField30 = chronology19.years();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter8.withChronology(chronology19);
        java.lang.Integer int33 = dateTimeFormatter32.getPivotYear();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(7);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(1);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfEra();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(7);
        org.joda.time.DateTime dateTime50 = dateTime46.withYear(1);
        org.joda.time.DateTime dateTime51 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str55 = dateTimeZone53.getShortName((long) 0);
        org.joda.time.DateTime dateTime56 = dateTime51.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime57 = dateTime41.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime59 = dateTime41.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime41.minus(readableDuration60);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime41.getZone();
        org.joda.time.DateTimeZone dateTimeZone63 = dateTime41.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter32.withZone(dateTimeZone63);
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter64.withLocale(locale65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = dateTimeFormatter66.print((-114047999L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-01:00" + "'", str55, "-01:00");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
    }

    @Test
    public void test14523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14523");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(7, 9, 11);
        java.util.Calendar.Builder builder6 = builder4.setLenient(true);
        java.util.Calendar.Builder builder11 = builder4.setTimeOfDay(17, 0, (int) '#', 365);
        java.util.Calendar.Builder builder16 = builder4.setTimeOfDay(949, 32770, 1268, 100);
        java.util.Calendar.Builder builder20 = builder16.setDate(2086, 70, 1200001);
        java.util.Calendar.Builder builder22 = builder20.setLenient(false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test14524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14524");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property15 = dateTime13.hourOfDay();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        boolean boolean19 = dateTimeZone17.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime20 = dateTime13.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) 'a');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property32 = dateTime30.hourOfDay();
        org.joda.time.DateTime dateTime33 = property32.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfYear(8);
        boolean boolean36 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime35.getZone();
        java.lang.String str38 = dateTimeZone37.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(8000, 31021460, 31, 0, (-35748), 8000, dateTimeZone37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -35748 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-01:00" + "'", str38, "-01:00");
    }

    @Test
    public void test14525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14525");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronolgy();
        java.lang.Integer int7 = dateTimeFormatter2.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = dateTimeFormatter2.parseMillis("Dec 1, 1971 12:00:00 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test14526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14526");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.millisOfSecond();
        int int7 = property6.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay9 = property6.addToCopy(100);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.millisOfSecond();
        boolean boolean16 = timeOfDay9.isEqual((org.joda.time.ReadablePartial) timeOfDay14);
        int int17 = timeOfDay14.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = timeOfDay14.getFieldTypes();
        org.joda.time.TimeOfDay.Property property19 = timeOfDay14.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay21 = property19.setCopy(1);
        java.lang.String str22 = timeOfDay21.toString();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay21.plus(readablePeriod23);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay21.plusHours((int) '4');
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.secondOfMinute();
        int int28 = timeOfDay26.size();
        int[] intArray29 = timeOfDay26.getValues();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.Chronology chronology39 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekyearOfCentury();
        org.joda.time.DurationField durationField41 = chronology39.weeks();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((-288675054L), chronology39);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay26.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeField dateTimeField44 = chronology39.centuryOfEra();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((-62133267119900L), chronology39);
        org.joda.time.LocalTime localTime47 = localTime45.minusMillis(255);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "T01:00:00.100" + "'", str22, "T01:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[5, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localTime47);
    }

    @Test
    public void test14527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14527");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.Chronology chronology13 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(11, 1, 9, chronology13);
        org.joda.time.DurationField durationField18 = chronology13.weekyears();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int21 = localTime20.getSecondOfMinute();
        int int22 = localTime20.getMinuteOfHour();
        org.joda.time.DateTime dateTime23 = localTime20.toDateTimeToday();
        long long25 = chronology13.set((org.joda.time.ReadablePartial) localTime20, 59L);
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay((int) (byte) 0, 13, chronology13);
        org.joda.time.DateTimeField dateTimeField27 = chronology13.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-82799903L) + "'", long25 == (-82799903L));
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test14528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14528");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str13 = dateTimeZone11.getShortName((long) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.withZone(dateTimeZone11);
        long long17 = dateTimeZone11.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        boolean boolean21 = dateTimeZone19.equals((java.lang.Object) (-3600000));
        long long23 = dateTimeZone11.getMillisKeepLocal(dateTimeZone19, 100L);
        java.lang.String str25 = dateTimeZone19.getName(3110L);
        java.lang.String str27 = dateTimeZone19.getShortName((long) 23);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) (short) 100, dateTimeZone19);
        int int29 = localTime28.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-01:00" + "'", str13, "-01:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 5L + "'", long17 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-01:00" + "'", str25, "-01:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test14529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14529");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        long long16 = dateTimeZone10.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        boolean boolean20 = dateTimeZone18.equals((java.lang.Object) (-3600000));
        long long22 = dateTimeZone10.getMillisKeepLocal(dateTimeZone18, 100L);
        long long26 = dateTimeZone10.convertLocalToUTC(4080100L, true, (long) 122);
        int int28 = dateTimeZone10.getOffsetFromLocal((long) 4);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property38 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = property38.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property40 = dateTime39.weekOfWeekyear();
        java.util.Locale locale41 = null;
        int int42 = property40.getMaximumShortTextLength(locale41);
        org.joda.time.DateTime dateTime43 = property40.withMaximumValue();
        org.joda.time.DateTime dateTime44 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime45 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime47 = dateTime45.withWeekOfWeekyear(13);
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTime45.toString("1380", locale49);
        org.joda.time.DateTime.Property property51 = dateTime45.millisOfDay();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime55.minusDays(7);
        org.joda.time.DateTime dateTime59 = dateTime55.withYear(1);
        org.joda.time.DateTime dateTime60 = dateTime59.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property61 = dateTime59.hourOfDay();
        org.joda.time.DateTime dateTime62 = property61.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime64 = dateTime62.withDayOfYear(8);
        org.joda.time.DateTime dateTime66 = dateTime64.withMillis((long) 10);
        org.joda.time.DateTime dateTime69 = dateTime64.withDurationAdded((long) 16, 5);
        org.joda.time.DateTime dateTime71 = dateTime64.withYearOfCentury(53);
        org.joda.time.LocalDate localDate72 = dateTime64.toLocalDate();
        boolean boolean73 = property51.equals((java.lang.Object) dateTime64);
        int int74 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean76 = dateTime64.isAfter((-62104147200000L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5L + "'", long16 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 7680100L + "'", long26 == 7680100L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3600000) + "'", int28 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1380" + "'", str50, "1380");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3600000) + "'", int74 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test14530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14530");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology10.add(readablePeriod16, (long) 100, 17);
        org.joda.time.DurationField durationField20 = chronology10.months();
        org.joda.time.DurationField durationField21 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology10.weekyear();
        java.util.Locale locale24 = null;
        int int25 = dateTimeField23.getMaximumShortTextLength(locale24);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeField23.getAsShortText(31077130, locale27);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "31077130" + "'", str28, "31077130");
    }

    @Test
    public void test14531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14531");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter7.getPrinter();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.minuteOfDay();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology20);
        java.lang.String str24 = localTime23.toString();
        org.joda.time.Chronology chronology25 = localTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology25.getZone();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(31525459285680L, dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter7.withZone(dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter29.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter30.withOffsetParsed();
        org.joda.time.Chronology chronology32 = dateTimeFormatter31.getChronology();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "01:00:00.000" + "'", str24, "01:00:00.000");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(chronology32);
    }

    @Test
    public void test14532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14532");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property13 = dateTime12.monthOfYear();
        org.joda.time.DateTime dateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.secondOfDay();
        long long31 = chronology23.add((long) 7, 5L, 11);
        org.joda.time.DateTimeField dateTimeField32 = chronology23.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology23.era();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(7);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(1);
        org.joda.time.DateTime dateTime42 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str46 = dateTimeZone44.getShortName((long) 0);
        org.joda.time.DateTime dateTime47 = dateTime42.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime51.minusDays(7);
        org.joda.time.DateTime dateTime55 = dateTime51.withYear(1);
        boolean boolean56 = dateTime47.isBefore((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = dateTime55.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime55.getZone();
        org.joda.time.Chronology chronology59 = chronology23.withZone(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField60 = chronology59.dayOfWeek();
        boolean boolean61 = property13.equals((java.lang.Object) chronology59);
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay((long) 115, chronology59);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        boolean boolean67 = dateTimeZone65.equals((java.lang.Object) (-3600000));
        java.util.Locale locale69 = null;
        java.lang.String str70 = dateTimeZone65.getShortName(10L, locale69);
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((-62104064400000L), dateTimeZone65);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime76 = dateTime74.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime78 = dateTime76.minusDays(7);
        org.joda.time.DateTime dateTime80 = dateTime76.withYear(1);
        org.joda.time.Chronology chronology81 = dateTime76.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField83 = chronology81.minuteOfDay();
        org.joda.time.LocalTime localTime84 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology81);
        org.joda.time.LocalTime.Property property85 = localTime84.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField86 = property85.getField();
        org.joda.time.DateTimeField dateTimeField87 = property85.getField();
        org.joda.time.LocalTime localTime88 = property85.getLocalTime();
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.LocalTime localTime90 = localTime88.minus(readablePeriod89);
        boolean boolean91 = localTime71.isAfter((org.joda.time.ReadablePartial) localTime90);
        org.joda.time.LocalTime localTime93 = localTime90.withMillisOfSecond((int) '#');
        boolean boolean94 = timeOfDay62.isEqual((org.joda.time.ReadablePartial) localTime93);
        org.joda.time.ReadablePeriod readablePeriod95 = null;
        org.joda.time.TimeOfDay timeOfDay97 = timeOfDay62.withPeriodAdded(readablePeriod95, 712);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 62L + "'", long31 == 62L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-01:00" + "'", str46, "-01:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-01:00" + "'", str70, "-01:00");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(localTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(localTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(timeOfDay97);
    }

    @Test
    public void test14533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14533");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str17 = dateTimeZone15.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime11.toMutableDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.Chronology chronology27 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.minuteOfDay();
        org.joda.time.DurationField durationField30 = chronology27.months();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) chronology27);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.secondOfMinute();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int35 = localTime34.getSecondOfMinute();
        int int36 = localTime34.getMinuteOfHour();
        int int37 = localTime34.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalTime localTime39 = localTime34.minus(readablePeriod38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay44 = dateTime41.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property45 = timeOfDay44.millisOfSecond();
        int int46 = property45.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay48 = property45.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property51 = timeOfDay48.hourOfDay();
        boolean boolean52 = localTime39.isBefore((org.joda.time.ReadablePartial) timeOfDay48);
        int[] intArray54 = chronology27.get((org.joda.time.ReadablePartial) timeOfDay48, (long) 18);
        org.joda.time.DateTimeField dateTimeField55 = chronology27.minuteOfHour();
        long long58 = dateTimeField55.addWrapField(35L, 23003);
        // The following exception was thrown during execution in test generation
        try {
            long long61 = dateTimeField55.set(68601600004L, 32400);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32400 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:00" + "'", str17, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[23, 0, 0, 18]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1380035L + "'", long58 == 1380035L);
    }

    @Test
    public void test14534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14534");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str17 = dateTimeZone15.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime11.toMutableDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property28 = dateTime26.hourOfDay();
        int int29 = property28.get();
        org.joda.time.DateTime dateTime30 = property28.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        boolean boolean32 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(300063L);
        org.joda.time.DateTime dateTime35 = localTime34.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalTime localTime37 = localTime34.plus(readablePeriod36);
        org.joda.time.LocalTime localTime39 = localTime37.plusMillis(365);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalTime localTime42 = localTime39.withPeriodAdded(readablePeriod40, 31);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay47 = dateTime44.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property48 = timeOfDay47.millisOfSecond();
        java.util.Locale locale49 = null;
        int int50 = property48.getMaximumShortTextLength(locale49);
        int int51 = property48.get();
        int int52 = property48.get();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay57 = dateTime54.toTimeOfDay();
        org.joda.time.LocalTime localTime58 = dateTime54.toLocalTime();
        int int59 = property48.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime61 = dateTime54.withYearOfCentury(24);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int66 = dateTimeZone64.getStandardOffset((long) (short) 0);
        long long69 = dateTimeZone64.convertLocalToUTC(480100L, false);
        java.lang.String str71 = dateTimeZone64.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone64);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((-1483228799900L), dateTimeZone64);
        org.joda.time.DateTime dateTime74 = dateTime61.withZone(dateTimeZone64);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.DateTime dateTime77 = dateTime61.withPeriodAdded(readablePeriod75, 24);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.era();
        int int79 = dateTime77.get(dateTimeFieldType78);
        boolean boolean80 = localTime39.isSupported(dateTimeFieldType78);
        boolean boolean81 = dateTime30.isSupported(dateTimeFieldType78);
        org.joda.time.DateTime.Property property82 = dateTime30.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:00" + "'", str17, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3600000) + "'", int66 == (-3600000));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 4080100L + "'", long69 == 4080100L);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-01:00" + "'", str71, "-01:00");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test14535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14535");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.DateTime dateTime13 = dateTime12.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes((int) (short) 100);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.plusMinutes(54060000);
        int int20 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTime();
        int int22 = dateTime21.getMillisOfDay();
        int int23 = dateTime21.getCenturyOfEra();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.DateTime dateTime41 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str45 = dateTimeZone43.getShortName((long) 0);
        org.joda.time.DateTime dateTime46 = dateTime41.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime47 = dateTime31.withZone(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime21.toMutableDateTime(dateTimeZone43);
        int int50 = dateTimeZone43.getStandardOffset(85740000L);
        java.lang.String str52 = dateTimeZone43.getNameKey(62104089001L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(31201, 288227, 61200002, (-1898), (-19), dateTimeZone43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1898 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str17, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 85680100 + "'", int22 == 85680100);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-01:00" + "'", str45, "-01:00");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3600000) + "'", int50 == (-3600000));
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test14536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14536");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(457, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder6 = builder0.setInstant(31525542148932L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test14537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14537");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property10 = dateTime8.millisOfDay();
        int int11 = dateTime8.getEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        org.joda.time.DurationField durationField18 = property17.getDurationField();
        java.lang.String str19 = property17.getAsShortText();
        org.joda.time.DateTimeField dateTimeField20 = property17.getField();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime23 = localTime21.withSecondOfMinute(1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalTime localTime25 = localTime23.minus(readablePeriod24);
        java.lang.String str26 = localTime23.toString();
        int[] intArray28 = new int[] { 10 };
        int int29 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) localTime23, intArray28);
        int int31 = dateTimeField20.getLeapAmount(10L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeField20.getAsShortText(86399, locale33);
        int int35 = dateTime8.get(dateTimeField20);
        boolean boolean36 = dateTimeField20.isSupported();
        long long39 = dateTimeField20.addWrapField((long) 598, 45);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeField20.getAsShortText(31077130, locale41);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100" + "'", str19, "100");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "08:45:01.450" + "'", str26, "08:45:01.450");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 999 + "'", int29 == 999);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "86399" + "'", str34, "86399");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 643L + "'", long39 == 643L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "31077130" + "'", str42, "31077130");
    }

    @Test
    public void test14538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14538");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(36, 31141898);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14539");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfYear();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(chronology8);
        boolean boolean15 = localTime13.equals((java.lang.Object) 995L);
        int int16 = localTime13.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
    }

    @Test
    public void test14540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14540");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.add(11, 11);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.monthOfYear();
        int int30 = dateTime28.getSecondOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.withMillisOfDay(70);
        boolean boolean33 = gregorianCalendar13.after((java.lang.Object) dateTime28);
        java.time.Instant instant34 = gregorianCalendar13.toInstant();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay39 = dateTime36.toTimeOfDay();
        org.joda.time.LocalTime localTime40 = dateTime36.toLocalTime();
        java.util.Locale locale41 = null;
        java.util.Calendar calendar42 = dateTime36.toCalendar(locale41);
        calendar42.setLenient(false);
        java.util.TimeZone timeZone45 = calendar42.getTimeZone();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        gregorianCalendar13.setTimeZone(timeZone45);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay54 = dateTime51.toTimeOfDay();
        java.util.Date date55 = dateTime51.toDate();
        long long56 = date55.getTime();
        org.joda.time.TimeOfDay timeOfDay57 = org.joda.time.TimeOfDay.fromDateFields(date55);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime61.minusDays(7);
        org.joda.time.DateTime dateTime65 = dateTime61.withYear(1);
        org.joda.time.DateTime dateTime66 = dateTime65.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str70 = dateTimeZone68.getShortName((long) 0);
        org.joda.time.DateTime dateTime71 = dateTime66.withZone(dateTimeZone68);
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime(dateTimeZone68);
        java.util.Locale locale74 = null;
        java.lang.String str75 = dateTimeZone68.getName((long) 712, locale74);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime77 = timeOfDay57.toDateTimeToday(dateTimeZone68);
        boolean boolean78 = gregorianCalendar13.after((java.lang.Object) dateTime77);
        gregorianCalendar13.add(7, 48);
        gregorianCalendar13.clear();
        boolean boolean83 = gregorianCalendar13.isWeekDateSupported();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 85680 + "'", int30 == 85680);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644572717487,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=45,SECOND=17,MILLISECOND=487,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L + "'", long56 == 100L);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-01:00" + "'", str70, "-01:00");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-01:00" + "'", str75, "-01:00");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test14541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14541");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfDay();
        long long40 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime38.plusWeeks(2022);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.minus(readablePeriod44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        java.lang.String str48 = dateTimeFieldType46.getName();
        org.joda.time.DateTime.Property property49 = dateTime43.property(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType46.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "year" + "'", str48, "year");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNull(durationFieldType50);
    }

    @Test
    public void test14542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14542");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay8.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay8.minusHours(1970);
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay16 = property14.addNoWrapToCopy((-2337983));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Maximum value exceeded for add");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test14543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14543");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField13 = chronology8.months();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test14544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14544");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(7, 9, 11);
        java.util.Calendar calendar5 = builder0.build();
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(358, 718, (-292275054));
        java.util.Calendar.Builder builder14 = builder9.setTimeOfDay((-1028363091), 992, 32769, 37);
        java.util.Calendar.Builder builder18 = builder14.setWeekDate(5700200, 38, (-1));
        java.util.Calendar.Builder builder23 = builder18.setTimeOfDay(31141586, 63, 47, 3599990);
        java.util.Calendar.Builder builder27 = builder18.setDate(97, 34741131, 999);
        java.util.Date date28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder29 = builder18.setInstant(date28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-61922016000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=284,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test14545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14545");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.LocalTime localTime17 = localTime15.plusMinutes((-292275054));
        org.joda.time.LocalTime.Property property18 = localTime17.minuteOfHour();
        org.joda.time.LocalTime localTime20 = localTime17.minusMillis(69);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localTime17.get(dateTimeFieldType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test14546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14546");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.weekyear();
        org.joda.time.DurationField durationField14 = chronology9.minutes();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(299724572240163L, chronology9);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str28 = dateTimeZone26.getShortName((long) 0);
        org.joda.time.DateTime dateTime29 = dateTime24.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        boolean boolean38 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime37);
        int int39 = dateTime29.getEra();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime42 = dateTime29.withDurationAdded(readableDuration40, (int) '4');
        org.joda.time.DateTime dateTime44 = dateTime29.withYear(365);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMinutes(1969);
        org.joda.time.DateTime dateTime47 = localTime15.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:00" + "'", str28, "-01:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test14547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14547");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.plusMinutes(12);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        int int29 = property28.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay31 = property28.addToCopy(100);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay36 = dateTime33.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.millisOfSecond();
        boolean boolean38 = timeOfDay31.isEqual((org.joda.time.ReadablePartial) timeOfDay36);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay31.withMinuteOfHour((int) '#');
        java.lang.String str41 = timeOfDay40.toString();
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay40.plusHours(2);
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.plusHours(9);
        org.joda.time.LocalTime localTime46 = timeOfDay43.toLocalTime();
        boolean boolean47 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.LocalTime localTime49 = localTime46.withMillisOfDay(516);
        org.joda.time.LocalTime.Property property50 = localTime46.minuteOfHour();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime56.minusDays(7);
        org.joda.time.DateTime dateTime60 = dateTime56.withYear(1);
        org.joda.time.Chronology chronology61 = dateTime56.getChronology();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime(chronology61);
        org.joda.time.DurationField durationField63 = chronology61.weeks();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        long long67 = chronology61.add(readablePeriod64, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay68 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology61);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((-82799998L), chronology61);
        org.joda.time.LocalTime.Property property70 = localTime69.hourOfDay();
        org.joda.time.LocalTime localTime72 = property70.addCopy(0L);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int76 = dateTimeZone74.getStandardOffset((long) (short) 0);
        long long79 = dateTimeZone74.convertLocalToUTC(480100L, false);
        org.joda.time.DateTime dateTime80 = localTime72.toDateTimeToday(dateTimeZone74);
        org.joda.time.DateTime dateTime82 = dateTime80.plusMinutes(53);
        org.joda.time.DurationFieldType durationFieldType83 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str84 = durationFieldType83.toString();
        java.lang.String str85 = durationFieldType83.getName();
        org.joda.time.DateTime dateTime87 = dateTime80.withFieldAdded(durationFieldType83, (int) (short) 100);
        org.joda.time.DateTime dateTime88 = localTime46.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime90 = dateTime88.withCenturyOfEra(82799);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "T23:35:00.200" + "'", str41, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3600000) + "'", int76 == (-3600000));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 4080100L + "'", long79 == 4080100L);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "seconds" + "'", str84, "seconds");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "seconds" + "'", str85, "seconds");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test14548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14548");
        java.util.Date date3 = new java.util.Date(2022, (int) (byte) 100, 712);
        date3.setSeconds(30961509);
        date3.setTime(999L);
        date3.setMinutes(31119382);
        int int10 = date3.getSeconds();
        java.util.Date date12 = new java.util.Date((long) 6);
        java.lang.String str13 = date12.toLocaleString();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromDateFields(date12);
        boolean boolean15 = date3.after(date12);
        date3.setYear(271);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Mar 02 16:22:00 UTC 2171");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str13, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test14549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14549");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.secondOfDay();
        boolean boolean23 = property8.equals((java.lang.Object) dateTimeField22);
        org.joda.time.DurationField durationField24 = property8.getRangeDurationField();
        org.joda.time.DateTime dateTime25 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.Chronology chronology36 = dateTime31.getChronology();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        boolean boolean40 = dateTimeZone38.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology41 = chronology36.withZone(dateTimeZone38);
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.fromMillisOfDay(480100L, chronology36);
        org.joda.time.DateTimeZone dateTimeZone43 = chronology36.getZone();
        org.joda.time.DateTime dateTime44 = dateTime26.withZoneRetainFields(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime44.getZone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
    }

    @Test
    public void test14550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14550");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay8.secondOfMinute();
        int int17 = property16.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay18 = property16.withMaximumValue();
        java.lang.String str19 = property16.getAsShortText();
        java.lang.String str20 = property16.getAsString();
        org.joda.time.TimeOfDay timeOfDay21 = property16.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property16.withMinimumValue();
        java.lang.String str23 = property16.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Property[secondOfMinute]" + "'", str23, "Property[secondOfMinute]");
    }

    @Test
    public void test14551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14551");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.plusMinutes(12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = timeOfDay22.getFieldTypes();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay28 = dateTime25.toTimeOfDay();
        org.joda.time.LocalTime localTime29 = dateTime25.toLocalTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime dateTime41 = dateTime39.plusMinutes((int) (short) 100);
        java.lang.String str42 = dateTime41.toString();
        int int43 = dateTime41.getSecondOfMinute();
        boolean boolean44 = dateTime25.equals((java.lang.Object) dateTime41);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((java.lang.Object) dateTime41);
        org.joda.time.DateTime.Property property46 = dateTime41.centuryOfEra();
        org.joda.time.DateTime dateTime47 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        int int48 = dateTime47.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str42, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test14552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14552");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.centuryOfEra();
        java.lang.String str14 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology8.getZone();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.millisOfSecond();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property23 = timeOfDay22.millisOfSecond();
        java.util.Locale locale24 = null;
        int int25 = property23.getMaximumShortTextLength(locale24);
        int int26 = property23.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField27 = property23.getField();
        java.util.Locale locale28 = null;
        int int29 = property23.getMaximumShortTextLength(locale28);
        org.joda.time.TimeOfDay timeOfDay30 = property23.getTimeOfDay();
        org.joda.time.DateTimeField dateTimeField31 = property23.getField();
        org.joda.time.TimeOfDay timeOfDay33 = property23.addNoWrapToCopy(718);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.plusMillis(1268);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) timeOfDay35, 516, locale37);
        long long41 = dateTimeField17.add(1644572469225L, 45);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[-01:00]" + "'", str14, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "516" + "'", str38, "516");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1644572469270L + "'", long41 == 1644572469270L);
    }

    @Test
    public void test14553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14553");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusMinutes(0);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.withSecondOfMinute(17);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay6.plusMinutes(648);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test14554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14554");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.LocalTime localTime17 = localTime15.plusMinutes((-292275054));
        org.joda.time.LocalTime.Property property18 = localTime17.minuteOfHour();
        org.joda.time.LocalTime localTime20 = localTime17.minusHours(2000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime22 = localTime20.withHourOfDay(922);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 922 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test14555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14555");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology9);
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology9.add(readablePeriod12, 1L, 8);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property25 = dateTime23.hourOfDay();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        boolean boolean29 = dateTimeZone27.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime30 = dateTime23.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int34 = dateTimeZone32.getStandardOffset((long) (short) 0);
        long long36 = dateTimeZone27.getMillisKeepLocal(dateTimeZone32, (long) 0);
        org.joda.time.Chronology chronology37 = chronology9.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField38 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology9.yearOfCentury();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime(64038502164940000L, chronology9);
        org.joda.time.DateTimeField dateTimeField42 = chronology9.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3600000) + "'", int34 == (-3600000));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test14556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14556");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay17 = dateTime14.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.millisOfSecond();
        int int19 = property18.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay21 = property18.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property24 = timeOfDay21.hourOfDay();
        boolean boolean25 = localTime12.isAfter((org.joda.time.ReadablePartial) timeOfDay21);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property35 = dateTime33.hourOfDay();
        org.joda.time.DateTime dateTime36 = property35.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        java.util.Locale locale38 = null;
        int int39 = property37.getMaximumShortTextLength(locale38);
        org.joda.time.DateTime dateTime40 = property37.withMaximumValue();
        org.joda.time.DateTime.Property property41 = dateTime40.millisOfDay();
        org.joda.time.DateTime dateTime42 = localTime12.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime40.minus(readablePeriod43);
        int int45 = dateTime40.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test14557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14557");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime15);
        org.joda.time.DateTime dateTime17 = timeOfDay16.toDateTimeToday();
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime dateTime20 = dateTime17.plus((long) 70);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime17.getZone();
        org.joda.time.DateTime.Property property22 = dateTime17.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test14558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14558");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DurationField durationField12 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DurationField durationField15 = chronology8.months();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology8);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test14559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14559");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        int int12 = property11.getMinimumValue();
        int int13 = property11.getMinimumValueOverall();
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime16 = property11.setCopy("46");
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test14560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14560");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMillis(11);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(7);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(7);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(1);
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.minuteOfDay();
        org.joda.time.DurationField durationField24 = chronology21.months();
        boolean boolean25 = dateTimeFieldType12.isSupported(chronology21);
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType12.getDurationType();
        boolean boolean27 = dateTime11.isSupported(dateTimeFieldType12);
        int int28 = dateTime3.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.Chronology chronology37 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(chronology37);
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property44 = timeOfDay43.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay46 = property44.addNoWrapToCopy((int) ' ');
        org.joda.time.Chronology chronology47 = timeOfDay46.getChronology();
        int int48 = timeOfDay46.size();
        int[] intArray50 = chronology37.get((org.joda.time.ReadablePartial) timeOfDay46, 266322585600816L);
        org.joda.time.DateTimeField dateTimeField51 = chronology37.secondOfDay();
        boolean boolean52 = dateTime3.equals((java.lang.Object) chronology37);
        org.joda.time.format.DateTimePrinter dateTimePrinter53 = null;
        org.joda.time.format.DateTimeParser dateTimeParser54 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter53, dateTimeParser54);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime61 = dateTime59.minusDays(7);
        org.joda.time.DateTime dateTime63 = dateTime59.withYear(1);
        org.joda.time.Chronology chronology64 = dateTime59.getChronology();
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        boolean boolean68 = dateTimeZone66.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology69 = chronology64.withZone(dateTimeZone66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter55.withZone(dateTimeZone66);
        java.lang.String str71 = dateTimeZone66.getID();
        org.joda.time.Chronology chronology72 = chronology37.withZone(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 69 + "'", int28 == 69);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[7, 0, 0, 816]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-01:00" + "'", str71, "-01:00");
        org.junit.Assert.assertNotNull(chronology72);
    }

    @Test
    public void test14561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14561");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        java.time.Instant instant11 = calendar7.toInstant();
        int int12 = calendar7.getMinimalDaysInFirstWeek();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(7);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(1);
        org.joda.time.DateTime dateTime21 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes((int) (short) 100);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.plusMinutes(54060000);
        boolean boolean28 = calendar7.after((java.lang.Object) 54060000);
        calendar7.set(8000, 32772, 32770);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = calendar7.getMaximum(54060);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54060");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8000,MONTH=32772,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=32770,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str25, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test14562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14562");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime12 = localTime10.withSecondOfMinute(1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime12, 14, locale14);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.DurationField durationField28 = chronology26.weeks();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = chronology26.add(readablePeriod29, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay33 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology26);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((-82799998L), chronology26);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay40 = dateTime37.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property41 = timeOfDay40.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay40.withPeriodAdded(readablePeriod42, (int) '4');
        int[] intArray45 = timeOfDay44.getValues();
        int[] intArray47 = dateTimeField9.set((org.joda.time.ReadablePartial) localTime34, (int) (short) 0, intArray45, (int) '4');
        int int48 = localTime34.getMillisOfSecond();
        int int49 = localTime34.getMinuteOfHour();
        org.joda.time.LocalTime localTime51 = localTime34.plusMillis(937);
        org.joda.time.LocalTime localTime53 = localTime51.minusHours(31201494);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "14" + "'", str15, "14");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[52, 0, 0, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[52, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
    }

    @Test
    public void test14563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14563");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        java.lang.String str30 = property29.getName();
        boolean boolean31 = property29.isLeap();
        org.joda.time.DateTime dateTime32 = property29.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime34 = dateTime32.plusWeeks(0);
        org.joda.time.DateTime dateTime35 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths(85680);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTime37.toString("100", locale39);
        boolean boolean42 = dateTime37.isBefore(84153614100L);
        int int43 = dateTime37.getSecondOfMinute();
        int int44 = dateTime37.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "yearOfEra" + "'", str30, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100" + "'", str40, "100");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3600100 + "'", int44 == 3600100);
    }

    @Test
    public void test14564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14564");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str16 = dateTimeFieldType15.toString();
        boolean boolean17 = localTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        org.joda.time.LocalTime localTime23 = dateTime19.toLocalTime();
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.years();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int29 = localTime27.indexOf(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property39 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = property39.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property41 = dateTime40.weekOfWeekyear();
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        org.joda.time.DateTime dateTime44 = property41.withMaximumValue();
        org.joda.time.DateTime dateTime45 = dateTime44.withTimeAtStartOfDay();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime50 = dateTime45.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = localTime27.toDateTimeToday(dateTimeZone47);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMonths(712);
        org.joda.time.DateTime.Property property54 = dateTime51.millisOfDay();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.minusDays(7);
        org.joda.time.DateTime dateTime62 = dateTime58.withYear(1);
        org.joda.time.DateTime dateTime63 = dateTime62.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime65 = dateTime63.plusYears((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = dateTime63.isSupported(dateTimeFieldType66);
        int int68 = property54.compareTo((org.joda.time.ReadableInstant) dateTime63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime70 = dateTime63.withYearOfCentury(244);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 244 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "monthOfYear" + "'", str16, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test14565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14565");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        org.joda.time.DateTime dateTime7 = dateTime2.withYearOfCentury(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.Chronology chronology17 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.DurationField durationField20 = chronology17.months();
        boolean boolean21 = dateTimeFieldType8.isSupported(chronology17);
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType8.getDurationType();
        org.joda.time.DateTime dateTime24 = dateTime7.withFieldAdded(durationFieldType22, 2);
        org.joda.time.DateTime dateTime26 = dateTime7.withMillisOfDay(54060000);
        org.joda.time.DateTime dateTime27 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.Chronology chronology36 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.clockhourOfDay();
        org.joda.time.DurationField durationField41 = chronology36.halfdays();
        org.joda.time.DateTime dateTime42 = dateTime7.withChronology(chronology36);
        boolean boolean43 = dateTimeFieldType0.isSupported(chronology36);
        org.joda.time.DateTimeField dateTimeField44 = chronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology36.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test14566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14566");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        java.util.Locale locale8 = null;
        int int9 = property5.getMaximumTextLength(locale8);
        java.util.Locale locale10 = null;
        java.lang.String str11 = property5.getAsShortText(locale10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property5.getFieldType();
        org.joda.time.TimeOfDay timeOfDay14 = property5.setCopy(0);
        org.joda.time.TimeOfDay timeOfDay15 = property5.withMinimumValue();
        int int17 = timeOfDay15.getValue(0);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay15.minusMinutes(31021296);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.withHourOfDay(0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100" + "'", str11, "100");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 23 + "'", int17 == 23);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
    }

    @Test
    public void test14567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14567");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay8.withChronologyRetainFields(chronology19);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay8.minusHours(13);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.millisOfSecond();
        int int31 = property30.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay33 = property30.addToCopy(100);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay38 = dateTime35.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property39 = timeOfDay38.millisOfSecond();
        boolean boolean40 = timeOfDay33.isEqual((org.joda.time.ReadablePartial) timeOfDay38);
        org.joda.time.TimeOfDay.Property property41 = timeOfDay33.secondOfMinute();
        java.lang.String str42 = property41.getName();
        org.joda.time.TimeOfDay timeOfDay44 = property41.setCopy((int) '4');
        org.joda.time.TimeOfDay timeOfDay46 = property41.setCopy("1");
        boolean boolean47 = timeOfDay24.isEqual((org.joda.time.ReadablePartial) timeOfDay46);
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay24.plusHours(34826508);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "secondOfMinute" + "'", str42, "secondOfMinute");
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(timeOfDay49);
    }

    @Test
    public void test14568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14568");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        int int10 = dateTime7.getMillisOfSecond();
        org.joda.time.DateTime dateTime12 = dateTime7.withWeekyear((-292275054));
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(7);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(1);
        org.joda.time.DateTime dateTime21 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str25 = dateTimeZone23.getShortName((long) 0);
        org.joda.time.DateTime dateTime26 = dateTime21.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        boolean boolean35 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime26.getEra();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime39 = dateTime26.withDurationAdded(readableDuration37, (int) '4');
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime43.minusDays(7);
        org.joda.time.DateTime dateTime47 = dateTime43.withYear(1);
        org.joda.time.DateTime dateTime48 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property49 = dateTime47.hourOfDay();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        boolean boolean53 = dateTimeZone51.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime54 = dateTime47.withZone(dateTimeZone51);
        boolean boolean55 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime54);
        int int56 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime26);
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTime26.toString("08:36:01.954", locale58);
        org.joda.time.DateTime dateTime61 = dateTime26.plusMinutes(11);
        org.joda.time.DateTime.Property property62 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime64 = dateTime26.plusSeconds(31115675);
        org.joda.time.DateMidnight dateMidnight65 = dateTime26.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-01:00" + "'", str25, "-01:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "08:36:01.954" + "'", str59, "08:36:01.954");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateMidnight65);
    }

    @Test
    public void test14569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14569");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.millisOfSecond();
        int int22 = property21.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay24 = property21.addToCopy(100);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.millisOfSecond();
        boolean boolean31 = timeOfDay24.isEqual((org.joda.time.ReadablePartial) timeOfDay29);
        int int32 = timeOfDay29.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = timeOfDay29.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay29.withPeriodAdded(readablePeriod34, (int) (short) -1);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays(7);
        org.joda.time.DateTime dateTime44 = dateTime40.withYear(1);
        org.joda.time.DateTime dateTime45 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str49 = dateTimeZone47.getShortName((long) 0);
        org.joda.time.DateTime dateTime50 = dateTime45.withZone(dateTimeZone47);
        long long53 = dateTimeZone47.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        boolean boolean57 = dateTimeZone55.equals((java.lang.Object) (-3600000));
        long long59 = dateTimeZone47.getMillisKeepLocal(dateTimeZone55, 100L);
        org.joda.time.DateTime dateTime60 = timeOfDay36.toDateTimeToday(dateTimeZone55);
        boolean boolean61 = dateTime60.isAfterNow();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime65.minusDays(7);
        org.joda.time.DateTime dateTime69 = dateTime65.withYear(1);
        org.joda.time.DateTime.Property property70 = dateTime69.yearOfEra();
        java.lang.String str71 = property70.getName();
        boolean boolean72 = property70.isLeap();
        org.joda.time.DateTime dateTime73 = property70.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime75 = dateTime73.plusWeeks(0);
        java.lang.String str76 = dateTime73.toString();
        boolean boolean77 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime73);
        int int78 = dateTime60.getEra();
        boolean boolean79 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime81 = dateTime14.plusSeconds(32769);
        int int82 = dateTime81.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.DateTime dateTime85 = dateTime81.withDurationAdded(readableDuration83, 0);
        org.joda.time.DateTimeZone dateTimeZone86 = dateTime85.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-01:00" + "'", str49, "-01:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 5L + "'", long53 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 100L + "'", long59 == 100L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "yearOfEra" + "'", str71, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0002-01-01T00:00:00.000-01:00" + "'", str76, "0002-01-01T00:00:00.000-01:00");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
    }

    @Test
    public void test14570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14570");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime7.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime7.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property37 = dateTime35.hourOfDay();
        org.joda.time.DateTime dateTime38 = property37.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property39 = dateTime38.weekOfWeekyear();
        java.util.Locale locale40 = null;
        int int41 = property39.getMaximumShortTextLength(locale40);
        org.joda.time.DateTime dateTime42 = property39.withMaximumValue();
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfDay();
        int int44 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime46 = dateTime7.plusMinutes(15);
        org.joda.time.DateTime dateTime48 = dateTime46.minusYears((-292275054));
        org.joda.time.DateTime.Property property49 = dateTime48.secondOfMinute();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay54 = dateTime51.toTimeOfDay();
        java.util.Date date55 = dateTime51.toDate();
        int int56 = date55.getHours();
        int int57 = date55.getHours();
        date55.setMonth((int) ' ');
        date55.setSeconds(14);
        org.joda.time.TimeOfDay timeOfDay62 = org.joda.time.TimeOfDay.fromDateFields(date55);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime66 = dateTime64.plusDays(24);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean68 = dateTime64.isSupported(dateTimeFieldType67);
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType67.getRangeDurationType();
        int int70 = timeOfDay62.get(dateTimeFieldType67);
        org.joda.time.DateTime.Property property71 = dateTime48.property(dateTimeFieldType67);
        org.joda.time.DateTime dateTime72 = property71.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.minus(readablePeriod73);
        org.joda.time.DateTime dateTime76 = dateTime74.plusMinutes(519);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Fri Sep 01 00:00:14 UTC 1972");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test14571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14571");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withYearOfCentury(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        org.joda.time.DurationField durationField19 = chronology16.months();
        boolean boolean20 = dateTimeFieldType7.isSupported(chronology16);
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType7.getDurationType();
        org.joda.time.DateTime dateTime23 = dateTime6.withFieldAdded(durationFieldType21, 2);
        java.util.GregorianCalendar gregorianCalendar24 = dateTime6.toGregorianCalendar();
        long long25 = gregorianCalendar24.getTimeInMillis();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property35 = dateTime33.hourOfDay();
        int int36 = property35.get();
        int int37 = property35.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField38 = property35.getField();
        boolean boolean39 = gregorianCalendar24.before((java.lang.Object) dateTimeField38);
        java.util.TimeZone timeZone40 = gregorianCalendar24.getTimeZone();
        java.lang.String str41 = gregorianCalendar24.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(gregorianCalendar24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1483228799900L) + "'", long25 == (-1483228799900L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 23 + "'", int37 == 23);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.util.GregorianCalendar[time=-1483228799900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1922,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]" + "'", str41, "java.util.GregorianCalendar[time=-1483228799900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1922,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test14572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14572");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.plusSeconds((int) '#');
        org.joda.time.DateTime.Property property16 = dateTime15.secondOfDay();
        org.joda.time.DateTime dateTime18 = property16.addToCopy(0L);
        java.lang.String str19 = property16.getAsString();
        org.joda.time.DateTime dateTime20 = property16.getDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "85715" + "'", str19, "85715");
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test14573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14573");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        boolean boolean15 = gregorianCalendar13.isWeekDateSupported();
        int int16 = gregorianCalendar13.getWeekYear();
        gregorianCalendar13.setMinimalDaysInFirstWeek(357);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.Chronology chronology27 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekyearOfCentury();
        long long30 = dateTimeField28.roundHalfEven(480100L);
        boolean boolean32 = dateTimeField28.isLeap((-82800000L));
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay37 = dateTime34.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property38 = timeOfDay37.millisOfSecond();
        int int39 = property38.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay41 = property38.addToCopy(100);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay46 = dateTime43.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property47 = timeOfDay46.millisOfSecond();
        boolean boolean48 = timeOfDay41.isEqual((org.joda.time.ReadablePartial) timeOfDay46);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay46.withSecondOfMinute(12);
        int int51 = dateTimeField28.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay50);
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay50.withMinuteOfHour(15);
        org.joda.time.Chronology chronology54 = timeOfDay53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.weekyears();
        org.joda.time.DurationField durationField56 = chronology54.weeks();
        boolean boolean57 = gregorianCalendar13.before((java.lang.Object) chronology54);
        org.joda.time.DurationField durationField58 = chronology54.days();
        // The following exception was thrown during execution in test generation
        try {
            long long63 = chronology54.getDateTimeMillis(31201957, 358, 0, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3600000L + "'", long30 == 3600000L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(durationField58);
    }

    @Test
    public void test14574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14574");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        java.util.Locale locale10 = null;
        int int11 = property5.getMaximumShortTextLength(locale10);
        org.joda.time.TimeOfDay timeOfDay13 = property5.addWrapFieldToCopy(63);
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test14575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14575");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfDay();
        long long40 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime38.plusWeeks(2022);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.minus(readablePeriod44);
        org.joda.time.DateTime.Property property46 = dateTime45.weekyear();
        org.joda.time.DateTime dateTime47 = property46.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test14576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14576");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str3 = dateTimeZone1.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((-1L), locale6);
        long long10 = dateTimeZone1.adjustOffset((long) (short) 10, true);
        java.lang.String str12 = dateTimeZone1.getShortName((long) 365);
        long long15 = dateTimeZone1.convertLocalToUTC((long) 86399, false);
        int int17 = dateTimeZone1.getOffset(4080100L);
        java.lang.String str18 = dateTimeZone1.toString();
        java.lang.String str20 = dateTimeZone1.getShortName((long) 57);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3686399L + "'", long15 == 3686399L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3600000) + "'", int17 == (-3600000));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-01:00" + "'", str18, "-01:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:00" + "'", str20, "-01:00");
    }

    @Test
    public void test14577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14577");
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.Chronology chronology15 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.minuteOfDay();
        boolean boolean18 = durationFieldType6.isSupported(chronology15);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) 3, chronology15);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now(chronology15);
        org.joda.time.DurationField durationField21 = chronology15.seconds();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.halfdayOfDay();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.fromMillisOfDay((long) 1969, chronology15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(388, 13, 952, 292278993, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 388 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test14578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14578");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        calendar24.clear((int) (byte) 0);
        java.util.Date date27 = calendar24.getTime();
        int int28 = date27.getDate();
        int int29 = date27.getMinutes();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon Jan 02 23:08:00 UTC 2");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
    }

    @Test
    public void test14579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14579");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        calendar24.set(14, 9, 2);
        boolean boolean29 = calendar24.isWeekDateSupported();
        calendar24.set(122, 24352386, 1200000);
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.fromCalendarFields(calendar24);
        java.util.Date date35 = calendar24.getTime();
        // The following exception was thrown during execution in test generation
        try {
            calendar24.setWeekDate(995, 31201828, 31320871);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 31320871");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=64087267216080100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2032814,MONTH=7,WEEK_OF_YEAR=35,WEEK_OF_MONTH=5,DAY_OF_MONTH=26,DAY_OF_YEAR=238,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Aug 26 23:08:00 UTC 2032814");
    }

    @Test
    public void test14580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14580");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale5);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfDay();
        org.joda.time.DurationField durationField22 = chronology19.months();
        boolean boolean23 = dateTimeFieldType10.isSupported(chronology19);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 100, chronology19);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology19.add(readablePeriod25, (long) 100, 17);
        org.joda.time.DurationField durationField29 = chronology19.months();
        org.joda.time.DurationField durationField30 = chronology19.years();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter8.withChronology(chronology19);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(7);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(1);
        org.joda.time.Chronology chronology42 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.minuteOfDay();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology42);
        org.joda.time.LocalTime.Property property46 = localTime45.millisOfSecond();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime50.minusDays(7);
        org.joda.time.DateTime dateTime54 = dateTime50.withYear(1);
        org.joda.time.DateTime dateTime55 = dateTime54.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property56 = dateTime54.hourOfDay();
        org.joda.time.DateTime dateTime57 = property56.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfYear(8);
        org.joda.time.DateTime dateTime61 = dateTime59.withMillis((long) 10);
        long long62 = property46.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime59);
        java.lang.String str63 = property46.getName();
        org.joda.time.LocalTime localTime65 = property46.setCopy(516);
        int[] intArray67 = chronology19.get((org.joda.time.ReadablePartial) localTime65, 0L);
        org.joda.time.DateTimeField dateTimeField68 = chronology19.year();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime72 = dateTime70.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay73 = dateTime70.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property74 = timeOfDay73.millisOfSecond();
        java.util.Locale locale75 = null;
        int int76 = property74.getMaximumShortTextLength(locale75);
        int int77 = property74.get();
        int int78 = property74.get();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime82 = dateTime80.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay83 = dateTime80.toTimeOfDay();
        org.joda.time.LocalTime localTime84 = dateTime80.toLocalTime();
        int int85 = property74.compareTo((org.joda.time.ReadableInstant) dateTime80);
        int int86 = property74.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay87 = property74.withMaximumValue();
        org.joda.time.TimeOfDay.Property property88 = timeOfDay87.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay90 = timeOfDay87.plusMinutes(11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray91 = timeOfDay90.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        org.joda.time.TimeOfDay timeOfDay94 = timeOfDay90.withPeriodAdded(readablePeriod92, 0);
        int[] intArray95 = null;
        int int96 = dateTimeField68.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay94, intArray95);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 62134912800000L + "'", long62 == 62134912800000L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "millisOfSecond" + "'", str63, "millisOfSecond");
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[23, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(timeOfDay83);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 999 + "'", int86 == 999);
        org.junit.Assert.assertNotNull(timeOfDay87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(timeOfDay90);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray91);
        org.junit.Assert.assertNotNull(timeOfDay94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-292275054) + "'", int96 == (-292275054));
    }

    @Test
    public void test14581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14581");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(56);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test14582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14582");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        org.joda.time.LocalTime localTime17 = property15.addCopy(24);
        boolean boolean18 = property15.isLeap();
        java.util.Locale locale19 = null;
        int int20 = property15.getMaximumTextLength(locale19);
        org.joda.time.LocalTime localTime21 = property15.roundCeilingCopy();
        org.joda.time.LocalTime localTime22 = property15.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test14583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14583");
        java.lang.Object obj0 = null;
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(7);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(1);
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        boolean boolean16 = dateTimeZone14.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology17 = chronology12.withZone(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter3.withZone(dateTimeZone14);
        boolean boolean19 = dateTimeFormatter3.isPrinter();
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter3.withLocale(locale20);
        org.joda.time.Chronology chronology22 = dateTimeFormatter21.getChronology();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.Chronology chronology31 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology31.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = chronology31.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter21.withChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.dayOfWeek();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(obj0, chronology38);
        org.joda.time.DateTimeField dateTimeField43 = chronology38.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.dayOfWeek();
        org.joda.time.DurationField durationField45 = chronology38.years();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test14584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14584");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime14 = localTime11.withFieldAdded(durationFieldType12, 9);
        org.joda.time.LocalTime localTime16 = localTime14.plusMinutes((-3600000));
        int[] intArray18 = chronology8.get((org.joda.time.ReadablePartial) localTime14, (-62104060800000L));
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.hourOfHalfday();
        org.joda.time.Chronology chronology32 = chronology28.withUTC();
        boolean boolean33 = durationFieldType19.isSupported(chronology32);
        boolean boolean34 = localTime14.isSupported(durationFieldType19);
        org.joda.time.LocalTime.Property property35 = localTime14.minuteOfHour();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays(7);
        org.joda.time.DateTime dateTime44 = dateTime40.withYear(1);
        org.joda.time.Chronology chronology45 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology45);
        org.joda.time.LocalTime.Property property49 = localTime48.millisOfSecond();
        org.joda.time.LocalTime localTime50 = property49.roundCeilingCopy();
        org.joda.time.LocalTime.Property property51 = localTime50.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property51.getFieldType();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType52.getDurationType();
        org.joda.time.LocalTime localTime55 = localTime14.withFieldAdded(durationFieldType53, 200);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime60.minusDays(7);
        org.joda.time.DateTime dateTime64 = dateTime60.withYear(1);
        org.joda.time.Chronology chronology65 = dateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.minuteOfDay();
        org.joda.time.LocalTime localTime68 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology65);
        org.joda.time.LocalTime.Property property69 = localTime68.millisOfSecond();
        org.joda.time.LocalTime localTime70 = property69.roundCeilingCopy();
        org.joda.time.LocalTime localTime72 = property69.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime73 = property69.roundCeilingCopy();
        java.lang.String str74 = property69.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property69.getFieldType();
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime81 = dateTime79.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime83 = dateTime81.minusDays(7);
        org.joda.time.DateTime dateTime85 = dateTime81.withYear(1);
        org.joda.time.Chronology chronology86 = dateTime81.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField88 = chronology86.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField89 = chronology86.centuryOfEra();
        org.joda.time.LocalTime localTime90 = new org.joda.time.LocalTime((long) 13, chronology86);
        org.joda.time.TimeOfDay timeOfDay91 = new org.joda.time.TimeOfDay((long) 17, chronology86);
        org.joda.time.DateTimeField dateTimeField92 = dateTimeFieldType75.getField(chronology86);
        boolean boolean93 = localTime55.isSupported(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 0, 0, 0]");
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0" + "'", str74, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test14585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14585");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        int int22 = dateTime21.getEra();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        java.util.Locale locale29 = null;
        int int30 = property28.getMaximumShortTextLength(locale29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean32 = property28.equals((java.lang.Object) dateTimeFieldType31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property28.getFieldType();
        boolean boolean34 = dateTime21.isSupported(dateTimeFieldType33);
        org.joda.time.DateTime dateTime36 = dateTime9.withField(dateTimeFieldType33, 1);
        java.util.Date date37 = dateTime9.toDate();
        int int38 = dateTime9.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Mon Jan 02 23:08:00 UTC 2");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 79680100 + "'", int38 == 79680100);
    }

    @Test
    public void test14586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14586");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((-62162032980000L));
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.junit.Assert.assertNotNull(gregorianCalendar2);
    }

    @Test
    public void test14587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14587");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.get();
        int int9 = property5.get();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        int int16 = property5.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.TimeOfDay timeOfDay18 = property5.addToCopy(15);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes((int) (short) 100);
        java.lang.String str31 = dateTime30.toString();
        java.util.GregorianCalendar gregorianCalendar32 = dateTime30.toGregorianCalendar();
        gregorianCalendar32.add(11, 11);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        org.joda.time.DateTime dateTime44 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property48 = dateTime47.monthOfYear();
        int int49 = dateTime47.getSecondOfDay();
        org.joda.time.DateTime dateTime51 = dateTime47.withMillisOfDay(70);
        boolean boolean52 = gregorianCalendar32.after((java.lang.Object) dateTime47);
        org.joda.time.DateTime.Property property53 = dateTime47.dayOfMonth();
        int int54 = property5.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime47.minus(readableDuration55);
        int int57 = dateTime56.getDayOfYear();
        org.joda.time.DateTime.Property property58 = dateTime56.weekyear();
        org.joda.time.DateTime dateTime59 = property58.roundCeilingCopy();
        org.joda.time.DateTime dateTime60 = property58.roundHalfCeilingCopy();
        int int61 = dateTime60.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str31, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar32);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 85680 + "'", int49 == 85680);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 365 + "'", int57 == 365);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test14588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14588");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(53);
        org.joda.time.Chronology chronology8 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withDefaultYear(952);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(300063L);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localTime14.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime14.toDateTime(readableInstant16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localTime14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test14589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14589");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        java.util.Date date6 = dateTime2.toDate();
        java.time.Instant instant7 = date6.toInstant();
        int int8 = date6.getSeconds();
        java.util.Calendar.Builder builder9 = builder0.setInstant(date6);
        java.util.Calendar.Builder builder11 = builder0.setInstant((long) 20);
        java.util.Calendar.Builder builder13 = builder11.setInstant((long) 8);
        java.util.Calendar.Builder builder15 = builder11.setInstant(0L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        org.joda.time.LocalTime localTime21 = dateTime17.toLocalTime();
        java.util.Locale locale22 = null;
        java.util.Calendar calendar23 = dateTime17.toCalendar(locale22);
        calendar23.setLenient(false);
        java.util.TimeZone timeZone26 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone26);
        java.util.Calendar.Builder builder29 = builder15.setTimeZone(timeZone26);
        java.util.Calendar calendar30 = builder15.build();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = calendar30.isSet(31441349);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644572718690,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=45,SECOND=18,MILLISECOND=690,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test14590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14590");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withSecondOfMinute(12);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay13.plusMinutes(118);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay19.minuteOfHour();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = timeOfDay19.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
    }

    @Test
    public void test14591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14591");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        boolean boolean18 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        boolean boolean24 = dateTimeZone22.equals((java.lang.Object) (-3600000));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter2.withOffsetParsed();
        int int27 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withPivotYear(32772);
        boolean boolean30 = dateTimeFormatter29.isOffsetParsed();
        int int31 = dateTimeFormatter29.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter29.withPivotYear((java.lang.Integer) 80);
        java.io.Writer writer34 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter33.printTo(writer34, 62134989839200L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2000 + "'", int27 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2000 + "'", int31 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
    }

    @Test
    public void test14592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14592");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter3.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.minuteOfDay();
        org.joda.time.DurationField durationField20 = chronology16.millis();
        boolean boolean21 = dateTimeFieldType6.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField22 = chronology16.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter3.withChronology(chronology16);
        java.lang.Integer int24 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 365);
        org.joda.time.Chronology chronology27 = dateTimeFormatter3.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.parse("+00:00:00.032", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(chronology27);
    }

    @Test
    public void test14593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14593");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekyearOfCentury();
        boolean boolean20 = property9.equals((java.lang.Object) dateTimeField19);
        org.joda.time.DateTime dateTime21 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime dateTime24 = dateTime21.minus(10368278502L);
        org.joda.time.DateTime dateTime26 = dateTime21.minusYears(34620000);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears(99);
        org.joda.time.Chronology chronology29 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test14594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14594");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property15.getFieldType();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        java.lang.String str18 = dateTimeFieldType16.toString();
        java.lang.String str19 = dateTimeFieldType16.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "millisOfDay" + "'", str18, "millisOfDay");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "millisOfDay" + "'", str19, "millisOfDay");
    }

    @Test
    public void test14595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14595");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int19 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withPivotYear((int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.Chronology chronology31 = dateTime26.getChronology();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(chronology31);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.dayOfWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter22.withChronology(chronology31);
        org.joda.time.DateTimeField dateTimeField37 = chronology31.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test14596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14596");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(999);
        java.lang.Integer int8 = dateTimeFormatter7.getPivotYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test14597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14597");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean17 = dateTime11.isSupported(dateTimeFieldType16);
        org.joda.time.DateMidnight dateMidnight18 = dateTime11.toDateMidnight();
        java.util.Date date19 = dateTime11.toDate();
        int int20 = dateTime11.getDayOfMonth();
        org.joda.time.DateTime dateTime22 = dateTime11.minusMinutes(31);
        java.util.GregorianCalendar gregorianCalendar23 = dateTime11.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar23.clear(242);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 242");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 03 00:48:00 UTC 2");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(gregorianCalendar23);
    }

    @Test
    public void test14598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14598");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        java.util.Locale locale7 = null;
        java.util.Calendar calendar8 = dateTime4.toCalendar(locale7);
        calendar8.clear();
        boolean boolean11 = calendar8.after((java.lang.Object) (short) 0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        java.lang.String str21 = property20.getName();
        boolean boolean22 = property20.isLeap();
        org.joda.time.DateTime dateTime23 = property20.roundHalfFloorCopy();
        int int24 = dateTime23.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        boolean boolean26 = calendar8.before((java.lang.Object) dateTime25);
        org.joda.time.Chronology chronology27 = dateTime25.getChronology();
        boolean boolean28 = durationFieldType0.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.secondOfDay();
        org.joda.time.Chronology chronology30 = chronology27.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.millisOfDay();
        java.lang.String str32 = dateTimeField31.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "yearOfEra" + "'", str21, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfDay" + "'", str32, "millisOfDay");
    }

    @Test
    public void test14599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14599");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        java.lang.String str7 = property5.getAsShortText();
        java.lang.String str8 = property5.getName();
        java.lang.String str9 = property5.getAsText();
        org.joda.time.TimeOfDay timeOfDay10 = property5.withMinimumValue();
        org.joda.time.DateTime dateTime11 = timeOfDay10.toDateTimeToday();
        org.joda.time.DateTime dateTime13 = dateTime11.plus((long) 255);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "millisOfSecond" + "'", str8, "millisOfSecond");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100" + "'", str9, "100");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test14600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14600");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = property2.addNoWrapToCopy((int) ' ');
        org.joda.time.Chronology chronology5 = timeOfDay4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.centuryOfEra();
        int int8 = dateTimeField6.getMinimumValue(103418443094400937L);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        java.util.Locale locale15 = null;
        int int16 = property14.getMaximumShortTextLength(locale15);
        int int17 = property14.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField18 = property14.getField();
        org.joda.time.TimeOfDay timeOfDay20 = property14.addToCopy(672);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.secondOfMinute();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime dateTime30 = dateTime29.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str34 = dateTimeZone32.getShortName((long) 0);
        org.joda.time.DateTime dateTime35 = dateTime30.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        boolean boolean44 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime43);
        int int45 = dateTime35.getEra();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime48 = dateTime35.withDurationAdded(readableDuration46, (int) '4');
        org.joda.time.DateTime dateTime50 = dateTime35.withYear(365);
        org.joda.time.DateTime dateTime52 = dateTime50.withSecondOfMinute((int) ' ');
        org.joda.time.DateTime dateTime54 = dateTime52.withMinuteOfHour(22);
        int int55 = dateTime54.getSecondOfDay();
        java.lang.String str56 = dateTime54.toString();
        boolean boolean57 = timeOfDay20.equals((java.lang.Object) dateTime54);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime63 = dateTime61.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime63.minusDays(7);
        org.joda.time.DateTime dateTime67 = dateTime63.withYear(1);
        org.joda.time.Chronology chronology68 = dateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.minuteOfDay();
        org.joda.time.LocalTime localTime71 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology68);
        org.joda.time.LocalTime.Property property72 = localTime71.millisOfSecond();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime76 = dateTime74.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime78 = dateTime76.minusDays(7);
        org.joda.time.DateTime dateTime80 = dateTime76.withYear(1);
        org.joda.time.DateTime dateTime81 = dateTime80.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property82 = dateTime80.hourOfDay();
        org.joda.time.DateTime dateTime83 = property82.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime85 = dateTime83.withDayOfYear(8);
        org.joda.time.DateTime dateTime87 = dateTime85.withMillis((long) 10);
        long long88 = property72.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime85);
        java.lang.String str89 = property72.getName();
        org.joda.time.LocalTime localTime90 = property72.roundHalfFloorCopy();
        int[] intArray91 = localTime90.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray93 = dateTimeField6.addWrapPartial((org.joda.time.ReadablePartial) timeOfDay20, 118, intArray91, 572);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-01:00" + "'", str34, "-01:00");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 80552 + "'", int55 == 80552);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0365-12-31T22:22:32.100-01:00" + "'", str56, "0365-12-31T22:22:32.100-01:00");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 62134912800000L + "'", long88 == 62134912800000L);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "millisOfSecond" + "'", str89, "millisOfSecond");
        org.junit.Assert.assertNotNull(localTime90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1, 0, 0, 0]");
    }

    @Test
    public void test14601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14601");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.monthOfYear();
        int int30 = dateTime28.getSecondOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.withMillisOfDay(70);
        boolean boolean33 = timeOfDay16.equals((java.lang.Object) dateTime28);
        org.joda.time.DateTime.Property property34 = dateTime28.minuteOfDay();
        int int35 = property34.getMaximumValue();
        org.joda.time.DateTime dateTime37 = property34.addToCopy((long) 5700200);
        org.joda.time.DateTimeField dateTimeField38 = property34.getField();
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeField38.getAsShortText(29, locale40);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 85680 + "'", int30 == 85680);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1439 + "'", int35 == 1439);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "29" + "'", str41, "29");
    }

    @Test
    public void test14602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14602");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(31261939);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test14603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14603");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.withPeriodAdded(readablePeriod6, (int) '4');
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusSeconds((-3600000));
        java.lang.String str11 = timeOfDay8.toString();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay8.withHourOfDay(4);
        int[] intArray14 = timeOfDay8.getValues();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str27 = dateTimeZone25.getShortName((long) 0);
        org.joda.time.DateTime dateTime28 = dateTime23.withZone(dateTimeZone25);
        long long31 = dateTimeZone25.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        boolean boolean35 = dateTimeZone33.equals((java.lang.Object) (-3600000));
        long long37 = dateTimeZone25.getMillisKeepLocal(dateTimeZone33, 100L);
        long long41 = dateTimeZone25.convertLocalToUTC(4080100L, true, (long) 122);
        org.joda.time.DateTime dateTime42 = timeOfDay8.toDateTimeToday(dateTimeZone25);
        org.joda.time.LocalTime localTime43 = timeOfDay8.toLocalTime();
        int int44 = localTime43.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalTime localTime46 = localTime43.plus(readablePeriod45);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "T23:00:00.100" + "'", str11, "T23:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[23, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5L + "'", long31 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L + "'", long37 == 100L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 7680100L + "'", long41 == 7680100L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 82800100 + "'", int44 == 82800100);
        org.junit.Assert.assertNotNull(localTime46);
    }

    @Test
    public void test14604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14604");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        calendar24.clear();
        calendar24.clear();
        java.util.TimeZone timeZone27 = calendar24.getTimeZone();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone27);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.Chronology chronology39 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.minuteOfDay();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology39);
        org.joda.time.LocalTime.Property property43 = localTime42.millisOfSecond();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(7);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(1);
        org.joda.time.DateTime dateTime52 = dateTime51.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property53 = dateTime51.hourOfDay();
        org.joda.time.DateTime dateTime54 = property53.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfYear(8);
        org.joda.time.DateTime dateTime58 = dateTime56.withMillis((long) 10);
        long long59 = property43.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.LocalTime localTime60 = property43.withMinimumValue();
        org.joda.time.LocalTime localTime62 = property43.addNoWrapToCopy(1869);
        org.joda.time.LocalTime localTime64 = localTime62.minusSeconds(52);
        boolean boolean65 = calendar29.equals((java.lang.Object) localTime64);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644572719000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=45,SECOND=19,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1644572719000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=45,SECOND=19,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 62134912800000L + "'", long59 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test14605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14605");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.plusYears(14);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(31);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology25.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField33 = chronology32.minutes();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology35);
        org.joda.time.LocalTime localTime38 = localTime36.plusHours((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalTime localTime40 = localTime38.minus(readablePeriod39);
        org.joda.time.LocalTime localTime42 = localTime40.withMillisOfDay(1428);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay47 = dateTime44.toTimeOfDay();
        int int48 = timeOfDay47.getSecondOfMinute();
        int[] intArray49 = timeOfDay47.getValues();
        chronology32.validate((org.joda.time.ReadablePartial) localTime40, intArray49);
        org.joda.time.DateTimeField dateTimeField51 = chronology32.weekOfWeekyear();
        int int53 = dateTimeField51.getLeapAmount((-79200000L));
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = dateTimeField51.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = dateTime14.withField(dateTimeFieldType54, 742);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 742 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[23, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
    }

    @Test
    public void test14606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14606");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(4080100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalTime localTime4 = localTime1.withField(dateTimeFieldType2, 1);
        org.joda.time.LocalTime localTime6 = localTime1.plusHours(292278993);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        boolean boolean9 = localTime6.isSupported(durationFieldType8);
        org.joda.time.LocalTime localTime11 = localTime6.minusMillis(2022);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime11.plus(readablePeriod12);
        org.joda.time.DateTime dateTime14 = localTime11.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test14607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14607");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        int int5 = timeOfDay4.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusMinutes((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis(69);
        java.util.Locale locale11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = timeOfDay7.toString("yearOfEra", locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test14608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14608");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.plus(readablePeriod19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay13.minus(readablePeriod21);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay13.plusHours(70);
        java.lang.Object obj25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str29 = dateTimeZone27.getShortName((long) 0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(obj25, dateTimeZone27);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.Chronology chronology39 = dateTime34.getChronology();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime(chronology39);
        org.joda.time.DurationField durationField41 = chronology39.weeks();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = chronology39.add(readablePeriod42, 1L, 8);
        org.joda.time.DateTime dateTime46 = dateTime30.toDateTime(chronology39);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay13.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeField dateTimeField48 = chronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = chronology39.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-01:00" + "'", str29, "-01:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test14609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14609");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(0L);
        java.lang.String str2 = dateTime1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1969-12-31T23:00:00.000-01:00" + "'", str2, "1969-12-31T23:00:00.000-01:00");
    }

    @Test
    public void test14610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14610");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        boolean boolean19 = dateTimeZone17.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime20 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime dateTime30 = dateTime29.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property31 = dateTime29.hourOfDay();
        org.joda.time.DateTime dateTime32 = property31.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfYear(8);
        org.joda.time.DateTime dateTime36 = dateTime34.withMillis((long) 10);
        org.joda.time.DateTime dateTime39 = dateTime34.withDurationAdded((long) 16, 5);
        boolean boolean40 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime21.withCenturyOfEra(712);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime45 = dateTime21.withPeriodAdded(readablePeriod43, 79200000);
        boolean boolean46 = dateTime21.isAfterNow();
        org.joda.time.DateTime dateTime47 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay52 = dateTime49.toTimeOfDay();
        org.joda.time.LocalTime localTime53 = dateTime49.toLocalTime();
        java.util.Locale locale54 = null;
        java.util.Calendar calendar55 = dateTime49.toCalendar(locale54);
        calendar55.setLenient(false);
        calendar55.clear();
        calendar55.setFirstDayOfWeek(672);
        org.joda.time.LocalTime localTime61 = org.joda.time.LocalTime.fromCalendarFields(calendar55);
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay((java.lang.Object) calendar55);
        int int63 = timeOfDay62.getSecondOfMinute();
        org.joda.time.DateTime dateTime64 = dateTime21.withFields((org.joda.time.ReadablePartial) timeOfDay62);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=672,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test14611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14611");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(3600014L);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test14612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14612");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime31 = dateTime26.withYear(365);
        org.joda.time.DateTime dateTime33 = dateTime26.plusMinutes(13);
        org.joda.time.DateTime.Property property34 = dateTime26.year();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        org.joda.time.Chronology chronology44 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.weekyearOfCentury();
        org.joda.time.DurationField durationField46 = chronology44.weeks();
        org.joda.time.DurationField durationField47 = chronology44.centuries();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-292278), chronology44);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays(7);
        org.joda.time.DateTime dateTime56 = dateTime52.withYear(1);
        org.joda.time.DateTime dateTime57 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property58 = dateTime56.hourOfDay();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        boolean boolean62 = dateTimeZone60.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime63 = dateTime56.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime65 = dateTime63.withDayOfYear((int) 'a');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime68 = dateTime63.withDurationAdded(readableDuration66, (int) '4');
        boolean boolean69 = dateTime48.isBefore((org.joda.time.ReadableInstant) dateTime63);
        int int70 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test14613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14613");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfDay();
        long long40 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime38.minus((long) 1970);
        org.joda.time.DateTime dateTime45 = dateTime43.withMillisOfDay(79200);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays(7);
        org.joda.time.DateTime dateTime53 = dateTime49.withYear(1);
        org.joda.time.DateTime dateTime54 = dateTime53.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime55 = dateTime54.toDateTimeISO();
        org.joda.time.DateTime dateTime57 = dateTime55.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property58 = dateTime57.monthOfYear();
        int int59 = dateTime57.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str63 = dateTimeZone61.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime57.toMutableDateTime(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(15, (int) (short) 1);
        int int69 = dateTimeZone67.getOffset(0L);
        boolean boolean70 = dateTimeZone61.equals((java.lang.Object) int69);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime72 = dateTime43.toDateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime74 = dateTime72.plusMillis(1428);
        org.joda.time.DateTime dateTime76 = dateTime72.minusMillis(79680);
        org.joda.time.DateTime.Property property77 = dateTime72.weekOfWeekyear();
        java.lang.String str78 = property77.getAsText();
        org.joda.time.DateTime dateTime80 = property77.addToCopy((-3599001L));
        org.joda.time.DateTime dateTime81 = property77.withMinimumValue();
        org.joda.time.DateTime.Property property82 = dateTime81.weekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 85680 + "'", int59 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-01:00" + "'", str63, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 54060000 + "'", int69 == 54060000);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1" + "'", str78, "1");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test14614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14614");
        java.util.Date date6 = new java.util.Date(0, 5, 188, 1, 79200000, (-738188));
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay11 = dateTime8.toTimeOfDay();
        java.util.Date date12 = dateTime8.toDate();
        long long13 = date12.getTime();
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromDateFields(date12);
        java.lang.String str15 = date12.toGMTString();
        java.lang.String str16 = date12.toLocaleString();
        java.lang.String str17 = date12.toLocaleString();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        java.util.Date date23 = dateTime19.toDate();
        long long24 = date23.getTime();
        int int25 = date23.getDate();
        boolean boolean26 = date12.before(date23);
        java.lang.String str27 = date23.toGMTString();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.fromDateFields(date23);
        boolean boolean29 = date6.after(date23);
        int int30 = date23.getDate();
        date23.setYear(519);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Jun 27 11:56:52 UTC 2051");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str15, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str16, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str17, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 UTC 2419");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str27, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test14615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14615");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.centuryOfEra();
        int int13 = dateTimeField11.getMaximumValue((-56202854399900L));
        int int16 = dateTimeField11.getDifference(972048816035621L, 984576555165623000L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2922789 + "'", int13 == 2922789);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-311691) + "'", int16 == (-311691));
    }

    @Test
    public void test14616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14616");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime31 = property13.addCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime32 = property13.roundFloorCopy();
        org.joda.time.LocalTime localTime34 = property13.setCopy(13);
        java.lang.String str35 = property13.getName();
        org.joda.time.LocalTime localTime36 = property13.getLocalTime();
        org.joda.time.LocalTime localTime38 = property13.addWrapFieldToCopy(244);
        org.joda.time.DurationField durationField39 = property13.getRangeDurationField();
        org.joda.time.LocalTime localTime40 = property13.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "millisOfSecond" + "'", str35, "millisOfSecond");
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(localTime40);
    }

    @Test
    public void test14617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14617");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = dateTime9.plusHours(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(7);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(1);
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(chronology21);
        org.joda.time.DurationField durationField23 = chronology21.weeks();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = chronology21.add(readablePeriod24, 1L, 8);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property37 = dateTime35.hourOfDay();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        boolean boolean41 = dateTimeZone39.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime42 = dateTime35.withZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int46 = dateTimeZone44.getStandardOffset((long) (short) 0);
        long long48 = dateTimeZone39.getMillisKeepLocal(dateTimeZone44, (long) 0);
        org.joda.time.Chronology chronology49 = chronology21.withZone(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime9.toMutableDateTime(chronology21);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(3600009L, chronology21);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime51.getZone();
        org.joda.time.DateTime dateTime54 = dateTime51.withCenturyOfEra(357);
        org.joda.time.DateTime dateTime56 = dateTime54.minusYears(20);
        org.joda.time.DateTime dateTime58 = dateTime54.minusMinutes(31021256);
        org.joda.time.DateTime dateTime60 = dateTime54.plus(480100L);
        org.joda.time.Instant instant61 = dateTime60.toInstant();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3600000) + "'", int46 == (-3600000));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(instant61);
    }

    @Test
    public void test14618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14618");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.withPeriodAdded(readablePeriod6, (int) '4');
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime11 = localTime9.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime13 = localTime11.withMillisOfDay(2);
        boolean boolean14 = timeOfDay4.isAfter((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.LocalTime.Property property15 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime16 = property15.withMaximumValue();
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localTime16.getFields();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property27 = dateTime25.hourOfDay();
        org.joda.time.DateTime dateTime28 = property27.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property29 = dateTime28.weekOfWeekyear();
        java.util.Locale locale30 = null;
        int int31 = property29.getMaximumShortTextLength(locale30);
        org.joda.time.DateTime dateTime32 = property29.withMaximumValue();
        org.joda.time.DateTime dateTime33 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime34 = localTime16.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        java.lang.Object obj35 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str39 = dateTimeZone37.getShortName((long) 0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(obj35, dateTimeZone37);
        org.joda.time.DateTime dateTime41 = localTime16.toDateTimeToday(dateTimeZone37);
        org.joda.time.LocalTime localTime43 = localTime16.minusHours((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalTime localTime45 = localTime16.minus(readablePeriod44);
        org.joda.time.LocalTime localTime47 = localTime16.plusHours(99);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = localTime16.getValue(31021296);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 31021296");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-01:00" + "'", str39, "-01:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
    }

    @Test
    public void test14619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14619");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.withMinimumValue();
        org.joda.time.LocalTime localTime32 = localTime30.withMinuteOfHour(11);
        org.joda.time.LocalTime.Property property33 = localTime32.millisOfDay();
        java.lang.String str34 = localTime32.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "01:11:00.000" + "'", str34, "01:11:00.000");
    }

    @Test
    public void test14620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14620");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        int int6 = date5.getHours();
        int int7 = date5.getHours();
        java.lang.String str8 = date5.toGMTString();
        java.util.Date date10 = new java.util.Date((long) (byte) -1);
        int int11 = date10.getMinutes();
        date10.setMonth((int) (short) -1);
        date10.setMinutes(79200);
        boolean boolean16 = date5.after(date10);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime(chronology27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.DateTime.Property property37 = dateTime36.yearOfEra();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(7);
        org.joda.time.DateTime dateTime45 = dateTime41.withYear(1);
        org.joda.time.DateTime dateTime46 = dateTime45.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str50 = dateTimeZone48.getShortName((long) 0);
        org.joda.time.DateTime dateTime51 = dateTime46.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime52 = dateTime36.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime54 = dateTime36.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime36.minus(readableDuration55);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime60.minusDays(7);
        org.joda.time.DateTime dateTime64 = dateTime60.withYear(1);
        org.joda.time.DateTime dateTime65 = dateTime64.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property66 = dateTime64.hourOfDay();
        org.joda.time.DateTime dateTime67 = property66.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property68 = dateTime67.weekOfWeekyear();
        java.util.Locale locale69 = null;
        int int70 = property68.getMaximumShortTextLength(locale69);
        org.joda.time.DateTime dateTime71 = property68.withMaximumValue();
        org.joda.time.DateTime.Property property72 = dateTime71.millisOfDay();
        int int73 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime75 = dateTime36.plusMinutes(15);
        int int76 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime36.toMutableDateTimeISO();
        boolean boolean78 = date10.equals((java.lang.Object) dateTime36);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str8, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertEquals(date10.toString(), "Mon Feb 24 23:00:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-01:00" + "'", str50, "-01:00");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test14621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14621");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (short) 0, 14, 31);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalTime localTime5 = localTime3.plus(readablePeriod4);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay12 = dateTime9.toTimeOfDay();
        org.joda.time.LocalTime localTime13 = dateTime9.toLocalTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime dateTime25 = dateTime23.plusMinutes((int) (short) 100);
        java.lang.String str26 = dateTime25.toString();
        int int27 = dateTime25.getSecondOfMinute();
        boolean boolean28 = dateTime9.equals((java.lang.Object) dateTime25);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((java.lang.Object) dateTime25);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime31 = localTime29.plus(readablePeriod30);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay36 = dateTime33.toTimeOfDay();
        org.joda.time.LocalTime localTime37 = dateTime33.toLocalTime();
        int int38 = localTime37.getMillisOfSecond();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay43 = dateTime40.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property44 = timeOfDay43.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay43.withPeriodAdded(readablePeriod45, (int) '4');
        boolean boolean48 = localTime37.equals((java.lang.Object) timeOfDay47);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays(7);
        org.joda.time.DateTime dateTime56 = dateTime52.withYear(1);
        org.joda.time.Chronology chronology57 = dateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = chronology57.add(readablePeriod59, 9L, 5);
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay47.withChronologyRetainFields(chronology57);
        boolean boolean64 = localTime31.isAfter((org.joda.time.ReadablePartial) timeOfDay47);
        long long66 = chronology6.set((org.joda.time.ReadablePartial) localTime31, 3600009L);
        org.joda.time.DateTimeField dateTimeField67 = chronology6.dayOfMonth();
        java.util.Locale locale70 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long71 = dateTimeField67.set((long) 40, "java.util.GregorianCalendar[time=-1483228799900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1922,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]", locale70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.util.GregorianCalendar[time=-1483228799900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1922,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str26, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 9L + "'", long62 == 9L);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 85680100L + "'", long66 == 85680100L);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test14622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14622");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        java.util.Locale locale7 = null;
        java.util.Calendar calendar8 = dateTime4.toCalendar(locale7);
        calendar8.clear();
        boolean boolean11 = calendar8.after((java.lang.Object) (short) 0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        java.lang.String str21 = property20.getName();
        boolean boolean22 = property20.isLeap();
        org.joda.time.DateTime dateTime23 = property20.roundHalfFloorCopy();
        int int24 = dateTime23.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        boolean boolean26 = calendar8.before((java.lang.Object) dateTime25);
        org.joda.time.Chronology chronology27 = dateTime25.getChronology();
        boolean boolean28 = durationFieldType0.isSupported(chronology27);
        long long32 = chronology27.add(0L, 9L, 999);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.yearOfEra();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology27);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "yearOfEra" + "'", str21, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 8991L + "'", long32 == 8991L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test14623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14623");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime.Property property9 = dateTime7.year();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test14624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14624");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.DateTime dateTime32 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str36 = dateTimeZone34.getShortName((long) 0);
        org.joda.time.DateTime dateTime37 = dateTime32.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(7);
        org.joda.time.DateTime dateTime45 = dateTime41.withYear(1);
        boolean boolean46 = dateTime37.isBefore((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean47 = dateTime45.isEqualNow();
        org.joda.time.DateTime dateTime49 = dateTime45.minusSeconds(22);
        boolean boolean50 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.era();
        boolean boolean52 = dateTime23.isSupported(dateTimeFieldType51);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime56.minusDays(7);
        org.joda.time.DateTime dateTime60 = dateTime56.withYear(1);
        org.joda.time.DateTime dateTime61 = dateTime60.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime62 = dateTime61.toDateTimeISO();
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes((int) (short) 100);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.DateTime dateTime67 = dateTime64.plusYears(14);
        java.util.Locale locale68 = null;
        java.util.Calendar calendar69 = dateTime64.toCalendar(locale68);
        org.joda.time.DateTime dateTime71 = dateTime64.plus((long) 7);
        boolean boolean72 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime.Property property73 = dateTime23.hourOfDay();
        int int74 = property73.get();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-01:00" + "'", str36, "-01:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str65, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-62104057919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=48,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 22 + "'", int74 == 22);
    }

    @Test
    public void test14625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14625");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusHours((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime4.minusHours(17);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime10 = localTime7.withPeriodAdded(readablePeriod8, (-2337983));
        int int11 = localTime10.size();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test14626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14626");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.minus(readablePeriod3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str6 = durationFieldType5.toString();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType5, (int) (short) 1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology10);
        org.joda.time.LocalTime localTime13 = localTime11.plusHours((int) (byte) 10);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfDay();
        org.joda.time.LocalTime localTime15 = localTime8.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.LocalTime.Property property16 = localTime15.secondOfMinute();
        org.joda.time.LocalTime localTime18 = property16.addCopy(19);
        org.joda.time.LocalTime localTime19 = property16.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "seconds" + "'", str6, "seconds");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test14627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14627");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime17.plus(readableDuration22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = dateTime17.isSupported(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test14628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14628");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) (short) 0);
        boolean boolean12 = dateTime8.isEqual((long) (byte) 0);
        int int13 = dateTime8.getYearOfCentury();
        org.joda.time.DateTime.Property property14 = dateTime8.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test14629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14629");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str17 = dateTimeZone15.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime11.toMutableDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.Chronology chronology27 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.minuteOfDay();
        org.joda.time.DurationField durationField30 = chronology27.months();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) chronology27);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.secondOfMinute();
        long long36 = chronology27.add(1904342666442000L, 89330184L, (int) (byte) 0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:00" + "'", str17, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1904342666442000L + "'", long36 == 1904342666442000L);
    }

    @Test
    public void test14630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14630");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar calendar3 = builder0.build();
        java.util.Date date5 = new java.util.Date(0L);
        java.util.Calendar.Builder builder6 = builder0.setInstant(date5);
        java.util.Calendar.Builder builder8 = builder0.setInstant(328458178800816L);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder13 = builder8.setTimeOfDay(31501425, 638, 328, 46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test14631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14631");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.DateTime dateTime18 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str22 = dateTimeZone20.getShortName((long) 0);
        org.joda.time.DateTime dateTime23 = dateTime18.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime8.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime8.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime8.minus(readableDuration27);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime8.getZone();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 32770, dateTimeZone29);
        org.joda.time.LocalTime localTime32 = localTime30.minusMillis(20);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = localTime30.getValue(24);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 24");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-01:00" + "'", str22, "-01:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localTime32);
    }

    @Test
    public void test14632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14632");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime15);
        org.joda.time.DateTime dateTime17 = timeOfDay16.toDateTimeToday();
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime dateTime20 = dateTime17.withHourOfDay(23);
        boolean boolean22 = dateTime17.isAfter((long) 48);
        org.joda.time.DateTime dateTime24 = dateTime17.minusWeeks(97);
        org.joda.time.DateTime.Property property25 = dateTime24.monthOfYear();
        org.joda.time.DateTime dateTime27 = dateTime24.plusSeconds(2000);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra(30961340);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test14633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14633");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTime dateTime43 = dateTime38.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime28.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime28.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime28.minus(readableDuration47);
        int int49 = property18.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DurationField durationField50 = property18.getRangeDurationField();
        java.util.Locale locale51 = null;
        java.lang.String str52 = property18.getAsText(locale51);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime56.minusDays(7);
        org.joda.time.DateTime dateTime60 = dateTime56.withYear(1);
        org.joda.time.DateTime dateTime61 = dateTime60.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime62 = dateTime61.toDateTimeISO();
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property65 = dateTime64.monthOfYear();
        int int66 = dateTime64.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str70 = dateTimeZone68.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime64.toMutableDateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime73 = dateTime64.plusDays(100);
        org.joda.time.DateTime dateTime74 = dateTime73.withTimeAtStartOfDay();
        boolean boolean75 = property18.equals((java.lang.Object) dateTime73);
        org.joda.time.TimeOfDay timeOfDay76 = property18.getTimeOfDay();
        int int77 = property18.get();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "23" + "'", str52, "23");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 85680 + "'", int66 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-01:00" + "'", str70, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 23 + "'", int77 == 23);
    }

    @Test
    public void test14634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14634");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime7.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime7.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property37 = dateTime35.hourOfDay();
        org.joda.time.DateTime dateTime38 = property37.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property39 = dateTime38.weekOfWeekyear();
        java.util.Locale locale40 = null;
        int int41 = property39.getMaximumShortTextLength(locale40);
        org.joda.time.DateTime dateTime42 = property39.withMaximumValue();
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfDay();
        int int44 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime46 = dateTime7.plusMinutes(15);
        org.joda.time.DateTime dateTime48 = dateTime46.minusYears((-292275054));
        org.joda.time.DateTime.Property property49 = dateTime48.secondOfMinute();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay54 = dateTime51.toTimeOfDay();
        java.util.Date date55 = dateTime51.toDate();
        int int56 = date55.getHours();
        int int57 = date55.getHours();
        date55.setMonth((int) ' ');
        date55.setSeconds(14);
        org.joda.time.TimeOfDay timeOfDay62 = org.joda.time.TimeOfDay.fromDateFields(date55);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime66 = dateTime64.plusDays(24);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean68 = dateTime64.isSupported(dateTimeFieldType67);
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType67.getRangeDurationType();
        int int70 = timeOfDay62.get(dateTimeFieldType67);
        org.joda.time.DateTime.Property property71 = dateTime48.property(dateTimeFieldType67);
        org.joda.time.DateTime dateTime72 = property71.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.minus(readablePeriod73);
        org.joda.time.DateTime dateTime76 = dateTime72.withMillis((long) ' ');
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Fri Sep 01 00:00:14 UTC 1972");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test14635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14635");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(chronology10);
        org.joda.time.DurationField durationField12 = chronology10.weeks();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology10.add(readablePeriod13, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology10);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((-82799998L), chronology10);
        org.joda.time.LocalTime.Property property19 = localTime18.hourOfDay();
        org.joda.time.LocalTime localTime21 = property19.addCopy(0L);
        org.joda.time.LocalTime localTime23 = property19.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property19.getFieldType();
        org.joda.time.LocalTime localTime25 = property19.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test14636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14636");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime12 = localTime10.withSecondOfMinute(1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime12, 14, locale14);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localTime12.getFields();
        int int17 = localTime12.size();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property30 = dateTime29.monthOfYear();
        int int31 = dateTime29.getSecondOfDay();
        org.joda.time.DateTime dateTime33 = dateTime29.withMillisOfDay(70);
        org.joda.time.DateTime dateTime34 = localTime12.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekyear((int) (short) 0);
        org.joda.time.DateTime dateTime38 = dateTime36.withYear(2);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.LocalTime localTime40 = dateTime38.toLocalTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime44.minusDays(7);
        org.joda.time.DateTime dateTime48 = dateTime44.withYear(1);
        org.joda.time.Chronology chronology49 = dateTime44.getChronology();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(chronology49);
        org.joda.time.DurationField durationField51 = chronology49.weeks();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime55 = dateTime52.withField(dateTimeFieldType53, 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTime.Property property57 = dateTime55.property(dateTimeFieldType56);
        boolean boolean58 = localTime40.isSupported(dateTimeFieldType56);
        org.joda.time.LocalTime localTime60 = localTime40.minusHours(59);
        org.joda.time.LocalTime localTime62 = localTime40.plusHours(1968);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "14" + "'", str15, "14");
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 85680 + "'", int31 == 85680);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0002-01-03T08:45:01.792-01:00" + "'", str39, "0002-01-03T08:45:01.792-01:00");
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
    }

    @Test
    public void test14637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14637");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = dateTime21.isEqualNow();
        org.joda.time.DateTime dateTime25 = dateTime21.minusSeconds(22);
        org.joda.time.DateTime.Property property26 = dateTime21.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime21.withMillisOfSecond(15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay((java.lang.Object) 15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test14638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14638");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        boolean boolean18 = property8.equals((java.lang.Object) dateTime17);
        org.joda.time.DurationField durationField19 = property8.getRangeDurationField();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(chronology28);
        org.joda.time.DurationField durationField30 = chronology28.weeks();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime34 = dateTime31.withField(dateTimeFieldType32, 17);
        long long35 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime31);
        int int36 = dateTime31.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-2020L) + "'", long35 == (-2020L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 42 + "'", int36 == 42);
    }

    @Test
    public void test14639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14639");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DurationField durationField13 = chronology8.millis();
        org.joda.time.Chronology chronology14 = chronology8.withUTC();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.DateTime dateTime16 = timeOfDay15.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test14640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14640");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.withPeriodAdded(readablePeriod6, (int) '4');
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusSeconds((-3600000));
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay8.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.TimeOfDay.Property property14 = timeOfDay8.secondOfMinute();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay19 = dateTime16.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property20 = timeOfDay19.millisOfSecond();
        java.util.Locale locale21 = null;
        int int22 = property20.getMaximumShortTextLength(locale21);
        int int23 = property20.get();
        int int24 = property20.get();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.LocalTime localTime30 = dateTime26.toLocalTime();
        int int31 = property20.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime33 = dateTime26.withYearOfCentury(24);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int38 = dateTimeZone36.getStandardOffset((long) (short) 0);
        long long41 = dateTimeZone36.convertLocalToUTC(480100L, false);
        java.lang.String str43 = dateTimeZone36.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1483228799900L), dateTimeZone36);
        org.joda.time.DateTime dateTime46 = dateTime33.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTime();
        int int48 = property14.compareTo((org.joda.time.ReadableInstant) dateTime46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay50 = property14.setCopy(61);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3600000) + "'", int38 == (-3600000));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 4080100L + "'", long41 == 4080100L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-01:00" + "'", str43, "-01:00");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test14641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14641");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        java.util.Date date6 = dateTime2.toDate();
        java.time.Instant instant7 = date6.toInstant();
        int int8 = date6.getSeconds();
        java.util.Calendar.Builder builder9 = builder0.setInstant(date6);
        java.util.Calendar.Builder builder13 = builder0.setWeekDate(3600096, 32772, 22);
        java.util.Calendar.Builder builder16 = builder0.set(0, 83280);
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder18 = builder0.setLocale(locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test14642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14642");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.era();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(358);
        org.joda.time.Chronology chronology16 = chronology8.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField17 = chronology8.days();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = chronology8.add(readablePeriod18, 1644572306614L, 683);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572306614L + "'", long21 == 1644572306614L);
    }

    @Test
    public void test14643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14643");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withYearOfCentury(22);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str20 = dateTimeZone18.getShortName((long) 0);
        org.joda.time.DateTime dateTime21 = dateTime16.withZone(dateTimeZone18);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str24 = dateTimeFieldType23.toString();
        boolean boolean25 = localTime22.isSupported(dateTimeFieldType23);
        org.joda.time.DateTime dateTime27 = dateTime6.withField(dateTimeFieldType23, 3);
        java.lang.String str28 = dateTimeFieldType23.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1483228799900L) + "'", long7 == (-1483228799900L));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:00" + "'", str20, "-01:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "monthOfYear" + "'", str24, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "monthOfYear" + "'", str28, "monthOfYear");
    }

    @Test
    public void test14644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14644");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 24, chronology11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        int int20 = property19.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property19.addToCopy(100);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        boolean boolean29 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) timeOfDay27);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay27.withSecondOfMinute(12);
        int[] intArray33 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay27, 1L);
        boolean boolean34 = dateTimeFieldType0.isSupported(chronology11);
        org.joda.time.DateTimeField dateTimeField35 = chronology11.millisOfDay();
        org.joda.time.DurationField durationField36 = dateTimeField35.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNull(durationField36);
    }

    @Test
    public void test14645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14645");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay7 = property5.withMaximumValue();
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addToCopy(1380);
        int int11 = timeOfDay10.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
    }

    @Test
    public void test14646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14646");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalTime localTime5 = localTime2.withFieldAdded(durationFieldType3, (int) (byte) 0);
        int int6 = localTime5.getHourOfDay();
        int int7 = localTime5.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        boolean boolean9 = localTime5.isSupported(dateTimeFieldType8);
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(3600000L);
        int[] intArray12 = timeOfDay11.getValues();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(7);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(1);
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(chronology21);
        org.joda.time.DurationField durationField23 = chronology21.weeks();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology21);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay11.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeField dateTimeField26 = chronology21.clockhourOfDay();
        boolean boolean27 = dateTimeFieldType8.isSupported(chronology21);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test14647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14647");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime32 = localTime30.withMillisOfSecond(13);
        org.joda.time.DateTime dateTime33 = localTime32.toDateTimeToday();
        org.joda.time.LocalTime localTime35 = localTime32.plusMillis((-1));
        org.joda.time.LocalTime.Property property36 = localTime32.millisOfSecond();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay41 = dateTime38.toTimeOfDay();
        org.joda.time.LocalTime localTime42 = dateTime38.toLocalTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(7);
        org.joda.time.DateTime dateTime50 = dateTime46.withYear(1);
        org.joda.time.DateTime dateTime51 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime52 = dateTime51.toDateTimeISO();
        org.joda.time.DateTime dateTime54 = dateTime52.plusMinutes((int) (short) 100);
        java.lang.String str55 = dateTime54.toString();
        int int56 = dateTime54.getSecondOfMinute();
        boolean boolean57 = dateTime38.equals((java.lang.Object) dateTime54);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((java.lang.Object) dateTime54);
        org.joda.time.DateTime.Property property59 = dateTime54.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime54.toMutableDateTimeISO();
        boolean boolean61 = localTime32.equals((java.lang.Object) mutableDateTime60);
        org.joda.time.Chronology chronology62 = localTime32.getChronology();
        org.joda.time.LocalTime localTime64 = localTime32.minusSeconds(658);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str55, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(localTime64);
    }

    @Test
    public void test14648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14648");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        java.lang.String str7 = property5.getAsText();
        org.joda.time.TimeOfDay timeOfDay8 = property5.getTimeOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertNotNull(timeOfDay8);
    }

    @Test
    public void test14649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14649");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromDateFields(date0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay7 = dateTime4.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.millisOfSecond();
        int int9 = property8.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addToCopy(100);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        boolean boolean18 = timeOfDay11.isEqual((org.joda.time.ReadablePartial) timeOfDay16);
        int int19 = timeOfDay16.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = timeOfDay16.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay16.plusMinutes(79680);
        int int23 = localTime2.compareTo((org.joda.time.ReadablePartial) timeOfDay22);
        org.joda.time.LocalTime.Property property24 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime25 = property24.withMinimumValue();
        org.joda.time.LocalTime localTime26 = property24.roundCeilingCopy();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTimeISO();
        org.joda.time.DateTime dateTime38 = dateTime36.plusMinutes((int) (short) 100);
        java.lang.String str39 = dateTime38.toString();
        int int40 = dateTime38.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime38.getZone();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now(dateTimeZone41);
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localTime26.toDateTimeToday(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int50 = dateTimeZone48.getStandardOffset((long) (short) 0);
        long long53 = dateTimeZone48.convertLocalToUTC(480100L, false);
        java.lang.String str55 = dateTimeZone48.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime60.minusDays(7);
        org.joda.time.DateTime dateTime64 = dateTime60.withYear(1);
        org.joda.time.DateTime dateTime65 = dateTime64.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property66 = dateTime64.hourOfDay();
        org.joda.time.DateTime dateTime67 = property66.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str71 = dateTimeZone69.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime67.toMutableDateTime(dateTimeZone69);
        long long74 = dateTimeZone48.getMillisKeepLocal(dateTimeZone69, 0L);
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime(82882800L, dateTimeZone48);
        long long77 = dateTimeZone41.getMillisKeepLocal(dateTimeZone48, (long) 147);
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay(dateTimeZone48);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Feb 11 09:45:20 UTC 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str39, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3600000) + "'", int50 == (-3600000));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 4080100L + "'", long53 == 4080100L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-01:00" + "'", str55, "-01:00");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-01:00" + "'", str71, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 147L + "'", long77 == 147L);
    }

    @Test
    public void test14650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14650");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(29, 516, 999, 85680, 31321247);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 85680 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14651");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        int int13 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime11.plus(readableDuration17);
        int int19 = dateTime18.getDayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime18.withYear(31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime18.withDate(572, 4260000, 365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4260000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test14652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14652");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        int int10 = property9.get();
        org.joda.time.DateTime dateTime11 = property9.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime11.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.minuteOfDay();
        org.joda.time.DurationField durationField25 = chronology22.months();
        boolean boolean26 = dateTimeFieldType13.isSupported(chronology22);
        java.lang.String str27 = chronology22.toString();
        boolean boolean28 = dateTimeZone12.equals((java.lang.Object) str27);
        long long31 = dateTimeZone12.convertLocalToUTC((-82798570L), true);
        java.lang.String str32 = dateTimeZone12.toString();
        int int34 = dateTimeZone12.getOffsetFromLocal((-86399930L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[-01:00]" + "'", str27, "ISOChronology[-01:00]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-79198570L) + "'", long31 == (-79198570L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-01:00" + "'", str32, "-01:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3600000) + "'", int34 == (-3600000));
    }

    @Test
    public void test14653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14653");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime14 = property12.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime15 = property12.getDateTime();
        org.joda.time.DateTimeField dateTimeField16 = property12.getField();
        org.joda.time.DateTime dateTime17 = property12.roundHalfEvenCopy();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property12.getAsText(locale18);
        org.joda.time.DateTime dateTime21 = property12.addToCopy(14);
        org.joda.time.DateTime dateTime23 = dateTime21.minusSeconds(54060000);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.plusDays(24);
        boolean boolean28 = dateTime23.isBefore((org.joda.time.ReadableInstant) dateTime27);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "December" + "'", str19, "December");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test14654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14654");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.add(11, 11);
        java.lang.String str17 = gregorianCalendar13.getCalendarType();
        gregorianCalendar13.set((int) (byte) -1, 7, 99);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar13.set(85680, 34826508);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "gregory" + "'", str17, "gregory");
    }

    @Test
    public void test14655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14655");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((java.lang.Object) (-2143151982515L), chronology9);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test14656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14656");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology10.add(readablePeriod16, (long) 100, 17);
        org.joda.time.DurationField durationField20 = chronology10.months();
        org.joda.time.DurationField durationField21 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology10.centuryOfEra();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay28 = dateTime25.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property29 = timeOfDay28.millisOfSecond();
        int int30 = property29.getMinimumValue();
        java.lang.String str31 = property29.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay32 = property29.getTimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = timeOfDay32.getFieldTypes();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        org.joda.time.Chronology chronology44 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.weekyearOfCentury();
        long long47 = dateTimeField45.roundHalfEven(480100L);
        boolean boolean49 = dateTimeField45.isLeap((-82800000L));
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay54 = dateTime51.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property55 = timeOfDay54.millisOfSecond();
        int int56 = property55.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay58 = property55.addToCopy(100);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime62 = dateTime60.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay63 = dateTime60.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property64 = timeOfDay63.millisOfSecond();
        boolean boolean65 = timeOfDay58.isEqual((org.joda.time.ReadablePartial) timeOfDay63);
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay63.withSecondOfMinute(12);
        int int68 = dateTimeField45.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay67);
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay67.withMinuteOfHour(15);
        org.joda.time.Chronology chronology71 = timeOfDay70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay73 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (-1), chronology71);
        int int75 = timeOfDay73.getValue(0);
        int int76 = timeOfDay73.getMinuteOfHour();
        int[] intArray77 = timeOfDay73.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray79 = dateTimeField23.addWrapPartial((org.joda.time.ReadablePartial) timeOfDay32, 84931100, intArray77, 2840);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100" + "'", str31, "100");
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3600000L + "'", long47 == 3600000L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 23 + "'", int75 == 23);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 59 + "'", int76 == 59);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[23, 59, 59, 999]");
    }

    @Test
    public void test14657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14657");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        long long16 = dateTimeField14.roundFloor((-9469100436480000L));
        int int18 = dateTimeField14.getMaximumValue((long) 30961509);
        java.lang.String str20 = dateTimeField14.getAsShortText(349200000L);
        java.lang.String str22 = dateTimeField14.getAsText(111603092881000L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-9469100436480000L) + "'", long16 == (-9469100436480000L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 999 + "'", int18 == 999);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
    }

    @Test
    public void test14658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14658");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = dateTime21.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime21.getZone();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now(dateTimeZone24);
        org.joda.time.LocalTime localTime27 = localTime25.plusHours((-292278));
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = localTime27.getFields();
        org.joda.time.LocalTime.Property property29 = localTime27.minuteOfHour();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.Chronology chronology38 = dateTime33.getChronology();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        boolean boolean42 = dateTimeZone40.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology43 = chronology38.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField44 = chronology38.dayOfYear();
        org.joda.time.DurationField durationField45 = chronology38.millis();
        org.joda.time.DateTimeField dateTimeField46 = chronology38.millisOfDay();
        long long50 = chronology38.add(1644572216639L, 31525459285680L, 3);
        org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay((java.lang.Object) localTime27, chronology38);
        java.lang.String str52 = localTime27.toString();
        org.joda.time.Chronology chronology53 = localTime27.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 96220950073679L + "'", long50 == 96220950073679L);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "02:45:20.240" + "'", str52, "02:45:20.240");
        org.junit.Assert.assertNotNull(chronology53);
    }

    @Test
    public void test14659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14659");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(85680);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) 31, locale3);
        long long7 = dateTimeZone1.convertLocalToUTC((long) 115, false);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:01:25.680" + "'", str4, "+00:01:25.680");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-85565L) + "'", long7 == (-85565L));
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test14660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14660");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withMillisOfSecond((int) '#');
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.Chronology chronology30 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(7, (int) ' ', chronology30);
        boolean boolean34 = timeOfDay17.isAfter((org.joda.time.ReadablePartial) timeOfDay33);
        int[] intArray35 = timeOfDay17.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = timeOfDay17.toString("T23:00:17.010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[23, 35, 0, 200]");
    }

    @Test
    public void test14661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14661");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfDay();
        long long40 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime38.plusWeeks(2022);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(7);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(1);
        org.joda.time.Chronology chronology52 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime38.toMutableDateTime(chronology52);
        org.joda.time.DateTimeField dateTimeField55 = chronology52.yearOfCentury();
        int int57 = dateTimeField55.getLeapAmount(1167613200000L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test14662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14662");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(62134912800000L);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime4 = localTime1.withPeriodAdded(readablePeriod2, 79200);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay10 = dateTime7.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property11 = timeOfDay10.millisOfSecond();
        org.joda.time.DurationField durationField12 = property11.getDurationField();
        java.lang.String str13 = property11.getAsShortText();
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        int int15 = property11.get();
        org.joda.time.TimeOfDay timeOfDay16 = property11.withMaximumValue();
        org.joda.time.LocalTime localTime17 = timeOfDay16.toLocalTime();
        long long19 = chronology5.set((org.joda.time.ReadablePartial) timeOfDay16, (-620580L));
        int int20 = timeOfDay16.size();
        int int21 = timeOfDay16.getMinuteOfHour();
        org.joda.time.LocalTime localTime22 = timeOfDay16.toLocalTime();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100" + "'", str13, "100");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3599001L) + "'", long19 == (-3599001L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test14663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14663");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        java.lang.String str18 = timeOfDay17.toString();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours(2);
        int[] intArray21 = timeOfDay20.getValues();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plusSeconds(36);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.DateTime dateTime32 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property33 = dateTime31.hourOfDay();
        org.joda.time.DateTime dateTime34 = property33.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfYear(8);
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        long long38 = dateTime34.getMillis();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone40.getName((-1L), locale45);
        long long49 = dateTimeZone40.adjustOffset((long) (short) 10, true);
        org.joda.time.DateTime dateTime50 = dateTime34.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime51 = timeOfDay23.toDateTimeToday(dateTimeZone40);
        int int53 = dateTimeZone40.getOffsetFromLocal(31795199986L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "T23:35:00.200" + "'", str18, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 35, 0, 200]");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-62104064400000L) + "'", long38 == (-62104064400000L));
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-01:00" + "'", str46, "-01:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3600000) + "'", int53 == (-3600000));
    }

    @Test
    public void test14664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14664");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property25 = dateTime23.hourOfDay();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        boolean boolean29 = dateTimeZone27.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime30 = dateTime23.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int34 = dateTimeZone32.getStandardOffset((long) (short) 0);
        long long36 = dateTimeZone27.getMillisKeepLocal(dateTimeZone32, (long) 0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay42 = dateTime39.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property43 = timeOfDay42.millisOfSecond();
        java.util.Locale locale44 = null;
        int int45 = property43.getMaximumShortTextLength(locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean47 = property43.equals((java.lang.Object) dateTimeFieldType46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property43.getFieldType();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays(7);
        org.joda.time.DateTime dateTime56 = dateTime52.withYear(1);
        org.joda.time.Chronology chronology57 = dateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.hourOfHalfday();
        org.joda.time.Chronology chronology61 = chronology57.withUTC();
        boolean boolean62 = dateTimeFieldType48.isSupported(chronology61);
        java.lang.String str63 = dateTimeFieldType48.toString();
        int int64 = dateTime37.get(dateTimeFieldType48);
        org.joda.time.DurationFieldType durationFieldType65 = dateTimeFieldType48.getRangeDurationType();
        org.joda.time.TimeOfDay.Property property66 = timeOfDay13.property(dateTimeFieldType48);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime71 = dateTime69.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime73 = dateTime71.minusDays(7);
        org.joda.time.DateTime dateTime75 = dateTime71.withYear(1);
        org.joda.time.Chronology chronology76 = dateTime71.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.minuteOfDay();
        org.joda.time.LocalTime localTime79 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology76);
        org.joda.time.LocalTime.Property property80 = localTime79.millisOfSecond();
        org.joda.time.LocalTime localTime81 = property80.roundCeilingCopy();
        org.joda.time.LocalTime localTime82 = property80.getLocalTime();
        org.joda.time.LocalTime localTime83 = property80.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime85 = property80.addCopy(79680);
        org.joda.time.LocalTime localTime86 = property80.roundHalfEvenCopy();
        boolean boolean87 = property66.equals((java.lang.Object) localTime86);
        org.joda.time.TimeOfDay timeOfDay88 = property66.withMinimumValue();
        org.joda.time.TimeOfDay.Property property89 = timeOfDay88.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3600000) + "'", int34 == (-3600000));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "millisOfSecond" + "'", str63, "millisOfSecond");
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 349 + "'", int64 == 349);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(timeOfDay88);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test14665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14665");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(82800);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withDefaultYear((-35748));
        boolean boolean12 = dateTimeFormatter11.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter11.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(dateTimePrinter13);
    }

    @Test
    public void test14666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14666");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.add(11, 11);
        gregorianCalendar13.clear();
        boolean boolean18 = gregorianCalendar13.isWeekDateSupported();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str31 = dateTimeZone29.getShortName((long) 0);
        org.joda.time.DateTime dateTime32 = dateTime27.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        boolean boolean41 = dateTime32.isBefore((org.joda.time.ReadableInstant) dateTime40);
        java.util.Locale locale42 = null;
        java.util.Calendar calendar43 = dateTime40.toCalendar(locale42);
        calendar43.set(14, 9, 2);
        boolean boolean48 = calendar43.isWeekDateSupported();
        calendar43.set(122, 24352386, 1200000);
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.fromCalendarFields(calendar43);
        calendar43.setMinimalDaysInFirstWeek(31021460);
        boolean boolean56 = gregorianCalendar13.before((java.lang.Object) 31021460);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-01:00" + "'", str31, "-01:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=64087267216080100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=31021460,ERA=1,YEAR=2032814,MONTH=7,WEEK_OF_YEAR=34,WEEK_OF_MONTH=4,DAY_OF_MONTH=26,DAY_OF_YEAR=238,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test14667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14667");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField10 = chronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.year();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.plus(readablePeriod13);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test14668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14668");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.add(11, 11);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.monthOfYear();
        int int30 = dateTime28.getSecondOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.withMillisOfDay(70);
        boolean boolean33 = gregorianCalendar13.after((java.lang.Object) dateTime28);
        java.time.Instant instant34 = gregorianCalendar13.toInstant();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay39 = dateTime36.toTimeOfDay();
        org.joda.time.LocalTime localTime40 = dateTime36.toLocalTime();
        java.util.Locale locale41 = null;
        java.util.Calendar calendar42 = dateTime36.toCalendar(locale41);
        calendar42.setLenient(false);
        java.util.TimeZone timeZone45 = calendar42.getTimeZone();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        gregorianCalendar13.setTimeZone(timeZone45);
        long long50 = gregorianCalendar13.getTimeInMillis();
        gregorianCalendar13.setTimeInMillis((-1727999001L));
        gregorianCalendar13.set(31312, 31081121, 800, 266, 2000, 85715);
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 85680 + "'", int30 == 85680);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644572720519,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=45,SECOND=20,MILLISECOND=519,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-62104018319900L) + "'", long50 == (-62104018319900L));
        org.junit.Assert.assertNotNull(localTime60);
    }

    @Test
    public void test14669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14669");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime8.hourOfDay();
        int int11 = property10.get();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime12.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.minuteOfDay();
        org.joda.time.DurationField durationField26 = chronology23.months();
        boolean boolean27 = dateTimeFieldType14.isSupported(chronology23);
        java.lang.String str28 = chronology23.toString();
        boolean boolean29 = dateTimeZone13.equals((java.lang.Object) str28);
        long long32 = dateTimeZone13.convertLocalToUTC((-82798570L), true);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(68613944760000L, dateTimeZone13);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(7);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(1);
        org.joda.time.DateTime dateTime42 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str46 = dateTimeZone44.getShortName((long) 0);
        org.joda.time.DateTime dateTime47 = dateTime42.withZone(dateTimeZone44);
        long long50 = dateTimeZone44.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        boolean boolean54 = dateTimeZone52.equals((java.lang.Object) (-3600000));
        long long56 = dateTimeZone44.getMillisKeepLocal(dateTimeZone52, 100L);
        long long60 = dateTimeZone44.convertLocalToUTC(4080100L, true, (long) 122);
        boolean boolean61 = localTime33.equals((java.lang.Object) 122);
        org.joda.time.LocalTime localTime63 = localTime33.plusSeconds(2000);
        org.joda.time.LocalTime localTime65 = localTime63.minusMinutes(516);
        int int66 = localTime65.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[-01:00]" + "'", str28, "ISOChronology[-01:00]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-79198570L) + "'", long32 == (-79198570L));
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-01:00" + "'", str46, "-01:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 5L + "'", long50 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L + "'", long56 == 100L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 7680100L + "'", long60 == 7680100L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test14670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14670");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime31 = property13.addCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime33 = property13.addNoWrapToCopy(16);
        org.joda.time.LocalTime localTime34 = property13.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getDurationType();
        java.lang.String str37 = durationFieldType36.toString();
        java.lang.String str38 = durationFieldType36.getName();
        org.joda.time.LocalTime localTime40 = localTime34.withFieldAdded(durationFieldType36, (-738188));
        java.lang.String str41 = durationFieldType36.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "minutes" + "'", str37, "minutes");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "minutes" + "'", str38, "minutes");
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "minutes" + "'", str41, "minutes");
    }

    @Test
    public void test14671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14671");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.Chronology chronology13 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withChronology(chronology13);
        int int17 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatter2.getParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.minuteOfDay();
        org.joda.time.DurationField durationField31 = chronology28.months();
        boolean boolean32 = dateTimeFieldType19.isSupported(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withChronology(chronology28);
        org.joda.time.DateTimeField dateTimeField34 = chronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology28.dayOfMonth();
        org.joda.time.DurationField durationField36 = chronology28.minutes();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2000 + "'", int17 == 2000);
        org.junit.Assert.assertNull(dateTimeParser18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test14672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14672");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        long long11 = property9.remainder();
        org.joda.time.Interval interval12 = property9.toInterval();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property9.getAsText(locale13);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyearOfCentury();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime27 = localTime25.withSecondOfMinute(1);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localTime27, 14, locale29);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = localTime27.getFields();
        int int32 = localTime27.size();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.DateTime dateTime41 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime42 = dateTime41.toDateTimeISO();
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property45 = dateTime44.monthOfYear();
        int int46 = dateTime44.getSecondOfDay();
        org.joda.time.DateTime dateTime48 = dateTime44.withMillisOfDay(70);
        org.joda.time.DateTime dateTime49 = localTime27.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = dateTime49.withWeekyear((int) (short) 0);
        long long52 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime51);
        int int53 = property9.getMinimumValue();
        org.joda.time.DateTime dateTime54 = property9.getDateTime();
        org.joda.time.DateTime dateTime55 = property9.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 480100L + "'", long11 == 480100L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "22" + "'", str14, "22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "14" + "'", str30, "14");
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 85680 + "'", int46 == 85680);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 17485L + "'", long52 == 17485L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test14673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14673");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        java.lang.String str10 = property5.getAsString();
        org.joda.time.TimeOfDay timeOfDay11 = property5.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100" + "'", str10, "100");
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test14674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14674");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.secondOfDay();
        boolean boolean23 = property8.equals((java.lang.Object) dateTimeField22);
        org.joda.time.DurationField durationField24 = property8.getRangeDurationField();
        org.joda.time.DateTime dateTime25 = property8.getDateTime();
        java.lang.String str26 = property8.toString();
        java.lang.String str27 = property8.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[yearOfEra]" + "'", str26, "Property[yearOfEra]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "yearOfEra" + "'", str27, "yearOfEra");
    }

    @Test
    public void test14675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14675");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setDate((int) (short) 100, (int) (byte) 100, 13);
        java.util.Calendar.Builder builder10 = builder2.setTimeOfDay(18, 16, 9511);
        java.util.Locale locale11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test14676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14676");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay17 = dateTime14.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.millisOfSecond();
        int int19 = property18.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay21 = property18.addToCopy(100);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.millisOfSecond();
        boolean boolean28 = timeOfDay21.isEqual((org.joda.time.ReadablePartial) timeOfDay26);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay21.withMinuteOfHour((int) '#');
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime dateTime39 = dateTime38.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property43 = dateTime42.monthOfYear();
        org.joda.time.DateTime dateTime45 = property43.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime46 = property43.getDateTime();
        org.joda.time.DateTime dateTime47 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = dateTime12.toDateTimeISO();
        int int50 = dateTime49.getDayOfWeek();
        int int51 = dateTime49.getSecondOfMinute();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime57.minusDays(7);
        org.joda.time.DateTime dateTime61 = dateTime57.withYear(1);
        org.joda.time.Chronology chronology62 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.minuteOfDay();
        boolean boolean65 = durationFieldType53.isSupported(chronology62);
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((long) 3, chronology62);
        org.joda.time.LocalTime.Property property67 = localTime66.secondOfMinute();
        org.joda.time.DateTime dateTime68 = dateTime49.withFields((org.joda.time.ReadablePartial) localTime66);
        org.joda.time.LocalTime localTime70 = localTime66.minusMillis(57660000);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20 + "'", int51 == 20);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localTime70);
    }

    @Test
    public void test14677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14677");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        int int8 = dateTime1.getSecondOfDay();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime1.withPeriodAdded(readablePeriod9, (int) (short) 100);
        java.util.GregorianCalendar gregorianCalendar12 = dateTime1.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime1.withCenturyOfEra((-2021));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2021 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 82800 + "'", int8 == 82800);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
    }

    @Test
    public void test14678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14678");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(190, (int) (short) -1, 458);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 190 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14679");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay9 = dateTime6.toTimeOfDay();
        int int10 = timeOfDay9.getSecondOfMinute();
        int[] intArray11 = timeOfDay9.getValues();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime13 = localTime12.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime16 = localTime12.withPeriodAdded(readablePeriod14, (int) 'a');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay21 = dateTime18.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        int int23 = property22.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay25 = property22.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property28 = timeOfDay25.hourOfDay();
        int int29 = timeOfDay25.size();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay34 = dateTime31.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property35 = timeOfDay34.millisOfSecond();
        org.joda.time.DurationField durationField36 = property35.getDurationField();
        java.lang.String str37 = property35.getAsShortText();
        java.util.Locale locale38 = null;
        int int39 = property35.getMaximumTextLength(locale38);
        org.joda.time.TimeOfDay timeOfDay40 = property35.getTimeOfDay();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay45 = dateTime42.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property46 = timeOfDay45.millisOfSecond();
        int int47 = property46.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay49 = property46.addToCopy(100);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay54 = dateTime51.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property55 = timeOfDay54.millisOfSecond();
        boolean boolean56 = timeOfDay49.isEqual((org.joda.time.ReadablePartial) timeOfDay54);
        int[] intArray57 = timeOfDay49.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = timeOfDay49.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType59.getDurationType();
        boolean boolean61 = timeOfDay40.isSupported(dateTimeFieldType59);
        boolean boolean62 = timeOfDay25.isSupported(dateTimeFieldType59);
        boolean boolean63 = localTime12.isSupported(dateTimeFieldType59);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay68 = dateTime65.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property69 = timeOfDay68.millisOfSecond();
        java.util.Locale locale70 = null;
        int int71 = property69.getMaximumShortTextLength(locale70);
        int int72 = property69.get();
        int int73 = property69.get();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime77 = dateTime75.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay78 = dateTime75.toTimeOfDay();
        org.joda.time.LocalTime localTime79 = dateTime75.toLocalTime();
        int int80 = property69.compareTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Chronology chronology81 = dateTime75.getChronology();
        org.joda.time.TimeOfDay timeOfDay82 = new org.joda.time.TimeOfDay((java.lang.Object) localTime12, chronology81);
        org.joda.time.TimeOfDay timeOfDay83 = timeOfDay9.withChronologyRetainFields(chronology81);
        org.joda.time.Chronology chronology84 = timeOfDay83.getChronology();
        java.util.Locale locale85 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) timeOfDay83, locale85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[23, 0, 0, 100]");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100" + "'", str37, "100");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(timeOfDay78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(timeOfDay83);
        org.junit.Assert.assertNotNull(chronology84);
    }

    @Test
    public void test14680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14680");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.secondOfMinute();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property27 = dateTime26.monthOfYear();
        int int28 = dateTime26.getSecondOfDay();
        org.joda.time.DateTime dateTime30 = dateTime26.withMillisOfDay(70);
        org.joda.time.DateTime dateTime32 = dateTime26.withMillis(111600000L);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        int int34 = property14.compareTo((org.joda.time.ReadableInstant) dateTime32);
        int int35 = property14.getMaximumValueOverall();
        java.lang.String str36 = property14.getAsText();
        org.joda.time.DateTimeField dateTimeField37 = property14.getField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 85680 + "'", int28 == 85680);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 59 + "'", int35 == 59);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "20" + "'", str36, "20");
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test14681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14681");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyearOfCentury();
        long long13 = dateTimeField11.roundHalfEven(480100L);
        boolean boolean15 = dateTimeField11.isLeap((-82800000L));
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.millisOfSecond();
        int int22 = property21.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay24 = property21.addToCopy(100);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.millisOfSecond();
        boolean boolean31 = timeOfDay24.isEqual((org.joda.time.ReadablePartial) timeOfDay29);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay29.withSecondOfMinute(12);
        int int34 = dateTimeField11.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay33);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay33.withMinuteOfHour(15);
        org.joda.time.Chronology chronology37 = timeOfDay36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.weekyears();
        org.joda.time.DurationField durationField39 = durationFieldType1.getField(chronology37);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime43.minusDays(7);
        org.joda.time.DateTime dateTime47 = dateTime43.withYear(1);
        org.joda.time.Chronology chronology48 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.weekyearOfCentury();
        org.joda.time.DurationField durationField50 = chronology48.weeks();
        org.joda.time.DurationField durationField51 = chronology48.centuries();
        org.joda.time.DurationField durationField52 = durationFieldType1.getField(chronology48);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray55 = chronology48.get(readablePeriod53, (-62134909199000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3600000L + "'", long13 == 3600000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test14682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14682");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(3600000L);
        int[] intArray2 = timeOfDay1.getValues();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(chronology11);
        org.joda.time.DurationField durationField13 = chronology11.weeks();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology11);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay1.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeField dateTimeField16 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.year();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14683");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        java.util.Date date19 = dateTime15.toDate();
        long long20 = date19.getTime();
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromDateFields(date19);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime dateTime30 = dateTime29.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str34 = dateTimeZone32.getShortName((long) 0);
        org.joda.time.DateTime dateTime35 = dateTime30.withZone(dateTimeZone32);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(dateTimeZone32);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone32.getName((long) 712, locale38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime41 = timeOfDay21.toDateTimeToday(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay21.withHourOfDay(0);
        org.joda.time.Chronology chronology44 = timeOfDay21.getChronology();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays(7);
        org.joda.time.DateTime dateTime52 = dateTime48.withYear(1);
        org.joda.time.Chronology chronology53 = dateTime48.getChronology();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean56 = localTime54.isSupported(dateTimeFieldType55);
        org.joda.time.LocalTime localTime58 = localTime54.minusMinutes(13);
        int[] intArray59 = localTime58.getValues();
        chronology8.validate((org.joda.time.ReadablePartial) timeOfDay21, intArray59);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-01:00" + "'", str34, "-01:00");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-01:00" + "'", str39, "-01:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[8, 32, 20, 919]");
    }

    @Test
    public void test14684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14684");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setLenient(true);
        int int14 = calendar7.getLeastMaximum(16);
        calendar7.set(0, 13, (int) (byte) -1);
        long long19 = calendar7.getTimeInMillis();
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromCalendarFields(calendar7);
        java.util.Date date21 = calendar7.getTime();
        int int22 = calendar7.getFirstDayOfWeek();
        calendar7.setLenient(true);
        int int26 = calendar7.getLeastMaximum(0);
        // The following exception was thrown during execution in test generation
        try {
            calendar7.add(122, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-62133180719900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=6,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1200000 + "'", int14 == 1200000);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62133180719900L) + "'", long19 == (-62133180719900L));
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Jan 30 23:08:00 UTC 1");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test14685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14685");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((-9469100436480000L));
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test14686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14686");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.DateTime.Property property21 = dateTime17.millisOfDay();
        org.joda.time.DateTime dateTime23 = property21.addToCopy((long) 2000);
        int int24 = dateTime23.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime26 = dateTime23.plusMillis(918);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test14687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14687");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTime dateTime43 = dateTime38.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime28.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime28.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime28.minus(readableDuration47);
        int int49 = property18.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DurationField durationField50 = property18.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay51 = property18.withMinimumValue();
        java.util.Locale locale52 = null;
        java.lang.String str53 = property18.getAsShortText(locale52);
        java.lang.String str54 = property18.getAsText();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "23" + "'", str53, "23");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "23" + "'", str54, "23");
    }

    @Test
    public void test14688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14688");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int2 = localTime1.getSecondOfMinute();
        int int3 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime localTime5 = localTime1.plusHours(1);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        boolean boolean9 = dateTimeZone7.equals((java.lang.Object) (-3600000));
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone7.getShortName(10L, locale11);
        org.joda.time.DateTime dateTime13 = localTime5.toDateTimeToday(dateTimeZone7);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        long long25 = dateTimeField23.remainder(31525459285680L);
        int int27 = dateTimeField23.get(31529280100L);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.Chronology chronology37 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.minuteOfDay();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology37);
        org.joda.time.LocalTime.Property property41 = localTime40.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property41.addCopy(62134912800000L);
        org.joda.time.LocalTime localTime45 = localTime43.withMillisOfDay(12);
        int int46 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localTime43);
        long long48 = dateTimeField23.roundHalfCeiling((long) 922);
        int int49 = dateTime13.get(dateTimeField23);
        int int50 = dateTime13.getWeekyear();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 82885680L + "'", long25 == 82885680L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 31 + "'", int27 == 31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 31 + "'", int46 == 31);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3600000L + "'", long48 == 3600000L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 11 + "'", int49 == 11);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
    }

    @Test
    public void test14689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14689");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        calendar7.clear();
        boolean boolean10 = calendar7.after((java.lang.Object) (short) 0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        java.lang.String str20 = property19.getName();
        boolean boolean21 = property19.isLeap();
        org.joda.time.DateTime dateTime22 = property19.roundHalfFloorCopy();
        int int23 = dateTime22.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        boolean boolean25 = calendar7.before((java.lang.Object) dateTime24);
        org.joda.time.Chronology chronology26 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.minuteOfDay();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(chronology26);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "yearOfEra" + "'", str20, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test14690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14690");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        java.util.Date date6 = dateTime2.toDate();
        java.time.Instant instant7 = date6.toInstant();
        int int8 = date6.getSeconds();
        java.util.Calendar.Builder builder9 = builder0.setInstant(date6);
        java.util.Calendar.Builder builder11 = builder0.setInstant((long) 20);
        java.util.Calendar.Builder builder13 = builder11.setInstant((long) 8);
        java.util.Calendar.Builder builder15 = builder11.setInstant(0L);
        java.util.Calendar.Builder builder16 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay21 = dateTime18.toTimeOfDay();
        java.util.Date date22 = dateTime18.toDate();
        java.time.Instant instant23 = date22.toInstant();
        int int24 = date22.getSeconds();
        java.util.Calendar.Builder builder25 = builder16.setInstant(date22);
        java.util.Calendar.Builder builder29 = builder16.setWeekDate(3600096, 32772, 22);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTime dateTime43 = dateTime38.withZone(dateTimeZone40);
        long long46 = dateTimeZone40.adjustOffset((long) 5, true);
        long long50 = dateTimeZone40.convertLocalToUTC((long) 2922789, false, 62134912800000L);
        java.util.TimeZone timeZone51 = dateTimeZone40.toTimeZone();
        java.util.Calendar.Builder builder52 = builder29.setTimeZone(timeZone51);
        java.util.Calendar.Builder builder53 = builder15.setTimeZone(timeZone51);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime57.minusDays(7);
        java.util.Locale locale60 = null;
        java.util.Calendar calendar61 = dateTime57.toCalendar(locale60);
        int int63 = calendar61.getMaximum(9);
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.fromCalendarFields(calendar61);
        java.time.Instant instant65 = calendar61.toInstant();
        int int66 = calendar61.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone67 = calendar61.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        java.util.Calendar.Builder builder69 = builder15.setTimeZone(timeZone67);
        java.util.Locale locale70 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone67, locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 5L + "'", long46 == 5L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 6522789L + "'", long50 == 6522789L);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test14691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14691");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 357);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        java.util.Locale locale4 = null;
        java.util.Calendar calendar5 = dateTime1.toCalendar(locale4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime8 = dateTime1.withPeriodAdded(readablePeriod6, 388);
        org.joda.time.DateMidnight dateMidnight9 = dateTime1.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=357,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=357,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test14692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14692");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(8);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfDay();
        org.joda.time.DurationField durationField28 = chronology25.months();
        boolean boolean29 = dateTimeFieldType16.isSupported(chronology25);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 100, chronology25);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime30);
        org.joda.time.DateTime dateTime32 = timeOfDay31.toDateTimeToday();
        org.joda.time.DateTime dateTime33 = dateTime14.withFields((org.joda.time.ReadablePartial) timeOfDay31);
        org.joda.time.DateTime dateTime35 = dateTime14.withCenturyOfEra(0);
        org.joda.time.TimeOfDay timeOfDay36 = dateTime14.toTimeOfDay();
        int int37 = dateTime14.getHourOfDay();
        java.util.Locale locale38 = null;
        java.util.Calendar calendar39 = dateTime14.toCalendar(locale38);
        org.joda.time.DateTime.Property property40 = dateTime14.era();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 23 + "'", int37 == 23);
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test14693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14693");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        long long11 = property9.remainder();
        java.lang.String str12 = property9.toString();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(7);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(1);
        org.joda.time.DateTime dateTime21 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property25 = dateTime24.monthOfYear();
        org.joda.time.DateTime dateTime26 = property25.roundHalfEvenCopy();
        java.lang.Object obj27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str31 = dateTimeZone29.getShortName((long) 0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(obj27, dateTimeZone29);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.Chronology chronology41 = dateTime36.getChronology();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(chronology41);
        org.joda.time.DurationField durationField43 = chronology41.weeks();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        long long47 = chronology41.add(readablePeriod44, 1L, 8);
        org.joda.time.DateTime dateTime48 = dateTime32.toDateTime(chronology41);
        org.joda.time.DateTime dateTime49 = dateTime26.withChronology(chronology41);
        int int50 = property9.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime51 = property9.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 480100L + "'", long11 == 480100L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[hourOfDay]" + "'", str12, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-01:00" + "'", str31, "-01:00");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test14694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14694");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.Chronology chronology13 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.weekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test14695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14695");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(7);
        org.joda.time.DateTime dateTime32 = dateTime28.withYear(1);
        org.joda.time.Chronology chronology33 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.year();
        boolean boolean37 = calendar24.before((java.lang.Object) dateTimeField36);
        org.joda.time.TimeOfDay timeOfDay38 = org.joda.time.TimeOfDay.fromCalendarFields(calendar24);
        java.time.Instant instant39 = calendar24.toInstant();
        java.util.Date date40 = java.util.Date.from(instant39);
        java.util.Date date41 = java.util.Date.from(instant39);
        java.util.Date date42 = java.util.Date.from(instant39);
        int int43 = date42.getSeconds();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.fromDateFields(date42);
        org.joda.time.TimeOfDay timeOfDay45 = org.joda.time.TimeOfDay.fromDateFields(date42);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Mon Jan 02 23:08:00 UTC 2");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Mon Jan 02 23:08:00 UTC 2");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Mon Jan 02 23:08:00 UTC 2");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(timeOfDay45);
    }

    @Test
    public void test14696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14696");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(680);
        java.lang.Appendable appendable5 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.Chronology chronology17 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.DurationField durationField20 = chronology17.months();
        boolean boolean21 = dateTimeFieldType8.isSupported(chronology17);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 100, chronology17);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology17.add(readablePeriod23, (long) 100, 17);
        org.joda.time.DurationField durationField27 = chronology17.months();
        org.joda.time.DurationField durationField28 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.weekyear();
        org.joda.time.DurationField durationField30 = chronology17.weeks();
        org.joda.time.DateTimeField dateTimeField31 = chronology17.halfdayOfDay();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(0L, chronology17);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(appendable5, (org.joda.time.ReadablePartial) localTime32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test14697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14697");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(62134912800000L);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours(6);
        org.joda.time.LocalTime localTime5 = localTime3.minusMillis(1969);
        org.joda.time.LocalTime localTime7 = localTime3.minusMillis(266);
        java.util.Locale locale9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = localTime3.toString("Thu Nov 01 00:10:00 UTC 24354286", locale9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test14698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14698");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minusMillis(100);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay19.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.minusMillis(119);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.plusHours(33120000);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
    }

    @Test
    public void test14699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14699");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        long long11 = dateTimeField9.roundFloor((long) 3);
        int int13 = dateTimeField9.getMaximumValue((long) (-3600000));
        org.joda.time.DurationField durationField14 = dateTimeField9.getLeapDurationField();
        java.util.Locale locale15 = null;
        int int16 = dateTimeField9.getMaximumShortTextLength(locale15);
        org.joda.time.DurationField durationField17 = dateTimeField9.getLeapDurationField();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property23 = timeOfDay22.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay22.withPeriodAdded(readablePeriod24, (int) '4');
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.Chronology chronology35 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(chronology35);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay22.withChronologyRetainFields(chronology35);
        org.joda.time.LocalTime localTime41 = timeOfDay22.toLocalTime();
        int int42 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay22);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay47 = dateTime44.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property48 = timeOfDay47.millisOfSecond();
        int int49 = property48.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay51 = property48.addToCopy(100);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay56 = dateTime53.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property57 = timeOfDay56.millisOfSecond();
        boolean boolean58 = timeOfDay51.isEqual((org.joda.time.ReadablePartial) timeOfDay56);
        int[] intArray59 = timeOfDay51.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = timeOfDay51.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType61.getDurationType();
        org.joda.time.Chronology chronology63 = null;
        boolean boolean64 = durationFieldType62.isSupported(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime69 = dateTime67.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime69.minusDays(7);
        org.joda.time.DateTime dateTime73 = dateTime69.withYear(1);
        org.joda.time.Chronology chronology74 = dateTime69.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.minuteOfDay();
        org.joda.time.DurationField durationField77 = chronology74.months();
        boolean boolean78 = dateTimeFieldType65.isSupported(chronology74);
        org.joda.time.DateTimeField dateTimeField79 = chronology74.secondOfDay();
        org.joda.time.DurationField durationField80 = durationFieldType62.getField(chronology74);
        org.joda.time.Chronology chronology81 = chronology74.withUTC();
        org.joda.time.DateTimeField dateTimeField82 = chronology74.clockhourOfHalfday();
        org.joda.time.TimeOfDay timeOfDay83 = new org.joda.time.TimeOfDay(chronology74);
        org.joda.time.TimeOfDay timeOfDay84 = timeOfDay22.withChronologyRetainFields(chronology74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay86 = timeOfDay22.withMinuteOfHour(1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-82800000L) + "'", long11 == (-82800000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(timeOfDay84);
    }

    @Test
    public void test14700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14700");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        calendar24.clear();
        calendar24.clear();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay31 = dateTime28.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property32 = timeOfDay31.millisOfSecond();
        int int33 = property32.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay35 = property32.addToCopy(100);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay40 = dateTime37.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property41 = timeOfDay40.millisOfSecond();
        boolean boolean42 = timeOfDay35.isEqual((org.joda.time.ReadablePartial) timeOfDay40);
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay35.withMinuteOfHour((int) '#');
        java.lang.String str45 = timeOfDay44.toString();
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay44.plusHours(2);
        org.joda.time.Chronology chronology48 = timeOfDay47.getChronology();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays(7);
        org.joda.time.DateTime dateTime56 = dateTime52.withYear(1);
        org.joda.time.DateTime dateTime57 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property58 = dateTime56.hourOfDay();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        boolean boolean62 = dateTimeZone60.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime63 = dateTime56.withZone(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int67 = dateTimeZone65.getStandardOffset((long) (short) 0);
        long long69 = dateTimeZone60.getMillisKeepLocal(dateTimeZone65, (long) 0);
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone65);
        java.lang.String str71 = dateTimeZone65.getID();
        org.joda.time.Chronology chronology72 = chronology48.withZone(dateTimeZone65);
        org.joda.time.DurationField durationField73 = chronology72.days();
        boolean boolean74 = calendar24.before((java.lang.Object) durationField73);
        calendar24.setMinimalDaysInFirstWeek(73);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=73,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "T23:35:00.200" + "'", str45, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3600000) + "'", int67 == (-3600000));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-01:00" + "'", str71, "-01:00");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test14701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14701");
        java.util.Date date3 = new java.util.Date(21, 842, 255);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Nov 10 00:00:00 UTC 1991");
    }

    @Test
    public void test14702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14702");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField11 = chronology8.months();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.millisOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        int int20 = property19.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property19.addToCopy(100);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        boolean boolean29 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) timeOfDay27);
        int int30 = timeOfDay27.size();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay35 = dateTime32.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property36 = timeOfDay35.millisOfSecond();
        int int37 = property36.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay39 = property36.addToCopy(100);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay44 = dateTime41.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property45 = timeOfDay44.millisOfSecond();
        boolean boolean46 = timeOfDay39.isEqual((org.joda.time.ReadablePartial) timeOfDay44);
        int[] intArray47 = timeOfDay39.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = timeOfDay39.getFieldType(0);
        int[] intArray50 = timeOfDay39.getValues();
        chronology8.validate((org.joda.time.ReadablePartial) timeOfDay27, intArray50);
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay27.plusMinutes(357);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay58 = dateTime55.toTimeOfDay();
        java.util.Date date59 = dateTime55.toDate();
        long long60 = date59.getTime();
        int int61 = date59.getHours();
        date59.setSeconds((int) (short) 0);
        int int64 = date59.getYear();
        org.joda.time.TimeOfDay timeOfDay65 = org.joda.time.TimeOfDay.fromDateFields(date59);
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay65.minusHours(1968);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.util.Locale locale71 = null;
        java.lang.String str72 = dateTimeZone69.getName(0L, locale71);
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone69);
        int int74 = dateTime73.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime76 = dateTime73.minusMinutes(366);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.DateTime dateTime79 = dateTime76.withDurationAdded(readableDuration77, 3600096);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime83 = dateTime81.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay84 = dateTime81.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property85 = timeOfDay84.millisOfSecond();
        java.util.Locale locale86 = null;
        int int87 = property85.getMaximumShortTextLength(locale86);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean89 = property85.equals((java.lang.Object) dateTimeFieldType88);
        org.joda.time.DateTime.Property property90 = dateTime79.property(dateTimeFieldType88);
        boolean boolean91 = timeOfDay65.isSupported(dateTimeFieldType88);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property92 = timeOfDay27.property(dateTimeFieldType88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 70 + "'", int64 == 70);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-01:00" + "'", str72, "-01:00");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(timeOfDay84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test14703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14703");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime14 = dateTime11.withField(dateTimeFieldType12, 17);
        int int15 = dateTime11.getYear();
        org.joda.time.DateTime dateTime17 = dateTime11.minusDays((int) (byte) 0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(chronology28);
        org.joda.time.DurationField durationField30 = chronology28.weeks();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = chronology28.add(readablePeriod31, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology28);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((-82799998L), chronology28);
        org.joda.time.DurationField durationField37 = chronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField38 = chronology28.minuteOfHour();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) dateTime17, chronology28);
        org.joda.time.DateTimeField dateTimeField40 = chronology28.weekyearOfCentury();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology28);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localTime41);
    }

    @Test
    public void test14704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14704");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(chronology10);
        org.joda.time.DurationField durationField12 = chronology10.weeks();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.minuteOfHour();
        org.joda.time.DurationField durationField14 = chronology10.days();
        org.joda.time.DurationField durationField15 = chronology10.seconds();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(108, 92, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 108 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test14705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14705");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay7 = dateTime4.toTimeOfDay();
        java.util.Date date8 = dateTime4.toDate();
        long long9 = date8.getTime();
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromDateFields(date8);
        java.lang.String str11 = date8.toGMTString();
        java.lang.String str12 = date8.toLocaleString();
        java.lang.String str13 = date8.toLocaleString();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        java.util.Date date19 = dateTime15.toDate();
        long long20 = date19.getTime();
        int int21 = date19.getDate();
        boolean boolean22 = date8.before(date19);
        date8.setSeconds(53);
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromDateFields(date8);
        boolean boolean26 = timeOfDay1.isEqual((org.joda.time.ReadablePartial) localTime25);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:53 UTC 1970");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str11, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str12, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str13, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test14706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14706");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        int int12 = property5.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.TimeOfDay timeOfDay13 = property5.withMinimumValue();
        java.lang.Class<?> wildcardClass14 = timeOfDay13.getClass();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test14707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14707");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean17 = dateTime11.isSupported(dateTimeFieldType16);
        org.joda.time.DateMidnight dateMidnight18 = dateTime11.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfDay((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test14708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14708");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(7);
        org.joda.time.DateTime dateTime32 = dateTime28.withYear(1);
        org.joda.time.Chronology chronology33 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.year();
        boolean boolean37 = calendar24.before((java.lang.Object) dateTimeField36);
        int int38 = calendar24.getFirstDayOfWeek();
        java.lang.String str39 = calendar24.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            int int41 = calendar24.getActualMaximum(31495);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31495");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "gregory" + "'", str39, "gregory");
    }

    @Test
    public void test14709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14709");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int2 = localTime1.getSecondOfMinute();
        int int3 = localTime1.getMinuteOfHour();
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday();
        boolean boolean5 = dateTime4.isAfterNow();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay10 = dateTime7.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property11 = timeOfDay10.millisOfSecond();
        int int12 = property11.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay14 = property11.addToCopy(100);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay19 = dateTime16.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property20 = timeOfDay19.millisOfSecond();
        boolean boolean21 = timeOfDay14.isEqual((org.joda.time.ReadablePartial) timeOfDay19);
        int[] intArray22 = timeOfDay14.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = timeOfDay14.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getDurationType();
        int int26 = dateTime4.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        java.lang.String str36 = property35.getName();
        boolean boolean37 = property35.isLeap();
        org.joda.time.DateTime dateTime38 = property35.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime40 = dateTime38.minus((long) 12);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMillis(70);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        boolean boolean44 = dateTimeFieldType24.isSupported(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime50.minusDays(7);
        org.joda.time.DateTime dateTime54 = dateTime50.withYear(1);
        org.joda.time.Chronology chronology55 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.minuteOfDay();
        org.joda.time.DurationField durationField58 = chronology55.months();
        boolean boolean59 = dateTimeFieldType46.isSupported(chronology55);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (byte) 100, chronology55);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        long long64 = chronology55.add(readablePeriod61, (long) 100, 17);
        org.joda.time.DateTimeField dateTimeField65 = chronology55.year();
        org.joda.time.DateTimeField dateTimeField66 = chronology55.hourOfHalfday();
        org.joda.time.DurationField durationField67 = chronology55.years();
        boolean boolean68 = dateTimeFieldType24.isSupported(chronology55);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "yearOfEra" + "'", str36, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test14710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14710");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime13.getEra();
        org.joda.time.LocalTime localTime24 = dateTime13.toLocalTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime27 = localTime24.withPeriodAdded(readablePeriod25, 9);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.Chronology chronology39 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.minuteOfDay();
        org.joda.time.DurationField durationField42 = chronology39.months();
        boolean boolean43 = dateTimeFieldType30.isSupported(chronology39);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (byte) 100, chronology39);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        long long48 = chronology39.add(readablePeriod45, (long) 100, 17);
        org.joda.time.DurationField durationField49 = chronology39.months();
        org.joda.time.DurationField durationField50 = chronology39.years();
        org.joda.time.DateTimeField dateTimeField51 = chronology39.weekyear();
        org.joda.time.DurationField durationField52 = chronology39.weeks();
        org.joda.time.DateTimeField dateTimeField53 = chronology39.halfdayOfDay();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(0L, chronology39);
        int int55 = localTime24.compareTo((org.joda.time.ReadablePartial) localTime54);
        org.joda.time.DateTime dateTime56 = localTime24.toDateTimeToday();
        org.joda.time.Chronology chronology57 = localTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        long long61 = dateTimeField58.addWrapField(4080100L, 14);
        long long63 = dateTimeField58.roundHalfFloor((-1727999000543L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L + "'", long48 == 100L);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 441767280100L + "'", long61 == 441767280100L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1735689600000L) + "'", long63 == (-1735689600000L));
    }

    @Test
    public void test14711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14711");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str16 = dateTimeFieldType15.toString();
        boolean boolean17 = localTime14.isSupported(dateTimeFieldType15);
        org.joda.time.LocalTime localTime19 = localTime14.minusMinutes(79680);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime21 = localTime20.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalTime localTime24 = localTime20.withPeriodAdded(readablePeriod22, (int) 'a');
        org.joda.time.LocalTime localTime26 = localTime20.minusMinutes(69);
        int int27 = localTime19.compareTo((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        org.joda.time.DateTime dateTime39 = dateTime37.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property40 = dateTime39.monthOfYear();
        org.joda.time.DateTime dateTime42 = property40.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime43 = property40.getDateTime();
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks(17);
        org.joda.time.DateTime dateTime46 = localTime26.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalTime localTime48 = localTime26.withHourOfDay((int) (byte) 0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay53 = dateTime50.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property54 = timeOfDay53.millisOfSecond();
        java.util.Locale locale55 = null;
        int int56 = property54.getMaximumShortTextLength(locale55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean58 = property54.equals((java.lang.Object) dateTimeFieldType57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property54.getFieldType();
        java.lang.String str60 = property54.getAsShortText();
        boolean boolean62 = property54.equals((java.lang.Object) "08:39:01.289");
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property54.getFieldType();
        int int64 = localTime26.get(dateTimeFieldType63);
        java.lang.Object obj65 = null;
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime71 = dateTime69.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime73 = dateTime71.minusDays(7);
        org.joda.time.DateTime dateTime75 = dateTime71.withYear(1);
        org.joda.time.Chronology chronology76 = dateTime71.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.minuteOfDay();
        boolean boolean79 = durationFieldType67.isSupported(chronology76);
        org.joda.time.LocalTime localTime80 = new org.joda.time.LocalTime((long) 3, chronology76);
        java.lang.String str81 = chronology76.toString();
        org.joda.time.DateTimeField dateTimeField82 = chronology76.centuryOfEra();
        org.joda.time.TimeOfDay timeOfDay83 = new org.joda.time.TimeOfDay(obj65, chronology76);
        org.joda.time.LocalTime localTime84 = org.joda.time.LocalTime.now(chronology76);
        org.joda.time.DateTimeField dateTimeField85 = dateTimeFieldType63.getField(chronology76);
        int int87 = dateTimeField85.getMinimumValue(134370448304400000L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "monthOfYear" + "'", str16, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "100" + "'", str60, "100");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 491 + "'", int64 == 491);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ISOChronology[-01:00]" + "'", str81, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test14712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14712");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        long long15 = dateTimeField12.getDifferenceAsLong((long) (short) 10, (long) (byte) -1);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfDay();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology25);
        int int29 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay34 = dateTime31.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property35 = timeOfDay34.millisOfSecond();
        org.joda.time.DurationField durationField36 = property35.getDurationField();
        java.lang.String str37 = property35.getAsShortText();
        org.joda.time.DateTimeField dateTimeField38 = property35.getField();
        org.joda.time.DurationField durationField39 = property35.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay41 = property35.addNoWrapToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime42 = localTime28.withFields((org.joda.time.ReadablePartial) timeOfDay41);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(7);
        org.joda.time.DateTime dateTime50 = dateTime46.withYear(1);
        org.joda.time.Chronology chronology51 = dateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = chronology51.secondOfDay();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology51);
        int int57 = dateTime56.getHourOfDay();
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int60 = localTime58.get(dateTimeFieldType59);
        boolean boolean61 = dateTime56.isSupported(dateTimeFieldType59);
        org.joda.time.DateTime.Property property62 = dateTime56.minuteOfDay();
        org.joda.time.DateTime dateTime63 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.TimeOfDay timeOfDay65 = timeOfDay41.plusSeconds(3600000);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100" + "'", str37, "100");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(timeOfDay65);
    }

    @Test
    public void test14713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14713");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str17 = dateTimeZone15.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime11.toMutableDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime20 = dateTime11.plusDays(100);
        int int21 = dateTime20.getYear();
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85680 + "'", int13 == 85680);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:00" + "'", str17, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test14714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14714");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime8.plusHours(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.weeks();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology20.add(readablePeriod23, 1L, 8);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property36 = dateTime34.hourOfDay();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        boolean boolean40 = dateTimeZone38.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime41 = dateTime34.withZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int45 = dateTimeZone43.getStandardOffset((long) (short) 0);
        long long47 = dateTimeZone38.getMillisKeepLocal(dateTimeZone43, (long) 0);
        org.joda.time.Chronology chronology48 = chronology20.withZone(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime8.toMutableDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField50 = chronology20.dayOfWeek();
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeField50.getAsShortText((long) 1328, locale52);
        int int54 = dateTimeField50.getMinimumValue();
        int int55 = dateTimeField50.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3600000) + "'", int45 == (-3600000));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Wed" + "'", str53, "Wed");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 7 + "'", int55 == 7);
    }

    @Test
    public void test14715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14715");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        java.util.Date date2 = calendar0.getTime();
        calendar0.set(8, 32769, 10, 10, 1428);
        int int10 = calendar0.getLeastMaximum(6);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=32769,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=10,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=10,MINUTE=1428,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 355 + "'", int10 == 355);
    }

    @Test
    public void test14716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14716");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withSecondOfMinute(12);
        org.joda.time.DateTime dateTime18 = timeOfDay13.toDateTimeToday();
        java.lang.String str19 = timeOfDay13.toString();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay24 = dateTime21.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.millisOfSecond();
        int int26 = property25.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay27 = property25.withMaximumValue();
        java.util.Locale locale28 = null;
        int int29 = property25.getMaximumShortTextLength(locale28);
        org.joda.time.TimeOfDay timeOfDay31 = property25.addToCopy(357);
        org.joda.time.DurationField durationField32 = property25.getDurationField();
        int int33 = property25.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property25.getFieldType();
        boolean boolean35 = timeOfDay13.isSupported(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "T23:00:00.100" + "'", str19, "T23:00:00.100");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test14717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14717");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.DateTime.Property property21 = dateTime17.millisOfDay();
        int int22 = dateTime17.getSecondOfMinute();
        org.joda.time.DateTime.Property property23 = dateTime17.millisOfDay();
        org.joda.time.DateTime dateTime24 = dateTime17.withEarlierOffsetAtOverlap();
        boolean boolean25 = dateTime17.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test14718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14718");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime31 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalTime.Property property32 = localTime31.hourOfDay();
        java.util.Locale locale34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime35 = property32.setCopy("T00:00:00.001", locale34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T00:00:00.001\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test14719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14719");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime7.minusHours((int) 'a');
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = chronology34.add(readablePeriod36, 9L, 5);
        org.joda.time.DateTime dateTime40 = dateTime25.toDateTime(chronology34);
        java.util.Locale locale41 = null;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime40.toYearMonthDay();
        int int44 = dateTime40.getHourOfDay();
        org.joda.time.DateTime.Property property45 = dateTime40.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime40.minus(readablePeriod46);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9L + "'", long39 == 9L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-62104413119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=11,WEEK_OF_YEAR=53,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=363,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 21 + "'", int44 == 21);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test14720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14720");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int3 = dateTimeZone1.getStandardOffset((long) (short) 0);
        long long6 = dateTimeZone1.convertLocalToUTC(480100L, false);
        java.lang.String str8 = dateTimeZone1.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str31 = dateTimeZone29.getShortName((long) 0);
        org.joda.time.DateTime dateTime32 = dateTime27.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime17.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(7);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(1);
        org.joda.time.DateTime dateTime42 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str46 = dateTimeZone44.getShortName((long) 0);
        org.joda.time.DateTime dateTime47 = dateTime42.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime51.minusDays(7);
        org.joda.time.DateTime dateTime55 = dateTime51.withYear(1);
        boolean boolean56 = dateTime47.isBefore((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = dateTime55.isEqualNow();
        org.joda.time.DateTime dateTime59 = dateTime55.minusSeconds(22);
        boolean boolean60 = dateTime33.isAfter((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime.Property property61 = dateTime55.dayOfYear();
        java.lang.String str62 = dateTime55.toString();
        boolean boolean63 = dateTimeZone1.equals((java.lang.Object) dateTime55);
        org.joda.time.TimeOfDay timeOfDay64 = new org.joda.time.TimeOfDay(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4080100L + "'", long6 == 4080100L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:00" + "'", str8, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-01:00" + "'", str31, "-01:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-01:00" + "'", str46, "-01:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0001-12-31T22:08:00.100-01:00" + "'", str62, "0001-12-31T22:08:00.100-01:00");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test14721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14721");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        long long12 = dateTimeField10.roundFloor((long) 12);
        boolean boolean13 = dateTimeField10.isSupported();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime dateTime25 = dateTime23.plusMinutes((int) (short) 100);
        java.lang.String str26 = dateTime25.toString();
        java.util.GregorianCalendar gregorianCalendar27 = dateTime25.toGregorianCalendar();
        boolean boolean28 = gregorianCalendar27.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay29 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.DateTime dateTime39 = property38.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean41 = dateTime39.isSupported(dateTimeFieldType40);
        org.joda.time.TimeOfDay.Property property42 = timeOfDay29.property(dateTimeFieldType40);
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay29.minusMillis(70);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) timeOfDay29, 859, locale46);
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeField10.getAsShortText(14400014L, locale49);
        java.lang.String str52 = dateTimeField10.getAsText((long) 70);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = dateTimeField10.getType();
        int int56 = dateTimeField10.getDifference((-50617355847900L), 62104095241185L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str26, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "859" + "'", str47, "859");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "3" + "'", str50, "3");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "23" + "'", str52, "23");
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-31311514) + "'", int56 == (-31311514));
    }

    @Test
    public void test14722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14722");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str20 = dateTimeZone18.getShortName((long) 0);
        org.joda.time.DateTime dateTime21 = dateTime16.withZone(dateTimeZone18);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone18);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone18.getName((long) 712, locale24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = timeOfDay7.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTime.Property property28 = dateTime27.secondOfDay();
        org.joda.time.DateTime.Property property29 = dateTime27.millisOfSecond();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.Chronology chronology39 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.minuteOfDay();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology39);
        org.joda.time.LocalTime.Property property43 = localTime42.millisOfSecond();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(7);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(1);
        org.joda.time.DateTime dateTime52 = dateTime51.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property53 = dateTime51.hourOfDay();
        org.joda.time.DateTime dateTime54 = property53.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfYear(8);
        org.joda.time.DateTime dateTime58 = dateTime56.withMillis((long) 10);
        long long59 = property43.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.LocalTime localTime60 = property43.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime62 = localTime60.withMillisOfSecond(13);
        org.joda.time.DateTime dateTime63 = localTime62.toDateTimeToday();
        boolean boolean64 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = dateTime63.withSecondOfMinute(31261939);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31261939 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:00" + "'", str20, "-01:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-01:00" + "'", str25, "-01:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 62134912800000L + "'", long59 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test14723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14723");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.get();
        int int9 = property5.get();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        int int16 = property5.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime18 = dateTime11.withYearOfCentury(24);
        org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfDay(0);
        int int21 = dateTime20.getDayOfYear();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.Chronology chronology31 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfDay();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology31);
        java.lang.String str35 = localTime34.toString();
        org.joda.time.Chronology chronology36 = localTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology36.getZone();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay43 = dateTime40.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property44 = timeOfDay43.millisOfSecond();
        java.util.Locale locale45 = null;
        int int46 = property44.getMaximumShortTextLength(locale45);
        int int47 = property44.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField48 = property44.getField();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay53 = dateTime50.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property54 = timeOfDay53.millisOfSecond();
        int int55 = property54.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay57 = property54.addToCopy(100);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay62 = dateTime59.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property63 = timeOfDay62.millisOfSecond();
        boolean boolean64 = timeOfDay57.isEqual((org.joda.time.ReadablePartial) timeOfDay62);
        int int65 = timeOfDay62.size();
        java.util.Locale locale67 = null;
        java.lang.String str68 = dateTimeField48.getAsText((org.joda.time.ReadablePartial) timeOfDay62, 14, locale67);
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay62.plusMillis(16);
        int[] intArray72 = chronology36.get((org.joda.time.ReadablePartial) timeOfDay70, (long) 23);
        org.joda.time.DateTimeField dateTimeField73 = chronology36.dayOfWeek();
        org.joda.time.DurationField durationField74 = chronology36.weeks();
        org.joda.time.DateTimeField dateTimeField75 = chronology36.hourOfDay();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime80 = dateTime78.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime82 = dateTime80.minusDays(7);
        org.joda.time.DateTime dateTime84 = dateTime80.withYear(1);
        org.joda.time.Chronology chronology85 = dateTime80.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField87 = chronology85.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField88 = chronology85.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField89 = chronology85.secondOfDay();
        org.joda.time.DateTimeField dateTimeField90 = chronology85.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology92 = chronology85.withZone(dateTimeZone91);
        org.joda.time.DateTimeField dateTimeField93 = chronology85.clockhourOfDay();
        org.joda.time.DurationField durationField94 = chronology85.millis();
        org.joda.time.TimeOfDay timeOfDay95 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime76, chronology85);
        org.joda.time.DateTimeField dateTimeField96 = chronology85.centuryOfEra();
        int int97 = dateTime20.get(dateTimeField96);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 365 + "'", int21 == 365);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "01:00:00.000" + "'", str35, "01:00:00.000");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "14" + "'", str68, "14");
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(durationField94);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 19 + "'", int97 == 19);
    }

    @Test
    public void test14724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14724");
        java.util.Date date5 = new java.util.Date(937, (-738188), 358, 82800010, 75);
        java.time.Instant instant6 = date5.toInstant();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 23 11:15:00 UTC 49234");
        org.junit.Assert.assertNotNull(instant6);
    }

    @Test
    public void test14725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14725");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test14726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14726");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(32, 16868651, 218);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14727");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        boolean boolean15 = gregorianCalendar13.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        int int17 = gregorianCalendar13.getMinimalDaysInFirstWeek();
        gregorianCalendar13.set(58, 69, (-738188), 80, 31128547, 80);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar13.setWeekDate(86619, 31261360, 92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 92");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test14728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14728");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        calendar7.setLenient(false);
        int int10 = calendar7.getWeekYear();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test14729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14729");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        int int13 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime11.plus(readableDuration17);
        boolean boolean19 = dateTime11.isEqualNow();
        org.joda.time.DateTime dateTime21 = dateTime11.withMillisOfDay(9);
        java.util.GregorianCalendar gregorianCalendar22 = dateTime11.toGregorianCalendar();
        org.joda.time.Chronology chronology23 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(gregorianCalendar22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test14730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14730");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        long long11 = dateTimeField9.roundHalfEven(480100L);
        boolean boolean13 = dateTimeField9.isLeap((-82800000L));
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        int int20 = property19.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property19.addToCopy(100);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        boolean boolean29 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) timeOfDay27);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay27.withSecondOfMinute(12);
        int int32 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay31);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay31.withMinuteOfHour(15);
        org.joda.time.TimeOfDay.Property property35 = timeOfDay34.secondOfMinute();
        int int36 = property35.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3600000L + "'", long11 == 3600000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
    }

    @Test
    public void test14731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14731");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(7);
        org.joda.time.DateTime dateTime32 = dateTime28.withYear(1);
        org.joda.time.Chronology chronology33 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.year();
        boolean boolean37 = calendar24.before((java.lang.Object) dateTimeField36);
        org.joda.time.TimeOfDay timeOfDay38 = org.joda.time.TimeOfDay.fromCalendarFields(calendar24);
        int int39 = calendar24.getMinimalDaysInFirstWeek();
        calendar24.setFirstDayOfWeek(26);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=26,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test14732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14732");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime.Property property22 = dateTime17.centuryOfEra();
        org.joda.time.Chronology chronology23 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.year();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test14733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14733");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int11 = dateTimeZone9.getStandardOffset((long) (short) 0);
        long long14 = dateTimeZone9.convertLocalToUTC(480100L, false);
        java.lang.String str16 = dateTimeZone9.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property27 = dateTime25.hourOfDay();
        org.joda.time.DateTime dateTime28 = property27.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str32 = dateTimeZone30.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime28.toMutableDateTime(dateTimeZone30);
        long long35 = dateTimeZone9.getMillisKeepLocal(dateTimeZone30, 0L);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(25L, dateTimeZone30);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays(7);
        java.util.Locale locale43 = null;
        java.util.Calendar calendar44 = dateTime40.toCalendar(locale43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateTime40.withChronology(chronology45);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime50.minusDays(7);
        org.joda.time.DateTime dateTime54 = dateTime50.withYear(1);
        org.joda.time.DateTime dateTime55 = dateTime54.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime56 = dateTime55.toDateTimeISO();
        org.joda.time.DateTime dateTime58 = dateTime56.plusMinutes((int) (short) 100);
        java.lang.String str59 = dateTime58.toString();
        int int60 = dateTime58.getSecondOfMinute();
        org.joda.time.DateTime dateTime62 = dateTime58.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime63 = dateTime58.withLaterOffsetAtOverlap();
        int int64 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime63);
        int int65 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(50400000, 3599900, 598, 40, 658, 597, 200, dateTimeZone30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3600000) + "'", int11 == (-3600000));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 4080100L + "'", long14 == 4080100L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-01:00" + "'", str16, "-01:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-01:00" + "'", str32, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str59, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3600000) + "'", int65 == (-3600000));
    }

    @Test
    public void test14734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14734");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(15, (int) (short) 1);
        long long5 = dateTimeZone2.convertLocalToUTC((long) 10, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-54059990L) + "'", long5 == (-54059990L));
    }

    @Test
    public void test14735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14735");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.plusMinutes(12);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        int int29 = property28.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay31 = property28.addToCopy(100);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay36 = dateTime33.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.millisOfSecond();
        boolean boolean38 = timeOfDay31.isEqual((org.joda.time.ReadablePartial) timeOfDay36);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay31.withMinuteOfHour((int) '#');
        java.lang.String str41 = timeOfDay40.toString();
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay40.plusHours(2);
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.plusHours(9);
        org.joda.time.LocalTime localTime46 = timeOfDay43.toLocalTime();
        boolean boolean47 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.LocalTime localTime49 = localTime46.withMillisOfDay(516);
        org.joda.time.LocalTime.Property property50 = localTime49.millisOfDay();
        org.joda.time.LocalTime localTime51 = property50.roundCeilingCopy();
        org.joda.time.LocalTime localTime52 = property50.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getDurationType();
        org.joda.time.LocalTime localTime56 = localTime52.withFieldAdded(durationFieldType54, 718);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "T15:35:00.200" + "'", str41, "T15:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(localTime56);
    }

    @Test
    public void test14736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14736");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.plus(readableDuration30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withDurationAdded(readableDuration34, 23);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime41 = dateTime36.withPeriodAdded(readablePeriod39, 53);
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfYear();
        org.joda.time.DateTime dateTime44 = property42.addWrapFieldToCopy(100);
        org.joda.time.DateTime.Property property45 = dateTime44.weekOfWeekyear();
        org.joda.time.DateTime.Property property46 = dateTime44.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134999260000L + "'", long29 == 62134999260000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-62134995659000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+15:01\",offset=54060000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=54060000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test14737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14737");
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = null;
        org.joda.time.format.DateTimeParser dateTimeParser5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser5);
        boolean boolean7 = dateTimeFormatter6.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter6.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.minuteOfDay();
        org.joda.time.DurationField durationField23 = chronology19.millis();
        boolean boolean24 = dateTimeFieldType9.isSupported(chronology19);
        org.joda.time.DateTimeField dateTimeField25 = chronology19.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter6.withChronology(chronology19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(91, 47, 9511, 31321450, chronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 91 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test14738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14738");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property30 = dateTime29.monthOfYear();
        org.joda.time.DateTime dateTime32 = property30.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime33 = property30.getDateTime();
        org.joda.time.DateTime dateTime34 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property35 = dateTime33.dayOfYear();
        org.joda.time.DurationField durationField36 = property35.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = property35.addToCopy(1644541202022L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644541202022 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test14739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14739");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-2020), 744);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2020 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14740");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(7, 9, 11);
        java.util.Calendar calendar5 = builder0.build();
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(358, 718, (-292275054));
        java.util.Calendar.Builder builder14 = builder9.setTimeOfDay((-1028363091), 992, 32769, 37);
        java.util.Calendar.Builder builder18 = builder9.setDate(10, 3600000, 516);
        java.util.Calendar calendar19 = builder9.build();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-61922016000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=284,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=5703365687889037,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=182702,MONTH=5,WEEK_OF_YEAR=25,WEEK_OF_MONTH=3,DAY_OF_MONTH=19,DAY_OF_YEAR=170,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=38,SECOND=9,MILLISECOND=37,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14741");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 11);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.minuteOfDay();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology11);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfSecond();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property25 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = property25.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear(8);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillis((long) 10);
        long long31 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime28.plus(readableDuration32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime36 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        int int37 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime localTime39 = localTime1.plusSeconds(7);
        org.joda.time.LocalTime.Property property40 = localTime1.millisOfDay();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 62134999260000L + "'", long31 == 62134999260000L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test14742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14742");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withMillisOfSecond((int) '#');
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.hourOfHalfday();
        org.joda.time.Chronology chronology32 = chronology28.withUTC();
        org.joda.time.DurationField durationField33 = chronology28.millis();
        org.joda.time.Chronology chronology34 = chronology28.withUTC();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(chronology34);
        boolean boolean36 = timeOfDay19.isBefore((org.joda.time.ReadablePartial) timeOfDay35);
        org.joda.time.TimeOfDay.Property property37 = timeOfDay19.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay19.plusHours(85680);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(timeOfDay39);
    }

    @Test
    public void test14743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14743");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.plusMinutes(12);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        int int29 = property28.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay31 = property28.addToCopy(100);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay36 = dateTime33.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.millisOfSecond();
        boolean boolean38 = timeOfDay31.isEqual((org.joda.time.ReadablePartial) timeOfDay36);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay31.withMinuteOfHour((int) '#');
        java.lang.String str41 = timeOfDay40.toString();
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay40.plusHours(2);
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.plusHours(9);
        org.joda.time.LocalTime localTime46 = timeOfDay43.toLocalTime();
        boolean boolean47 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.LocalTime localTime49 = localTime46.withMillisOfDay(516);
        org.joda.time.LocalTime.Property property50 = localTime49.millisOfDay();
        org.joda.time.LocalTime localTime52 = property50.addNoWrapToCopy(4);
        org.joda.time.LocalTime localTime54 = property50.addCopy(918);
        org.joda.time.LocalTime localTime56 = property50.addNoWrapToCopy((int) (byte) 10);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "T15:35:00.200" + "'", str41, "T15:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime56);
    }

    @Test
    public void test14744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14744");
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.minuteOfDay();
        boolean boolean17 = durationFieldType5.isSupported(chronology14);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 3, chronology14);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(chronology14);
        org.joda.time.DurationField durationField20 = chronology14.seconds();
        org.joda.time.Chronology chronology21 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(921, (int) '4', 458, (-311691), chronology21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 921 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test14745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14745");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.withMillisOfSecond(69);
        int int23 = timeOfDay20.getMinuteOfHour();
        org.joda.time.DateTime dateTime24 = timeOfDay20.toDateTimeToday();
        int int25 = dateTime24.getYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
    }

    @Test
    public void test14746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14746");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        int int22 = dateTime21.getEra();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        java.util.Locale locale29 = null;
        int int30 = property28.getMaximumShortTextLength(locale29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean32 = property28.equals((java.lang.Object) dateTimeFieldType31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property28.getFieldType();
        boolean boolean34 = dateTime21.isSupported(dateTimeFieldType33);
        org.joda.time.DateTime dateTime36 = dateTime9.withField(dateTimeFieldType33, 1);
        java.util.Date date37 = dateTime9.toDate();
        java.lang.String str38 = date37.toGMTString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Jan 02 23:08:00 UTC 1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2 Jan 1 23:08:00 GMT" + "'", str38, "2 Jan 1 23:08:00 GMT");
    }

    @Test
    public void test14747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14747");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property30 = dateTime29.monthOfYear();
        org.joda.time.DateTime dateTime32 = property30.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime33 = property30.getDateTime();
        org.joda.time.DateTime dateTime34 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime36 = dateTime33.withYearOfEra(32772);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test14748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14748");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 79200);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.Chronology chronology17 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology17);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test14749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14749");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.monthOfYear();
        int int30 = dateTime28.getSecondOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.withMillisOfDay(70);
        boolean boolean33 = timeOfDay16.equals((java.lang.Object) dateTime28);
        org.joda.time.DateTime.Property property34 = dateTime28.minuteOfDay();
        org.joda.time.DateTime dateTime35 = dateTime28.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime28.dayOfMonth();
        org.joda.time.DateTime dateTime38 = dateTime28.minusMonths(365);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime38.getZone();
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay45 = dateTime42.toTimeOfDay();
        org.joda.time.DateTime dateTime47 = dateTime42.withYearOfCentury(22);
        org.joda.time.DateTime dateTime49 = dateTime47.withYearOfCentury(13);
        org.joda.time.DateTime dateTime51 = dateTime47.minusSeconds(3600096);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime55.minusDays(7);
        org.joda.time.DateTime dateTime59 = dateTime55.withYear(1);
        org.joda.time.Chronology chronology60 = dateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.millisOfDay();
        org.joda.time.DurationField durationField62 = chronology60.years();
        org.joda.time.DateTime dateTime63 = dateTime47.withChronology(chronology60);
        org.joda.time.DateTimeField dateTimeField64 = chronology60.weekyear();
        boolean boolean65 = dateTimeZone39.equals((java.lang.Object) dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 56940 + "'", int30 == 56940);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+15:01");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test14750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14750");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology10);
        java.lang.String str14 = localTime13.toString();
        org.joda.time.Chronology chronology15 = localTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 357, chronology15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minus(readablePeriod18);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay17.withMillisOfSecond(917);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.Chronology chronology30 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        long long33 = dateTimeField31.roundHalfEven(480100L);
        boolean boolean35 = dateTimeField31.isLeap((-82800000L));
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay40 = dateTime37.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property41 = timeOfDay40.millisOfSecond();
        int int42 = property41.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay44 = property41.addToCopy(100);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay49 = dateTime46.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property50 = timeOfDay49.millisOfSecond();
        boolean boolean51 = timeOfDay44.isEqual((org.joda.time.ReadablePartial) timeOfDay49);
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay49.withSecondOfMinute(12);
        int int54 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay53);
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay53.withMinuteOfHour(15);
        org.joda.time.Chronology chronology57 = timeOfDay56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.centuries();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.millisOfDay();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTimeField dateTimeField61 = chronology57.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay21.withChronologyRetainFields(chronology57);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = timeOfDay21.getValue(31495);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31495");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "01:00:00.000" + "'", str14, "01:00:00.000");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-54060000L) + "'", long33 == (-54060000L));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(timeOfDay62);
    }

    @Test
    public void test14751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14751");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.TimeOfDay timeOfDay10 = property5.addToCopy(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withHourOfDay((-14640));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -14640 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test14752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14752");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfDay();
        boolean boolean13 = dateTimeField12.isSupported();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.minuteOfDay();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology23);
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        org.joda.time.DateTimeField dateTimeField29 = property27.getField();
        org.joda.time.LocalTime localTime30 = property27.getLocalTime();
        org.joda.time.LocalTime localTime32 = property27.addCopy((int) (byte) 100);
        org.joda.time.LocalTime.Property property33 = localTime32.minuteOfHour();
        org.joda.time.Chronology chronology34 = localTime32.getChronology();
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localTime32, locale35);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "60" + "'", str36, "60");
    }

    @Test
    public void test14753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14753");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        int int7 = date5.getDate();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay12 = dateTime9.toTimeOfDay();
        java.util.Date date13 = dateTime9.toDate();
        int int14 = date13.getHours();
        date13.setSeconds(16);
        boolean boolean17 = date5.before(date13);
        date13.setHours(1968);
        java.lang.String str20 = date13.toLocaleString();
        date13.setDate(800);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes((int) (short) 100);
        java.lang.String str35 = dateTime34.toString();
        java.util.GregorianCalendar gregorianCalendar36 = dateTime34.toGregorianCalendar();
        gregorianCalendar36.set((int) (short) 1, (int) 'a', (int) (short) 1);
        gregorianCalendar36.add((int) (byte) 0, (-3600000));
        long long44 = gregorianCalendar36.getTimeInMillis();
        java.util.Date date46 = new java.util.Date((long) 16);
        gregorianCalendar36.setTime(date46);
        java.util.Date date54 = new java.util.Date((int) (byte) 1, 97, 859, 30961340, (-1), 56);
        boolean boolean55 = date46.before(date54);
        boolean boolean56 = date13.after(date54);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Mon May 08 00:00:16 UTC 1972");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Mar 24, 1970 12:00:16 AM" + "'", str20, "Mar 24, 1970 12:00:16 AM");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0001-01-01T15:49:00.100+15:01" + "'", str35, "0001-01-01T15:49:00.100+15:01");
        org.junit.Assert.assertNotNull(gregorianCalendar36);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-62417171519900L) + "'", long44 == (-62417171519900L));
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date54.toString(), "Tue Jun 27 19:59:56 UTC 5443");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test14754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14754");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay7 = dateTime4.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.millisOfSecond();
        int int9 = property8.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addToCopy(100);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        boolean boolean18 = timeOfDay11.isEqual((org.joda.time.ReadablePartial) timeOfDay16);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay11.withMinuteOfHour((int) '#');
        int int21 = property2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay11.minusMillis((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        boolean boolean37 = durationFieldType25.isSupported(chronology34);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 3, chronology34);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField40 = chronology34.seconds();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay11.withChronologyRetainFields(chronology34);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology34);
        boolean boolean44 = dateTime43.isEqualNow();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test14755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14755");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology10.add(readablePeriod16, (long) 100, 17);
        org.joda.time.DurationField durationField20 = chronology10.months();
        org.joda.time.DurationField durationField21 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology10.weekyear();
        org.joda.time.DurationField durationField23 = chronology10.weeks();
        org.joda.time.DateTimeField dateTimeField24 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology10.weekyearOfCentury();
        org.joda.time.DurationField durationField26 = chronology10.seconds();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test14756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14756");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withYearOfCentury(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        org.joda.time.DurationField durationField19 = chronology16.months();
        boolean boolean20 = dateTimeFieldType7.isSupported(chronology16);
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType7.getDurationType();
        org.joda.time.DateTime dateTime23 = dateTime6.withFieldAdded(durationFieldType21, 2);
        java.util.GregorianCalendar gregorianCalendar24 = dateTime6.toGregorianCalendar();
        long long25 = gregorianCalendar24.getTimeInMillis();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property35 = dateTime33.hourOfDay();
        int int36 = property35.get();
        int int37 = property35.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField38 = property35.getField();
        boolean boolean39 = gregorianCalendar24.before((java.lang.Object) dateTimeField38);
        long long40 = gregorianCalendar24.getTimeInMillis();
        java.util.Locale locale43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = gregorianCalendar24.getDisplayName(0, 1, locale43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(gregorianCalendar24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1514764799900L) + "'", long25 == (-1514764799900L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 23 + "'", int37 == 23);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1514764799900L) + "'", long40 == (-1514764799900L));
    }

    @Test
    public void test14757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14757");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.withPeriodAdded(readablePeriod6, (int) '4');
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime11 = localTime9.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime13 = localTime11.withMillisOfDay(2);
        boolean boolean14 = timeOfDay4.isAfter((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.LocalTime.Property property15 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime16 = property15.withMaximumValue();
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localTime16.getFields();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property27 = dateTime25.hourOfDay();
        org.joda.time.DateTime dateTime28 = property27.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property29 = dateTime28.weekOfWeekyear();
        java.util.Locale locale30 = null;
        int int31 = property29.getMaximumShortTextLength(locale30);
        org.joda.time.DateTime dateTime32 = property29.withMaximumValue();
        org.joda.time.DateTime dateTime33 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime34 = localTime16.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        java.lang.Object obj35 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str39 = dateTimeZone37.getShortName((long) 0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(obj35, dateTimeZone37);
        org.joda.time.DateTime dateTime41 = localTime16.toDateTimeToday(dateTimeZone37);
        org.joda.time.Instant instant42 = dateTime41.toInstant();
        org.joda.time.DateTime dateTime44 = dateTime41.plusMonths(3267);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-01:00" + "'", str39, "-01:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test14758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14758");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        long long15 = dateTimeField12.getDifferenceAsLong((long) (short) 10, (long) (byte) -1);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfDay();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology25);
        int int29 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay34 = dateTime31.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property35 = timeOfDay34.millisOfSecond();
        org.joda.time.DurationField durationField36 = property35.getDurationField();
        java.lang.String str37 = property35.getAsShortText();
        org.joda.time.DateTimeField dateTimeField38 = property35.getField();
        org.joda.time.DurationField durationField39 = property35.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay41 = property35.addNoWrapToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime42 = localTime28.withFields((org.joda.time.ReadablePartial) timeOfDay41);
        org.joda.time.TimeOfDay.Property property43 = timeOfDay41.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay41.plusMillis(20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType47 = timeOfDay45.getFieldType((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100" + "'", str37, "100");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(timeOfDay45);
    }

    @Test
    public void test14759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14759");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("31201957");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '31201957' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14760");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        int int6 = localTime5.getMillisOfSecond();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay11 = dateTime8.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay11.withPeriodAdded(readablePeriod13, (int) '4');
        boolean boolean16 = localTime5.equals((java.lang.Object) timeOfDay15);
        org.joda.time.LocalTime localTime18 = localTime5.withMillisOfSecond((int) ' ');
        int int19 = localTime5.getSecondOfMinute();
        org.joda.time.LocalTime.Property property20 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime22 = property20.setCopy(242);
        org.joda.time.LocalTime localTime23 = property20.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test14761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14761");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DurationField durationField10 = property9.getLeapDurationField();
        org.joda.time.DateTime dateTime11 = property9.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime11.toYearMonthDay();
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths(1654);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test14762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14762");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        boolean boolean10 = property8.isLeap();
        org.joda.time.DateTime dateTime11 = property8.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minus((long) 12);
        org.joda.time.DateTime.Property property14 = dateTime11.year();
        org.joda.time.DateTime dateTime16 = dateTime11.plus(3600035L);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime16.withTime(34826508, 31268, 859, 356460000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34826508 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test14763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14763");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology16 = chronology11.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int19 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withPivotYear((int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter21.withOffsetParsed();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology24);
        org.joda.time.LocalTime localTime27 = localTime25.plusHours((int) (byte) 10);
        int int28 = localTime27.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = dateTimeFormatter22.print((org.joda.time.ReadablePartial) localTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
    }

    @Test
    public void test14764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14764");
        long long6 = java.util.Date.UTC(803, 648, 31441771, 3360491, 1380, 31201957);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2753533314757000L + "'", long6 == 2753533314757000L);
    }

    @Test
    public void test14765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14765");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-292278));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14766");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(7);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(1);
        org.joda.time.DateTime dateTime12 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property13 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.plus(readableDuration15);
        org.joda.time.Chronology chronology17 = dateTime14.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(136, 597, 63, 46, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 136 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test14767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14767");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime10.toLocalTime();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        long long20 = chronology15.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.LocalTime localTime27 = dateTime23.toLocalTime();
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter7.withChronology(chronology28);
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter7.withLocale(locale32);
        java.util.Locale locale34 = dateTimeFormatter7.getLocale();
        org.joda.time.Chronology chronology35 = dateTimeFormatter7.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter36 = dateTimeFormatter7.getPrinter();
        java.util.Locale locale37 = dateTimeFormatter7.getLocale();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(locale34);
        org.junit.Assert.assertNull(chronology35);
        org.junit.Assert.assertNull(dateTimePrinter36);
        org.junit.Assert.assertNull(locale37);
    }

    @Test
    public void test14768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14768");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((-61200000L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType3 = timeOfDay1.getFieldType(61);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 61");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test14769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14769");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMinutes(54060000);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfDay(32772);
        org.joda.time.TimeOfDay timeOfDay17 = dateTime16.toTimeOfDay();
        int int18 = dateTime16.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-01-01T15:49:00.100+15:01" + "'", str12, "0001-01-01T15:49:00.100+15:01");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test14770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14770");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 157);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test14771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14771");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        int int22 = dateTime21.getEra();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        java.util.Locale locale29 = null;
        int int30 = property28.getMaximumShortTextLength(locale29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean32 = property28.equals((java.lang.Object) dateTimeFieldType31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property28.getFieldType();
        boolean boolean34 = dateTime21.isSupported(dateTimeFieldType33);
        org.joda.time.DateTime dateTime36 = dateTime9.withField(dateTimeFieldType33, 1);
        java.util.Date date37 = dateTime9.toDate();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay42 = dateTime39.toTimeOfDay();
        java.util.Date date43 = dateTime39.toDate();
        long long44 = date43.getTime();
        int int45 = date43.getHours();
        date43.setSeconds((int) (short) 0);
        date43.setHours(114);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay54 = dateTime51.toTimeOfDay();
        java.util.Date date55 = dateTime51.toDate();
        long long56 = date55.getTime();
        java.time.Instant instant57 = date55.toInstant();
        java.util.Date date58 = java.util.Date.from(instant57);
        boolean boolean59 = date43.before(date58);
        boolean boolean60 = date37.after(date43);
        date37.setSeconds(2398905);
        int int63 = date37.getYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Jan 30 17:29:45 UTC 1");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Mon Jan 05 18:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L + "'", long56 == 100L);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1899) + "'", int63 == (-1899));
    }

    @Test
    public void test14772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14772");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        java.time.Instant instant6 = date5.toInstant();
        int int7 = date5.getMinutes();
        long long8 = date5.getTime();
        java.lang.String str9 = date5.toGMTString();
        date5.setYear(8);
        int int12 = date5.getYear();
        int int13 = date5.getMonth();
        java.lang.String str14 = date5.toLocaleString();
        int int15 = date5.getDate();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Jan 01 00:00:00 UTC 1908");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str9, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Jan 1, 1908 12:00:00 AM" + "'", str14, "Jan 1, 1908 12:00:00 AM");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test14773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14773");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        java.lang.String str18 = timeOfDay17.toString();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours(2);
        org.joda.time.Chronology chronology21 = timeOfDay20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.hourOfDay();
        java.lang.String str26 = dateTimeField24.getAsText(103117371305000L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "T15:35:00.200" + "'", str18, "T15:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2" + "'", str26, "2");
    }

    @Test
    public void test14774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14774");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setLenient(true);
        int int14 = calendar7.getLeastMaximum(16);
        calendar7.set(0, 13, (int) (byte) -1);
        calendar7.set(82849780, 31021786, 50460, (int) (short) 0, 16);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+15:01\",offset=54060000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=82849780,MONTH=31021786,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=50460,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=0,MINUTE=16,SECOND=0,MILLISECOND=100,ZONE_OFFSET=54060000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1200000 + "'", int14 == 1200000);
    }

    @Test
    public void test14775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14775");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay11 = dateTime8.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.millisOfSecond();
        int int13 = property12.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property12.addToCopy(100);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.millisOfSecond();
        boolean boolean22 = timeOfDay15.isEqual((org.joda.time.ReadablePartial) timeOfDay20);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay15.withMinuteOfHour((int) '#');
        java.lang.String str25 = timeOfDay24.toString();
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay24.plusHours(2);
        org.joda.time.Chronology chronology28 = timeOfDay27.getChronology();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property38 = dateTime36.hourOfDay();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        boolean boolean42 = dateTimeZone40.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime43 = dateTime36.withZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int47 = dateTimeZone45.getStandardOffset((long) (short) 0);
        long long49 = dateTimeZone40.getMillisKeepLocal(dateTimeZone45, (long) 0);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone45);
        java.lang.String str51 = dateTimeZone45.getID();
        org.joda.time.Chronology chronology52 = chronology28.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField53 = chronology28.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay(0L, chronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(13, 34879239, 20666508, 918, 744, 56940, chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 918 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "T15:35:00.200" + "'", str25, "T15:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3600000) + "'", int47 == (-3600000));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 57660000L + "'", long49 == 57660000L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-01:00" + "'", str51, "-01:00");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test14776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14776");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = chronology8.days();
        org.joda.time.DurationField durationField13 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.dayOfMonth();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay21 = dateTime18.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        int int23 = property22.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay25 = property22.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property28 = timeOfDay25.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay25.minusHours(1970);
        int int31 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay30);
        long long34 = dateTimeField16.getDifferenceAsLong(255600100L, (long) 79200000);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2L + "'", long34 == 2L);
    }

    @Test
    public void test14777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14777");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int2 = localTime1.getSecondOfMinute();
        int int3 = localTime1.getMinuteOfHour();
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime1.minus(readablePeriod5);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay11 = dateTime8.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.millisOfSecond();
        int int13 = property12.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property12.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay15.hourOfDay();
        boolean boolean19 = localTime6.isBefore((org.joda.time.ReadablePartial) timeOfDay15);
        java.lang.String str21 = localTime6.toString("79200000");
        org.joda.time.DateTime dateTime22 = localTime6.toDateTimeToday();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.LocalTime localTime28 = dateTime24.toLocalTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTimeISO();
        org.joda.time.DateTime dateTime40 = dateTime38.plusMinutes((int) (short) 100);
        java.lang.String str41 = dateTime40.toString();
        int int42 = dateTime40.getSecondOfMinute();
        boolean boolean43 = dateTime24.equals((java.lang.Object) dateTime40);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((java.lang.Object) dateTime40);
        org.joda.time.DateTime.Property property45 = dateTime40.centuryOfEra();
        org.joda.time.Chronology chronology46 = dateTime40.getChronology();
        org.joda.time.DateTime dateTime48 = dateTime40.minusYears(36);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay53 = dateTime50.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property54 = timeOfDay53.millisOfSecond();
        int int55 = property54.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay57 = property54.addToCopy(100);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay62 = dateTime59.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property63 = timeOfDay62.millisOfSecond();
        boolean boolean64 = timeOfDay57.isEqual((org.joda.time.ReadablePartial) timeOfDay62);
        int int65 = timeOfDay62.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray66 = timeOfDay62.getFieldTypes();
        org.joda.time.TimeOfDay.Property property67 = timeOfDay62.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay69 = property67.setCopy(1);
        java.lang.String str70 = timeOfDay69.toString();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.TimeOfDay timeOfDay72 = timeOfDay69.plus(readablePeriod71);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = timeOfDay72.getFieldTypes();
        org.joda.time.LocalTime localTime75 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int76 = localTime75.getSecondOfMinute();
        int int77 = localTime75.getMinuteOfHour();
        org.joda.time.DateTime dateTime78 = localTime75.toDateTimeToday();
        boolean boolean80 = dateTime78.isBefore((long) 6);
        org.joda.time.DateTime dateTime81 = dateTime78.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTime.Property property83 = dateTime78.property(dateTimeFieldType82);
        int int84 = timeOfDay72.indexOf(dateTimeFieldType82);
        org.joda.time.DurationFieldType durationFieldType85 = dateTimeFieldType82.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType82.getRangeDurationType();
        boolean boolean87 = dateTime48.isSupported(dateTimeFieldType82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime89 = localTime6.withField(dateTimeFieldType82, 22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "79200000" + "'", str21, "79200000");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0001-01-01T15:49:00.100+15:01" + "'", str41, "0001-01-01T15:49:00.100+15:01");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "T01:01:00.100" + "'", str70, "T01:01:00.100");
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNull(durationFieldType85);
        org.junit.Assert.assertNull(durationFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test14778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14778");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(chronology10);
        org.joda.time.DurationField durationField12 = chronology10.weeks();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology10.add(readablePeriod13, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology10);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((-82799998L), chronology10);
        org.joda.time.LocalTime.Property property19 = localTime18.hourOfDay();
        org.joda.time.LocalTime localTime21 = property19.addCopy(0L);
        org.joda.time.LocalTime localTime23 = property19.addCopy(1328);
        org.joda.time.LocalTime localTime24 = property19.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField25 = property19.getField();
        org.joda.time.LocalTime localTime27 = property19.addCopy((long) 82800003);
        org.joda.time.LocalTime.Property property28 = localTime27.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test14779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14779");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        java.lang.String str21 = timeOfDay20.toString();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plus(readablePeriod22);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay20.plusHours((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay30 = property28.addNoWrapToCopy((int) ' ');
        org.joda.time.Chronology chronology31 = timeOfDay30.getChronology();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay20.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.yearOfEra();
        int int35 = dateTimeField33.getMinimumValue(17461L);
        long long38 = dateTimeField33.set(1045164112193280000L, 2880114);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "T01:01:00.100" + "'", str21, "T01:01:00.100");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 90825459934080000L + "'", long38 == 90825459934080000L);
    }

    @Test
    public void test14780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14780");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.getLocalTime();
        org.joda.time.LocalTime localTime18 = property13.addNoWrapToCopy(1200000);
        org.joda.time.LocalTime localTime19 = property13.roundHalfCeilingCopy();
        int int20 = property13.getLeapAmount();
        org.joda.time.DurationField durationField21 = property13.getDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test14781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14781");
        java.util.Date date1 = new java.util.Date("Jan 23, 1918 6:00:00 AM");
        org.junit.Assert.assertEquals(date1.toString(), "Wed Jan 23 06:00:00 UTC 1918");
    }

    @Test
    public void test14782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14782");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(300063L);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime4 = localTime1.plus(readablePeriod3);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(404);
        org.joda.time.LocalTime.Property property8 = localTime7.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test14783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14783");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay17 = dateTime14.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.millisOfSecond();
        int int19 = property18.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay21 = property18.addToCopy(100);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.millisOfSecond();
        boolean boolean28 = timeOfDay21.isEqual((org.joda.time.ReadablePartial) timeOfDay26);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay21.withMinuteOfHour((int) '#');
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime dateTime39 = dateTime38.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property43 = dateTime42.monthOfYear();
        org.joda.time.DateTime dateTime45 = property43.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime46 = property43.getDateTime();
        org.joda.time.DateTime dateTime47 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime47);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone50.getName((long) 3, locale52);
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime55 = dateTime12.toDateTime(dateTimeZone50);
        org.joda.time.DateTime.Property property56 = dateTime12.minuteOfDay();
        org.joda.time.LocalTime localTime57 = dateTime12.toLocalTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+15:01" + "'", str53, "+15:01");
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localTime57);
    }

    @Test
    public void test14784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14784");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay17 = dateTime14.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.millisOfSecond();
        int int19 = property18.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay21 = property18.addToCopy(100);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.millisOfSecond();
        boolean boolean28 = timeOfDay21.isEqual((org.joda.time.ReadablePartial) timeOfDay26);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay21.withMinuteOfHour((int) '#');
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime dateTime39 = dateTime38.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property43 = dateTime42.monthOfYear();
        org.joda.time.DateTime dateTime45 = property43.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime46 = property43.getDateTime();
        org.joda.time.DateTime dateTime47 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime47);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone50.getName((long) 3, locale52);
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime55 = dateTime12.toDateTime(dateTimeZone50);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.plus(readablePeriod56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusHours(365);
        long long60 = dateTime57.getMillis();
        int int61 = dateTime57.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+15:01" + "'", str53, "+15:01");
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1644572722934L + "'", long60 == 1644572722934L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
    }

    @Test
    public void test14785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14785");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        java.time.Instant instant6 = date5.toInstant();
        int int7 = date5.getHours();
        date5.setDate((int) (byte) 10);
        java.lang.String str10 = date5.toLocaleString();
        java.lang.String str11 = date5.toLocaleString();
        int int12 = date5.getMonth();
        java.time.Instant instant13 = date5.toInstant();
        java.util.Date date14 = java.util.Date.from(instant13);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Jan 10 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Jan 10, 1970 12:00:00 AM" + "'", str10, "Jan 10, 1970 12:00:00 AM");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan 10, 1970 12:00:00 AM" + "'", str11, "Jan 10, 1970 12:00:00 AM");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Jan 10 00:00:00 UTC 1970");
    }

    @Test
    public void test14786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14786");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getName(62L, locale2);
        int int5 = dateTimeZone0.getOffset((-607919900L));
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+15:01" + "'", str3, "+15:01");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54060000 + "'", int5 == 54060000);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+15:01");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+15:01");
    }

    @Test
    public void test14787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14787");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime11 = localTime9.withSecondOfMinute(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime11.minus(readablePeriod12);
        java.lang.String str14 = localTime11.toString();
        int[] intArray16 = new int[] { 10 };
        int int17 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime11, intArray16);
        int int19 = dateTimeField8.getLeapAmount(10L);
        int int21 = dateTimeField8.getMaximumValue((-54059990L));
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeField8.getAsShortText(108, locale23);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "00:46:01.995" + "'", str14, "00:46:01.995");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 999 + "'", int17 == 999);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "108" + "'", str24, "108");
    }

    @Test
    public void test14788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14788");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMinutes(54060000);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.plus(readablePeriod15);
        boolean boolean18 = dateTime16.isEqual((-526694400000L));
        org.joda.time.Chronology chronology19 = dateTime16.getChronology();
        org.joda.time.Instant instant20 = dateTime16.toInstant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-01-01T15:49:00.100+15:01" + "'", str12, "0001-01-01T15:49:00.100+15:01");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(instant20);
    }

    @Test
    public void test14789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14789");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(4080100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalTime localTime4 = localTime1.withField(dateTimeFieldType2, 1);
        org.joda.time.LocalTime localTime6 = localTime1.plusHours(292278993);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        boolean boolean9 = localTime6.isSupported(durationFieldType8);
        java.lang.String str10 = durationFieldType8.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "minutes" + "'", str10, "minutes");
    }

    @Test
    public void test14790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14790");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime12 = localTime10.withSecondOfMinute(1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime12, 14, locale14);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localTime12.getFields();
        int int17 = localTime12.size();
        org.joda.time.LocalTime localTime19 = localTime12.minusMinutes(937);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime12.minus(readablePeriod20);
        org.joda.time.LocalTime localTime23 = localTime21.minusMinutes((int) (byte) 1);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.parse("19");
        org.joda.time.DateMidnight dateMidnight26 = dateTime25.toDateMidnight();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay31 = dateTime28.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property32 = timeOfDay31.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay31.withPeriodAdded(readablePeriod33, (int) '4');
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay35.plusSeconds((-3600000));
        java.lang.String str38 = timeOfDay35.toString();
        boolean boolean39 = dateTime25.equals((java.lang.Object) str38);
        org.joda.time.DateTime.Property property40 = dateTime25.monthOfYear();
        org.joda.time.DateTime dateTime42 = property40.setCopy(6);
        boolean boolean43 = localTime21.equals((java.lang.Object) dateTime42);
        org.joda.time.LocalTime localTime45 = localTime21.plusMillis(31201065);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "14" + "'", str15, "14");
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "T15:01:00.100" + "'", str38, "T15:01:00.100");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localTime45);
    }

    @Test
    public void test14791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14791");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        calendar7.setLenient(false);
        calendar7.clear();
        calendar7.setFirstDayOfWeek(672);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyearOfCentury();
        org.joda.time.DurationField durationField24 = chronology22.weeks();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.secondOfDay();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) calendar7, chronology22);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-54060000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT+15:01\",offset=54060000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=672,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=54060000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test14792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14792");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        boolean boolean10 = property8.isLeap();
        int int11 = property8.getMinimumValue();
        org.joda.time.DateTime dateTime12 = property8.roundHalfCeilingCopy();
        boolean boolean14 = dateTime12.isEqual((long) 35);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test14793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14793");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfDay();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime15 = localTime14.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalTime localTime18 = localTime14.withPeriodAdded(readablePeriod16, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalTime localTime20 = localTime18.plus(readablePeriod19);
        int int21 = localTime20.getHourOfDay();
        int int22 = localTime20.getHourOfDay();
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localTime20, locale23);
        int int25 = localTime20.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "24" + "'", str24, "24");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2783120 + "'", int25 == 2783120);
    }

    @Test
    public void test14794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14794");
        java.util.Date date5 = new java.util.Date((-17707952), 34832017, 34924307, (-14640), 937);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 15 15:37:00 UTC 14707770");
    }

    @Test
    public void test14795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14795");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        boolean boolean12 = durationFieldType0.isSupported(chronology9);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.minuteOfDay();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology22);
        org.joda.time.LocalTime.Property property26 = localTime25.millisOfSecond();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property36 = dateTime34.hourOfDay();
        org.joda.time.DateTime dateTime37 = property36.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfYear(8);
        org.joda.time.DateTime dateTime41 = dateTime39.withMillis((long) 10);
        long long42 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime44 = dateTime39.withYear(365);
        org.joda.time.DateTime dateTime46 = dateTime39.withYear((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime39.getZone();
        org.joda.time.Chronology chronology48 = chronology9.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 62134999260000L + "'", long42 == 62134999260000L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test14796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14796");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        long long13 = dateTimeField10.set((long) (short) 0, 6);
        int int14 = dateTimeField10.getMaximumValue();
        boolean boolean16 = dateTimeField10.isLeap((long) 70);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology26);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        org.joda.time.DateTimeField dateTimeField32 = property30.getField();
        org.joda.time.LocalTime localTime33 = property30.getLocalTime();
        int int34 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localTime33);
        int int36 = dateTimeField10.getMaximumValue(1644541202022L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-32400000L) + "'", long13 == (-32400000L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 24 + "'", int14 == 24);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 24 + "'", int36 == 24);
    }

    @Test
    public void test14797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14797");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime10 = localTime9.toDateTimeToday();
        int int11 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property12 = dateTime3.minuteOfHour();
        org.joda.time.DurationField durationField13 = property12.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNull(durationField13);
    }

    @Test
    public void test14798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14798");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        java.lang.String str30 = property13.getName();
        org.joda.time.LocalTime localTime32 = property13.setCopy(516);
        org.joda.time.LocalTime localTime33 = property13.getLocalTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay38 = dateTime35.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property39 = timeOfDay38.millisOfSecond();
        org.joda.time.DurationField durationField40 = property39.getDurationField();
        java.lang.String str41 = property39.getAsShortText();
        org.joda.time.DateTimeField dateTimeField42 = property39.getField();
        org.joda.time.DurationField durationField43 = property39.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay45 = property39.addNoWrapToCopy((int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay45.plusHours(12);
        org.joda.time.DateTime dateTime48 = timeOfDay45.toDateTimeToday();
        int int49 = property13.compareTo((org.joda.time.ReadablePartial) timeOfDay45);
        org.joda.time.DateTimeField dateTimeField50 = property13.getField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134999260000L + "'", long29 == 62134999260000L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "millisOfSecond" + "'", str30, "millisOfSecond");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "100" + "'", str41, "100");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test14799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14799");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.hourOfDay();
        org.joda.time.TimeOfDay.Property property22 = timeOfDay20.minuteOfHour();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        int int24 = property22.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test14800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14800");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(357, (-45), 7986263, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 357 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14801");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str3 = dateTimeZone1.getShortName((long) 0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property5 = dateTime4.weekyear();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.DateTime dateTime7 = property5.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test14802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14802");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        int int6 = date5.getHours();
        int int7 = date5.getHours();
        date5.setMonth((int) ' ');
        date5.setSeconds(14);
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromDateFields(date5);
        int int13 = timeOfDay12.size();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.plusMillis(13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay12.plusSeconds(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.Chronology chronology27 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.minuteOfDay();
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology27);
        org.joda.time.LocalTime.Property property31 = localTime30.millisOfSecond();
        org.joda.time.LocalTime localTime32 = property31.roundCeilingCopy();
        org.joda.time.LocalTime localTime33 = property31.getLocalTime();
        org.joda.time.LocalTime localTime34 = property31.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime36 = property31.setCopy(23);
        org.joda.time.LocalTime localTime38 = localTime36.plusMillis((int) (short) 1);
        org.joda.time.LocalTime localTime40 = localTime36.withMinuteOfHour(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime45.minusDays(7);
        org.joda.time.DateTime dateTime49 = dateTime45.withYear(1);
        org.joda.time.Chronology chronology50 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.minuteOfDay();
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology50);
        org.joda.time.LocalTime.Property property54 = localTime53.millisOfSecond();
        org.joda.time.LocalTime localTime55 = property54.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField56 = property54.getField();
        java.lang.String str57 = property54.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property54.getFieldType();
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType58.getDurationType();
        org.joda.time.LocalTime localTime61 = localTime36.withField(dateTimeFieldType58, 21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay63 = timeOfDay17.withField(dateTimeFieldType58, 31501425);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31501425 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Sep 01 00:00:14 UTC 1972");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Property[millisOfSecond]" + "'", str57, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(localTime61);
    }

    @Test
    public void test14803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14803");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str3 = dateTimeZone1.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(dateTimeZone1);
        int[] intArray6 = timeOfDay5.getValues();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertNotNull(intArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[8, 45, 23, 276]");
    }

    @Test
    public void test14804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14804");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(8);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        long long14 = dateTime10.getMillis();
        java.util.Date date15 = dateTime10.toDate();
        org.joda.time.DateTime dateTime17 = dateTime10.withCenturyOfEra(244);
        int int18 = dateTime10.getDayOfMonth();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.parse("19");
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property30 = dateTime28.hourOfDay();
        int int31 = dateTime28.getMillisOfSecond();
        org.joda.time.DateTime.Property property32 = dateTime28.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        org.joda.time.DateTime dateTime35 = dateTime20.withField(dateTimeFieldType33, 75);
        int int36 = dateTime10.get(dateTimeFieldType33);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(7);
        org.joda.time.DateTime dateTime45 = dateTime41.withYear(1);
        org.joda.time.Chronology chronology46 = dateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.minuteOfDay();
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology46);
        org.joda.time.LocalTime.Property property50 = localTime49.millisOfSecond();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime54.minusDays(7);
        org.joda.time.DateTime dateTime58 = dateTime54.withYear(1);
        org.joda.time.DateTime dateTime59 = dateTime58.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property60 = dateTime58.hourOfDay();
        org.joda.time.DateTime dateTime61 = property60.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime63 = dateTime61.withDayOfYear(8);
        org.joda.time.DateTime dateTime65 = dateTime63.withMillis((long) 10);
        long long66 = property50.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime63);
        java.lang.String str67 = property50.getName();
        java.util.Locale locale68 = null;
        java.lang.String str69 = property50.getAsShortText(locale68);
        org.joda.time.LocalTime localTime70 = property50.roundFloorCopy();
        org.joda.time.Chronology chronology71 = localTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay73 = new org.joda.time.TimeOfDay((java.lang.Object) dateTimeFieldType33, chronology71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-62104064400000L) + "'", long14 == (-62104064400000L));
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Jan 02 23:00:00 UTC 2");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 62134912800000L + "'", long66 == 62134912800000L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "millisOfSecond" + "'", str67, "millisOfSecond");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0" + "'", str69, "0");
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
    }

    @Test
    public void test14805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14805");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime12 = localTime10.withSecondOfMinute(1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime12, 14, locale14);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localTime12.getFields();
        org.joda.time.LocalTime localTime18 = localTime12.withMillisOfDay(8);
        org.joda.time.DateTime dateTime19 = localTime18.toDateTimeToday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime19.withEra(3267);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3267 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "14" + "'", str15, "14");
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test14806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14806");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int4 = dateTimeZone2.getStandardOffset((long) (short) 0);
        long long7 = dateTimeZone2.convertLocalToUTC(480100L, false);
        java.lang.String str9 = dateTimeZone2.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1483228799900L), dateTimeZone2);
        java.util.Locale locale12 = null;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromCalendarFields(calendar13);
        java.lang.Object obj15 = calendar13.clone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3600000) + "'", int4 == (-3600000));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4080100L + "'", long7 == 4080100L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1483228799900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1922,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "java.util.GregorianCalendar[time=-1483228799900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1922,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "java.util.GregorianCalendar[time=-1483228799900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1922,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "java.util.GregorianCalendar[time=-1483228799900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1922,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test14807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14807");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withYearOfCentury(22);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfCentury(13);
        org.joda.time.DateTime dateTime11 = dateTime8.withDurationAdded((-6946559736719900L), 801);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test14808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14808");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfDay();
        long long40 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime38.plusWeeks(2022);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(7);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(1);
        org.joda.time.Chronology chronology52 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime38.toMutableDateTime(chronology52);
        org.joda.time.DateTimeField dateTimeField55 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology52);
        int int57 = dateTime56.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 45 + "'", int57 == 45);
    }

    @Test
    public void test14809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14809");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.DateTime dateTime18 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str22 = dateTimeZone20.getShortName((long) 0);
        org.joda.time.DateTime dateTime23 = dateTime18.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime8.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime8.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime8.minus(readableDuration27);
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfDay();
        org.joda.time.DateTime dateTime31 = property29.addToCopy((long) (short) 1);
        org.joda.time.DateTime dateTime32 = property29.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 2000);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.hours();
        boolean boolean36 = localTime34.isSupported(durationFieldType35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays(7);
        org.joda.time.DateTime dateTime44 = dateTime40.withYear(1);
        org.joda.time.Chronology chronology45 = dateTime40.getChronology();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime(chronology45);
        org.joda.time.DurationField durationField47 = chronology45.weeks();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.secondOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology45.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField51 = chronology45.minuteOfHour();
        org.joda.time.DurationField durationField52 = durationFieldType35.getField(chronology45);
        java.lang.Object obj53 = null;
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime61 = dateTime59.minusDays(7);
        org.joda.time.DateTime dateTime63 = dateTime59.withYear(1);
        org.joda.time.Chronology chronology64 = dateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.minuteOfDay();
        boolean boolean67 = durationFieldType55.isSupported(chronology64);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((long) 3, chronology64);
        java.lang.String str69 = chronology64.toString();
        org.joda.time.DateTimeField dateTimeField70 = chronology64.centuryOfEra();
        org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay(obj53, chronology64);
        boolean boolean72 = durationFieldType35.isSupported(chronology64);
        org.joda.time.DateTime dateTime73 = dateTime32.toDateTime(chronology64);
        org.joda.time.LocalTime localTime74 = org.joda.time.LocalTime.fromMillisOfDay(17251151L, chronology64);
        org.joda.time.DateTimeField dateTimeField75 = chronology64.era();
        org.joda.time.DateTimeField dateTimeField76 = chronology64.yearOfCentury();
        long long80 = chronology64.add((long) 244, (-68613944760000L), 3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-01:00" + "'", str22, "-01:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ISOChronology[-01:00]" + "'", str69, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-205841834279756L) + "'", long80 == (-205841834279756L));
    }

    @Test
    public void test14810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14810");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        java.util.Date date2 = calendar0.getTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay7 = dateTime4.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.millisOfSecond();
        int int9 = property8.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addToCopy(100);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        boolean boolean18 = timeOfDay11.isEqual((org.joda.time.ReadablePartial) timeOfDay16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology20);
        boolean boolean22 = timeOfDay16.isBefore((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay16.withFieldAdded(durationFieldType23, 2);
        boolean boolean26 = calendar0.before((java.lang.Object) durationFieldType23);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.Chronology chronology35 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology35.withZone(dateTimeZone41);
        org.joda.time.DurationField durationField43 = chronology42.hours();
        org.joda.time.DurationField durationField44 = durationFieldType23.getField(chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.dayOfYear();
        org.joda.time.DurationField durationField47 = chronology42.years();
        org.joda.time.DateTimeField dateTimeField48 = chronology42.weekOfWeekyear();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test14811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14811");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime.Property property34 = dateTime33.secondOfDay();
        long long35 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property37 = dateTime15.dayOfYear();
        org.joda.time.DateTime dateTime38 = property37.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight39 = dateTime38.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test14812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14812");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.get();
        int int9 = property5.get();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        int int16 = property5.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.TimeOfDay timeOfDay18 = property5.addToCopy(15);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes((int) (short) 100);
        java.lang.String str31 = dateTime30.toString();
        java.util.GregorianCalendar gregorianCalendar32 = dateTime30.toGregorianCalendar();
        gregorianCalendar32.add(11, 11);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        org.joda.time.DateTime dateTime44 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property48 = dateTime47.monthOfYear();
        int int49 = dateTime47.getSecondOfDay();
        org.joda.time.DateTime dateTime51 = dateTime47.withMillisOfDay(70);
        boolean boolean52 = gregorianCalendar32.after((java.lang.Object) dateTime47);
        org.joda.time.DateTime.Property property53 = dateTime47.dayOfMonth();
        int int54 = property5.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime47.minus(readableDuration55);
        int int57 = dateTime56.getDayOfYear();
        org.joda.time.DateTime.Property property58 = dateTime56.weekyear();
        int int59 = property58.get();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str31, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar32);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 85680 + "'", int49 == 85680);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 365 + "'", int57 == 365);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test14813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14813");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int2 = localTime1.getSecondOfMinute();
        int int3 = localTime1.getMinuteOfHour();
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime1.minus(readablePeriod5);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay11 = dateTime8.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.millisOfSecond();
        int int13 = property12.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property12.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay15.hourOfDay();
        boolean boolean19 = localTime6.isBefore((org.joda.time.ReadablePartial) timeOfDay15);
        int int20 = timeOfDay15.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay22 = timeOfDay15.withMinuteOfHour(31261360);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31261360 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test14814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14814");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.centuryOfEra();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        java.util.Locale locale20 = null;
        java.util.Calendar calendar21 = dateTime17.toCalendar(locale20);
        int int23 = calendar21.getMaximum(9);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromCalendarFields(calendar21);
        java.time.Instant instant25 = calendar21.toInstant();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.fromCalendarFields(calendar21);
        java.lang.String str27 = localTime26.toString();
        int int28 = localTime26.getMinuteOfHour();
        int int29 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localTime26);
        int int30 = localTime26.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "22:08:00.100" + "'", str27, "22:08:00.100");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2922789 + "'", int29 == 2922789);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
    }

    @Test
    public void test14815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14815");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        java.util.Locale locale15 = null;
        org.joda.time.LocalTime localTime16 = property13.setCopy("14", locale15);
        org.joda.time.LocalTime localTime18 = property13.addWrapFieldToCopy(69);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str22 = dateTimeZone20.getShortName((long) 0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime.Property property24 = dateTime23.weekyear();
        org.joda.time.DurationField durationField25 = property24.getRangeDurationField();
        org.joda.time.DurationField durationField26 = property24.getRangeDurationField();
        org.joda.time.DateTime dateTime27 = property24.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime28 = localTime18.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear(1);
        org.joda.time.Chronology chronology40 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.minuteOfDay();
        boolean boolean43 = durationFieldType31.isSupported(chronology40);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) 3, chronology40);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.now(chronology40);
        org.joda.time.DurationField durationField46 = chronology40.seconds();
        org.joda.time.DurationField durationField47 = chronology40.seconds();
        org.joda.time.DurationField durationField48 = chronology40.halfdays();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(300063L);
        int int51 = localTime50.getHourOfDay();
        java.lang.String str52 = localTime50.toString();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime56.minusDays(7);
        org.joda.time.DateTime dateTime60 = dateTime56.withYear(1);
        org.joda.time.Chronology chronology61 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.secondOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology61.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology68 = chronology61.withZone(dateTimeZone67);
        boolean boolean69 = dateTimeZone67.isFixed();
        org.joda.time.DateTime dateTime70 = localTime50.toDateTimeToday(dateTimeZone67);
        long long72 = dateTimeZone67.convertUTCToLocal((long) 61200002);
        org.joda.time.Chronology chronology73 = chronology40.withZone(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField74 = chronology73.weekyear();
        boolean boolean75 = property29.equals((java.lang.Object) chronology73);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-01:00" + "'", str22, "-01:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNull(durationField25);
        org.junit.Assert.assertNull(durationField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 23 + "'", int51 == 23);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "23:05:00.063" + "'", str52, "23:05:00.063");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 57600002L + "'", long72 == 57600002L);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test14816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14816");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime12 = localTime10.withSecondOfMinute(1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime12, 14, locale14);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localTime12.getFields();
        int int17 = localTime12.size();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property30 = dateTime29.monthOfYear();
        int int31 = dateTime29.getSecondOfDay();
        org.joda.time.DateTime dateTime33 = dateTime29.withMillisOfDay(70);
        org.joda.time.DateTime dateTime34 = localTime12.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime34.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "14" + "'", str15, "14");
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 85680 + "'", int31 == 85680);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test14817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14817");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime8.hourOfDay();
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear(8);
        org.joda.time.Chronology chronology14 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.DurationField durationField16 = chronology14.seconds();
        org.joda.time.DurationField durationField17 = chronology14.years();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromMillisOfDay(480100L, chronology14);
        org.joda.time.DurationField durationField19 = chronology14.halfdays();
        org.joda.time.DurationField durationField20 = chronology14.hours();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test14818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14818");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str16 = dateTimeFieldType15.toString();
        boolean boolean17 = localTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = dateTime19.toTimeOfDay();
        org.joda.time.LocalTime localTime23 = dateTime19.toLocalTime();
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.years();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int29 = localTime27.indexOf(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property39 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = property39.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property41 = dateTime40.weekOfWeekyear();
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        org.joda.time.DateTime dateTime44 = property41.withMaximumValue();
        org.joda.time.DateTime dateTime45 = dateTime44.withTimeAtStartOfDay();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime50 = dateTime45.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = localTime27.toDateTimeToday(dateTimeZone47);
        org.joda.time.DateTime dateTime53 = dateTime51.withYear(63);
        org.joda.time.DateTime dateTime55 = dateTime53.plusYears(255);
        int int56 = dateTime55.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "monthOfYear" + "'", str16, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
    }

    @Test
    public void test14819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14819");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.DateTime.Property property21 = dateTime17.millisOfDay();
        int int22 = dateTime17.getSecondOfMinute();
        int int23 = dateTime17.getWeekyear();
        org.joda.time.DateTime.Property property24 = dateTime17.millisOfSecond();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.millisOfSecond();
        int int31 = property30.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay33 = property30.addToCopy(100);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay38 = dateTime35.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property39 = timeOfDay38.millisOfSecond();
        boolean boolean40 = timeOfDay33.isEqual((org.joda.time.ReadablePartial) timeOfDay38);
        int int41 = timeOfDay38.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = timeOfDay38.getFieldTypes();
        org.joda.time.TimeOfDay.Property property43 = timeOfDay38.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays(7);
        org.joda.time.DateTime dateTime52 = dateTime48.withYear(1);
        org.joda.time.Chronology chronology53 = dateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.minuteOfDay();
        org.joda.time.DurationField durationField56 = chronology53.months();
        boolean boolean57 = dateTimeFieldType44.isSupported(chronology53);
        int int58 = timeOfDay38.indexOf(dateTimeFieldType44);
        int int59 = dateTime17.get(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test14820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14820");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int2 = localTime1.getSecondOfMinute();
        int int3 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime localTime5 = localTime1.plusHours(1);
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test14821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14821");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        int int15 = gregorianCalendar13.getMinimalDaysInFirstWeek();
        int int16 = gregorianCalendar13.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = gregorianCalendar13.getActualMaximum(82849780);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 82849780");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test14822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14822");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes((int) (short) 100);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.plusYears(14);
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = dateTime12.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfYear();
        org.joda.time.DurationField durationField30 = chronology26.centuries();
        org.joda.time.DurationField durationField31 = chronology26.months();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime12, chronology26);
        org.joda.time.TimeOfDay timeOfDay33 = org.joda.time.TimeOfDay.fromMillisOfDay(6842880000017L, chronology26);
        org.joda.time.DateTimeField dateTimeField34 = chronology26.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str13, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-62104057919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=48,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test14823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14823");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology13 = chronology8.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.minuteOfDay();
        long long21 = dateTimeField18.add(3600000L, 83280);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.Chronology chronology30 = dateTime25.getChronology();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(chronology30);
        org.joda.time.DurationField durationField32 = chronology30.weeks();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.minuteOfHour();
        long long35 = dateTimeField33.roundHalfCeiling((long) (byte) 100);
        java.lang.String str36 = dateTimeField33.toString();
        boolean boolean38 = dateTimeField33.isLeap((long) 11);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay43 = dateTime40.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property44 = timeOfDay43.millisOfSecond();
        org.joda.time.DurationField durationField45 = property44.getDurationField();
        java.lang.String str46 = property44.getAsShortText();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property44.getAsShortText(locale47);
        org.joda.time.TimeOfDay timeOfDay50 = property44.addNoWrapToCopy((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay52 = property44.setCopy("31");
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay58 = dateTime55.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property59 = timeOfDay58.millisOfSecond();
        int int60 = property59.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay62 = property59.addToCopy(100);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime66 = dateTime64.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay67 = dateTime64.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property68 = timeOfDay67.millisOfSecond();
        boolean boolean69 = timeOfDay62.isEqual((org.joda.time.ReadablePartial) timeOfDay67);
        int int70 = timeOfDay67.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = timeOfDay67.getFieldTypes();
        org.joda.time.TimeOfDay.Property property72 = timeOfDay67.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay74 = property72.setCopy(1);
        java.lang.String str75 = timeOfDay74.toString();
        java.lang.String str76 = timeOfDay74.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray77 = timeOfDay74.getFieldTypes();
        int int78 = timeOfDay74.getSecondOfMinute();
        int[] intArray79 = timeOfDay74.getValues();
        int[] intArray81 = dateTimeField33.set((org.joda.time.ReadablePartial) timeOfDay52, 0, intArray79, 37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray82 = timeOfDay52.getFieldTypes();
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime87 = dateTime85.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay88 = dateTime85.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property89 = timeOfDay88.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.TimeOfDay timeOfDay92 = timeOfDay88.withPeriodAdded(readablePeriod90, (int) '4');
        int[] intArray93 = timeOfDay92.getValues();
        java.util.Locale locale95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = dateTimeField18.set((org.joda.time.ReadablePartial) timeOfDay52, 653, intArray93, "", locale95);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5000400000L + "'", long21 == 5000400000L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DateTimeField[minuteOfHour]" + "'", str36, "DateTimeField[minuteOfHour]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "100" + "'", str48, "100");
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "T01:00:00.100" + "'", str75, "T01:00:00.100");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "T01:00:00.100" + "'", str76, "T01:00:00.100");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[37, 0, 0, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[37, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray82);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(timeOfDay88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(timeOfDay92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[23, 0, 0, 100]");
    }

    @Test
    public void test14824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14824");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        long long10 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime7.withMillisOfDay(1428);
        org.joda.time.DateTime.Property property13 = dateTime7.centuryOfEra();
        boolean boolean14 = dateTime7.isEqualNow();
        org.joda.time.DateTime.Property property15 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime16 = dateTime7.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-62104063919900L) + "'", long10 == (-62104063919900L));
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test14825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14825");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTime dateTime43 = dateTime38.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime28.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime28.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime28.minus(readableDuration47);
        int int49 = property18.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DurationField durationField50 = property18.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay51 = property18.getTimeOfDay();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay51.withPeriodAdded(readablePeriod52, 53);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.minusDays(7);
        org.joda.time.DateTime dateTime62 = dateTime58.withYear(1);
        org.joda.time.DateTime dateTime63 = dateTime62.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str67 = dateTimeZone65.getShortName((long) 0);
        org.joda.time.DateTime dateTime68 = dateTime63.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime72 = dateTime70.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime74 = dateTime72.minusDays(7);
        org.joda.time.DateTime dateTime76 = dateTime72.withYear(1);
        boolean boolean77 = dateTime68.isBefore((org.joda.time.ReadableInstant) dateTime76);
        int int78 = dateTime68.getEra();
        org.joda.time.LocalTime localTime79 = dateTime68.toLocalTime();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.LocalTime localTime82 = localTime79.withPeriodAdded(readablePeriod80, 9);
        org.joda.time.LocalTime localTime84 = localTime82.plusMinutes(22);
        org.joda.time.LocalTime.Property property85 = localTime82.minuteOfHour();
        org.joda.time.LocalTime localTime86 = property85.getLocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = property85.getFieldType();
        org.joda.time.DurationFieldType durationFieldType88 = dateTimeFieldType87.getDurationType();
        org.joda.time.TimeOfDay timeOfDay90 = timeOfDay54.withFieldAdded(durationFieldType88, 31321450);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-01:00" + "'", str67, "-01:00");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(durationFieldType88);
        org.junit.Assert.assertNotNull(timeOfDay90);
    }

    @Test
    public void test14826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14826");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.minus(readablePeriod3);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime8 = localTime6.minusMinutes(12);
        int int9 = localTime8.size();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.DateTime dateTime18 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime19.plusMinutes((int) (short) 100);
        java.lang.String str22 = dateTime21.toString();
        java.util.GregorianCalendar gregorianCalendar23 = dateTime21.toGregorianCalendar();
        boolean boolean24 = gregorianCalendar23.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay25 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar23);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfEra();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean37 = dateTime35.isSupported(dateTimeFieldType36);
        org.joda.time.TimeOfDay.Property property38 = timeOfDay25.property(dateTimeFieldType36);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay25.minusMillis(70);
        org.joda.time.Chronology chronology41 = timeOfDay25.getChronology();
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay25.plusSeconds(358);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(7);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(1);
        org.joda.time.Chronology chronology52 = dateTime47.getChronology();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime(chronology52);
        org.joda.time.DurationField durationField54 = chronology52.weeks();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime58 = dateTime55.withField(dateTimeFieldType56, 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTime.Property property60 = dateTime58.property(dateTimeFieldType59);
        org.joda.time.TimeOfDay.Property property61 = timeOfDay25.property(dateTimeFieldType59);
        boolean boolean62 = localTime8.isSupported(dateTimeFieldType59);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType59.getRangeDurationType();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime68 = dateTime66.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime70 = dateTime68.minusDays(7);
        org.joda.time.DateTime dateTime72 = dateTime68.withYear(1);
        org.joda.time.Chronology chronology73 = dateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.minuteOfDay();
        org.joda.time.LocalTime localTime76 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology73);
        org.joda.time.LocalTime.Property property77 = localTime76.millisOfSecond();
        org.joda.time.LocalTime localTime78 = property77.roundCeilingCopy();
        org.joda.time.LocalTime localTime79 = property77.getLocalTime();
        org.joda.time.LocalTime localTime80 = property77.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime82 = property77.addCopy(79680);
        org.joda.time.LocalTime localTime83 = property77.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime88 = dateTime86.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime90 = dateTime88.minusDays(7);
        org.joda.time.DateTime dateTime92 = dateTime88.withYear(1);
        org.joda.time.Chronology chronology93 = dateTime88.getChronology();
        org.joda.time.DateTimeField dateTimeField94 = chronology93.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField95 = chronology93.clockhourOfDay();
        org.joda.time.LocalTime localTime96 = new org.joda.time.LocalTime(946771200000L, chronology93);
        org.joda.time.DateTimeField dateTimeField97 = chronology93.secondOfDay();
        org.joda.time.LocalTime localTime98 = new org.joda.time.LocalTime((java.lang.Object) localTime83, chronology93);
        org.joda.time.DateTimeField dateTimeField99 = dateTimeFieldType59.getField(chronology93);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str22, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNotNull(dateTimeField99);
    }

    @Test
    public void test14827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14827");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(7, 9, 11);
        java.util.Calendar.Builder builder6 = builder4.setLenient(true);
        java.util.Calendar calendar7 = builder4.build();
        java.util.Calendar.Builder builder11 = builder4.setTimeOfDay(1328, 30961509, (int) (short) 1);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str24 = dateTimeZone22.getShortName((long) 0);
        org.joda.time.DateTime dateTime25 = dateTime20.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        boolean boolean34 = dateTime25.isBefore((org.joda.time.ReadableInstant) dateTime33);
        java.util.Locale locale35 = null;
        java.util.Calendar calendar36 = dateTime33.toCalendar(locale35);
        calendar36.clear();
        calendar36.clear();
        java.util.TimeZone timeZone39 = calendar36.getTimeZone();
        java.util.Calendar.Builder builder40 = builder4.setTimeZone(timeZone39);
        java.util.Date date42 = new java.util.Date((long) (byte) -1);
        int int43 = date42.getMinutes();
        java.util.Date date45 = new java.util.Date((long) (byte) -1);
        int int46 = date45.getMinutes();
        boolean boolean47 = date42.after(date45);
        date42.setSeconds((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder50 = builder4.setInstant(date42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-61922016000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=284,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:00" + "'", str24, "-01:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:40 UTC 1970");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 59 + "'", int43 == 59);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 59 + "'", int46 == 59);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test14828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14828");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        long long18 = dateTimeZone16.convertUTCToLocal((long) (short) 1);
        java.lang.String str19 = dateTimeZone16.getID();
        long long21 = dateTimeZone16.nextTransition(2997516173999000L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3599999L) + "'", long18 == (-3599999L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-01:00" + "'", str19, "-01:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2997516173999000L + "'", long21 == 2997516173999000L);
    }

    @Test
    public void test14829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14829");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.hourOfDay();
        org.joda.time.DurationField durationField13 = chronology10.hours();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 70, chronology10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.dayOfWeek();
        org.joda.time.DurationField durationField16 = chronology10.weekyears();
        boolean boolean17 = durationFieldType0.isSupported(chronology10);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test14830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14830");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(8);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        long long14 = dateTime10.getMillis();
        java.util.Date date15 = dateTime10.toDate();
        org.joda.time.DateTime dateTime17 = dateTime10.withCenturyOfEra(244);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str30 = dateTimeZone28.getShortName((long) 0);
        org.joda.time.DateTime dateTime31 = dateTime26.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear(1);
        boolean boolean40 = dateTime31.isBefore((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean41 = dateTime39.isEqualNow();
        org.joda.time.DateTime dateTime43 = dateTime39.minusSeconds(22);
        org.joda.time.DateTime.Property property44 = dateTime39.weekOfWeekyear();
        long long45 = dateTime39.getMillis();
        org.joda.time.DateTime.Property property46 = dateTime39.millisOfSecond();
        int int47 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime49 = dateTime17.withDayOfYear(13);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-62104064400000L) + "'", long14 == (-62104064400000L));
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Jan 02 23:00:00 UTC 2");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-01:00" + "'", str30, "-01:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-62104063919900L) + "'", long45 == (-62104063919900L));
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test14831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14831");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology10.halfdays();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = chronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology10.getZone();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(7680100L, chronology10);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(3600009L, chronology10);
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = localTime17.toString("Nov 3, 2105 12:31:02 AM", locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: N");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test14832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14832");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.getLocalTime();
        org.joda.time.LocalTime localTime17 = property13.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime19 = property13.addCopy(0);
        org.joda.time.LocalTime localTime20 = property13.withMinimumValue();
        org.joda.time.LocalTime localTime22 = localTime20.minusMinutes(188);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test14833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14833");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime.Property property14 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(chronology25);
        org.joda.time.DurationField durationField27 = chronology25.weeks();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology25.add(readablePeriod28, 1L, 8);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear(1);
        org.joda.time.DateTime dateTime40 = dateTime39.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property41 = dateTime39.hourOfDay();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        boolean boolean45 = dateTimeZone43.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime46 = dateTime39.withZone(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int50 = dateTimeZone48.getStandardOffset((long) (short) 0);
        long long52 = dateTimeZone43.getMillisKeepLocal(dateTimeZone48, (long) 0);
        org.joda.time.Chronology chronology53 = chronology25.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime54 = dateTime16.withZoneRetainFields(dateTimeZone48);
        org.joda.time.DateTime dateTime56 = dateTime54.withMinuteOfHour(17);
        int int57 = dateTime54.getYearOfEra();
        org.joda.time.DateTime dateTime59 = dateTime54.withMillisOfSecond(244);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.plus(readablePeriod60);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3600000) + "'", int50 == (-3600000));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test14834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14834");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(8);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay18.withPeriodAdded(readablePeriod20, (int) '4');
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime25 = localTime23.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime27 = localTime25.withMillisOfDay(2);
        boolean boolean28 = timeOfDay18.isAfter((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.LocalTime.Property property29 = localTime25.secondOfMinute();
        java.lang.String str30 = property29.getAsString();
        org.joda.time.LocalTime localTime31 = property29.roundFloorCopy();
        org.joda.time.LocalTime localTime32 = property29.roundHalfEvenCopy();
        org.joda.time.TimeOfDay timeOfDay33 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int34 = timeOfDay33.size();
        int[] intArray35 = timeOfDay33.getValues();
        chronology13.validate((org.joda.time.ReadablePartial) localTime32, intArray35);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0]");
    }

    @Test
    public void test14835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14835");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        int int6 = localTime5.getMillisOfSecond();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay11 = dateTime8.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay11.withPeriodAdded(readablePeriod13, (int) '4');
        boolean boolean16 = localTime5.equals((java.lang.Object) timeOfDay15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = chronology25.add(readablePeriod27, 9L, 5);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay15.withChronologyRetainFields(chronology25);
        org.joda.time.DurationField durationField32 = chronology25.seconds();
        org.joda.time.DateTimeField dateTimeField33 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology25.secondOfDay();
        java.lang.String str37 = dateTimeField35.getAsShortText((long) 927);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "82800" + "'", str37, "82800");
    }

    @Test
    public void test14836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14836");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        java.time.Instant instant6 = date5.toInstant();
        int int7 = date5.getMinutes();
        date5.setYear(2);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        java.util.Date date15 = dateTime11.toDate();
        java.time.Instant instant16 = date15.toInstant();
        int int17 = date15.getMinutes();
        long long18 = date15.getTime();
        java.lang.String str19 = date15.toGMTString();
        int int20 = date15.getSeconds();
        int int21 = date15.getMonth();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        java.util.Date date27 = dateTime23.toDate();
        long long28 = date27.getTime();
        java.time.Instant instant29 = date27.toInstant();
        boolean boolean30 = date15.after(date27);
        java.lang.String str31 = date27.toGMTString();
        int int32 = date5.compareTo(date27);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Jan 01 00:00:00 UTC 1902");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str19, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str31, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test14837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14837");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfDay();
        long long23 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(7);
        org.joda.time.DateTime dateTime32 = dateTime28.withYear(1);
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property34 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime35 = property34.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfYear(8);
        org.joda.time.DateTime dateTime39 = dateTime37.withMillis((long) 10);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime43.minusDays(7);
        org.joda.time.DateTime dateTime47 = dateTime43.withYear(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays(7);
        org.joda.time.DateTime dateTime56 = dateTime52.withYear(1);
        org.joda.time.Chronology chronology57 = dateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.minuteOfDay();
        org.joda.time.DurationField durationField60 = chronology57.months();
        boolean boolean61 = dateTimeFieldType48.isSupported(chronology57);
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType48.getDurationType();
        boolean boolean63 = dateTime47.isSupported(dateTimeFieldType48);
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType48.getRangeDurationType();
        boolean boolean65 = dateTime37.isSupported(dateTimeFieldType48);
        boolean boolean66 = localTime2.isSupported(dateTimeFieldType48);
        int int67 = localTime2.getMillisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalTime localTime69 = localTime2.minus(readablePeriod68);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 38 + "'", int67 == 38);
        org.junit.Assert.assertNotNull(localTime69);
    }

    @Test
    public void test14838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14838");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        calendar1.setFirstDayOfWeek(13);
        int int4 = calendar1.getWeeksInWeekYear();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay9 = dateTime6.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.millisOfSecond();
        int int11 = property10.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay13 = property10.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay13.hourOfDay();
        boolean boolean17 = calendar1.before((java.lang.Object) timeOfDay13);
        java.util.Calendar.Builder builder18 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder20 = builder18.setLenient(false);
        java.util.Calendar.Builder builder24 = builder18.setDate((int) '#', (-1), (int) '4');
        java.util.Calendar.Builder builder29 = builder24.setTimeOfDay((int) (short) 10, 59, (-1), (int) (short) 10);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(7);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(1);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTime dateTime43 = dateTime38.withZone(dateTimeZone40);
        java.util.TimeZone timeZone44 = dateTimeZone40.toTimeZone();
        java.util.Calendar.Builder builder45 = builder29.setTimeZone(timeZone44);
        calendar1.setTimeZone(timeZone44);
        calendar1.setTimeInMillis((long) 2);
        calendar1.clear();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime53.minusDays(7);
        org.joda.time.DateTime dateTime57 = dateTime53.withYear(1);
        org.joda.time.DateTime dateTime58 = dateTime57.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime59 = dateTime58.toDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime59.plusMinutes((int) (short) 100);
        java.lang.String str62 = dateTime61.toString();
        java.util.GregorianCalendar gregorianCalendar63 = dateTime61.toGregorianCalendar();
        gregorianCalendar63.setFirstDayOfWeek((int) (short) -1);
        gregorianCalendar63.add((int) (short) 10, 365);
        boolean boolean69 = gregorianCalendar63.isWeekDateSupported();
        int int70 = calendar1.compareTo((java.util.Calendar) gregorianCalendar63);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=13,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str62, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test14839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14839");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.withPeriodAdded(readablePeriod6, (int) '4');
        int[] intArray9 = timeOfDay8.getValues();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withMinuteOfHour(11);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay8.minuteOfHour();
        org.joda.time.DateTime dateTime13 = timeOfDay8.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay8.withPeriodAdded(readablePeriod14, (-17707952));
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay16.withPeriodAdded(readablePeriod17, 92);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[23, 0, 0, 100]");
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay19);
    }

    @Test
    public void test14840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14840");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        int int7 = date5.getDate();
        date5.setYear(995);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromDateFields(date5);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Jan 01 00:00:00 UTC 2895");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test14841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14841");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(8);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 10);
        org.joda.time.DateTime dateTime17 = dateTime12.withDurationAdded((long) 16, 5);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.DurationField durationField28 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.minuteOfHour();
        int int30 = dateTime17.get(dateTimeField29);
        org.joda.time.DateTime dateTime32 = dateTime17.minusDays((int) (short) 10);
        org.joda.time.DateTime.Property property33 = dateTime32.weekOfWeekyear();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(7);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(1);
        org.joda.time.DateTime dateTime42 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTimeISO();
        int int44 = dateTime43.getEra();
        org.joda.time.DateTime.Property property45 = dateTime43.weekyear();
        org.joda.time.DateTime dateTime46 = property45.roundFloorCopy();
        org.joda.time.DateTime dateTime47 = property45.roundHalfEvenCopy();
        int int48 = dateTime47.getMillisOfSecond();
        org.joda.time.DateTime.Property property49 = dateTime47.dayOfWeek();
        int int50 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime.Property property51 = dateTime32.era();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test14842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14842");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology10.add(readablePeriod16, (long) 100, 17);
        org.joda.time.DurationField durationField20 = chronology10.months();
        org.joda.time.DurationField durationField21 = chronology10.years();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(chronology10);
        org.joda.time.LocalTime localTime24 = localTime22.plusMinutes(82800100);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test14843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14843");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMinutes(54060000);
        long long15 = dateTime11.getMillis();
        int int16 = dateTime11.getDayOfMonth();
        org.joda.time.DateTime dateTime18 = dateTime11.plusMinutes(53);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str31 = dateTimeZone29.getShortName((long) 0);
        org.joda.time.DateTime dateTime32 = dateTime27.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        boolean boolean41 = dateTime32.isBefore((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime32.getEra();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime45 = dateTime32.withDurationAdded(readableDuration43, (int) '4');
        org.joda.time.DateTime dateTime47 = dateTime32.withYear(365);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMinutes(1969);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.plus(readablePeriod50);
        boolean boolean52 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology53 = dateTime49.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-62104057919900L) + "'", long15 == (-62104057919900L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-01:00" + "'", str31, "-01:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
    }

    @Test
    public void test14844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14844");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        calendar24.clear();
        calendar24.clear();
        java.util.TimeZone timeZone27 = calendar24.getTimeZone();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone27);
        calendar28.setTimeInMillis((long) 75);
        java.util.Date date31 = calendar28.getTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=75,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=75,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test14845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14845");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology10.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField18 = chronology17.minutes();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology20);
        org.joda.time.LocalTime localTime23 = localTime21.plusHours((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalTime localTime25 = localTime23.minus(readablePeriod24);
        org.joda.time.LocalTime localTime27 = localTime25.withMillisOfDay(1428);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay32 = dateTime29.toTimeOfDay();
        int int33 = timeOfDay32.getSecondOfMinute();
        int[] intArray34 = timeOfDay32.getValues();
        chronology17.validate((org.joda.time.ReadablePartial) localTime25, intArray34);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (-2079), chronology17);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 31201005, chronology17);
        org.joda.time.DateMidnight dateMidnight38 = dateTime37.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateMidnight38);
    }

    @Test
    public void test14846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14846");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean9 = property5.equals((java.lang.Object) dateTimeFieldType8);
        org.joda.time.TimeOfDay timeOfDay10 = property5.withMaximumValue();
        int int11 = property5.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property5.getFieldType();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
    }

    @Test
    public void test14847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14847");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test14848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14848");
        java.util.Date date1 = new java.util.Date((long) 6);
        java.lang.Object obj2 = date1.clone();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test14849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14849");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = chronology8.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = chronology15.hours();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((java.lang.Object) localTime17, chronology18);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test14850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14850");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(62134912800000L);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime4 = localTime1.withPeriodAdded(readablePeriod2, 79200);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromMillisOfDay((long) 11);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology16);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property30 = dateTime28.hourOfDay();
        org.joda.time.DateTime dateTime31 = property30.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfYear(8);
        org.joda.time.DateTime dateTime35 = dateTime33.withMillis((long) 10);
        long long36 = property20.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime33.plus(readableDuration37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime41 = localTime6.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        boolean boolean45 = dateTimeZone43.equals((java.lang.Object) (-3600000));
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeZone43.getShortName(10L, locale47);
        boolean boolean49 = localTime6.equals((java.lang.Object) locale47);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime55.minusDays(7);
        org.joda.time.DateTime dateTime59 = dateTime55.withYear(1);
        org.joda.time.Chronology chronology60 = dateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.minuteOfDay();
        boolean boolean63 = durationFieldType51.isSupported(chronology60);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((long) 3, chronology60);
        org.joda.time.LocalTime.Property property65 = localTime64.secondOfMinute();
        int int66 = localTime6.compareTo((org.joda.time.ReadablePartial) localTime64);
        org.joda.time.LocalTime localTime68 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int69 = localTime68.getSecondOfMinute();
        int int70 = localTime68.getMinuteOfHour();
        org.joda.time.DateTime dateTime71 = localTime68.toDateTimeToday();
        org.joda.time.DateTime dateTime72 = localTime64.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        int int73 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime64);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime77 = dateTime75.plusMillis(11);
        org.joda.time.DateTime.Property property78 = dateTime75.weekOfWeekyear();
        org.joda.time.DateTime dateTime79 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int83 = dateTimeZone81.getStandardOffset((long) (short) 0);
        int int85 = dateTimeZone81.getOffsetFromLocal((long) 4);
        int int87 = dateTimeZone81.getStandardOffset((-62073219600000L));
        long long89 = dateTimeZone81.convertUTCToLocal((long) 1200000);
        int int91 = dateTimeZone81.getOffsetFromLocal(31525455685680L);
        org.joda.time.DateTime dateTime92 = dateTime75.withZone(dateTimeZone81);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 62134912800000L + "'", long36 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-01:00" + "'", str48, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3600000) + "'", int83 == (-3600000));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3600000) + "'", int85 == (-3600000));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3600000) + "'", int87 == (-3600000));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-2400000L) + "'", long89 == (-2400000L));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3600000) + "'", int91 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test14851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14851");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(72, 12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 72 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14852");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay15 = dateTime12.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay15.withPeriodAdded(readablePeriod17, (int) '4');
        int[] intArray20 = timeOfDay19.getValues();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.withMinuteOfHour(11);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) timeOfDay22, 712, locale24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str38 = dateTimeZone36.getShortName((long) 0);
        org.joda.time.DateTime dateTime39 = dateTime34.withZone(dateTimeZone36);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime(dateTimeZone36);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str42 = dateTimeFieldType41.toString();
        boolean boolean43 = localTime40.isSupported(dateTimeFieldType41);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay48 = dateTime45.toTimeOfDay();
        org.joda.time.LocalTime localTime49 = dateTime45.toLocalTime();
        org.joda.time.Chronology chronology50 = localTime49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.years();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType41.getField(chronology50);
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.now(chronology50);
        org.joda.time.LocalTime.Property property54 = localTime53.minuteOfHour();
        org.joda.time.LocalTime localTime55 = property54.roundHalfEvenCopy();
        java.lang.String str56 = property54.getAsShortText();
        org.joda.time.LocalTime localTime57 = property54.roundHalfCeilingCopy();
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localTime57, locale58);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        java.util.Locale locale64 = null;
        java.lang.String str65 = dateTimeZone62.getShortName(6842880000000L, locale64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 937, dateTimeZone62);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((java.lang.Object) str59, dateTimeZone62);
        java.lang.String str68 = dateTimeZone62.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 0, 0, 100]");
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "712" + "'", str25, "712");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-01:00" + "'", str38, "-01:00");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "monthOfYear" + "'", str42, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localTime55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "45" + "'", str56, "45");
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "9" + "'", str59, "9");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-01:00" + "'", str65, "-01:00");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-01:00" + "'", str68, "-01:00");
    }

    @Test
    public void test14853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14853");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.withMinimumValue();
        int[] intArray31 = localTime30.getValues();
        int[] intArray32 = localTime30.getValues();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str36 = dateTimeZone34.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone34.getName((-1L), locale39);
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(dateTimeZone34);
        long long44 = dateTimeZone34.convertLocalToUTC(62104088221982L, false);
        org.joda.time.DateTime dateTime45 = localTime30.toDateTimeToday(dateTimeZone34);
        org.joda.time.LocalTime.Property property46 = localTime30.millisOfDay();
        int int47 = property46.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-01:00" + "'", str36, "-01:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-01:00" + "'", str40, "-01:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 62104091821982L + "'", long44 == 62104091821982L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test14854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14854");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology10);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property14.addCopy(62134912800000L);
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay19 = org.joda.time.TimeOfDay.fromMillisOfDay(10800100L, chronology17);
        org.joda.time.DurationField durationField20 = chronology17.months();
        org.joda.time.DurationField durationField21 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test14855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14855");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusHours((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime4.minusHours(17);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localTime7.getFields();
        org.joda.time.LocalTime.Property property9 = localTime7.millisOfDay();
        java.lang.String str10 = property9.getAsString();
        int int11 = property9.get();
        org.joda.time.LocalTime localTime12 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(7);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(1);
        org.joda.time.DateTime dateTime21 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str25 = dateTimeZone23.getShortName((long) 0);
        org.joda.time.DateTime dateTime26 = dateTime21.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime28 = dateTime26.withCenturyOfEra(365);
        org.joda.time.DateTime dateTime31 = dateTime28.withDurationAdded(2871866106000L, 1268);
        org.joda.time.DateTime dateTime33 = dateTime28.plusWeeks(470);
        long long34 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay39 = dateTime36.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property40 = timeOfDay39.millisOfSecond();
        java.util.Locale locale41 = null;
        int int42 = property40.getMaximumShortTextLength(locale41);
        int int43 = property40.get();
        int int44 = property40.get();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay49 = dateTime46.toTimeOfDay();
        org.joda.time.LocalTime localTime50 = dateTime46.toLocalTime();
        int int51 = property40.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.TimeOfDay timeOfDay53 = property40.addToCopy(15);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime57.minusDays(7);
        org.joda.time.DateTime dateTime61 = dateTime57.withYear(1);
        org.joda.time.DateTime dateTime62 = dateTime61.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime63 = dateTime62.toDateTimeISO();
        org.joda.time.DateTime dateTime65 = dateTime63.plusMinutes((int) (short) 100);
        java.lang.String str66 = dateTime65.toString();
        java.util.GregorianCalendar gregorianCalendar67 = dateTime65.toGregorianCalendar();
        gregorianCalendar67.add(11, 11);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime74 = dateTime72.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime76 = dateTime74.minusDays(7);
        org.joda.time.DateTime dateTime78 = dateTime74.withYear(1);
        org.joda.time.DateTime dateTime79 = dateTime78.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime80 = dateTime79.toDateTimeISO();
        org.joda.time.DateTime dateTime82 = dateTime80.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property83 = dateTime82.monthOfYear();
        int int84 = dateTime82.getSecondOfDay();
        org.joda.time.DateTime dateTime86 = dateTime82.withMillisOfDay(70);
        boolean boolean87 = gregorianCalendar67.after((java.lang.Object) dateTime82);
        org.joda.time.DateTime.Property property88 = dateTime82.dayOfMonth();
        int int89 = property40.compareTo((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.ReadableDuration readableDuration90 = null;
        org.joda.time.DateTime dateTime91 = dateTime82.minus(readableDuration90);
        org.joda.time.ReadableDuration readableDuration92 = null;
        org.joda.time.DateTime dateTime94 = dateTime82.withDurationAdded(readableDuration92, 3599990);
        org.joda.time.DateTime dateTime95 = dateTime82.withTimeAtStartOfDay();
        int int96 = property9.compareTo((org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "61199999" + "'", str10, "61199999");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 61199999 + "'", int11 == 61199999);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-01:00" + "'", str25, "-01:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1089724601280101L) + "'", long34 == (-1089724601280101L));
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str66, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar67);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 85680 + "'", int84 == 85680);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test14856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14856");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        java.lang.Object obj14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str18 = dateTimeZone16.getShortName((long) 0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj14, dateTimeZone16);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(chronology28);
        org.joda.time.DurationField durationField30 = chronology28.weeks();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = chronology28.add(readablePeriod31, 1L, 8);
        org.joda.time.DateTime dateTime35 = dateTime19.toDateTime(chronology28);
        org.joda.time.DateTime dateTime36 = dateTime13.withChronology(chronology28);
        org.joda.time.DateTime dateTime39 = dateTime36.withDurationAdded(626L, 31081121);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-01:00" + "'", str18, "-01:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test14857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14857");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.hourOfHalfday();
        org.joda.time.Chronology chronology15 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.clockhourOfHalfday();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(3, 0, 20, chronology11);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology20);
        org.joda.time.LocalTime localTime23 = localTime21.plusHours((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay28 = dateTime25.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property29 = timeOfDay28.millisOfSecond();
        int int30 = property29.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay32 = property29.addToCopy(100);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay37 = dateTime34.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property38 = timeOfDay37.millisOfSecond();
        boolean boolean39 = timeOfDay32.isEqual((org.joda.time.ReadablePartial) timeOfDay37);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay32.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.minusMillis(100);
        int int44 = localTime21.compareTo((org.joda.time.ReadablePartial) timeOfDay41);
        org.joda.time.LocalTime localTime46 = localTime21.plusMinutes(3);
        int int47 = timeOfDay18.compareTo((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay18.minusSeconds(69);
        int int50 = timeOfDay49.getHourOfDay();
        org.joda.time.TimeOfDay.Property property51 = timeOfDay49.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay52 = property51.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay54 = property51.setCopy(2880);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2880 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(timeOfDay52);
    }

    @Test
    public void test14858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14858");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.LocalTime localTime16 = localTime14.minusSeconds(2);
        org.joda.time.LocalTime localTime18 = localTime14.plusMinutes((-292275054));
        org.joda.time.DateTime dateTime19 = localTime18.toDateTimeToday();
        org.joda.time.Chronology chronology20 = localTime18.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test14859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14859");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology9);
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.secondOfDay();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(3600035L, chronology9);
        org.joda.time.DurationField durationField16 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.dayOfYear();
        int int20 = dateTimeField18.getLeapAmount((long) (-3600000));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test14860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14860");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        java.util.Date date6 = dateTime2.toDate();
        java.time.Instant instant7 = date6.toInstant();
        int int8 = date6.getSeconds();
        java.util.Calendar.Builder builder9 = builder0.setInstant(date6);
        int int10 = date6.getMinutes();
        int int11 = date6.getMinutes();
        int int12 = date6.getHours();
        java.util.Date date14 = new java.util.Date((-1693699200000L));
        boolean boolean15 = date6.before(date14);
        java.time.Instant instant16 = date14.toInstant();
        date14.setDate(2880);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Mar 19 00:00:00 UTC 1924");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test14861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14861");
        java.util.Date date3 = new java.util.Date(11, 12, 31);
        int int4 = date3.getDay();
        int int5 = date3.getYear();
        int int6 = date3.getHours();
        org.junit.Assert.assertEquals(date3.toString(), "Wed Jan 31 00:00:00 UTC 1912");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test14862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14862");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = dateTime21.isEqualNow();
        org.joda.time.DateTime dateTime25 = dateTime21.minusSeconds(22);
        org.joda.time.DateTime dateTime27 = dateTime21.plusHours((int) '#');
        int int28 = dateTime21.getYearOfEra();
        org.joda.time.DateTime dateTime30 = dateTime21.plusMillis(35);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = dateTime34.toCalendar(locale37);
        calendar38.clear();
        boolean boolean41 = calendar38.after((java.lang.Object) (short) 0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime45.minusDays(7);
        org.joda.time.DateTime dateTime49 = dateTime45.withYear(1);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        java.lang.String str51 = property50.getName();
        boolean boolean52 = property50.isLeap();
        org.joda.time.DateTime dateTime53 = property50.roundHalfFloorCopy();
        int int54 = dateTime53.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime55 = dateTime53.toDateTime();
        boolean boolean56 = calendar38.before((java.lang.Object) dateTime55);
        org.joda.time.Chronology chronology57 = dateTime55.getChronology();
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime21.toMutableDateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime21.plusMillis(31261528);
        org.joda.time.DateTime dateTime61 = dateTime60.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "yearOfEra" + "'", str51, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test14863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14863");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str21 = dateTimeZone19.getShortName((long) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.DateTime dateTime32 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str36 = dateTimeZone34.getShortName((long) 0);
        org.joda.time.DateTime dateTime37 = dateTime32.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(7);
        org.joda.time.DateTime dateTime45 = dateTime41.withYear(1);
        boolean boolean46 = dateTime37.isBefore((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean47 = dateTime45.isEqualNow();
        org.joda.time.DateTime dateTime49 = dateTime45.minusSeconds(22);
        boolean boolean50 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime.Property property51 = dateTime45.dayOfYear();
        org.joda.time.DateTime dateTime53 = dateTime45.withYear(23);
        org.joda.time.DateTime dateTime55 = dateTime53.plusSeconds(358);
        org.joda.time.DateTime dateTime57 = dateTime55.withMillisOfSecond(0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-01:00" + "'", str36, "-01:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test14864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14864");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime31 = dateTime26.withYear(365);
        org.joda.time.DateTime dateTime33 = dateTime26.plusMinutes(13);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime38.minusDays(7);
        org.joda.time.DateTime dateTime42 = dateTime38.withYear(1);
        org.joda.time.Chronology chronology43 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.minuteOfDay();
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology43);
        org.joda.time.LocalTime.Property property47 = localTime46.millisOfSecond();
        org.joda.time.LocalTime localTime48 = property47.roundCeilingCopy();
        org.joda.time.LocalTime localTime49 = property47.getLocalTime();
        org.joda.time.LocalTime localTime50 = property47.roundHalfEvenCopy();
        org.joda.time.LocalTime.Property property51 = localTime50.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property51.getFieldType();
        boolean boolean53 = dateTime33.isSupported(dateTimeFieldType52);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay58 = dateTime55.toTimeOfDay();
        org.joda.time.LocalTime localTime59 = dateTime55.toLocalTime();
        int int60 = localTime59.getMillisOfSecond();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay65 = dateTime62.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property66 = timeOfDay65.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.TimeOfDay timeOfDay69 = timeOfDay65.withPeriodAdded(readablePeriod67, (int) '4');
        boolean boolean70 = localTime59.equals((java.lang.Object) timeOfDay69);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime74 = dateTime72.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime76 = dateTime74.minusDays(7);
        org.joda.time.DateTime dateTime78 = dateTime74.withYear(1);
        org.joda.time.Chronology chronology79 = dateTime74.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        long long84 = chronology79.add(readablePeriod81, 9L, 5);
        org.joda.time.TimeOfDay timeOfDay85 = timeOfDay69.withChronologyRetainFields(chronology79);
        org.joda.time.DurationField durationField86 = chronology79.seconds();
        org.joda.time.DateTimeField dateTimeField87 = chronology79.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField88 = chronology79.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        java.util.Locale locale92 = null;
        java.lang.String str93 = dateTimeZone90.getShortName(103117371305000L, locale92);
        org.joda.time.Chronology chronology94 = chronology79.withZone(dateTimeZone90);
        boolean boolean95 = dateTimeFieldType52.isSupported(chronology94);
        org.joda.time.TimeOfDay timeOfDay96 = new org.joda.time.TimeOfDay(chronology94);
        org.joda.time.DurationField durationField97 = chronology94.weeks();
        org.joda.time.DateTime dateTime98 = org.joda.time.DateTime.now(chronology94);
        org.joda.time.DateTimeField dateTimeField99 = chronology94.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 9L + "'", long84 == 9L);
        org.junit.Assert.assertNotNull(timeOfDay85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+00:00:00.032" + "'", str93, "+00:00:00.032");
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(durationField97);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertNotNull(dateTimeField99);
    }

    @Test
    public void test14865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14865");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = property18.setCopy(1);
        java.lang.String str21 = timeOfDay20.toString();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plus(readablePeriod22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = timeOfDay20.getFieldTypes();
        org.joda.time.TimeOfDay.Property property25 = timeOfDay20.minuteOfHour();
        org.joda.time.TimeOfDay.Property property26 = timeOfDay20.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int28 = timeOfDay20.getValue((-291478858));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -291478858");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "T01:00:00.100" + "'", str21, "T01:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test14866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14866");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.clockhourOfDay();
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test14867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14867");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        java.util.Date date8 = calendar7.getTime();
        calendar7.setLenient(false);
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        boolean boolean26 = dateTimeZone24.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology27 = chronology22.withZone(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter13.withZone(dateTimeZone24);
        boolean boolean29 = dateTimeFormatter13.isPrinter();
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter13.withLocale(locale30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        boolean boolean35 = dateTimeZone33.equals((java.lang.Object) (-3600000));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter13.withZone(dateTimeZone33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter13.withOffsetParsed();
        int int38 = dateTimeFormatter13.getDefaultYear();
        boolean boolean39 = dateTimeFormatter13.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter13.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser41 = dateTimeFormatter13.getParser();
        java.util.Locale locale42 = dateTimeFormatter13.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter13.withZoneUTC();
        boolean boolean44 = calendar7.equals((java.lang.Object) dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2000 + "'", int38 == 2000);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimeParser41);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test14868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14868");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str3 = dateTimeZone1.getShortName((long) 0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property5 = dateTime4.weekyear();
        org.joda.time.DurationField durationField6 = property5.getRangeDurationField();
        org.joda.time.DurationField durationField7 = property5.getRangeDurationField();
        org.joda.time.DateTime dateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = property5.getDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMillis(932);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test14869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14869");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        java.util.Locale locale7 = null;
        java.util.Calendar calendar8 = dateTime4.toCalendar(locale7);
        calendar8.clear();
        boolean boolean11 = calendar8.after((java.lang.Object) (short) 0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(7);
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        java.lang.String str21 = property20.getName();
        boolean boolean22 = property20.isLeap();
        org.joda.time.DateTime dateTime23 = property20.roundHalfFloorCopy();
        int int24 = dateTime23.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        boolean boolean26 = calendar8.before((java.lang.Object) dateTime25);
        org.joda.time.Chronology chronology27 = dateTime25.getChronology();
        boolean boolean28 = durationFieldType0.isSupported(chronology27);
        long long32 = chronology27.add(0L, 9L, 999);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.era();
        org.joda.time.DateTimeField dateTimeField35 = chronology27.era();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "yearOfEra" + "'", str21, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 8991L + "'", long32 == 8991L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test14870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14870");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.DurationField durationField13 = chronology8.weekyears();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology8);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test14871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14871");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology9);
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology9.add(readablePeriod12, 1L, 8);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property25 = dateTime23.hourOfDay();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        boolean boolean29 = dateTimeZone27.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime30 = dateTime23.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int34 = dateTimeZone32.getStandardOffset((long) (short) 0);
        long long36 = dateTimeZone27.getMillisKeepLocal(dateTimeZone32, (long) 0);
        org.joda.time.Chronology chronology37 = chronology9.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) "54060000", chronology37);
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(chronology37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray42 = chronology37.get(readablePeriod40, (long) 83280);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3600000) + "'", int34 == (-3600000));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test14872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14872");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        calendar0.clear((int) (short) 1);
        int int5 = calendar0.getLeastMaximum((int) (short) 10);
        java.util.Calendar.Builder builder6 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder10 = builder6.setDate(7, 9, 11);
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        java.util.Calendar calendar13 = builder10.build();
        java.util.Calendar.Builder builder17 = builder10.setTimeOfDay(1328, 30961509, (int) (short) 1);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str30 = dateTimeZone28.getShortName((long) 0);
        org.joda.time.DateTime dateTime31 = dateTime26.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear(1);
        boolean boolean40 = dateTime31.isBefore((org.joda.time.ReadableInstant) dateTime39);
        java.util.Locale locale41 = null;
        java.util.Calendar calendar42 = dateTime39.toCalendar(locale41);
        calendar42.clear();
        calendar42.clear();
        java.util.TimeZone timeZone45 = calendar42.getTimeZone();
        java.util.Calendar.Builder builder46 = builder10.setTimeZone(timeZone45);
        calendar0.setTimeZone(timeZone45);
        java.util.Locale locale50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = calendar0.getDisplayName(1923, (int) (short) 0, locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=?,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=45,SECOND=24,MILLISECOND=952,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 11 + "'", int5 == 11);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-61922016000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=284,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-01:00" + "'", str30, "-01:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test14873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14873");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str20 = dateTimeZone18.getShortName((long) 0);
        org.joda.time.DateTime dateTime21 = dateTime16.withZone(dateTimeZone18);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone18);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone18.getName((long) 712, locale24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = timeOfDay7.toDateTimeToday(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay7.withHourOfDay(0);
        org.joda.time.Chronology chronology30 = timeOfDay7.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.seconds();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:00" + "'", str20, "-01:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-01:00" + "'", str25, "-01:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test14874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14874");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime13.getEra();
        int int24 = dateTime13.getYearOfCentury();
        int int25 = dateTime13.getDayOfMonth();
        boolean boolean26 = dateTime13.isBeforeNow();
        java.util.GregorianCalendar gregorianCalendar27 = dateTime13.toGregorianCalendar();
        org.joda.time.DateTime.Property property28 = dateTime13.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = property28.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 31 + "'", int25 == 31);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNull(durationField29);
    }

    @Test
    public void test14875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14875");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) '4');
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName(9L, locale4);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone7.getName((long) 59, locale9);
        java.lang.String str12 = dateTimeZone7.getShortName((long) 145);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+01:52" + "'", str5, "+01:52");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+01:52");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+01:52" + "'", str10, "+01:52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+01:52" + "'", str12, "+01:52");
    }

    @Test
    public void test14876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14876");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology9);
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology9.add(readablePeriod12, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology9);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int19 = localTime18.getSecondOfMinute();
        int int20 = localTime18.getMinuteOfHour();
        org.joda.time.DateTime dateTime21 = localTime18.toDateTimeToday();
        boolean boolean22 = dateTime21.isAfterNow();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        int int29 = property28.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay31 = property28.addToCopy(100);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay36 = dateTime33.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.millisOfSecond();
        boolean boolean38 = timeOfDay31.isEqual((org.joda.time.ReadablePartial) timeOfDay36);
        int[] intArray39 = timeOfDay31.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = timeOfDay31.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType41.getDurationType();
        int int43 = dateTime21.get(dateTimeFieldType41);
        org.joda.time.TimeOfDay.Property property44 = timeOfDay16.property(dateTimeFieldType41);
        org.joda.time.TimeOfDay timeOfDay45 = property44.withMinimumValue();
        java.lang.String str46 = property44.getAsText();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
    }

    @Test
    public void test14877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14877");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(7, 9, 11);
        java.util.Calendar.Builder builder6 = builder4.setLenient(true);
        java.util.Calendar calendar7 = builder4.build();
        java.util.Calendar.Builder builder11 = builder4.setWeekDate(365, 97, (int) (short) 10);
        java.util.Calendar.Builder builder12 = new java.util.Calendar.Builder();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay17 = dateTime14.toTimeOfDay();
        java.util.Date date18 = dateTime14.toDate();
        java.time.Instant instant19 = date18.toInstant();
        int int20 = date18.getSeconds();
        java.util.Calendar.Builder builder21 = builder12.setInstant(date18);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.LocalTime localTime27 = dateTime23.toLocalTime();
        java.util.Locale locale28 = null;
        java.util.Calendar calendar29 = dateTime23.toCalendar(locale28);
        calendar29.setLenient(false);
        java.util.TimeZone timeZone32 = calendar29.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        java.util.Calendar.Builder builder34 = builder12.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder35 = builder11.setTimeZone(timeZone32);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withHourOfDay(7);
        java.util.GregorianCalendar gregorianCalendar44 = dateTime43.toGregorianCalendar();
        gregorianCalendar44.setTimeInMillis(1644572205789L);
        java.util.TimeZone timeZone47 = gregorianCalendar44.getTimeZone();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone47);
        java.util.Calendar.Builder builder49 = builder35.setTimeZone(timeZone47);
        java.util.Calendar.Builder builder53 = builder49.setTimeOfDay(85680, 108, 2783120);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-61922016000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=284,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644572725029,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=45,SECOND=25,MILLISECOND=29,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(gregorianCalendar44);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572725029,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=45,SECOND=25,MILLISECOND=29,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test14878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14878");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        long long16 = chronology8.add((long) 7, 5L, 11);
        org.joda.time.DateTimeField dateTimeField17 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(7);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(1);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str31 = dateTimeZone29.getShortName((long) 0);
        org.joda.time.DateTime dateTime32 = dateTime27.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        boolean boolean41 = dateTime32.isBefore((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean42 = dateTime40.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime40.getZone();
        org.joda.time.Chronology chronology44 = chronology8.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = chronology8.weekyearOfCentury();
        long long47 = dateTimeField45.roundHalfEven((-526694399904L));
        int int48 = dateTimeField45.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 62L + "'", long16 == 62L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-01:00" + "'", str31, "-01:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-536454000000L) + "'", long47 == (-536454000000L));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test14879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14879");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(8);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 10);
        org.joda.time.DateTime.Property property15 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime17 = property15.setCopy(86399);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime18.withDayOfWeek(6907);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 6907 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test14880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14880");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.lang.String str7 = property5.getAsShortText();
        java.util.Locale locale8 = null;
        int int9 = property5.getMaximumTextLength(locale8);
        org.joda.time.TimeOfDay timeOfDay10 = property5.getTimeOfDay();
        java.lang.String str11 = property5.getAsText();
        java.lang.String str12 = property5.getAsText();
        java.util.Locale locale13 = null;
        int int14 = property5.getMaximumTextLength(locale13);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100" + "'", str11, "100");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100" + "'", str12, "100");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test14881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14881");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone4.getName(0L, locale6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZone(dateTimeZone4);
        java.lang.Appendable appendable9 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.millisOfSecond();
        int int16 = property15.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay18 = property15.addToCopy(100);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay23 = dateTime20.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.millisOfSecond();
        boolean boolean25 = timeOfDay18.isEqual((org.joda.time.ReadablePartial) timeOfDay23);
        int int26 = timeOfDay23.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = timeOfDay23.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay23.withPeriodAdded(readablePeriod28, (int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.plusMinutes(12);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable9, (org.joda.time.ReadablePartial) timeOfDay32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
    }

    @Test
    public void test14882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14882");
        java.util.Date date1 = new java.util.Date((long) 6);
        java.lang.String str2 = date1.toLocaleString();
        java.lang.String str3 = date1.toLocaleString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay8 = dateTime5.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.millisOfSecond();
        java.util.Locale locale10 = null;
        int int11 = property9.getMaximumShortTextLength(locale10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean13 = property9.equals((java.lang.Object) dateTimeFieldType12);
        org.joda.time.DurationField durationField14 = property9.getRangeDurationField();
        boolean boolean15 = date1.equals((java.lang.Object) durationField14);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str2, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str3, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test14883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14883");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        java.util.Locale locale6 = dateTimeFormatter3.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter8.getParser();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        long long21 = chronology16.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter8.withChronology(chronology16);
        org.joda.time.Chronology chronology23 = dateTimeFormatter22.getChronology();
        org.joda.time.TimeOfDay timeOfDay24 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 31021256, chronology23);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.minusMinutes(31021460);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
    }

    @Test
    public void test14884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14884");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusHours((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime4.minusHours(17);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localTime7.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getRangeDurationType();
        int int11 = localTime7.indexOf(dateTimeFieldType9);
        org.joda.time.LocalTime localTime13 = localTime7.plusHours(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime15 = localTime7.withHourOfDay(190);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 190 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test14885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14885");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        java.lang.String str13 = localTime12.toString();
        org.joda.time.Chronology chronology14 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology14.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay21 = dateTime18.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        java.util.Locale locale23 = null;
        int int24 = property22.getMaximumShortTextLength(locale23);
        int int25 = property22.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField26 = property22.getField();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay31 = dateTime28.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property32 = timeOfDay31.millisOfSecond();
        int int33 = property32.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay35 = property32.addToCopy(100);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay40 = dateTime37.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property41 = timeOfDay40.millisOfSecond();
        boolean boolean42 = timeOfDay35.isEqual((org.joda.time.ReadablePartial) timeOfDay40);
        int int43 = timeOfDay40.size();
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) timeOfDay40, 14, locale45);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay40.plusMillis(16);
        int[] intArray50 = chronology14.get((org.joda.time.ReadablePartial) timeOfDay48, (long) 23);
        org.joda.time.DateTimeField dateTimeField51 = chronology14.dayOfWeek();
        org.joda.time.DurationField durationField52 = chronology14.millis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "01:00:00.000" + "'", str13, "01:00:00.000");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "14" + "'", str46, "14");
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test14886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14886");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        boolean boolean15 = gregorianCalendar13.isWeekDateSupported();
        java.util.Date date16 = gregorianCalendar13.getTime();
        java.time.Instant instant17 = gregorianCalendar13.toInstant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 03 00:48:00 UTC 2");
        org.junit.Assert.assertNotNull(instant17);
    }

    @Test
    public void test14887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14887");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        java.time.Instant instant6 = date5.toInstant();
        int int7 = date5.getHours();
        date5.setDate((int) (byte) 10);
        int int10 = date5.getYear();
        int int11 = date5.getTimezoneOffset();
        date5.setDate(31141312);
        int int14 = date5.getMinutes();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 06 00:00:00 UTC 87232");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 70 + "'", int10 == 70);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test14888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14888");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime12 = localTime10.withSecondOfMinute(1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime12, 14, locale14);
        java.lang.String str16 = localTime12.toString();
        java.lang.Object obj17 = null;
        boolean boolean18 = localTime12.equals(obj17);
        org.joda.time.LocalTime.Property property19 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime21 = property19.setCopy(999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = property19.setCopy("31321703");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31321703 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "14" + "'", str15, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "08:45:01.212" + "'", str16, "08:45:01.212");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test14889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14889");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean9 = property5.equals((java.lang.Object) dateTimeFieldType8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        java.lang.String str11 = property5.getAsShortText();
        boolean boolean13 = property5.equals((java.lang.Object) "08:39:01.289");
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property5.getFieldType();
        org.joda.time.TimeOfDay timeOfDay15 = property5.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100" + "'", str11, "100");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test14890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14890");
        java.util.Date date6 = new java.util.Date(883, 31355896, 1378, 34740000, 27, 0);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Mar 22 00:27:00 UTC 2619741");
    }

    @Test
    public void test14891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14891");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(32769L);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds(1380);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusHours(0);
        java.util.Locale locale7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = timeOfDay3.toString("ISOChronology[+00:00:00.014]", locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: I");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
    }

    @Test
    public void test14892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14892");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime10.toLocalTime();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        long long20 = chronology15.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = dateTimeFormatter21.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withZoneUTC();
        int int24 = dateTimeFormatter23.getDefaultYear();
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter23.withLocale(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withOffsetParsed();
        org.joda.time.Chronology chronology28 = dateTimeFormatter26.getChronolgy();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.Chronology chronology37 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology44 = chronology37.withZone(dateTimeZone43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter26.withChronology(chronology37);
        boolean boolean46 = dateTimeFormatter45.isOffsetParsed();
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter45.withLocale(locale47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter48.withOffsetParsed();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(dateTimePrinter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2000 + "'", int24 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
    }

    @Test
    public void test14893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14893");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime14 = dateTime11.withField(dateTimeFieldType12, 17);
        org.joda.time.DateTime.Property property15 = dateTime11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes((int) (short) 100);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property38 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = property38.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfYear(8);
        org.joda.time.Chronology chronology42 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        int int44 = dateTime26.get(dateTimeField43);
        int int46 = dateTimeField43.getMaximumValue((long) 69);
        org.joda.time.DurationField durationField47 = dateTimeField43.getLeapDurationField();
        long long49 = dateTimeField43.roundHalfEven((long) 122);
        org.joda.time.DurationField durationField50 = dateTimeField43.getLeapDurationField();
        boolean boolean51 = property15.equals((java.lang.Object) dateTimeField43);
        long long54 = dateTimeField43.addWrapField((-31532400000L), 38);
        int int57 = dateTimeField43.getDifference((long) 118, 0L);
        org.joda.time.DurationField durationField58 = dateTimeField43.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 292278993 + "'", int46 == 292278993);
        org.junit.Assert.assertNull(durationField47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 3600000L + "'", long49 == 3600000L);
        org.junit.Assert.assertNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1167613200000L + "'", long54 == 1167613200000L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNull(durationField58);
    }

    @Test
    public void test14894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14894");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        int int13 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime11.getZone();
        long long16 = dateTimeZone14.nextTransition(24L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str20 = dateTimeZone18.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone18.getName((-1L), locale23);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        long long27 = dateTimeZone14.getMillisKeepLocal(dateTimeZone18, (long) 70);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone14);
        long long30 = dateTimeZone14.previousTransition((long) 83280);
        int int32 = dateTimeZone14.getOffsetFromLocal((-82799965L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 24L + "'", long16 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:00" + "'", str20, "-01:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:00" + "'", str24, "-01:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 70L + "'", long27 == 70L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 83280L + "'", long30 == 83280L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3600000) + "'", int32 == (-3600000));
    }

    @Test
    public void test14895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14895");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusHours((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay9 = dateTime6.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.millisOfSecond();
        int int11 = property10.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay13 = property10.addToCopy(100);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        boolean boolean20 = timeOfDay13.isEqual((org.joda.time.ReadablePartial) timeOfDay18);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay13.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.minusMillis(100);
        int int25 = localTime2.compareTo((org.joda.time.ReadablePartial) timeOfDay22);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property35 = dateTime33.hourOfDay();
        int int36 = dateTime33.getMillisOfSecond();
        org.joda.time.DateTime dateTime38 = dateTime33.withWeekyear((-292275054));
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(7);
        org.joda.time.DateTime dateTime46 = dateTime42.withYear(1);
        org.joda.time.DateTime dateTime47 = dateTime46.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str51 = dateTimeZone49.getShortName((long) 0);
        org.joda.time.DateTime dateTime52 = dateTime47.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime56.minusDays(7);
        org.joda.time.DateTime dateTime60 = dateTime56.withYear(1);
        boolean boolean61 = dateTime52.isBefore((org.joda.time.ReadableInstant) dateTime60);
        int int62 = dateTime52.getEra();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime65 = dateTime52.withDurationAdded(readableDuration63, (int) '4');
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime69 = dateTime67.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime69.minusDays(7);
        org.joda.time.DateTime dateTime73 = dateTime69.withYear(1);
        org.joda.time.DateTime dateTime74 = dateTime73.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property75 = dateTime73.hourOfDay();
        java.util.TimeZone timeZone76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        boolean boolean79 = dateTimeZone77.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime80 = dateTime73.withZone(dateTimeZone77);
        boolean boolean81 = dateTime52.isAfter((org.joda.time.ReadableInstant) dateTime80);
        int int82 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime83 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        java.lang.Object obj84 = null;
        boolean boolean85 = dateTime38.equals(obj84);
        org.joda.time.DateTimeZone dateTimeZone86 = dateTime38.getZone();
        org.joda.time.DateTime.Property property87 = dateTime38.weekOfWeekyear();
        org.joda.time.DateTime dateTime88 = property87.getDateTime();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-01:00" + "'", str51, "-01:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test14896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14896");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.plusMinutes(12);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        int int29 = property28.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay31 = property28.addToCopy(100);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay36 = dateTime33.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.millisOfSecond();
        boolean boolean38 = timeOfDay31.isEqual((org.joda.time.ReadablePartial) timeOfDay36);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay31.withMinuteOfHour((int) '#');
        java.lang.String str41 = timeOfDay40.toString();
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay40.plusHours(2);
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.plusHours(9);
        org.joda.time.LocalTime localTime46 = timeOfDay43.toLocalTime();
        boolean boolean47 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.LocalTime localTime49 = localTime46.withMillisOfDay(516);
        org.joda.time.LocalTime.Property property50 = localTime46.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField51 = property50.getField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "T23:35:00.200" + "'", str41, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test14897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14897");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay7 = dateTime4.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.millisOfSecond();
        int int9 = property8.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addToCopy(100);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay16 = dateTime13.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        boolean boolean18 = timeOfDay11.isEqual((org.joda.time.ReadablePartial) timeOfDay16);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay11.withMinuteOfHour((int) '#');
        int int21 = property2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay11.minusMillis((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        boolean boolean37 = durationFieldType25.isSupported(chronology34);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 3, chronology34);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField40 = chronology34.seconds();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay11.withChronologyRetainFields(chronology34);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(7);
        org.joda.time.DateTime dateTime50 = dateTime46.withYear(1);
        org.joda.time.DateTime dateTime51 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property52 = dateTime50.hourOfDay();
        org.joda.time.DateTime dateTime53 = property52.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime55 = dateTime53.withDayOfYear(8);
        org.joda.time.Chronology chronology56 = dateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.yearOfEra();
        org.joda.time.DurationField durationField58 = chronology56.seconds();
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay(chronology56);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay59.withPeriodAdded(readablePeriod60, 30961509);
        boolean boolean63 = timeOfDay11.isBefore((org.joda.time.ReadablePartial) timeOfDay59);
        int int64 = timeOfDay59.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 25 + "'", int64 == 25);
    }

    @Test
    public void test14898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14898");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.getLocalTime();
        org.joda.time.LocalTime localTime18 = property13.addNoWrapToCopy(1200000);
        org.joda.time.LocalTime localTime19 = property13.getLocalTime();
        org.joda.time.LocalTime localTime20 = property13.getLocalTime();
        java.lang.String str21 = property13.getAsShortText();
        org.joda.time.LocalTime localTime22 = property13.withMaximumValue();
        boolean boolean24 = localTime22.equals((java.lang.Object) 2922789);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test14899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14899");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        calendar7.clear();
        boolean boolean10 = calendar7.after((java.lang.Object) (short) 0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        java.lang.String str20 = property19.getName();
        boolean boolean21 = property19.isLeap();
        org.joda.time.DateTime dateTime22 = property19.roundHalfFloorCopy();
        int int23 = dateTime22.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        boolean boolean25 = calendar7.before((java.lang.Object) dateTime24);
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setFirstDayOfWeek(0);
        int int29 = calendar7.getWeeksInWeekYear();
        java.lang.String str30 = calendar7.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "yearOfEra" + "'", str20, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.util.GregorianCalendar[time=3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]" + "'", str30, "java.util.GregorianCalendar[time=3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test14900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14900");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) '4', chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        int int20 = property19.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property19.addToCopy(100);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay27 = dateTime24.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.millisOfSecond();
        boolean boolean29 = timeOfDay22.isEqual((org.joda.time.ReadablePartial) timeOfDay27);
        int int30 = timeOfDay27.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = timeOfDay27.getFieldTypes();
        org.joda.time.TimeOfDay.Property property32 = timeOfDay27.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay34 = property32.setCopy(1);
        java.lang.String str35 = timeOfDay34.toString();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay34.plus(readablePeriod36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = timeOfDay37.getFieldTypes();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int41 = localTime40.getSecondOfMinute();
        int int42 = localTime40.getMinuteOfHour();
        org.joda.time.DateTime dateTime43 = localTime40.toDateTimeToday();
        boolean boolean45 = dateTime43.isBefore((long) 6);
        org.joda.time.DateTime dateTime46 = dateTime43.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTime.Property property48 = dateTime43.property(dateTimeFieldType47);
        int int49 = timeOfDay37.indexOf(dateTimeFieldType47);
        org.joda.time.TimeOfDay.Property property50 = timeOfDay37.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay51 = property50.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay53 = property50.addToCopy(18);
        java.util.Locale locale55 = null;
        java.lang.String str56 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) timeOfDay53, 473, locale55);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "T01:00:00.100" + "'", str35, "T01:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "473" + "'", str56, "473");
    }

    @Test
    public void test14901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14901");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.getLocalTime();
        org.joda.time.LocalTime localTime18 = property13.addNoWrapToCopy(1200000);
        org.joda.time.LocalTime localTime20 = property13.addNoWrapToCopy(99);
        org.joda.time.LocalTime localTime21 = property13.roundHalfFloorCopy();
        java.lang.String str22 = localTime21.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "01:00:00.000" + "'", str22, "01:00:00.000");
    }

    @Test
    public void test14902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14902");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setDate(13, 85680, 517);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.DateTime dateTime15 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str19 = dateTimeZone17.getShortName((long) 0);
        org.joda.time.DateTime dateTime20 = dateTime15.withZone(dateTimeZone17);
        java.util.TimeZone timeZone21 = dateTimeZone17.toTimeZone();
        java.util.Calendar.Builder builder22 = builder6.setTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone21, locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-01:00" + "'", str19, "-01:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1644572725628,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=45,SECOND=25,MILLISECOND=628,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test14903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14903");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(7, 9, 11);
        java.util.Calendar.Builder builder6 = builder4.setLenient(true);
        java.util.Calendar.Builder builder11 = builder4.setTimeOfDay(17, 0, (int) '#', 365);
        java.util.Calendar.Builder builder16 = builder4.setTimeOfDay(949, 32770, 1268, 100);
        java.util.Calendar.Builder builder21 = builder16.setTimeOfDay(1439, 712, 40, 31261685);
        java.util.Calendar.Builder builder25 = builder16.setTimeOfDay(6720000, 56, 17661728);
        java.util.Calendar.Builder builder29 = builder25.setWeekDate(145, 672, 78);
        java.util.Calendar.Builder builder33 = builder29.setTimeOfDay(31441771, 45, 31081121);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test14904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14904");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        org.joda.time.LocalTime localTime6 = dateTime2.toLocalTime();
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.years();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay((long) 7, chronology7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime9.plus(readablePeriod10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localTime11.getFieldType(86399999);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 86399999");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test14905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14905");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        boolean boolean10 = property8.isLeap();
        java.lang.String str11 = property8.getAsShortText();
        int int12 = property8.getMaximumValueOverall();
        java.lang.String str13 = property8.getAsString();
        org.joda.time.DateTime dateTime14 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours(31021460);
        int int17 = dateTime16.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278993 + "'", int12 == 292278993);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
    }

    @Test
    public void test14906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14906");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str4 = dateTimeZone2.getShortName((long) 0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj0, dateTimeZone2);
        long long9 = dateTimeZone2.convertLocalToUTC(3600035L, true, 82882800L);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        int int12 = property11.getMaximumValueOverall();
        org.joda.time.LocalTime localTime13 = property11.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField15 = localTime13.getField(27);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 27");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 7200035L + "'", long9 == 7200035L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 999 + "'", int12 == 999);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test14907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14907");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale5);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        java.lang.String str18 = property17.getName();
        boolean boolean19 = property17.isLeap();
        org.joda.time.DateTime dateTime20 = property17.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime22 = dateTime20.minus((long) 12);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis(70);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter6.withChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.era();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.monthOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "yearOfEra" + "'", str18, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test14908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14908");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay17 = dateTime14.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.millisOfSecond();
        int int19 = property18.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay21 = property18.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property24 = timeOfDay21.hourOfDay();
        boolean boolean25 = localTime12.isAfter((org.joda.time.ReadablePartial) timeOfDay21);
        org.joda.time.TimeOfDay.Property property26 = timeOfDay21.hourOfDay();
        java.lang.String str27 = timeOfDay21.toString();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(7);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str40 = dateTimeZone38.getShortName((long) 0);
        org.joda.time.DateTime dateTime41 = dateTime36.withZone(dateTimeZone38);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(dateTimeZone38);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str44 = dateTimeFieldType43.toString();
        boolean boolean45 = localTime42.isSupported(dateTimeFieldType43);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay50 = dateTime47.toTimeOfDay();
        org.joda.time.LocalTime localTime51 = dateTime47.toLocalTime();
        org.joda.time.Chronology chronology52 = localTime51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.years();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType43.getField(chronology52);
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.now(chronology52);
        org.joda.time.LocalTime localTime57 = localTime55.plusHours(15);
        int int58 = localTime57.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalTime localTime60 = localTime57.minus(readablePeriod59);
        boolean boolean61 = timeOfDay21.equals((java.lang.Object) localTime60);
        org.joda.time.DateTimeField[] dateTimeFieldArray62 = localTime60.getFields();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "T23:00:00.200" + "'", str27, "T23:00:00.200");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-01:00" + "'", str40, "-01:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "monthOfYear" + "'", str44, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2725701 + "'", int58 == 2725701);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray62);
    }

    @Test
    public void test14909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14909");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        calendar24.set(14, 9, 2);
        int int30 = calendar24.getMinimum((int) (short) 10);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.clear();
        java.util.Date date33 = calendar31.getTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay38 = dateTime35.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property39 = timeOfDay38.millisOfSecond();
        int int40 = property39.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay42 = property39.addToCopy(100);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay47 = dateTime44.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property48 = timeOfDay47.millisOfSecond();
        boolean boolean49 = timeOfDay42.isEqual((org.joda.time.ReadablePartial) timeOfDay47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology51);
        boolean boolean53 = timeOfDay47.isBefore((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay47.withFieldAdded(durationFieldType54, 2);
        boolean boolean57 = calendar31.before((java.lang.Object) durationFieldType54);
        calendar31.set(1328, 1380, 32770, 13, 31021223, 86399999);
        int int65 = calendar31.getWeeksInWeekYear();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime69 = dateTime67.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime69.minusDays(7);
        org.joda.time.DateTime dateTime73 = dateTime69.withYear(1);
        org.joda.time.DateTime dateTime74 = dateTime73.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str78 = dateTimeZone76.getShortName((long) 0);
        org.joda.time.DateTime dateTime79 = dateTime74.withZone(dateTimeZone76);
        java.util.TimeZone timeZone80 = dateTimeZone76.toTimeZone();
        calendar31.setTimeZone(timeZone80);
        calendar24.setTimeZone(timeZone80);
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone80);
        // The following exception was thrown during execution in test generation
        try {
            calendar83.set(995, 34924307);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=14,MONTH=9,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1328,MONTH=1380,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=32770,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=13,MINUTE=31021223,SECOND=86399999,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 53 + "'", int65 == 53);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-01:00" + "'", str78, "-01:00");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar83);
// flaky:         org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=1644572725749,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=45,SECOND=25,MILLISECOND=749,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
    }

    @Test
    public void test14910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14910");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        gregorianCalendar13.clear();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay21 = dateTime18.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        int int23 = property22.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay25 = property22.addToCopy(100);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay30 = dateTime27.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property31 = timeOfDay30.millisOfSecond();
        boolean boolean32 = timeOfDay25.isEqual((org.joda.time.ReadablePartial) timeOfDay30);
        org.joda.time.TimeOfDay.Property property33 = timeOfDay25.secondOfMinute();
        java.lang.String str34 = property33.getName();
        org.joda.time.TimeOfDay timeOfDay36 = property33.setCopy((int) '4');
        org.joda.time.TimeOfDay timeOfDay38 = property33.setCopy("1");
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime44.minusDays(7);
        org.joda.time.DateTime dateTime48 = dateTime44.withYear(1);
        org.joda.time.Chronology chronology49 = dateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.minuteOfDay();
        boolean boolean52 = durationFieldType40.isSupported(chronology49);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) 3, chronology49);
        org.joda.time.LocalTime.Property property54 = localTime53.secondOfMinute();
        org.joda.time.LocalTime localTime55 = property54.getLocalTime();
        boolean boolean56 = property33.equals((java.lang.Object) property54);
        boolean boolean57 = gregorianCalendar13.after((java.lang.Object) property33);
        int int58 = gregorianCalendar13.getWeekYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "secondOfMinute" + "'", str34, "secondOfMinute");
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
    }

    @Test
    public void test14911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14911");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.setFirstDayOfWeek((int) (short) -1);
        gregorianCalendar13.add((int) (short) 10, 365);
        boolean boolean19 = gregorianCalendar13.isWeekDateSupported();
        gregorianCalendar13.setFirstDayOfWeek((int) (short) -1);
        gregorianCalendar13.setFirstDayOfWeek(51);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test14912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14912");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int3 = dateTimeZone1.getStandardOffset((long) (short) 0);
        int int5 = dateTimeZone1.getOffsetFromLocal((long) 4);
        int int7 = dateTimeZone1.getStandardOffset((-62073219600000L));
        long long9 = dateTimeZone1.convertUTCToLocal((long) 1200000);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.DateTime dateTime18 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime19.plusMinutes((int) (short) 100);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.plusMinutes(54060000);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(999);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTime();
        int int28 = dateTime27.getYearOfEra();
        int int29 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean31 = dateTimeZone1.isStandardOffset((long) 214);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone1.getShortName(31021786L, locale33);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3600000) + "'", int5 == (-3600000));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3600000) + "'", int7 == (-3600000));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-2400000L) + "'", long9 == (-2400000L));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str22, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 188 + "'", int28 == 188);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3600000) + "'", int29 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-01:00" + "'", str34, "-01:00");
    }

    @Test
    public void test14913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14913");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTime.Property property13 = dateTime11.secondOfMinute();
        org.joda.time.DateTime.Property property14 = dateTime11.year();
        org.joda.time.DateTime.Property property15 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyearOfCentury();
        org.joda.time.DurationField durationField27 = chronology25.weeks();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) '4', chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.secondOfDay();
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(chronology25);
        org.joda.time.LocalTime.Property property31 = localTime30.millisOfDay();
        int int32 = property15.compareTo((org.joda.time.ReadablePartial) localTime30);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test14914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14914");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setLenient(true);
        int int14 = calendar7.getLeastMaximum(16);
        boolean boolean15 = calendar7.isWeekDateSupported();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(7);
        org.joda.time.DateTime dateTime32 = dateTime28.withYear(1);
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str37 = dateTimeZone35.getShortName((long) 0);
        org.joda.time.DateTime dateTime38 = dateTime33.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = dateTime23.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime23.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime23.minus(readableDuration42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(7);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(1);
        org.joda.time.DateTime dateTime52 = dateTime51.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property53 = dateTime51.hourOfDay();
        org.joda.time.DateTime dateTime54 = property53.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property55 = dateTime54.weekOfWeekyear();
        java.util.Locale locale56 = null;
        int int57 = property55.getMaximumShortTextLength(locale56);
        org.joda.time.DateTime dateTime58 = property55.withMaximumValue();
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        int int60 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime62 = dateTime23.plusMinutes(15);
        boolean boolean63 = calendar7.after((java.lang.Object) dateTime23);
        org.joda.time.TimeOfDay timeOfDay64 = org.joda.time.TimeOfDay.fromCalendarFields(calendar7);
        calendar7.setMinimalDaysInFirstWeek(1970);
        java.util.Date date67 = calendar7.getTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1970,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1200000 + "'", int14 == 1200000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-01:00" + "'", str37, "-01:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 23:08:00 UTC 1969");
    }

    @Test
    public void test14915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14915");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfDay();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(946771200000L, chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.Chronology chronology14 = localTime12.getChronology();
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay21 = dateTime18.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        int int23 = property22.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay25 = property22.addToCopy(100);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay30 = dateTime27.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property31 = timeOfDay30.millisOfSecond();
        boolean boolean32 = timeOfDay25.isEqual((org.joda.time.ReadablePartial) timeOfDay30);
        int int33 = timeOfDay30.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = timeOfDay30.getFieldTypes();
        org.joda.time.TimeOfDay.Property property35 = timeOfDay30.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay30.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay30.minus(readablePeriod38);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay30.plusHours(70);
        java.lang.Object obj42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str46 = dateTimeZone44.getShortName((long) 0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(obj42, dateTimeZone44);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime51.minusDays(7);
        org.joda.time.DateTime dateTime55 = dateTime51.withYear(1);
        org.joda.time.Chronology chronology56 = dateTime51.getChronology();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime(chronology56);
        org.joda.time.DurationField durationField58 = chronology56.weeks();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = chronology56.add(readablePeriod59, 1L, 8);
        org.joda.time.DateTime dateTime63 = dateTime47.toDateTime(chronology56);
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay30.withChronologyRetainFields(chronology56);
        int int65 = timeOfDay64.size();
        int[] intArray67 = chronology15.get((org.joda.time.ReadablePartial) timeOfDay64, (long) 457);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-01:00" + "'", str46, "-01:00");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 457]");
    }

    @Test
    public void test14916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14916");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded(readableDuration5, 9);
        org.joda.time.DateTime dateTime8 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.minusHours(31021786);
        org.joda.time.DateTime dateTime12 = dateTime7.minusDays(74221000);
        org.joda.time.DateTime.Property property13 = dateTime7.yearOfEra();
        org.joda.time.Chronology chronology14 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.minuteOfHour();
        org.joda.time.DurationField durationField16 = dateTimeField15.getDurationField();
        int int17 = dateTimeField15.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test14917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14917");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withYearOfCentury(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        org.joda.time.DurationField durationField19 = chronology16.months();
        boolean boolean20 = dateTimeFieldType7.isSupported(chronology16);
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType7.getDurationType();
        org.joda.time.DateTime dateTime23 = dateTime6.withFieldAdded(durationFieldType21, 2);
        java.util.GregorianCalendar gregorianCalendar24 = dateTime6.toGregorianCalendar();
        long long25 = gregorianCalendar24.getTimeInMillis();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property35 = dateTime33.hourOfDay();
        int int36 = property35.get();
        int int37 = property35.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField38 = property35.getField();
        boolean boolean39 = gregorianCalendar24.before((java.lang.Object) dateTimeField38);
        int int40 = gregorianCalendar24.getWeeksInWeekYear();
        gregorianCalendar24.setLenient(true);
        int int43 = gregorianCalendar24.getMinimalDaysInFirstWeek();
        boolean boolean44 = gregorianCalendar24.isLenient();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(gregorianCalendar24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1483228799900L) + "'", long25 == (-1483228799900L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 23 + "'", int37 == 23);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test14918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14918");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.clockhourOfDay();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay29.withPeriodAdded(readablePeriod31, (int) '4');
        int[] intArray34 = timeOfDay33.getValues();
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay33.withMinuteOfHour(11);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) timeOfDay36, 712, locale38);
        boolean boolean40 = property11.equals((java.lang.Object) 712);
        org.joda.time.DateTime dateTime42 = property11.addToCopy(82800);
        org.joda.time.DateTime dateTime43 = property11.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime44 = property11.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(85680);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 85680 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 0, 0, 100]");
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "712" + "'", str39, "712");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test14919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14919");
        long long6 = java.util.Date.UTC(597, 47, 794, 517, 4080100, 366);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 17069265966000L + "'", long6 == 17069265966000L);
    }

    @Test
    public void test14920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14920");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfDay();
        long long23 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(7);
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(1);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfEra();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime38.minusDays(7);
        org.joda.time.DateTime dateTime42 = dateTime38.withYear(1);
        org.joda.time.DateTime dateTime43 = dateTime42.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str47 = dateTimeZone45.getShortName((long) 0);
        org.joda.time.DateTime dateTime48 = dateTime43.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = dateTime33.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime51 = dateTime33.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime33.minus(readableDuration52);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime57.minusDays(7);
        org.joda.time.DateTime dateTime61 = dateTime57.withYear(1);
        org.joda.time.Chronology chronology62 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.clockhourOfDay();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((java.lang.Object) dateTime33, chronology62);
        org.joda.time.DateTimeField dateTimeField68 = chronology62.minuteOfDay();
        org.joda.time.DurationField durationField69 = chronology62.weeks();
        org.joda.time.DateTimeField dateTimeField70 = chronology62.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay(obj25, chronology62);
        boolean boolean72 = dateTime21.equals(obj25);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-01:00" + "'", str47, "-01:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test14921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14921");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        java.time.Instant instant6 = date5.toInstant();
        int int7 = date5.getHours();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay12 = dateTime9.toTimeOfDay();
        java.util.Date date13 = dateTime9.toDate();
        long long14 = date13.getTime();
        int int15 = date13.getHours();
        date13.setSeconds((int) (short) 0);
        boolean boolean18 = date5.before(date13);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromDateFields(date13);
        int int20 = date13.getHours();
        int int21 = date13.getMinutes();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test14922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14922");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.Chronology chronology13 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withChronology(chronology13);
        int int17 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatter2.getParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.minuteOfDay();
        org.joda.time.DurationField durationField31 = chronology28.months();
        boolean boolean32 = dateTimeFieldType19.isSupported(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withChronology(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 31021223);
        boolean boolean36 = dateTimeFormatter35.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2000 + "'", int17 == 2000);
        org.junit.Assert.assertNull(dateTimeParser18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test14923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14923");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime1.toCalendar(locale6);
        int int8 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime10 = dateTime1.withHourOfDay((int) (short) 0);
        org.joda.time.DateTime dateTime12 = dateTime1.plusMonths(97);
        int int13 = dateTime12.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTimeISO();
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.DateTime.Property property16 = dateTime12.minuteOfDay();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 82800 + "'", int8 == 82800);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
    }

    @Test
    public void test14924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14924");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.hourOfHalfday();
        org.joda.time.Chronology chronology14 = chronology10.withUTC();
        boolean boolean15 = durationFieldType1.isSupported(chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.millisOfSecond();
        int int22 = property21.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay24 = property21.addToCopy(100);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.millisOfSecond();
        boolean boolean31 = timeOfDay24.isEqual((org.joda.time.ReadablePartial) timeOfDay29);
        java.lang.String str32 = timeOfDay24.toString();
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay24.plusSeconds(1439);
        long long36 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay34, 62134912800014L);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(25L, chronology14);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "T23:00:00.200" + "'", str32, "T23:00:00.200");
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 62134989839200L + "'", long36 == 62134989839200L);
    }

    @Test
    public void test14925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14925");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.millisOfSecond();
        int int16 = property15.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay18 = property15.addToCopy(100);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay23 = dateTime20.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.millisOfSecond();
        boolean boolean25 = timeOfDay18.isEqual((org.joda.time.ReadablePartial) timeOfDay23);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay23.withSecondOfMinute(12);
        org.joda.time.DateTime dateTime28 = timeOfDay23.toDateTimeToday();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay33 = dateTime30.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay33.withPeriodAdded(readablePeriod35, (int) '4');
        int[] intArray38 = timeOfDay37.getValues();
        int int39 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay23, intArray38);
        java.util.Locale locale40 = null;
        int int41 = dateTimeField9.getMaximumShortTextLength(locale40);
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeField9.getAsShortText(31055876000L, locale43);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "26" + "'", str44, "26");
    }

    @Test
    public void test14926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14926");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime13.getEra();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime26 = dateTime13.withDurationAdded(readableDuration24, (int) '4');
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(7);
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(1);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property36 = dateTime34.hourOfDay();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        boolean boolean40 = dateTimeZone38.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime41 = dateTime34.withZone(dateTimeZone38);
        boolean boolean42 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime44 = dateTime43.withTimeAtStartOfDay();
        int int45 = dateTime44.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
    }

    @Test
    public void test14927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14927");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 100);
        java.lang.String str18 = dateTime17.toString();
        int int19 = dateTime17.getSecondOfMinute();
        boolean boolean20 = dateTime1.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateTime17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(7);
        org.joda.time.DateTime dateTime38 = dateTime34.withYear(1);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfDay();
        long long40 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime38);
        java.lang.String str42 = dateTime17.toString();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        boolean boolean47 = dateTimeZone45.equals((java.lang.Object) (-3600000));
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeZone45.getShortName(10L, locale49);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((-62104064400000L), dateTimeZone45);
        org.joda.time.DateTime dateTime52 = dateTime17.withZoneRetainFields(dateTimeZone45);
        int int53 = dateTime52.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime56 = dateTime52.withPeriodAdded(readablePeriod54, 31021460);
        org.joda.time.DateTime dateTime58 = dateTime52.withMinuteOfHour(13);
        org.joda.time.DateTime dateTime60 = dateTime58.minusHours(712);
        org.joda.time.DateTime dateTime62 = dateTime60.minusDays(608);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str18, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str42, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-01:00" + "'", str50, "-01:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test14928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14928");
        java.util.Date date1 = new java.util.Date(62104088340008L);
        org.junit.Assert.assertEquals(date1.toString(), "Sat Jan 01 07:39:00 UTC 3938");
    }

    @Test
    public void test14929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14929");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property13.addCopy(62134912800000L);
        org.joda.time.LocalTime localTime17 = property13.addNoWrapToCopy(0);
        org.joda.time.LocalTime localTime18 = property13.roundFloorCopy();
        org.joda.time.LocalTime localTime19 = property13.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test14930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14930");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime14 = dateTime11.withField(dateTimeFieldType12, 17);
        int int15 = dateTime11.getYear();
        org.joda.time.DateTime dateTime17 = dateTime11.minusDays((int) (byte) 0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(chronology28);
        org.joda.time.DurationField durationField30 = chronology28.weeks();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = chronology28.add(readablePeriod31, 1L, 8);
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 70, chronology28);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((-82799998L), chronology28);
        org.joda.time.DurationField durationField37 = chronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField38 = chronology28.minuteOfHour();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) dateTime17, chronology28);
        org.joda.time.DateTime dateTime41 = dateTime17.minusDays((int) (short) -1);
        org.joda.time.DateTime dateTime43 = dateTime41.minusHours(34953);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test14931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14931");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(8);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 10);
        org.joda.time.DateTime dateTime17 = dateTime12.withDurationAdded((long) 16, 5);
        org.joda.time.DateTime dateTime19 = dateTime12.withYearOfCentury(53);
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.minus(readablePeriod22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.DateTime dateTime32 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str36 = dateTimeZone34.getShortName((long) 0);
        org.joda.time.DateTime dateTime37 = dateTime32.withZone(dateTimeZone34);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str40 = dateTimeFieldType39.toString();
        boolean boolean41 = localTime38.isSupported(dateTimeFieldType39);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay46 = dateTime43.toTimeOfDay();
        org.joda.time.LocalTime localTime47 = dateTime43.toLocalTime();
        org.joda.time.Chronology chronology48 = localTime47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.years();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType39.getField(chronology48);
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int53 = localTime51.indexOf(dateTimeFieldType52);
        org.joda.time.TimeOfDay.Property property54 = timeOfDay21.property(dateTimeFieldType52);
        boolean boolean55 = dateTime19.isSupported(dateTimeFieldType52);
        boolean boolean56 = dateTime19.isAfterNow();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime19.minus(readableDuration57);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-01:00" + "'", str36, "-01:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "monthOfYear" + "'", str40, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test14932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14932");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = durationFieldType1.isSupported(chronology10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 3, chronology10);
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        org.joda.time.LocalTime localTime17 = property15.addWrapFieldToCopy((-3600000));
        int int18 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(7);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.minuteOfDay();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology28);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfSecond();
        org.joda.time.LocalTime localTime33 = property32.roundCeilingCopy();
        org.joda.time.LocalTime localTime35 = property32.addNoWrapToCopy(11);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(7);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(1);
        org.joda.time.DateTime dateTime44 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.plusMinutes((int) (short) 100);
        java.lang.String str48 = dateTime47.toString();
        java.util.GregorianCalendar gregorianCalendar49 = dateTime47.toGregorianCalendar();
        boolean boolean50 = gregorianCalendar49.isWeekDateSupported();
        boolean boolean51 = gregorianCalendar49.isWeekDateSupported();
        java.util.Date date52 = gregorianCalendar49.getTime();
        org.joda.time.TimeOfDay timeOfDay53 = org.joda.time.TimeOfDay.fromDateFields(date52);
        int int54 = timeOfDay53.getMinuteOfHour();
        int int55 = localTime35.compareTo((org.joda.time.ReadablePartial) timeOfDay53);
        int int56 = property15.compareTo((org.joda.time.ReadablePartial) localTime35);
        org.joda.time.LocalTime localTime57 = property15.roundHalfCeilingCopy();
        int int58 = property15.getMinimumValueOverall();
        org.joda.time.Chronology chronology59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((java.lang.Object) int58, chronology59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str48, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 03 00:48:00 UTC 2");
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 48 + "'", int54 == 48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test14933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14933");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(34953, 1200001, 572, 10, 158);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 158 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14934");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        int int7 = date5.getDate();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay12 = dateTime9.toTimeOfDay();
        java.util.Date date13 = dateTime9.toDate();
        int int14 = date13.getHours();
        date13.setSeconds(16);
        boolean boolean17 = date5.before(date13);
        date13.setHours(1968);
        java.lang.String str20 = date13.toLocaleString();
        date13.setDate(800);
        int int23 = date13.getTimezoneOffset();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Mon May 08 00:00:16 UTC 1972");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Mar 24, 1970 12:00:16 AM" + "'", str20, "Mar 24, 1970 12:00:16 AM");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test14935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14935");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.LocalDateTime localDateTime6 = dateTime5.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDateTime6.getFieldType((int) (short) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear(1);
        org.joda.time.Chronology chronology17 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyearOfCentury();
        org.joda.time.DurationField durationField19 = chronology17.weeks();
        org.joda.time.DurationField durationField20 = chronology17.centuries();
        boolean boolean21 = dateTimeFieldType8.isSupported(chronology17);
        // The following exception was thrown during execution in test generation
        try {
            long long29 = chronology17.getDateTimeMillis(0, 31464, 145, 59, 0, 2086, 41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test14936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14936");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        boolean boolean22 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime13.getEra();
        org.joda.time.LocalTime localTime24 = dateTime13.toLocalTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime27 = localTime24.withPeriodAdded(readablePeriod25, 9);
        org.joda.time.LocalTime localTime29 = localTime27.plusMinutes(22);
        org.joda.time.LocalTime.Property property30 = localTime27.minuteOfHour();
        org.joda.time.LocalTime localTime31 = property30.getLocalTime();
        org.joda.time.LocalTime localTime33 = property30.addWrapFieldToCopy(516);
        boolean boolean34 = property30.isLeap();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test14937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14937");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(7);
        org.joda.time.DateTime dateTime12 = dateTime8.withYear(1);
        org.joda.time.Chronology chronology13 = dateTime8.getChronology();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        boolean boolean17 = dateTimeZone15.equals((java.lang.Object) (-3600000));
        org.joda.time.Chronology chronology18 = chronology13.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        int int21 = dateTimeZone15.getStandardOffset((long) (-1));
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(7);
        org.joda.time.DateTime dateTime29 = dateTime25.withYear(1);
        org.joda.time.DateTime dateTime30 = dateTime29.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTimeISO();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes((int) (short) 100);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.plusMinutes(54060000);
        org.joda.time.DateTime dateTime38 = dateTime36.plusMonths(999);
        org.joda.time.LocalDateTime localDateTime39 = dateTime38.toLocalDateTime();
        boolean boolean40 = dateTimeZone15.isLocalDateTimeGap(localDateTime39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(918, 0, 31501425, (-3600000), 344, dateTimeZone15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3600000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3600000) + "'", int21 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str34, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test14938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14938");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        long long11 = chronology6.add(0L, (long) (short) 0, 0);
        org.joda.time.DateTimeField dateTimeField12 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.weekyearOfCentury();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(chronology6);
        org.joda.time.DateTimeField dateTimeField15 = chronology6.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology6.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test14939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14939");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        java.lang.String str18 = timeOfDay17.toString();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours(2);
        org.joda.time.Chronology chronology21 = timeOfDay20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology21.add(readablePeriod23, (long) 366, 0);
        org.joda.time.DurationField durationField27 = chronology21.eras();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "T23:35:00.200" + "'", str18, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 366L + "'", long26 == 366L);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test14940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14940");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean17 = timeOfDay8.isSupported(dateTimeFieldType16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay8.withPeriodAdded(readablePeriod18, 82800);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay8.plusSeconds(672);
        java.util.Locale locale24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = timeOfDay22.toString("Saturday", locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
    }

    @Test
    public void test14941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14941");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = chronology8.weeks();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test14942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14942");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        java.util.Date date8 = dateTime3.toDate();
        int int9 = date8.getMinutes();
        int int10 = date8.getDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-3119900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 23:08:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test14943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14943");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        int int13 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(7);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay32 = dateTime29.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property33 = timeOfDay32.millisOfSecond();
        java.util.Locale locale34 = null;
        int int35 = property33.getMaximumShortTextLength(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean37 = property33.equals((java.lang.Object) dateTimeFieldType36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property33.getFieldType();
        boolean boolean39 = dateTime26.isSupported(dateTimeFieldType38);
        org.joda.time.DateTime.Property property40 = dateTime16.property(dateTimeFieldType38);
        org.joda.time.DateTime.Property property41 = dateTime16.era();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime44 = dateTime16.withDurationAdded(readableDuration42, 24352491);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = dateTime44.withTime(31441771, (-1264978), 3360491, 648);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31441771 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test14944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14944");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        int int12 = property11.getMinimumValue();
        org.joda.time.DurationField durationField13 = property11.getDurationField();
        int int14 = property11.getMinimumValueOverall();
        org.joda.time.DateTime dateTime15 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        int int21 = timeOfDay20.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plusMinutes((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.plusMillis(69);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int28 = localTime27.getSecondOfMinute();
        int int29 = localTime27.getMinuteOfHour();
        int int30 = localTime27.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalTime localTime32 = localTime27.minus(readablePeriod31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay37 = dateTime34.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property38 = timeOfDay37.millisOfSecond();
        int int39 = property38.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay41 = property38.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property44 = timeOfDay41.hourOfDay();
        boolean boolean45 = localTime32.isBefore((org.joda.time.ReadablePartial) timeOfDay41);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay50 = dateTime47.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property51 = timeOfDay50.millisOfSecond();
        int int52 = property51.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay54 = property51.addToCopy(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property51.getFieldType();
        int int56 = localTime32.get(dateTimeFieldType55);
        int int57 = timeOfDay23.get(dateTimeFieldType55);
        org.joda.time.DateTime.Property property58 = dateTime15.property(dateTimeFieldType55);
        org.joda.time.DateTime dateTime60 = dateTime15.withYearOfEra(922);
        long long61 = dateTime60.getMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-33040832400000L) + "'", long61 == (-33040832400000L));
    }

    @Test
    public void test14945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14945");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        org.joda.time.LocalTime localTime6 = dateTime2.toLocalTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(7);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(1);
        org.joda.time.DateTime dateTime15 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes((int) (short) 100);
        java.lang.String str19 = dateTime18.toString();
        int int20 = dateTime18.getSecondOfMinute();
        boolean boolean21 = dateTime2.equals((java.lang.Object) dateTime18);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((java.lang.Object) dateTime18);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfEra();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(7);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear(1);
        org.joda.time.DateTime.Property property40 = dateTime39.secondOfDay();
        long long41 = property31.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime44 = dateTime39.plusWeeks(2022);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays(7);
        org.joda.time.DateTime dateTime52 = dateTime48.withYear(1);
        org.joda.time.Chronology chronology53 = dateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime39.toMutableDateTime(chronology53);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology53);
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.now(chronology53);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime(1644572266647L, chronology53);
        org.joda.time.DateTimeField dateTimeField60 = chronology53.era();
        java.util.Locale locale61 = null;
        int int62 = dateTimeField60.getMaximumShortTextLength(locale61);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str19, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test14946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14946");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 31141883);
    }

    @Test
    public void test14947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14947");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        gregorianCalendar13.set((int) (short) 1, (int) 'a', (int) (short) 1);
        gregorianCalendar13.add((int) (byte) 0, (-3600000));
        java.lang.String str21 = gregorianCalendar13.getCalendarType();
        gregorianCalendar13.set(12, (-1), (int) ' ', 100, 712, 32770);
        gregorianCalendar13.clear();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar13.roll((-470472), false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gregory" + "'", str21, "gregory");
    }

    @Test
    public void test14948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14948");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(74581000, 0, 644, 518);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74581000 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14949");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withYearOfCentury(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        org.joda.time.DurationField durationField19 = chronology16.months();
        boolean boolean20 = dateTimeFieldType7.isSupported(chronology16);
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType7.getDurationType();
        org.joda.time.DateTime dateTime23 = dateTime6.withFieldAdded(durationFieldType21, 2);
        java.util.GregorianCalendar gregorianCalendar24 = dateTime6.toGregorianCalendar();
        java.util.Calendar.Builder builder25 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder29 = builder25.setDate(7, 9, 11);
        java.util.Calendar.Builder builder31 = builder29.setLenient(true);
        java.util.Calendar.Builder builder36 = builder29.setTimeOfDay(17, 0, (int) '#', 365);
        java.util.Calendar.Builder builder40 = builder29.setDate(1328, 188, (int) ' ');
        java.util.Calendar.Builder builder42 = builder29.setLenient(false);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(7);
        java.util.Locale locale49 = null;
        java.util.Calendar calendar50 = dateTime46.toCalendar(locale49);
        calendar50.clear();
        int int52 = calendar50.getWeekYear();
        int int53 = calendar50.getMinimalDaysInFirstWeek();
        calendar50.set(23, (int) (byte) 0, 8);
        java.util.TimeZone timeZone58 = calendar50.getTimeZone();
        java.util.Calendar.Builder builder59 = builder42.setTimeZone(timeZone58);
        gregorianCalendar24.setTimeZone(timeZone58);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = gregorianCalendar24.getLeastMaximum(31141312);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31141312");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(gregorianCalendar24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=23,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=8,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test14950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14950");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str33 = dateTimeZone31.getShortName((long) 0);
        org.joda.time.DateTime dateTime34 = dateTime29.withZone(dateTimeZone31);
        long long37 = dateTimeZone31.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        boolean boolean41 = dateTimeZone39.equals((java.lang.Object) (-3600000));
        long long43 = dateTimeZone31.getMillisKeepLocal(dateTimeZone39, 100L);
        org.joda.time.DateTime dateTime44 = timeOfDay20.toDateTimeToday(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        boolean boolean47 = dateTime44.isSupported(dateTimeFieldType45);
        org.joda.time.DateTime dateTime48 = dateTime44.withLaterOffsetAtOverlap();
        int int49 = dateTime44.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:00" + "'", str33, "-01:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 5L + "'", long37 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 42 + "'", int49 == 42);
    }

    @Test
    public void test14951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14951");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekOfWeekyear(13);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTime16.toString("1380", locale20);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.Chronology chronology31 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfDay();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology31);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.joda.time.LocalTime localTime37 = property35.getLocalTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(7);
        org.joda.time.DateTime dateTime45 = dateTime41.withYear(1);
        org.joda.time.DateTime dateTime46 = dateTime45.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTimeISO();
        int int48 = dateTime47.getEra();
        org.joda.time.DateTime.Property property49 = dateTime47.weekyear();
        org.joda.time.DateTime.Property property50 = dateTime47.yearOfCentury();
        org.joda.time.DateTime dateTime52 = property50.addToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime54 = property50.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime55 = localTime37.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = dateTime54.withDurationAdded(3600009L, 13);
        int int59 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime.Property property60 = dateTime16.weekyear();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime66 = dateTime64.minusDays(7);
        org.joda.time.DateTime dateTime68 = dateTime64.withHourOfDay(7);
        java.util.GregorianCalendar gregorianCalendar69 = dateTime68.toGregorianCalendar();
        boolean boolean70 = dateTime16.equals((java.lang.Object) dateTime68);
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime16.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.DateTime dateTime73 = dateTime16.plus(readablePeriod72);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1380" + "'", str21, "1380");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(gregorianCalendar69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test14952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14952");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((-288675054L), chronology9);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime12.minus(readablePeriod13);
        org.joda.time.LocalTime.Property property15 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.Chronology chronology24 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfMonth();
        org.joda.time.DurationField durationField26 = chronology24.minutes();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.weekyear();
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeField28.getAsText(3L, locale30);
        java.lang.String str33 = dateTimeField28.getAsText((long) 1869);
        long long35 = dateTimeField28.remainder((long) 38);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = dateTimeField28.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime38 = localTime12.withField(dateTimeFieldType36, 672);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970" + "'", str31, "1970");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970" + "'", str33, "1970");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 255600038L + "'", long35 == 255600038L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
    }

    @Test
    public void test14953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14953");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 11);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.minuteOfDay();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology11);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfSecond();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property25 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = property25.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear(8);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillis((long) 10);
        long long31 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime28.plus(readableDuration32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime36 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(31114187);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear((-292275054));
        int int41 = dateTime40.getHourOfDay();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 62134912800000L + "'", long31 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test14954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14954");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setDate((int) (short) 100, (int) (byte) 100, 13);
        java.util.Calendar.Builder builder8 = builder6.setLenient(true);
        java.util.Calendar.Builder builder12 = builder6.setWeekDate(5, 1200000, 7);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay17 = dateTime14.toTimeOfDay();
        org.joda.time.LocalTime localTime18 = dateTime14.toLocalTime();
        java.util.Locale locale19 = null;
        java.util.Calendar calendar20 = dateTime14.toCalendar(locale19);
        calendar20.setLenient(false);
        java.util.TimeZone timeZone23 = calendar20.getTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        java.util.Calendar.Builder builder25 = builder6.setTimeZone(timeZone23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder27 = builder6.setCalendarType("08:41:01.682");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 08:41:01.682");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572726811,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=45,SECOND=26,MILLISECOND=811,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test14955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14955");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(1);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.hourOfHalfday();
        org.joda.time.Chronology chronology15 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.clockhourOfHalfday();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(3, 0, 20, chronology11);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology20);
        org.joda.time.LocalTime localTime23 = localTime21.plusHours((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay28 = dateTime25.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property29 = timeOfDay28.millisOfSecond();
        int int30 = property29.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay32 = property29.addToCopy(100);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay37 = dateTime34.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property38 = timeOfDay37.millisOfSecond();
        boolean boolean39 = timeOfDay32.isEqual((org.joda.time.ReadablePartial) timeOfDay37);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay32.withMinuteOfHour((int) '#');
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.minusMillis(100);
        int int44 = localTime21.compareTo((org.joda.time.ReadablePartial) timeOfDay41);
        org.joda.time.LocalTime localTime46 = localTime21.plusMinutes(3);
        int int47 = timeOfDay18.compareTo((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay18.minusSeconds(69);
        int int50 = timeOfDay49.getHourOfDay();
        org.joda.time.TimeOfDay.Property property51 = timeOfDay49.millisOfSecond();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime55.minusDays(7);
        org.joda.time.DateTime dateTime59 = dateTime55.withYear(1);
        org.joda.time.DateTime dateTime60 = dateTime59.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property61 = dateTime59.hourOfDay();
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        boolean boolean65 = dateTimeZone63.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime66 = dateTime59.withZone(dateTimeZone63);
        org.joda.time.DateTime dateTime68 = dateTime66.withDayOfYear((int) 'a');
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime72 = dateTime70.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime74 = dateTime72.minusDays(7);
        org.joda.time.DateTime dateTime76 = dateTime72.withYear(1);
        org.joda.time.DateTime dateTime77 = dateTime76.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property78 = dateTime76.hourOfDay();
        org.joda.time.DateTime dateTime79 = property78.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime81 = dateTime79.withDayOfYear(8);
        boolean boolean82 = dateTime66.isAfter((org.joda.time.ReadableInstant) dateTime81);
        int int83 = dateTime81.getMillisOfDay();
        org.joda.time.DateTime dateTime84 = timeOfDay49.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 79200000 + "'", int83 == 79200000);
        org.junit.Assert.assertNotNull(dateTime84);
    }

    @Test
    public void test14956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14956");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.months();
        boolean boolean14 = dateTimeFieldType1.isSupported(chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100, chronology10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology10.add(readablePeriod16, (long) 100, 17);
        org.joda.time.DurationField durationField20 = chronology10.months();
        org.joda.time.DurationField durationField21 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology10.weekyear();
        org.joda.time.DurationField durationField23 = chronology10.weeks();
        org.joda.time.DateTimeField dateTimeField24 = chronology10.era();
        org.joda.time.DateTimeField dateTimeField25 = chronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = chronology10.year();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test14957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14957");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        boolean boolean18 = property8.equals((java.lang.Object) dateTime17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withPeriodAdded(readablePeriod19, 34620000);
        java.util.Locale locale22 = null;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        java.util.Date date24 = calendar23.getTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Mon Jan 02 23:08:00 UTC 2");
    }

    @Test
    public void test14958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14958");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.secondOfDay();
        boolean boolean23 = property8.equals((java.lang.Object) dateTimeField22);
        org.joda.time.DurationField durationField24 = property8.getRangeDurationField();
        org.joda.time.DateTime dateTime25 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime26 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.parse("19");
        org.joda.time.DateTime dateTime29 = dateTime25.withFields((org.joda.time.ReadablePartial) localTime28);
        boolean boolean30 = dateTime25.isEqualNow();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime34 = localTime32.plusSeconds(79200000);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime38.minusDays(7);
        org.joda.time.DateTime dateTime42 = dateTime38.withYear(1);
        org.joda.time.DateTime dateTime43 = dateTime42.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str47 = dateTimeZone45.getShortName((long) 0);
        org.joda.time.DateTime dateTime48 = dateTime43.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays(7);
        org.joda.time.DateTime dateTime56 = dateTime52.withYear(1);
        boolean boolean57 = dateTime48.isBefore((org.joda.time.ReadableInstant) dateTime56);
        int int58 = dateTime48.getEra();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTime dateTime61 = dateTime48.withDurationAdded(readableDuration59, (int) '4');
        org.joda.time.DateTime dateTime63 = dateTime48.withYear(365);
        org.joda.time.DateTime.Property property64 = dateTime63.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime63.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime67 = dateTime63.minusSeconds(85680100);
        org.joda.time.DateTime dateTime68 = localTime32.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean69 = dateTime25.isBefore((org.joda.time.ReadableInstant) dateTime67);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-01:00" + "'", str47, "-01:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test14959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14959");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(8);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 10);
        org.joda.time.DateTime dateTime17 = dateTime12.withDurationAdded((long) 16, 5);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.DurationField durationField28 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.minuteOfHour();
        int int30 = dateTime17.get(dateTimeField29);
        org.joda.time.DateTime dateTime32 = dateTime17.minusDays((int) (short) 10);
        org.joda.time.DateTime.Property property33 = dateTime32.weekOfWeekyear();
        org.joda.time.DateTime dateTime35 = property33.setCopy(22);
        int int36 = property33.get();
        org.joda.time.DateTime dateTime37 = property33.roundHalfFloorCopy();
        long long38 = dateTime37.getMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-62135593200000L) + "'", long38 == (-62135593200000L));
    }

    @Test
    public void test14960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14960");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(24);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay6 = dateTime3.toTimeOfDay();
        org.joda.time.LocalTime localTime7 = dateTime3.toLocalTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(7);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(1);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes((int) (short) 100);
        java.lang.String str20 = dateTime19.toString();
        int int21 = dateTime19.getSecondOfMinute();
        boolean boolean22 = dateTime3.equals((java.lang.Object) dateTime19);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((java.lang.Object) dateTime19);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(7);
        org.joda.time.DateTime dateTime40 = dateTime36.withYear(1);
        org.joda.time.DateTime.Property property41 = dateTime40.secondOfDay();
        long long42 = property32.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime40);
        java.lang.String str44 = dateTime19.toString();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) (-3600000));
        java.util.Locale locale51 = null;
        java.lang.String str52 = dateTimeZone47.getShortName(10L, locale51);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((-62104064400000L), dateTimeZone47);
        org.joda.time.DateTime dateTime54 = dateTime19.withZoneRetainFields(dateTimeZone47);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(dateTimeZone47);
        long long57 = dateTimeZone1.getMillisKeepLocal(dateTimeZone47, 103418443094400937L);
        int int59 = dateTimeZone47.getOffsetFromLocal((long) 841);
        java.lang.String str60 = dateTimeZone47.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str20, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str44, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-01:00" + "'", str52, "-01:00");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 103418443098000961L + "'", long57 == 103418443098000961L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3600000) + "'", int59 == (-3600000));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-01:00" + "'", str60, "-01:00");
    }

    @Test
    public void test14961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14961");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        calendar7.clear();
        boolean boolean10 = calendar7.after((java.lang.Object) (short) 0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        java.lang.String str20 = property19.getName();
        boolean boolean21 = property19.isLeap();
        org.joda.time.DateTime dateTime22 = property19.roundHalfFloorCopy();
        int int23 = dateTime22.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        boolean boolean25 = calendar7.before((java.lang.Object) dateTime24);
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setFirstDayOfWeek(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(7);
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str41 = dateTimeZone39.getShortName((long) 0);
        org.joda.time.DateTime dateTime42 = dateTime37.withZone(dateTimeZone39);
        java.util.TimeZone timeZone43 = dateTimeZone39.toTimeZone();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone43);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone43);
        calendar7.setTimeZone(timeZone43);
        calendar7.set(31081803, 3, 25);
        boolean boolean51 = calendar7.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            int int53 = calendar7.getActualMaximum(35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=31081803,MONTH=3,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=25,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "yearOfEra" + "'", str20, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-01:00" + "'", str41, "-01:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572727104,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=45,SECOND=27,MILLISECOND=104,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644572727104,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=45,SECOND=27,MILLISECOND=104,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test14962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14962");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(300063L);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime4 = localTime1.plus(readablePeriod3);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(404);
        java.lang.String str8 = property5.getAsShortText();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "5" + "'", str8, "5");
    }

    @Test
    public void test14963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14963");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = chronology8.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.year();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test14964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14964");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        java.util.Locale locale15 = null;
        int int16 = property11.getMaximumShortTextLength(locale15);
        java.util.Locale locale17 = null;
        java.lang.String str18 = property11.getAsShortText(locale17);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
    }

    @Test
    public void test14965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14965");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        int int16 = timeOfDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str33 = dateTimeZone31.getShortName((long) 0);
        org.joda.time.DateTime dateTime34 = dateTime29.withZone(dateTimeZone31);
        long long37 = dateTimeZone31.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        boolean boolean41 = dateTimeZone39.equals((java.lang.Object) (-3600000));
        long long43 = dateTimeZone31.getMillisKeepLocal(dateTimeZone39, 100L);
        org.joda.time.DateTime dateTime44 = timeOfDay20.toDateTimeToday(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        boolean boolean47 = dateTime44.isSupported(dateTimeFieldType45);
        org.joda.time.DateTime.Property property48 = dateTime44.secondOfMinute();
        org.joda.time.DateTime dateTime50 = dateTime44.plusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime54.minusDays(7);
        org.joda.time.DateTime dateTime58 = dateTime54.withYear(1);
        org.joda.time.DateTime dateTime59 = dateTime58.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property60 = dateTime58.hourOfDay();
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        boolean boolean64 = dateTimeZone62.equals((java.lang.Object) (-3600000));
        org.joda.time.DateTime dateTime65 = dateTime58.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime67 = dateTime65.withDayOfYear((int) 'a');
        boolean boolean68 = dateTime44.isBefore((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime69 = dateTime65.toDateTime();
        boolean boolean70 = dateTime69.isEqualNow();
        org.joda.time.DateTime dateTime71 = dateTime69.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar72 = dateTime69.toGregorianCalendar();
        gregorianCalendar72.setTimeInMillis(514800004L);
        long long75 = gregorianCalendar72.getTimeInMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:00" + "'", str33, "-01:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 5L + "'", long37 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(gregorianCalendar72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 514800004L + "'", long75 == 514800004L);
    }

    @Test
    public void test14966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14966");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        int int18 = dateTime17.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
    }

    @Test
    public void test14967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14967");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property3 = dateTime2.weekOfWeekyear();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromMillisOfDay((-35748L), chronology4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(timeOfDay5);
    }

    @Test
    public void test14968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14968");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        int int10 = property9.get();
        org.joda.time.DateTime dateTime11 = property9.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime11.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((-61200000L));
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(7);
        org.joda.time.DateTime dateTime22 = dateTime18.withYear(1);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str27 = dateTimeZone25.getShortName((long) 0);
        org.joda.time.DateTime dateTime28 = dateTime23.withZone(dateTimeZone25);
        long long31 = dateTimeZone25.adjustOffset((long) 5, true);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        boolean boolean35 = dateTimeZone33.equals((java.lang.Object) (-3600000));
        long long37 = dateTimeZone25.getMillisKeepLocal(dateTimeZone33, 100L);
        org.joda.time.ReadableInstant readableInstant38 = null;
        int int39 = dateTimeZone25.getOffset(readableInstant38);
        boolean boolean40 = dateTimeZone25.isFixed();
        long long42 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2000);
        long long45 = dateTimeZone12.adjustOffset(70L, false);
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(dateTimeZone12);
        long long49 = dateTimeZone12.adjustOffset((-62104057199900L), false);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(113605311196800031L);
        boolean boolean52 = dateTimeZone12.equals((java.lang.Object) 113605311196800031L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5L + "'", long31 == 5L);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L + "'", long37 == 100L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3600000) + "'", int39 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2000L + "'", long42 == 2000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 70L + "'", long45 == 70L);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-62104057199900L) + "'", long49 == (-62104057199900L));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test14969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14969");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.addCopy(1L);
        org.joda.time.LocalTime localTime17 = property13.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime19 = property13.addCopy(480100L);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime19.plus(readablePeriod20);
        org.joda.time.LocalTime.Property property22 = localTime21.hourOfDay();
        org.joda.time.LocalTime localTime23 = property22.roundCeilingCopy();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.DateTime dateTime32 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property33 = dateTime31.hourOfDay();
        long long34 = dateTime31.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime31.withMillisOfDay(1428);
        int int37 = property22.getDifference((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-62104063919900L) + "'", long34 == (-62104063919900L));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 17251152 + "'", int37 == 17251152);
    }

    @Test
    public void test14970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14970");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy(100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        boolean boolean15 = timeOfDay8.isEqual((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay8.withMinuteOfHour((int) '#');
        java.lang.String str18 = timeOfDay17.toString();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours(2);
        int[] intArray21 = timeOfDay20.getValues();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plusSeconds(36);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(7);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear(1);
        org.joda.time.DateTime dateTime32 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property33 = dateTime31.hourOfDay();
        org.joda.time.DateTime dateTime34 = property33.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfYear(8);
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        long long38 = dateTime34.getMillis();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str42 = dateTimeZone40.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone40.getName((-1L), locale45);
        long long49 = dateTimeZone40.adjustOffset((long) (short) 10, true);
        org.joda.time.DateTime dateTime50 = dateTime34.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime51 = timeOfDay23.toDateTimeToday(dateTimeZone40);
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay23.plusSeconds(1378);
        org.joda.time.TimeOfDay.Property property54 = timeOfDay53.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay56 = property54.setCopy("41");
        int int57 = property54.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "T23:35:00.200" + "'", str18, "T23:35:00.200");
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 35, 0, 200]");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-62104064400000L) + "'", long38 == (-62104064400000L));
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-01:00" + "'", str46, "-01:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 59 + "'", int57 == 59);
    }

    @Test
    public void test14971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14971");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.withMinimumValue();
        int[] intArray31 = localTime30.getValues();
        int[] intArray32 = localTime30.getValues();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str36 = dateTimeZone34.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone34.getName((-1L), locale39);
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(dateTimeZone34);
        long long44 = dateTimeZone34.convertLocalToUTC(62104088221982L, false);
        org.joda.time.DateTime dateTime45 = localTime30.toDateTimeToday(dateTimeZone34);
        org.joda.time.LocalTime.Property property46 = localTime30.millisOfDay();
        java.lang.String str47 = localTime30.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-01:00" + "'", str36, "-01:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-01:00" + "'", str40, "-01:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 62104091821982L + "'", long44 == 62104091821982L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "01:00:00.000" + "'", str47, "01:00:00.000");
    }

    @Test
    public void test14972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14972");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        boolean boolean10 = property8.isLeap();
        org.joda.time.DateTime dateTime11 = property8.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minus((long) 12);
        org.joda.time.DateTime.Property property14 = dateTime11.year();
        org.joda.time.DateTime dateTime16 = dateTime11.plus(3600035L);
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra(1328);
        org.joda.time.DateTime dateTime21 = dateTime17.minusHours(0);
        int int22 = dateTime21.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test14973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14973");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes((int) (short) 100);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.plusYears(14);
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = dateTime12.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(7);
        org.joda.time.DateTime dateTime25 = dateTime21.withYear(1);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfYear();
        org.joda.time.DurationField durationField30 = chronology26.centuries();
        org.joda.time.DurationField durationField31 = chronology26.months();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime12, chronology26);
        org.joda.time.TimeOfDay timeOfDay33 = org.joda.time.TimeOfDay.fromMillisOfDay(6842880000017L, chronology26);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay33.withPeriodAdded(readablePeriod34, 1969);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay33.plusMillis(37);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay33.plusMinutes(31381639);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str13, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-62104057919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=48,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
    }

    @Test
    public void test14974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14974");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setLenient(true);
        int int14 = calendar7.getLeastMaximum(16);
        boolean boolean15 = calendar7.isWeekDateSupported();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(7);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(1);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(7);
        org.joda.time.DateTime dateTime32 = dateTime28.withYear(1);
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str37 = dateTimeZone35.getShortName((long) 0);
        org.joda.time.DateTime dateTime38 = dateTime33.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = dateTime23.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime23.minusHours((int) 'a');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime23.minus(readableDuration42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(7);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(1);
        org.joda.time.DateTime dateTime52 = dateTime51.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property53 = dateTime51.hourOfDay();
        org.joda.time.DateTime dateTime54 = property53.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property55 = dateTime54.weekOfWeekyear();
        java.util.Locale locale56 = null;
        int int57 = property55.getMaximumShortTextLength(locale56);
        org.joda.time.DateTime dateTime58 = property55.withMaximumValue();
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        int int60 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime62 = dateTime23.plusMinutes(15);
        boolean boolean63 = calendar7.after((java.lang.Object) dateTime23);
        calendar7.set(2922789, 518, 1922, 31081121, (-1264978), 470);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime74 = dateTime72.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime76 = dateTime74.minusDays(7);
        org.joda.time.DateTime dateTime78 = dateTime74.withYear(1);
        org.joda.time.DateTime.Property property79 = dateTime78.yearOfEra();
        org.joda.time.DateTime dateTime80 = property79.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime81 = property79.roundCeilingCopy();
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((java.lang.Object) dateTime81);
        org.joda.time.DateTime dateTime84 = dateTime81.plusHours(24);
        boolean boolean85 = calendar7.before((java.lang.Object) dateTime84);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2922789,MONTH=518,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1922,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=31081121,MINUTE=-1264978,SECOND=470,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1200000 + "'", int14 == 1200000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-01:00" + "'", str37, "-01:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test14975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14975");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay7 = property5.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay9 = property5.setCopy(999);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.plusHours(1268);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.secondOfMinute();
        java.lang.String str13 = property12.getName();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property12.getAsShortText(locale14);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "secondOfMinute" + "'", str13, "secondOfMinute");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
    }

    @Test
    public void test14976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14976");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime30 = property13.withMinimumValue();
        org.joda.time.LocalTime localTime32 = localTime30.withMinuteOfHour(11);
        org.joda.time.LocalTime.Property property33 = localTime32.secondOfMinute();
        org.joda.time.LocalTime localTime34 = property33.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalTime localTime36 = localTime34.minus(readablePeriod35);
        org.joda.time.LocalTime.Property property37 = localTime36.millisOfDay();
        org.joda.time.LocalTime.Property property38 = localTime36.secondOfMinute();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(7);
        org.joda.time.DateTime dateTime46 = dateTime42.withYear(1);
        org.joda.time.DateTime dateTime47 = dateTime46.withEarlierOffsetAtOverlap();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime46.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime49 = localTime36.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean51 = dateTime49.isEqual((-62104060800244L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test14977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14977");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(7);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(1);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology10);
        java.lang.String str14 = localTime13.toString();
        org.joda.time.Chronology chronology15 = localTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 357, chronology15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minus(readablePeriod18);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.plusMillis(674);
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        java.util.Locale locale23 = null;
        java.lang.String str24 = property22.getAsShortText(locale23);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "01:00:00.000" + "'", str14, "01:00:00.000");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "31" + "'", str24, "31");
    }

    @Test
    public void test14978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14978");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.getLocalTime();
        org.joda.time.LocalTime localTime18 = property13.addCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime19 = property13.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test14979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14979");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(7);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(1);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology9);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(8);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 10);
        long long29 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.plus(readableDuration30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withDurationAdded(readableDuration34, 23);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(7);
        org.joda.time.DateTime dateTime46 = dateTime42.withYear(1);
        org.joda.time.Chronology chronology47 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.secondOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology47.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime36.toMutableDateTime(chronology47);
        org.joda.time.DateTime dateTime56 = dateTime36.plusMonths(1380);
        org.joda.time.DateTime.Property property57 = dateTime36.secondOfDay();
        org.joda.time.DateTime dateTime58 = property57.withMaximumValue();
        int int59 = dateTime58.getMinuteOfHour();
        int int60 = dateTime58.getYear();
        java.util.Date date61 = dateTime58.toDate();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 62134912800000L + "'", long29 == 62134912800000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-62134909199000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 11 00:59:59 UTC 1");
    }

    @Test
    public void test14980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14980");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        int int3 = dateTimeZone1.getStandardOffset((long) (short) 0);
        long long6 = dateTimeZone1.convertLocalToUTC(480100L, false);
        java.lang.String str8 = dateTimeZone1.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays(7);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear(1);
        org.joda.time.DateTime dateTime18 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property19 = dateTime17.hourOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str24 = dateTimeZone22.getShortName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime20.toMutableDateTime(dateTimeZone22);
        long long27 = dateTimeZone1.getMillisKeepLocal(dateTimeZone22, 0L);
        int int29 = dateTimeZone1.getOffsetFromLocal((long) 20);
        java.util.TimeZone timeZone30 = dateTimeZone1.toTimeZone();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4080100L + "'", long6 == 4080100L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:00" + "'", str8, "-01:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:00" + "'", str24, "-01:00");
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3600000) + "'", int29 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT-01:00");
    }

    @Test
    public void test14981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14981");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumShortTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime14.toMutableDateTime();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay18.plusMinutes(0);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay18.withSecondOfMinute(17);
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.minuteOfHour();
        boolean boolean25 = dateTime14.equals((java.lang.Object) property24);
        boolean boolean26 = dateTime14.isEqualNow();
        org.joda.time.DateTime dateTime28 = dateTime14.plusWeeks(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTime14.withMinuteOfHour(31201828);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31201828 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test14982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14982");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        java.util.Locale locale10 = null;
        int int11 = property5.getMaximumShortTextLength(locale10);
        org.joda.time.TimeOfDay timeOfDay13 = property5.addWrapFieldToCopy(63);
        java.util.Locale locale14 = null;
        int int15 = property5.getMaximumTextLength(locale14);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test14983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14983");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str3 = dateTimeZone1.getShortName((long) 0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property5 = dateTime4.weekyear();
        org.joda.time.DurationField durationField6 = property5.getRangeDurationField();
        org.joda.time.DurationField durationField7 = property5.getRangeDurationField();
        org.joda.time.DateTime dateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = property5.getDateTime();
        org.joda.time.DateTime dateTime10 = property5.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) property5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test14984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14984");
        java.util.Date date3 = new java.util.Date(31077130, 517, 9);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 09 00:00:00 UTC 31079073");
    }

    @Test
    public void test14985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14985");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        int int9 = calendar7.getMaximum(9);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        calendar7.setLenient(true);
        int int14 = calendar7.getLeastMaximum(16);
        calendar7.set(0, 13, (int) (byte) -1);
        long long19 = calendar7.getTimeInMillis();
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromCalendarFields(calendar7);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(7);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.plusMinutes((int) (short) 100);
        java.lang.String str33 = dateTime32.toString();
        int int34 = dateTime32.getSecondOfMinute();
        org.joda.time.DateTime dateTime36 = dateTime32.plusMonths((int) (short) 1);
        int int37 = dateTime36.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime36.getZone();
        boolean boolean39 = timeOfDay20.equals((java.lang.Object) dateTime36);
        org.joda.time.DateTime dateTime41 = dateTime36.plusMillis(34800000);
        org.joda.time.TimeOfDay timeOfDay42 = dateTime41.toTimeOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-62133180719900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=6,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1200000 + "'", int14 == 1200000);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62133180719900L) + "'", long19 == (-62133180719900L));
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str33, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(timeOfDay42);
    }

    @Test
    public void test14986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14986");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        int int10 = dateTime7.getMillisOfSecond();
        org.joda.time.DateTime dateTime12 = dateTime7.withWeekyear((-292275054));
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay((long) 'a');
        int int15 = localTime14.getSecondOfMinute();
        int int16 = localTime14.getMinuteOfHour();
        org.joda.time.DateTime dateTime17 = localTime14.toDateTimeToday();
        boolean boolean19 = dateTime17.isBefore((long) 6);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay25 = dateTime22.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property26 = timeOfDay25.millisOfSecond();
        int int27 = property26.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay29 = property26.addToCopy(100);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay34 = dateTime31.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property35 = timeOfDay34.millisOfSecond();
        boolean boolean36 = timeOfDay29.isEqual((org.joda.time.ReadablePartial) timeOfDay34);
        int int37 = timeOfDay34.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = timeOfDay34.getFieldTypes();
        org.joda.time.TimeOfDay.Property property39 = timeOfDay34.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay41 = property39.setCopy(1);
        java.lang.String str42 = timeOfDay41.toString();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay41.plus(readablePeriod43);
        org.joda.time.TimeOfDay.Property property45 = timeOfDay44.secondOfMinute();
        org.joda.time.LocalTime localTime46 = timeOfDay44.toLocalTime();
        org.joda.time.DateTime dateTime47 = dateTime20.withFields((org.joda.time.ReadablePartial) timeOfDay44);
        org.joda.time.DateTime.Property property48 = dateTime47.year();
        boolean boolean49 = dateTime7.equals((java.lang.Object) property48);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "T01:00:00.100" + "'", str42, "T01:00:00.100");
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test14987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14987");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(9);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime10.toLocalTime();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        long long20 = chronology15.add(0L, (long) (short) 0, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter7.withChronology(chronology15);
        boolean boolean22 = dateTimeFormatter21.isParser();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test14988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14988");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean9 = property5.equals((java.lang.Object) dateTimeFieldType8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(7);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(1);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.hourOfHalfday();
        org.joda.time.Chronology chronology23 = chronology19.withUTC();
        boolean boolean24 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField25 = chronology23.seconds();
        long long29 = chronology23.add(1644572205789L, (-61200000L), 1439);
        org.joda.time.DateTimeField dateTimeField30 = chronology23.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = dateTimeField30.set(719162L, "23:00:00.025");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"23:00:00.025\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1556505405789L + "'", long29 == 1556505405789L);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test14989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14989");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        long long11 = property9.remainder();
        java.lang.String str12 = property9.toString();
        long long13 = property9.remainder();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay18.withPeriodAdded(readablePeriod20, (int) '4');
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime25 = localTime23.withSecondOfMinute(1);
        org.joda.time.LocalTime localTime27 = localTime25.withMillisOfDay(2);
        boolean boolean28 = timeOfDay18.isAfter((org.joda.time.ReadablePartial) localTime25);
        int int29 = property9.compareTo((org.joda.time.ReadablePartial) timeOfDay18);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay18.withChronologyRetainFields(chronology30);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 480100L + "'", long11 == 480100L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[hourOfDay]" + "'", str12, "Property[hourOfDay]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 480100L + "'", long13 == 480100L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(timeOfDay31);
    }

    @Test
    public void test14990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14990");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) (short) 0);
        boolean boolean12 = dateTime8.isEqual((long) (byte) 0);
        java.util.Locale locale13 = null;
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale13);
        java.util.Date date15 = dateTime8.toDate();
        int int16 = date15.getDay();
        date15.setSeconds(84931100);
        int int19 = date15.getMinutes();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Sep 11 23:06:20 UTC 4");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
    }

    @Test
    public void test14991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14991");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        java.util.Date date5 = dateTime1.toDate();
        long long6 = date5.getTime();
        int int7 = date5.getHours();
        date5.setSeconds((int) (short) 0);
        java.time.Instant instant10 = date5.toInstant();
        java.util.Date date11 = java.util.Date.from(instant10);
        int int12 = date11.getMinutes();
        int int13 = date11.getTimezoneOffset();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test14992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14992");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        int int6 = property5.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay7 = property5.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay9 = property5.setCopy(999);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.plusHours(1268);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.secondOfMinute();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(7);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(1);
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.minuteOfDay();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromMillisOfDay((-82800000L), chronology22);
        org.joda.time.LocalTime.Property property26 = localTime25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        org.joda.time.LocalTime localTime29 = property26.addCopy(1L);
        org.joda.time.LocalTime localTime30 = property26.roundHalfEvenCopy();
        int int31 = property12.compareTo((org.joda.time.ReadablePartial) localTime30);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime33 = localTime32.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalTime localTime36 = localTime32.withPeriodAdded(readablePeriod34, (int) 'a');
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay41 = dateTime38.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property42 = timeOfDay41.millisOfSecond();
        int int43 = property42.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay45 = property42.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay45.plusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property48 = timeOfDay45.hourOfDay();
        int int49 = timeOfDay45.size();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay54 = dateTime51.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property55 = timeOfDay54.millisOfSecond();
        org.joda.time.DurationField durationField56 = property55.getDurationField();
        java.lang.String str57 = property55.getAsShortText();
        java.util.Locale locale58 = null;
        int int59 = property55.getMaximumTextLength(locale58);
        org.joda.time.TimeOfDay timeOfDay60 = property55.getTimeOfDay();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay65 = dateTime62.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property66 = timeOfDay65.millisOfSecond();
        int int67 = property66.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay69 = property66.addToCopy(100);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime73 = dateTime71.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay74 = dateTime71.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property75 = timeOfDay74.millisOfSecond();
        boolean boolean76 = timeOfDay69.isEqual((org.joda.time.ReadablePartial) timeOfDay74);
        int[] intArray77 = timeOfDay69.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = timeOfDay69.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType80 = dateTimeFieldType79.getDurationType();
        boolean boolean81 = timeOfDay60.isSupported(dateTimeFieldType79);
        boolean boolean82 = timeOfDay45.isSupported(dateTimeFieldType79);
        boolean boolean83 = localTime32.isSupported(dateTimeFieldType79);
        org.joda.time.LocalTime.Property property84 = localTime32.millisOfDay();
        org.joda.time.LocalTime localTime85 = property84.withMinimumValue();
        org.joda.time.LocalTime localTime86 = property84.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime88 = property84.addCopy((long) 63);
        org.joda.time.DurationField durationField89 = property84.getRangeDurationField();
        boolean boolean90 = property12.equals((java.lang.Object) durationField89);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "100" + "'", str57, "100");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[23, 0, 0, 200]");
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test14993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14993");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime.Property property11 = dateTime9.weekyear();
        java.util.Locale locale12 = null;
        java.util.Calendar calendar13 = dateTime9.toCalendar(locale12);
        int int14 = calendar13.getWeekYear();
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = calendar13.getDisplayName(949, 34680000, locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-62104063919900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=8,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test14994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14994");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(139, 762);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 762");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14995");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        java.lang.String str4 = dateTimeZone2.getShortName((long) 0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj0, dateTimeZone2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(7);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.weeks();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology14.add(readablePeriod17, 1L, 8);
        org.joda.time.DateTime dateTime21 = dateTime5.toDateTime(chronology14);
        org.joda.time.DateTime.Property property22 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime5.getZone();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test14996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14996");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        java.lang.String str12 = dateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        boolean boolean14 = gregorianCalendar13.isWeekDateSupported();
        int int15 = gregorianCalendar13.getMinimalDaysInFirstWeek();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = dateTime17.toTimeOfDay();
        java.util.Date date21 = dateTime17.toDate();
        java.time.Instant instant22 = date21.toInstant();
        int int23 = date21.getMinutes();
        int int24 = date21.getDate();
        gregorianCalendar13.setTime(date21);
        gregorianCalendar13.setFirstDayOfWeek(9);
        int int28 = gregorianCalendar13.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-12-31T23:48:00.100-01:00" + "'", str12, "0001-12-31T23:48:00.100-01:00");
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
    }

    @Test
    public void test14997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14997");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        java.lang.String str9 = property8.getName();
        boolean boolean10 = property8.isLeap();
        org.joda.time.DateTime dateTime11 = property8.roundHalfFloorCopy();
        int int12 = dateTime11.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime11.plusHours(99);
        org.joda.time.DateTime.Property property15 = dateTime11.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test14998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14998");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        java.util.Locale locale6 = null;
        int int7 = property5.getMaximumShortTextLength(locale6);
        int int8 = property5.get();
        int int9 = property5.get();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        org.joda.time.LocalTime localTime15 = dateTime11.toLocalTime();
        int int16 = property5.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime11.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusYears(79680);
        org.joda.time.DateTime dateTime22 = dateTime18.plusSeconds(10);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(7);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(1);
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes((int) (short) 100);
        org.joda.time.DateTime.Property property35 = dateTime34.monthOfYear();
        org.joda.time.DateTime dateTime36 = property35.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime37 = property35.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime39 = dateTime37.minusSeconds(35);
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks(31081121);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '#');
        boolean boolean44 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test14999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14999");
        java.util.Date date6 = new java.util.Date(31021223, 92, 872, 932, 1913, 521);
        java.time.Instant instant7 = date6.toInstant();
        org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 28 04:01:41 UTC 31023133");
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test15000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test15000");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays(7);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        java.lang.String str14 = property13.getAsText();
        org.joda.time.DateTime dateTime15 = property13.getDateTime();
        org.joda.time.DateTimeField dateTimeField16 = property13.getField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AD" + "'", str14, "AD");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }
}

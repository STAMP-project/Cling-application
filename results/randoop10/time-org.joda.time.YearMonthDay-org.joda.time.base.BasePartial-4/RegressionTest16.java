import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property9 = dateTime7.property(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = property9.getDateTime();
        long long11 = dateTime10.getMillis();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add((long) 3);
        mutableDateTime16.setDayOfMonth((int) (byte) 10);
        org.joda.time.Period period20 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.hours();
        java.lang.String str22 = durationFieldType21.toString();
        org.joda.time.Period period24 = period20.withField(durationFieldType21, 2);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.hours();
        java.lang.String str26 = durationFieldType25.toString();
        boolean boolean27 = period20.isSupported(durationFieldType25);
        mutableDateTime16.add((org.joda.time.ReadablePeriod) period20, 21);
        mutableDateTime16.addMillis((-292275054));
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology35);
        org.joda.time.Interval interval37 = yearMonthDay36.toInterval();
        org.joda.time.Period period38 = interval37.toPeriod();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology42);
        org.joda.time.Interval interval44 = yearMonthDay43.toInterval();
        org.joda.time.Period period45 = interval44.toPeriod();
        long long46 = interval44.getStartMillis();
        org.joda.time.Interval interval47 = interval37.overlap((org.joda.time.ReadableInterval) interval44);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, 100L, periodType53, chronology54);
        java.lang.Object obj56 = mutablePeriod55.clone();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(0L, 100L, periodType59, chronology60);
        mutablePeriod55.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone64);
        org.joda.time.Duration duration66 = mutablePeriod55.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight50.plus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.LocalDate localDate68 = dateMidnight67.toLocalDate();
        org.joda.time.Chronology chronology69 = localDate68.getChronology();
        java.lang.String str70 = chronology69.toString();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.secondOfDay();
        org.joda.time.Interval interval72 = interval37.withChronology(chronology69);
        org.joda.time.DurationField durationField73 = chronology69.seconds();
        org.joda.time.MutableDateTime mutableDateTime74 = org.joda.time.MutableDateTime.now(chronology69);
        org.joda.time.DateTimeField dateTimeField75 = chronology69.secondOfMinute();
        mutableDateTime16.setChronology(chronology69);
        org.joda.time.DateTime dateTime77 = dateTime10.toDateTime(chronology69);
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay((long) 72000001, chronology69);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-61038316800000L) + "'", long11 == (-61038316800000L));
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hours" + "'", str22, "hours");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hours" + "'", str26, "hours");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-61038316800000L) + "'", long46 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "PT0.100S");
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ISOChronology[UTC]" + "'", str70, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        int int37 = mutablePeriod35.getMinutes();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType40);
        long long47 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology24.withZone(dateTimeZone48);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 11, chronology49);
        org.joda.time.DurationField durationField51 = chronology49.days();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (-1), (long) (short) 0, chronology49);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        int int56 = dateMidnight55.getEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = dateMidnight55.toDateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks(0);
        org.joda.time.Interval interval61 = interval52.withStart((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology62 = interval52.getChronology();
        org.joda.time.DateTime dateTime63 = interval52.getEnd();
        int int64 = dateTime63.getYearOfEra();
        org.joda.time.DateTime dateTime66 = dateTime63.plusYears(25851001);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime68 = dateTime66.withMonthOfYear((-1937));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1937 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 25755235L + "'", long47 == 25755235L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) '#', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        int int6 = dateMidnight5.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateMidnight5.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusDays(9);
        int int11 = dateTime8.getEra();
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundCeilingCopy();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.Chronology chronology24 = null;
        mutablePeriod20.setPeriod((long) 0, (long) 12, chronology24);
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        int int31 = dateMidnight30.getEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateMidnight30.toDateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks(0);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime37 = dateTime35.toLocalTime();
        org.joda.time.DateTime dateTime38 = dateTime35.withTimeAtStartOfDay();
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) dateTime35);
        int int40 = dateTime35.getSecondOfMinute();
        org.joda.time.DateTime.Property property41 = dateTime35.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = property41.setCopy("2022-02-15T07:15:02.607");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-15T07:15:02.607\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.012S");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = date1.getHours();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.LocalTime localTime6 = localTime4.minusSeconds(2022);
        int int7 = localTime6.getSecondOfMinute();
        int int8 = localTime6.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = localTime6.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 18 + "'", int7 == 18);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26 + "'", int8 == 26);
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime.Property property8 = dateTime5.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime5.plusDays(0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears(993);
        org.joda.time.DateTime dateTime15 = dateTime11.withMillisOfDay(6);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime11.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.monthOfYear();
        int int18 = property17.get();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        org.joda.time.DateTimeField dateTimeField20 = property17.getField();
        long long23 = dateTimeField20.addWrapField((long) 25864250, 26);
        org.joda.time.DurationField durationField24 = dateTimeField20.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5123464250L + "'", long23 == 5123464250L);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        boolean boolean5 = dateTimeFormatter4.isParser();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.000Z");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withOffsetParsed();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withLocale(locale11);
        boolean boolean14 = locale11.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645514176637,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=16,MILLISECOND=637,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology5);
        org.joda.time.Interval interval7 = yearMonthDay6.toInterval();
        org.joda.time.Interval interval9 = interval7.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.DateTime.Property property11 = dateTime10.secondOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.withEra((int) (short) 0);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, periodType1, chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfHalfday();
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        int int20 = dateMidnight19.getEra();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, (org.joda.time.ReadableDuration) duration36);
        boolean boolean38 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTime dateTime41 = dateTime16.withFieldAdded(durationFieldType39, 3);
        org.joda.time.DateTime dateTime43 = dateTime41.minusSeconds(32);
        org.joda.time.Instant instant44 = dateTime41.toInstant();
        long long45 = dateTime41.getMillis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1652598976696L + "'", long45 == 1652598976696L);
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType9 = periodType8.withMillisRemoved();
        int int10 = periodType9.size();
        org.joda.time.Period period12 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        java.lang.String str14 = durationFieldType13.toString();
        org.joda.time.Period period16 = period12.withField(durationFieldType13, 2);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        int int51 = mutablePeriod49.getMinutes();
        org.joda.time.Period period53 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.hours();
        java.lang.String str55 = durationFieldType54.toString();
        org.joda.time.Period period57 = period53.withField(durationFieldType54, 2);
        boolean boolean58 = mutablePeriod49.isSupported(durationFieldType54);
        long long61 = chronology38.add((org.joda.time.ReadablePeriod) mutablePeriod49, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology38.withZone(dateTimeZone62);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.DurationField durationField65 = chronology63.halfdays();
        org.joda.time.DurationField durationField66 = durationFieldType13.getField(chronology63);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((java.lang.Object) interval6, periodType9, chronology63);
        org.joda.time.PeriodType periodType68 = periodType9.withDaysRemoved();
        org.joda.time.PeriodType periodType69 = periodType68.withSecondsRemoved();
        org.joda.time.PeriodType periodType70 = periodType69.withYearsRemoved();
        org.joda.time.Period period71 = new org.joda.time.Period((long) 25795116, periodType69);
        org.joda.time.PeriodType periodType72 = periodType69.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType74 = periodType69.getFieldType(25910291);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25910291");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hours" + "'", str14, "hours");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hours" + "'", str55, "hours");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 25755235L + "'", long61 == 25755235L);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType72);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getRangeDurationType();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology7);
        org.joda.time.Interval interval9 = yearMonthDay8.toInterval();
        org.joda.time.Period period10 = interval9.toPeriod();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology14);
        org.joda.time.Interval interval16 = yearMonthDay15.toInterval();
        org.joda.time.Period period17 = interval16.toPeriod();
        long long18 = interval16.getStartMillis();
        org.joda.time.Interval interval19 = interval9.overlap((org.joda.time.ReadableInterval) interval16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.LocalDate localDate40 = dateMidnight39.toLocalDate();
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        java.lang.String str42 = chronology41.toString();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.secondOfDay();
        org.joda.time.Interval interval44 = interval9.withChronology(chronology41);
        org.joda.time.DurationField durationField45 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType2.getField(chronology41);
        org.joda.time.Period period50 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.Period period52 = period50.plusMonths((int) 'a');
        org.joda.time.Period period54 = period50.withHours(70);
        org.joda.time.Days days55 = period54.toStandardDays();
        int[] intArray57 = chronology41.get((org.joda.time.ReadablePeriod) days55, 0L);
        org.joda.time.DateTimeField dateTimeField58 = chronology41.weekyear();
        org.joda.time.Period period59 = new org.joda.time.Period((long) 435, periodType1, chronology41);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-61038316800000L) + "'", long18 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ISOChronology[UTC]" + "'", str42, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval7.withPeriodBeforeEnd(readablePeriod9);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((long) 3);
        mutableDateTime15.setDayOfMonth((int) (byte) 10);
        mutableDateTime15.add((long) 6);
        mutableDateTime15.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.monthOfYear();
        mutableDateTime15.setTime((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.Duration duration43 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.Period period47 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.hours();
        java.lang.String str49 = durationFieldType48.toString();
        org.joda.time.Period period51 = period47.withField(durationFieldType48, 2);
        org.joda.time.Period period53 = period51.withMillis((int) '#');
        org.joda.time.LocalDate localDate54 = localDate45.minus((org.joda.time.ReadablePeriod) period53);
        int int55 = period53.getMonths();
        org.joda.time.Period period57 = period53.minusMinutes(8);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadablePeriod) period53);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        mutablePeriod64.setMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone68);
        int int70 = dateMidnight69.getEra();
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(0L, 100L, periodType73, chronology74);
        java.lang.Object obj76 = mutablePeriod75.clone();
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(0L, 100L, periodType79, chronology80);
        mutablePeriod75.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod81);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone84);
        org.joda.time.Duration duration86 = mutablePeriod75.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight85);
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight69, (org.joda.time.ReadableDuration) duration86);
        mutablePeriod64.add((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Interval interval89 = interval58.withDurationAfterStart((org.joda.time.ReadableDuration) duration86);
        boolean boolean90 = interval10.contains((org.joda.time.ReadableInterval) interval89);
        org.joda.time.Interval interval91 = interval10.toInterval();
        long long92 = interval91.toDurationMillis();
        org.joda.time.Period period93 = interval91.toPeriod();
        org.joda.time.Interval interval96 = new org.joda.time.Interval(0L, 1645513759767L);
        boolean boolean97 = interval91.abuts((org.joda.time.ReadableInterval) interval96);
        org.joda.time.MutableInterval mutableInterval98 = interval96.toMutableInterval();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hours" + "'", str49, "hours");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "PT0.100S");
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(mutableInterval98);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.Period period6 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.hours();
        java.lang.String str8 = durationFieldType7.toString();
        org.joda.time.Period period10 = period6.withField(durationFieldType7, 2);
        org.joda.time.Period period12 = period6.minusSeconds(2);
        mutableDateTime4.add((org.joda.time.ReadablePeriod) period6, 32769);
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime4.getZone();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime4.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime4.centuryOfEra();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime4.minuteOfHour();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime4.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6);
        mutablePeriod22.addHours(25762147);
        mutableDateTime4.add((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hours" + "'", str8, "hours");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology5);
        org.joda.time.Interval interval7 = yearMonthDay6.toInterval();
        org.joda.time.Period period8 = interval7.toPeriod();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        long long16 = interval14.getStartMillis();
        org.joda.time.Interval interval17 = interval7.overlap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.LocalDate localDate38 = dateMidnight37.toLocalDate();
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        java.lang.String str40 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfDay();
        org.joda.time.Interval interval42 = interval7.withChronology(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.seconds();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 25803547, (long) 12, chronology39);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-61038316800000L) + "'", long16 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime25 = property22.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        int int29 = dateMidnight28.getEra();
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.monthOfYear();
        org.joda.time.DateMidnight dateMidnight32 = property30.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property30.getFieldType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.property(dateTimeFieldType33);
        boolean boolean35 = dateMidnight2.isSupported(dateTimeFieldType33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight2.minusWeeks(16);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight2.minusMonths(56);
        org.joda.time.Interval interval40 = dateMidnight2.toInterval();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(interval40);
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withEra((int) (short) 0);
        org.joda.time.LocalDate localDate12 = dateTime11.toLocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths(25755035);
        int int15 = localDate12.getWeekOfWeekyear();
        int int16 = localDate12.getYearOfCentury();
        org.joda.time.DateTime dateTime17 = localDate12.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate19 = localDate12.withYear(25928765);
        org.joda.time.Chronology chronology20 = localDate19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.years();
        org.joda.time.DurationField durationField22 = chronology20.seconds();
        org.joda.time.DurationField durationField23 = chronology20.months();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        int int4 = dateMidnight2.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withField(dateTimeFieldType5, 3);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.minusDays((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableInstant10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight2.yearOfEra();
        org.joda.time.DateMidnight dateMidnight13 = property12.getDateMidnight();
        java.lang.String str14 = property12.getAsShortText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970" + "'", str14, "1970");
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.roundHalfEven();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.centuryOfEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType20 = periodType19.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(4000L, (long) (byte) 100, periodType19);
        org.joda.time.PeriodType periodType22 = periodType19.withSecondsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withYearsRemoved();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 25810113, periodType23);
        org.joda.time.Period period25 = new org.joda.time.Period((long) 33, periodType23);
        org.joda.time.Interval interval26 = interval12.withPeriodAfterStart((org.joda.time.ReadablePeriod) period25);
        mutableDateTime5.add((org.joda.time.ReadablePeriod) period25);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(interval26);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateMidnight13.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(0);
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime22 = dateTime18.withFieldAdded(durationFieldType20, 5);
        int int23 = dateMidnight8.compareTo((org.joda.time.ReadableInstant) dateTime22);
        int int24 = dateMidnight8.getMillisOfSecond();
        boolean boolean25 = dateMidnight8.isEqualNow();
        org.joda.time.DateMidnight.Property property26 = dateMidnight8.dayOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.LocalTime localTime4 = timeOfDay2.toLocalTime();
        org.joda.time.Period period6 = org.joda.time.Period.hours((int) (byte) -1);
        org.joda.time.LocalTime localTime7 = localTime4.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalTime.Property property8 = localTime4.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.roundFloor();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.weekOfWeekyear();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutableDateTime13.add((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DurationFieldType[] durationFieldTypeArray28 = mutablePeriod25.getFieldTypes();
        mutablePeriod25.addWeeks((int) '4');
        org.joda.time.LocalTime localTime31 = localTime4.minus((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        int int35 = dateMidnight34.getEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateMidnight34.toDateTime(chronology36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusWeeks(0);
        org.joda.time.DateTime dateTime40 = dateTime39.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime41 = dateTime39.toLocalTime();
        org.joda.time.LocalTime localTime43 = localTime41.minusMinutes(3);
        org.joda.time.LocalTime localTime45 = localTime41.minusMillis((-1));
        org.joda.time.DateTime dateTime46 = localTime45.toDateTimeToday();
        org.joda.time.LocalTime localTime48 = localTime45.minusMinutes(2022);
        org.joda.time.Chronology chronology49 = localTime45.getChronology();
        org.joda.time.LocalTime localTime50 = localTime31.withFields((org.joda.time.ReadablePartial) localTime45);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        int int54 = dateMidnight53.getEra();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = dateMidnight53.toDateTime(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusWeeks(0);
        org.joda.time.DateTime dateTime59 = dateTime58.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime60 = dateTime58.toLocalTime();
        org.joda.time.LocalTime localTime62 = localTime60.minusMinutes(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = localTime60.getFieldType(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime66 = localTime31.withField(dateTimeFieldType64, 25900901);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25900901 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(durationFieldTypeArray28);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        java.lang.String str23 = interval22.toString();
        long long24 = interval22.toDurationMillis();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.Period period31 = interval30.toPeriod();
        long long32 = interval30.getStartMillis();
        boolean boolean33 = interval22.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology37);
        org.joda.time.Interval interval39 = yearMonthDay38.toInterval();
        org.joda.time.Period period40 = interval39.toPeriod();
        boolean boolean42 = interval39.contains((long) 4);
        boolean boolean43 = interval22.isAfter((org.joda.time.ReadableInterval) interval39);
        long long44 = interval22.getStartMillis();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str23, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 86400000L + "'", long24 == 86400000L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-61038316800000L) + "'", long32 == (-61038316800000L));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        org.joda.time.YearMonthDay yearMonthDay58 = property54.addToCopy(7);
        org.joda.time.LocalDate localDate59 = yearMonthDay58.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay58.minusYears(16);
        org.joda.time.YearMonthDay.Property property62 = yearMonthDay61.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay63 = property62.getYearMonthDay();
        org.joda.time.DateMidnight dateMidnight64 = yearMonthDay63.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay63.minusDays(25804551);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(yearMonthDay66);
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Period period23 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.hours();
        java.lang.String str25 = durationFieldType24.toString();
        org.joda.time.Period period27 = period23.withField(durationFieldType24, 2);
        org.joda.time.Period period29 = period27.withMillis((int) '#');
        org.joda.time.LocalDate localDate30 = localDate21.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period32 = period29.minusYears(21);
        org.joda.time.Period period34 = period32.plusWeeks(32772);
        org.joda.time.Period period36 = period34.withSeconds(10);
        org.joda.time.PeriodType periodType37 = period34.getPeriodType();
        org.joda.time.PeriodType periodType38 = periodType37.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        java.lang.Object obj49 = mutablePeriod48.clone();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        org.joda.time.Duration duration59 = mutablePeriod48.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight43.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.LocalDate localDate61 = dateMidnight60.toLocalDate();
        org.joda.time.Chronology chronology62 = localDate61.getChronology();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(0L, 100L, periodType65, chronology66);
        java.lang.Object obj68 = mutablePeriod67.clone();
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(0L, 100L, periodType71, chronology72);
        mutablePeriod67.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod73);
        int int75 = mutablePeriod73.getMinutes();
        org.joda.time.Period period77 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType78 = org.joda.time.DurationFieldType.hours();
        java.lang.String str79 = durationFieldType78.toString();
        org.joda.time.Period period81 = period77.withField(durationFieldType78, 2);
        boolean boolean82 = mutablePeriod73.isSupported(durationFieldType78);
        long long85 = chronology62.add((org.joda.time.ReadablePeriod) mutablePeriod73, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.Chronology chronology87 = chronology62.withZone(dateTimeZone86);
        org.joda.time.LocalDate localDate88 = new org.joda.time.LocalDate(chronology87);
        org.joda.time.DurationField durationField89 = chronology87.halfdays();
        org.joda.time.DateTimeField dateTimeField90 = chronology87.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod(814672845366780000L, (long) 53, chronology87);
        org.joda.time.Period period92 = new org.joda.time.Period(obj0, periodType38, chronology87);
        org.joda.time.DateTimeField dateTimeField93 = chronology87.dayOfWeek();
        org.joda.time.DurationField durationField94 = chronology87.seconds();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hours" + "'", str25, "hours");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0.100S");
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hours" + "'", str79, "hours");
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 25755235L + "'", long85 == 25755235L);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(durationField94);
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval7.withPeriodBeforeEnd(readablePeriod9);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((long) 3);
        mutableDateTime15.setDayOfMonth((int) (byte) 10);
        mutableDateTime15.add((long) 6);
        mutableDateTime15.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.monthOfYear();
        mutableDateTime15.setTime((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.Duration duration43 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.Period period47 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.hours();
        java.lang.String str49 = durationFieldType48.toString();
        org.joda.time.Period period51 = period47.withField(durationFieldType48, 2);
        org.joda.time.Period period53 = period51.withMillis((int) '#');
        org.joda.time.LocalDate localDate54 = localDate45.minus((org.joda.time.ReadablePeriod) period53);
        int int55 = period53.getMonths();
        org.joda.time.Period period57 = period53.minusMinutes(8);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadablePeriod) period53);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        mutablePeriod64.setMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone68);
        int int70 = dateMidnight69.getEra();
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(0L, 100L, periodType73, chronology74);
        java.lang.Object obj76 = mutablePeriod75.clone();
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(0L, 100L, periodType79, chronology80);
        mutablePeriod75.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod81);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone84);
        org.joda.time.Duration duration86 = mutablePeriod75.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight85);
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight69, (org.joda.time.ReadableDuration) duration86);
        mutablePeriod64.add((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Interval interval89 = interval58.withDurationAfterStart((org.joda.time.ReadableDuration) duration86);
        boolean boolean90 = interval10.contains((org.joda.time.ReadableInterval) interval89);
        boolean boolean92 = interval10.isBefore(0L);
        boolean boolean93 = interval10.isAfterNow();
        boolean boolean94 = interval10.isAfterNow();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hours" + "'", str49, "hours");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "PT0.100S");
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime localTime13 = localTime9.minusMillis((-1));
        org.joda.time.DateTime dateTime14 = localTime13.toDateTimeToday();
        org.joda.time.LocalTime localTime16 = localTime13.minusMinutes(2022);
        org.joda.time.LocalTime localTime18 = localTime16.withMillisOfSecond(4);
        org.joda.time.LocalTime localTime20 = localTime18.plusMinutes(111);
        org.joda.time.LocalTime localTime22 = localTime20.plusHours(25824443);
        int int23 = localTime20.getSecondOfMinute();
        org.joda.time.LocalTime.Property property24 = localTime20.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField26 = localTime20.getField(25494);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 25494");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        int int10 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime11 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.TimeOfDay timeOfDay12 = dateTime5.toTimeOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime5.toMutableDateTime();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.monthOfYear();
        org.joda.time.DateMidnight dateMidnight16 = property15.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withCenturyOfEra(4);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        int int22 = dateMidnight21.getEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateMidnight21.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight27 = dateTime26.toDateMidnight();
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.era();
        int int29 = dateMidnight27.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight16.minus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime56 = property55.roundHalfFloor();
        mutableDateTime56.addWeekyears((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime56.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone61);
        int int63 = dateMidnight62.getEra();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = dateMidnight62.toDateTime(chronology64);
        org.joda.time.DateTime dateTime67 = dateTime65.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight68 = dateTime67.toDateMidnight();
        boolean boolean69 = mutableDateTime56.isAfter((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime70 = dateTime67.toDateTimeISO();
        org.joda.time.DateTime dateTime72 = dateTime70.withWeekyear(25755035);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone74);
        int int76 = dateMidnight75.getEra();
        org.joda.time.DateMidnight.Property property77 = dateMidnight75.monthOfYear();
        org.joda.time.DateMidnight dateMidnight79 = property77.addToCopy((long) ' ');
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight79.plusMonths(0);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight81.withYearOfCentury((int) (short) 1);
        org.joda.time.PeriodType periodType86 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType87 = periodType86.withMillisRemoved();
        org.joda.time.Period period88 = new org.joda.time.Period((long) 10, (long) '#', periodType87);
        java.lang.String str89 = periodType87.getName();
        org.joda.time.PeriodType periodType90 = periodType87.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateMidnight81, periodType87);
        org.joda.time.Chronology chronology92 = dateTime72.getChronology();
        mutableDateTime13.setChronology(chronology92);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "YearMonthDay" + "'", str89, "YearMonthDay");
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(chronology92);
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType7 = periodType6.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(periodType6);
        org.joda.time.Period period9 = new org.joda.time.Period((long) 25999209, (-1021403532644L), periodType6);
        org.joda.time.PeriodType periodType10 = periodType6.withDaysRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 25861612, (long) 25888325, periodType6);
        org.joda.time.Period period12 = new org.joda.time.Period(0L, (long) 25849993, periodType6);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime11 = property10.roundCeilingCopy();
        org.joda.time.Period period13 = org.joda.time.Period.days(1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = period13.toDurationFrom(readableInstant14);
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType18 = periodType17.withMillisRemoved();
        java.lang.String str19 = periodType18.getName();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration15, periodType18);
        org.joda.time.DateTime.Property property21 = dateTime11.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = property21.setCopy(1959);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1959 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Minutes" + "'", str19, "Minutes");
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        int int19 = dateMidnight18.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateMidnight18.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays(9);
        int int24 = dateTime21.getEra();
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        long long29 = dateTimeZone26.adjustOffset((long) 5, true);
        boolean boolean31 = dateTimeZone26.isStandardOffset((long) 3);
        mutableDateTime4.setZoneRetainFields(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime35 = property34.roundHalfCeiling();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        java.lang.Object obj46 = mutablePeriod45.clone();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 100L, periodType49, chronology50);
        mutablePeriod45.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        org.joda.time.Duration duration56 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight40.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDate localDate58 = dateMidnight57.toLocalDate();
        org.joda.time.Chronology chronology59 = localDate58.getChronology();
        java.lang.String str60 = chronology59.toString();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.secondOfDay();
        org.joda.time.Interval interval62 = new org.joda.time.Interval(0L, (long) 1, chronology59);
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay(10L);
        long long66 = chronology59.set((org.joda.time.ReadablePartial) yearMonthDay64, (long) 8);
        org.joda.time.DateTimeField dateTimeField67 = chronology59.secondOfDay();
        org.joda.time.DurationField durationField68 = chronology59.minutes();
        org.joda.time.DateTimeField dateTimeField69 = chronology59.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight75.withChronology(chronology76);
        int int78 = dateMidnight77.getMinuteOfHour();
        org.joda.time.Chronology chronology79 = dateMidnight77.getChronology();
        boolean boolean80 = mutableDateTime70.isBefore((org.joda.time.ReadableInstant) dateMidnight77);
        boolean boolean81 = mutableDateTime35.isAfter((org.joda.time.ReadableInstant) dateMidnight77);
        org.joda.time.DateMidnight.Property property82 = dateMidnight77.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight83 = property82.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight85 = dateMidnight83.withWeekOfWeekyear(26021742);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26021742 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 5L + "'", long29 == 5L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "PT0.100S");
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ISOChronology[UTC]" + "'", str60, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 8L + "'", long66 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateMidnight83);
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        long long15 = interval13.getStartMillis();
        org.joda.time.Interval interval16 = interval6.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfDay();
        org.joda.time.Interval interval41 = interval6.withChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField42 = chronology38.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((-4190400000L), chronology38);
        org.joda.time.DurationField durationField46 = chronology38.minutes();
        org.joda.time.DateTimeField dateTimeField47 = chronology38.secondOfMinute();
        org.joda.time.DurationField durationField48 = chronology38.hours();
        long long50 = durationField48.getMillis(26157603);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-61038316800000L) + "'", long15 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 94167370800000L + "'", long50 == 94167370800000L);
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        int int2 = mutableDateTime1.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone5);
        int int7 = dateMidnight6.getEra();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight6, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.roundFloor();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology33);
        org.joda.time.DateMidnight dateMidnight35 = yearMonthDay34.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableInstant) dateMidnight35, periodType39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight35.withCenturyOfEra((int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Period period44 = duration23.toPeriod();
        org.joda.time.Period period45 = duration23.toPeriod();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime50 = property49.roundHalfFloor();
        mutableDateTime50.addWeekyears((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime50.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime55 = property53.add(292269054);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) mutableDateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(mutableDateTime55);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(56, 25870924, (-2072237), 0, 25819021, 104);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25819021 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear((int) '#');
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime13 = property10.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        int int17 = dateMidnight16.getEra();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property18.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property18.getFieldType();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime13.property(dateTimeFieldType21);
        java.lang.String str23 = mutableDateTime13.toString();
        org.joda.time.DateTime dateTime24 = yearMonthDay7.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Interval interval25 = yearMonthDay7.toInterval();
        boolean boolean26 = interval25.isAfterNow();
        org.joda.time.DateTime dateTime27 = interval25.getEnd();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str23, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis((int) (short) 10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.yearOfCentury();
        org.joda.time.Interval interval9 = property8.toInterval();
        org.joda.time.MutableInterval mutableInterval10 = interval9.toMutableInterval();
        org.joda.time.DateTime dateTime11 = interval9.getStart();
        int int12 = dateTime11.getMinuteOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 25755035, dateTimeZone1);
        int int3 = localDateTime2.size();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.era();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        int int20 = dateMidnight19.getEra();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, (org.joda.time.ReadableDuration) duration36);
        boolean boolean38 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateMidnight19);
        java.lang.String str39 = dateTime16.toString();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType43 = periodType42.withMillisRemoved();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 10, (long) '#', periodType43);
        int int45 = period44.getDays();
        org.joda.time.Period period47 = period44.withDays(292278993);
        org.joda.time.DateTime dateTime48 = dateTime16.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((-292275053L), (-61038316800000L));
        org.joda.time.DateTime dateTime52 = dateTime48.minus((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-15T07:16:18.072Z" + "'", str39, "2022-02-15T07:16:18.072Z");
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.era();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.centuryOfEra();
        int int7 = localDateTime4.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusMonths(693);
        org.joda.time.Chronology chronology10 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.plusDays(25923675);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTimeAtCurrentTime(dateTimeZone19);
        int int22 = dateTimeZone19.getOffsetFromLocal(1645513759767L);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay24.year();
        org.joda.time.YearMonthDay yearMonthDay26 = property25.getYearMonthDay();
        int int27 = property25.get();
        int int28 = property25.get();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        org.joda.time.Period period4 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period6 = period4.plusDays(1970);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        int int10 = dateMidnight9.getEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateMidnight9.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks(0);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear((int) (short) 10);
        org.joda.time.Duration duration17 = period4.toDurationTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.weekOfWeekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) dateTime16);
        org.joda.time.DateTime dateTime21 = dateTime16.minusYears((int) (byte) 1);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        int int6 = timeOfDay2.size();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay2.minusHours(42);
        org.joda.time.Period period10 = org.joda.time.Period.weeks(25755035);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay8.withPeriodAdded((org.joda.time.ReadablePeriod) period10, (-2));
        org.joda.time.Period period14 = period10.withYears(16);
        org.joda.time.Period period19 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period21 = period19.plusDays(1970);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        int int25 = dateMidnight24.getEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateMidnight24.toDateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks(0);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear((int) (short) 10);
        org.joda.time.Duration duration32 = period19.toDurationTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property33 = dateTime31.year();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        int int37 = dateMidnight36.getEra();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = dateMidnight36.toDateTime(chronology38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusDays(9);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime44 = dateTime41.withCenturyOfEra(353);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period14, (org.joda.time.ReadableInstant) dateTime41);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 924, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfEra();
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        int int5 = dateMidnight4.getEra();
        int int6 = dateMidnight4.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withField(dateTimeFieldType7, 3);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology14);
        org.joda.time.Interval interval16 = yearMonthDay15.toInterval();
        org.joda.time.Period period17 = interval16.toPeriod();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology21);
        org.joda.time.Interval interval23 = yearMonthDay22.toInterval();
        org.joda.time.Period period24 = interval23.toPeriod();
        long long25 = interval23.getStartMillis();
        org.joda.time.Interval interval26 = interval16.overlap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone43);
        org.joda.time.Duration duration45 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight29.plus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.LocalDate localDate47 = dateMidnight46.toLocalDate();
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        java.lang.String str49 = chronology48.toString();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfDay();
        org.joda.time.Interval interval51 = interval16.withChronology(chronology48);
        org.joda.time.DurationField durationField52 = chronology48.minutes();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) 14, chronology48);
        org.joda.time.DateTimeField dateTimeField54 = chronology48.millisOfSecond();
        boolean boolean55 = dateTimeFieldType7.isSupported(chronology48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 111, 97L, chronology48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-61038316800000L) + "'", long25 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0.100S");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[UTC]" + "'", str49, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(25762033, 21, 32769);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.Interval interval10 = yearMonthDay9.toInterval();
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property13 = dateTime11.property(dateTimeFieldType12);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int15 = property13.getMaximumTextLength(locale14);
        java.util.Calendar.Builder builder16 = builder0.setLocale(locale14);
        java.util.Calendar calendar17 = builder16.build();
        calendar17.set(169, 70, (int) (short) -1, 70, 20);
        java.lang.String str24 = calendar17.getCalendarType();
        calendar17.setFirstDayOfWeek(52);
        java.util.Date date27 = calendar17.getTime();
        calendar17.set(8722001, 34841, 25967056, 25790263, 25806820, 1434);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=52,minimalDaysInFirstWeek=1,ERA=1,YEAR=8722001,MONTH=34841,WEEK_OF_YEAR=44,WEEK_OF_MONTH=1,DAY_OF_MONTH=25967056,DAY_OF_YEAR=305,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=25790263,MINUTE=25806820,SECOND=1434,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "gregory" + "'", str24, "gregory");
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Mon Nov 01 22:20:00 GMT 174");
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        int int35 = mutablePeriod33.getMinutes();
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        boolean boolean42 = mutablePeriod33.isSupported(durationFieldType38);
        long long45 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology22.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.year();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) 1970, chronology47);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.centuryOfEra();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 25755235L + "'", long45 == 25755235L);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        long long15 = interval13.getStartMillis();
        org.joda.time.Interval interval16 = interval6.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfDay();
        org.joda.time.Interval interval41 = interval6.withChronology(chronology38);
        org.joda.time.DurationField durationField42 = chronology38.minutes();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 14, chronology38);
        org.joda.time.DateTimeField dateTimeField44 = chronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = chronology38.minuteOfDay();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-61038316800000L) + "'", long15 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = dateTimeFormatter2.parseLocalDateTime("PT787M0.100S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = new java.util.Locale("", "ISOChronology[UTC]");
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setWeekDate(16, (int) (byte) 0, 7);
        calendar6.set((int) (byte) 10, 8, (int) (short) 0);
        java.util.Date date15 = calendar6.getTime();
        java.lang.String str16 = calendar6.getCalendarType();
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale.setDefault(category19, locale21);
        java.util.Map<java.lang.String, java.lang.Integer> strMap24 = calendar6.getDisplayNames(3, (int) (short) 1, locale21);
        java.lang.String str25 = locale21.getVariant();
        java.util.Locale.setDefault(category0, locale21);
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = null;
        org.joda.time.format.DateTimeParser dateTimeParser28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter27, dateTimeParser28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withPivotYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter29.withDefaultYear(292269054);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter33.withOffsetParsed();
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale36 = locale35.stripExtensions();
        java.lang.String str37 = locale36.getLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter33.withLocale(locale36);
        java.util.Locale.setDefault(category0, locale36);
        java.util.Date date41 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay42 = org.joda.time.TimeOfDay.fromDateFields(date41);
        int int43 = timeOfDay42.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay42.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay45.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property48 = timeOfDay47.secondOfMinute();
        java.util.Date date50 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay51 = org.joda.time.TimeOfDay.fromDateFields(date50);
        int int52 = timeOfDay51.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay51.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay54.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property57 = timeOfDay56.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime59.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime62 = property60.add((long) 3);
        mutableDateTime62.setDayOfMonth((int) (byte) 10);
        mutableDateTime62.add((long) 6);
        mutableDateTime62.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property70 = dateMidnight69.monthOfYear();
        mutableDateTime62.setTime((org.joda.time.ReadableInstant) dateMidnight69);
        int int72 = property57.compareTo((org.joda.time.ReadableInstant) mutableDateTime62);
        org.joda.time.TimeOfDay timeOfDay74 = property57.addNoWrapToCopy(5);
        int int75 = property48.compareTo((org.joda.time.ReadablePartial) timeOfDay74);
        java.util.Locale locale76 = java.util.Locale.JAPANESE;
        int int77 = property48.getMaximumShortTextLength(locale76);
        java.util.Locale.setDefault(category0, locale76);
        java.lang.String str79 = locale76.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale3.toString(), "_ISOCHRONOLOGY[UTC]");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "_ISOCHRONOLOGY[UTC]");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-61830837821594,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=7,WEEK_OF_YEAR=36,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=243,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=18,MILLISECOND=406,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Sun Aug 31 07:16:18 GMT 10");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese (China)" + "'", str22, "Chinese (China)");
        org.junit.Assert.assertNull(strMap24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zh" + "'", str37, "zh");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(property48);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("P5DT25.806S", (double) 25827480);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=2.582748E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property7.setCopy(11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology15);
        org.joda.time.Interval interval17 = yearMonthDay16.toInterval();
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime18.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        int int25 = dateMidnight24.getEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateMidnight24.toDateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusDays(9);
        int int30 = dateTime27.getEra();
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime31.getZone();
        java.lang.String str33 = dateTimeZone32.toString();
        org.joda.time.DateTime dateTime34 = dateTime18.toDateTime(dateTimeZone32);
        int int36 = dateTimeZone32.getStandardOffset((-1L));
        int int38 = dateTimeZone32.getStandardOffset((long) 25762033);
        org.joda.time.DateTime dateTime39 = localDate11.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone32);
        int int41 = dateTime40.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 177);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.TimeOfDay timeOfDay25 = property8.addNoWrapToCopy(5);
        org.joda.time.DurationField durationField26 = property8.getDurationField();
        org.joda.time.TimeOfDay timeOfDay27 = property8.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay28 = property8.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay30 = property8.addNoWrapToCopy(26015066);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Maximum value exceeded for add");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay28);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        mutableDateTime3.setMonthOfYear(11);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        java.lang.Object obj14 = mutablePeriod13.clone();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        mutablePeriod13.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        org.joda.time.Duration duration24 = mutablePeriod13.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight8.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.LocalDate localDate26 = dateMidnight25.toLocalDate();
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        int int40 = mutablePeriod38.getMinutes();
        org.joda.time.Period period42 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.hours();
        java.lang.String str44 = durationFieldType43.toString();
        org.joda.time.Period period46 = period42.withField(durationFieldType43, 2);
        boolean boolean47 = mutablePeriod38.isSupported(durationFieldType43);
        long long50 = chronology27.add((org.joda.time.ReadablePeriod) mutablePeriod38, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.Chronology chronology52 = chronology27.withZone(dateTimeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.DurationField durationField54 = chronology52.halfdays();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.secondOfMinute();
        int int56 = mutableDateTime3.get(dateTimeField55);
        mutableDateTime3.addMinutes(5);
        mutableDateTime3.addMillis(25758818);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime3.year();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime3.minuteOfHour();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "PT0.100S");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hours" + "'", str44, "hours");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 25755235L + "'", long50 == 25755235L);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime dateTime8 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((-61038316799001L));
        org.joda.time.TimeOfDay timeOfDay12 = dateTime8.toTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.plusHours(100);
        org.joda.time.LocalTime localTime15 = timeOfDay14.toLocalTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.addToCopy(32769);
        org.joda.time.YearMonthDay yearMonthDay57 = property54.withMinimumValue();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.monthOfYear();
        org.joda.time.DateMidnight dateMidnight2 = property1.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = property1.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight4 = property1.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withMillis((-8639999985L));
        org.joda.time.Period period11 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period13 = period11.plusDays(1970);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        int int17 = dateMidnight16.getEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateMidnight16.toDateTime(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks(0);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear((int) (short) 10);
        org.joda.time.Duration duration24 = period11.toDurationTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.Period period31 = interval30.toPeriod();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology35);
        org.joda.time.Interval interval37 = yearMonthDay36.toInterval();
        org.joda.time.Period period38 = interval37.toPeriod();
        long long39 = interval37.getStartMillis();
        org.joda.time.Interval interval40 = interval30.overlap((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology44);
        org.joda.time.Interval interval46 = yearMonthDay45.toInterval();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Interval interval48 = interval46.withPeriodBeforeEnd(readablePeriod47);
        boolean boolean49 = interval30.overlaps((org.joda.time.ReadableInterval) interval48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        int int53 = dateMidnight52.getEra();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, 100L, periodType56, chronology57);
        java.lang.Object obj59 = mutablePeriod58.clone();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone67);
        org.joda.time.Duration duration69 = mutablePeriod58.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight52, (org.joda.time.ReadableDuration) duration69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone72);
        int int74 = dateMidnight73.getEra();
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(0L, 100L, periodType77, chronology78);
        java.lang.Object obj80 = mutablePeriod79.clone();
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(0L, 100L, periodType83, chronology84);
        mutablePeriod79.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod85);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.DateMidnight dateMidnight89 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone88);
        org.joda.time.Duration duration90 = mutablePeriod79.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight89);
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight73, (org.joda.time.ReadableDuration) duration90);
        boolean boolean92 = duration69.isLongerThan((org.joda.time.ReadableDuration) duration90);
        org.joda.time.Interval interval93 = interval30.withDurationAfterStart((org.joda.time.ReadableDuration) duration69);
        int int94 = duration24.compareTo((org.joda.time.ReadableDuration) duration69);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Interval interval96 = dateMidnight4.toInterval();
        long long97 = interval96.getStartMillis();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-61038316800000L) + "'", long39 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "PT0.100S");
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "PT0.100S");
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertNotNull(interval96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1671667200000L + "'", long97 == 1671667200000L);
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType9 = periodType8.withMillisRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withMillisRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(308, 26041708, 25916743, 137, (int) (byte) 1, 26067327, 348, 121, periodType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology21.withZone(dateTimeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.DurationField durationField48 = chronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, 100L, periodType55, chronology56);
        java.lang.Object obj58 = mutablePeriod57.clone();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(0L, 100L, periodType61, chronology62);
        mutablePeriod57.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone66);
        org.joda.time.Duration duration68 = mutablePeriod57.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight52.plus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.LocalDate localDate70 = dateMidnight69.toLocalDate();
        org.joda.time.Period period72 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.hours();
        java.lang.String str74 = durationFieldType73.toString();
        org.joda.time.Period period76 = period72.withField(durationFieldType73, 2);
        org.joda.time.Period period78 = period76.withMillis((int) '#');
        org.joda.time.LocalDate localDate79 = localDate70.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.Period period81 = period78.minusYears(21);
        org.joda.time.Period period83 = period81.plusWeeks(32772);
        long long86 = chronology46.add((org.joda.time.ReadablePeriod) period81, (long) (byte) 1, 70);
        org.joda.time.YearMonthDay yearMonthDay87 = new org.joda.time.YearMonthDay(chronology46);
        org.joda.time.Interval interval88 = yearMonthDay87.toInterval();
        org.joda.time.DateTime dateTime89 = interval88.getStart();
        org.joda.time.DateTime dateTime91 = dateTime89.plusMinutes(32772);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25755235L + "'", long44 == 25755235L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "PT0.100S");
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hours" + "'", str74, "hours");
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-46388174397549L) + "'", long86 == (-46388174397549L));
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(25880355, 26030181, (-709), 25871143, 86403, 990, 3540000, 987);
        org.joda.time.Period period10 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        java.lang.String str12 = durationFieldType11.toString();
        org.joda.time.Period period14 = period10.withField(durationFieldType11, 2);
        org.joda.time.Period period16 = period10.minusSeconds(2);
        int int17 = period16.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.LocalDate localDate38 = dateMidnight37.toLocalDate();
        org.joda.time.Duration duration39 = period16.toDurationTo((org.joda.time.ReadableInstant) dateMidnight37);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration39);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hours" + "'", str12, "hours");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-2) + "'", int17 == (-2));
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(duration39);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType8 = periodType7.withMillisRemoved();
        int int9 = periodType8.size();
        org.joda.time.Period period11 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Period period15 = period11.withField(durationFieldType12, 2);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        int int50 = mutablePeriod48.getMinutes();
        org.joda.time.Period period52 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        java.lang.String str54 = durationFieldType53.toString();
        org.joda.time.Period period56 = period52.withField(durationFieldType53, 2);
        boolean boolean57 = mutablePeriod48.isSupported(durationFieldType53);
        long long60 = chronology37.add((org.joda.time.ReadablePeriod) mutablePeriod48, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology37.withZone(dateTimeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.DurationField durationField64 = chronology62.halfdays();
        org.joda.time.DurationField durationField65 = durationFieldType12.getField(chronology62);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) interval5, periodType8, chronology62);
        org.joda.time.MutablePeriod mutablePeriod67 = mutablePeriod66.toMutablePeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray68 = mutablePeriod66.getFieldTypes();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.forFields(durationFieldTypeArray68);
        org.joda.time.PeriodType periodType70 = periodType69.withSecondsRemoved();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hours" + "'", str13, "hours");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 25755235L + "'", long60 == 25755235L);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(durationFieldTypeArray68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.weekyear();
        org.joda.time.Period period19 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.Period period21 = period19.plusMonths((int) 'a');
        org.joda.time.Period period23 = period19.withHours(70);
        org.joda.time.Period period25 = period19.minusYears(8);
        org.joda.time.Period period27 = period19.withSeconds(25795116);
        org.joda.time.Period period29 = period27.plusWeeks(25806);
        java.lang.String str30 = period27.toString();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime15.withPeriodAdded((org.joda.time.ReadablePeriod) period27, 25888490);
        org.joda.time.Period period34 = period27.withWeeks(25877966);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType36 = period27.getFieldType(72000003);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT25795116.100S" + "'", str30, "PT25795116.100S");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.monthOfYear();
        org.joda.time.DateMidnight dateMidnight2 = property1.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = property1.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight5 = property1.addToCopy((long) 6);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((-5087));
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.Period period30 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        java.lang.String str32 = durationFieldType31.toString();
        org.joda.time.Period period34 = period30.withField(durationFieldType31, 2);
        org.joda.time.Period period36 = period34.withMillis((int) '#');
        org.joda.time.LocalDate localDate37 = localDate28.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period39 = period36.minusYears(21);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight7.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateMidnight.Property property41 = dateMidnight7.dayOfYear();
        org.joda.time.DateMidnight.Property property42 = dateMidnight7.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight44 = dateMidnight7.withMonthOfYear(25848136);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25848136 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hours" + "'", str32, "hours");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int10 = property8.getMaximumTextLength(locale9);
        org.joda.time.DateTime dateTime12 = property8.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTime dateTime13 = property8.roundCeilingCopy();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 4, (long) (-1));
        mutablePeriod16.setPeriod((long) 11, (long) 16);
        mutablePeriod16.setWeeks((int) (byte) 1);
        mutablePeriod16.clear();
        mutablePeriod16.addMinutes(491);
        org.joda.time.DateTime dateTime26 = dateTime13.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod16, 25766043);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("T00:00:00.000");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        int int5 = dateMidnight4.getEra();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        int int26 = dateMidnight25.getEra();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.Duration duration42 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, (org.joda.time.ReadableDuration) duration42);
        boolean boolean44 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration45 = duration42.toDuration();
        java.lang.String str46 = duration45.toString();
        org.joda.time.DateTime dateTime47 = dateTime1.plus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology51);
        org.joda.time.format.DateTimePrinter dateTimePrinter53 = null;
        org.joda.time.format.DateTimeParser dateTimeParser54 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter53, dateTimeParser54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter55.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone59);
        int int61 = dateMidnight60.getEra();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = dateMidnight60.toDateTime(chronology62);
        org.joda.time.DateTime dateTime65 = dateTime63.plusDays(9);
        int int66 = dateTime63.getEra();
        org.joda.time.DateTime dateTime67 = dateTime63.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime67.getZone();
        java.lang.String str69 = dateTimeZone68.toString();
        org.joda.time.YearMonthDay yearMonthDay70 = new org.joda.time.YearMonthDay(dateTimeZone68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter55.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime72 = yearMonthDay52.toDateTimeAtMidnight(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.now(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime47.toMutableDateTime(dateTimeZone68);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.YearMonthDay yearMonthDay80 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology79);
        org.joda.time.Interval interval81 = yearMonthDay80.toInterval();
        org.joda.time.Interval interval83 = interval81.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime84 = interval83.getEnd();
        java.util.Locale locale85 = java.util.Locale.JAPANESE;
        boolean boolean86 = interval83.equals((java.lang.Object) locale85);
        java.lang.String str87 = dateTimeZone68.getShortName(0L, locale85);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0.100S" + "'", str46, "PT0.100S");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "UTC" + "'", str69, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00" + "'", str87, "+00:00");
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.LocalDate localDate8 = dateTime5.toLocalDate();
        org.joda.time.DateTime dateTime10 = dateTime5.plusMonths(25875461);
        org.joda.time.DateTime dateTime12 = dateTime5.withWeekyear(257892);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("T23:54:00.000");
        java.lang.String str2 = timeZone1.getID();
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.Interval interval10 = yearMonthDay9.toInterval();
        java.lang.String str11 = yearMonthDay9.toString();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        int int21 = dateMidnight20.getEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateMidnight20.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusDays(9);
        int int26 = dateTime23.getEra();
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime27.getZone();
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((int) (byte) -1, 1, (int) (short) 1, (int) (short) 10, (int) (short) 0, 8, dateTimeZone28);
        java.lang.String str32 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime33 = yearMonthDay9.toDateTimeAtMidnight(dateTimeZone28);
        java.util.TimeZone timeZone34 = dateTimeZone28.toTimeZone();
        boolean boolean35 = timeZone1.hasSameRules(timeZone34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime42 = property40.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime43 = property40.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField44 = property40.getField();
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("days");
        java.lang.String str47 = locale46.getLanguage();
        int int48 = dateTimeField44.getMaximumShortTextLength(locale46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = timeZone34.getDisplayName(true, 26012800, locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 26012800");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0035-10-10" + "'", str11, "0035-10-10");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "days");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "days" + "'", str47, "days");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        int int57 = property54.get();
        org.joda.time.YearMonthDay yearMonthDay58 = property54.getYearMonthDay();
        org.joda.time.DurationField durationField59 = property54.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay61 = property54.setCopy(0);
        int int62 = yearMonthDay61.getDayOfMonth();
        org.joda.time.DateTimeField dateTimeField64 = yearMonthDay61.getField(0);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.year();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundFloor();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime9.getZone();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.009Z");
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, 100L, periodType4, chronology5);
        java.lang.Object obj7 = mutablePeriod6.clone();
        java.lang.String str8 = mutablePeriod6.toString();
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6, 2022);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(9);
        int int20 = dateTime17.getEra();
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        long long25 = dateTimeZone22.adjustOffset((long) 5, true);
        mutableDateTime1.setZoneRetainFields(dateTimeZone22);
        java.util.TimeZone timeZone27 = dateTimeZone22.toTimeZone();
        java.time.ZoneId zoneId28 = timeZone27.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.withYear(26006175);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.100S" + "'", str8, "PT0.100S");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 5L + "'", long25 == 5L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(zoneId28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(yearMonthDay32);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        int int11 = dateMidnight10.getEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateMidnight10.toDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays(9);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight6.withZoneRetainFields(dateTimeZone18);
        boolean boolean21 = dateMidnight6.isEqualNow();
        int int22 = dateMidnight6.getYearOfEra();
        org.joda.time.DateMidnight.Property property23 = dateMidnight6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1972 + "'", int22 == 1972);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        int int9 = property8.get();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        java.lang.Object obj15 = mutablePeriod14.clone();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        org.joda.time.Duration duration25 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        mutablePeriod14.addMillis(0);
        mutablePeriod14.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0L, 100L, periodType54, chronology55);
        java.lang.Object obj57 = mutablePeriod56.clone();
        java.lang.String str58 = mutablePeriod56.toString();
        mutableDateTime51.add((org.joda.time.ReadablePeriod) mutablePeriod56, 2022);
        mutablePeriod14.setPeriod((org.joda.time.ReadableInstant) dateMidnight49, (org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime51.addWeekyears((int) (byte) 0);
        mutableDateTime51.setSecondOfMinute(8);
        int int66 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.DateTimeField dateTimeField67 = property8.getField();
        org.joda.time.DateTimeField dateTimeField68 = property8.getField();
        org.joda.time.DateTimeField dateTimeField69 = property8.getField();
        java.lang.String str70 = property8.getAsString();
        org.joda.time.TimeOfDay timeOfDay71 = property8.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField72 = property8.getField();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PT0.100S" + "'", str58, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0" + "'", str70, "0");
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertNotNull(dateTimeField72);
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        int int11 = dateMidnight10.getEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateMidnight10.toDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays(9);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight6.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight6.withWeekOfWeekyear(2);
        int int23 = dateMidnight22.getMillisOfSecond();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMillisOfDay(100);
        int int30 = localDateTime29.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = localDateTime29.getFieldType((int) (byte) 1);
        org.joda.time.DateMidnight.Property property33 = dateMidnight22.property(dateTimeFieldType32);
        org.joda.time.DateMidnight dateMidnight34 = property33.roundFloorCopy();
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(0L, dateTimeZone37);
        org.joda.time.LocalDate localDate39 = dateMidnight38.toLocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusWeeks(100);
        org.joda.time.Chronology chronology42 = localDate39.getChronology();
        org.joda.time.LocalDate.Property property43 = localDate39.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property43.roundCeilingCopy();
        org.joda.time.LocalDate localDate45 = property43.roundFloorCopy();
        org.joda.time.LocalDate localDate46 = property43.withMaximumValue();
        org.joda.time.LocalDate localDate47 = property43.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.LocalDate.Property property49 = localDate47.property(dateTimeFieldType48);
        org.joda.time.LocalDate localDate50 = property49.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = localDate50.toDateMidnight(dateTimeZone51);
        org.joda.time.LocalDate.Property property53 = localDate50.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property53.getFieldType();
        java.lang.String str55 = dateTimeFieldType54.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight57 = dateMidnight34.withField(dateTimeFieldType54, 442);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 442 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 14 + "'", int30 == 14);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "monthOfYear" + "'", str55, "monthOfYear");
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateMidnight dateMidnight8 = dateTime6.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plusMonths(12);
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.dayOfMonth();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusYears((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(0L, dateTimeZone19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks(100);
        org.joda.time.Chronology chronology24 = localDate21.getChronology();
        org.joda.time.LocalDate.Property property25 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone43);
        org.joda.time.Duration duration45 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight29.plus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.LocalDate localDate47 = dateMidnight46.toLocalDate();
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        java.lang.Object obj54 = mutablePeriod53.clone();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        mutablePeriod53.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        int int61 = mutablePeriod59.getMinutes();
        org.joda.time.Period period63 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.hours();
        java.lang.String str65 = durationFieldType64.toString();
        org.joda.time.Period period67 = period63.withField(durationFieldType64, 2);
        boolean boolean68 = mutablePeriod59.isSupported(durationFieldType64);
        long long71 = chronology48.add((org.joda.time.ReadablePeriod) mutablePeriod59, (long) 25755035, 2);
        org.joda.time.LocalDate localDate72 = localDate26.minus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay17.minus((org.joda.time.ReadablePeriod) mutablePeriod59);
        mutablePeriod59.setHours((int) (short) 0);
        int int76 = mutablePeriod59.getYears();
        mutablePeriod59.setYears(0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0.100S");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hours" + "'", str65, "hours");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 25755235L + "'", long71 == 25755235L);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        int int11 = dateMidnight10.getEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateMidnight10.toDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays(9);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight6.withZoneRetainFields(dateTimeZone18);
        boolean boolean21 = dateMidnight6.isEqualNow();
        int int22 = dateMidnight6.getYearOfEra();
        org.joda.time.DateMidnight.Property property23 = dateMidnight6.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.year();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfDay();
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int35 = localDateTime30.get(dateTimeFieldType34);
        boolean boolean36 = dateMidnight6.isSupported(dateTimeFieldType34);
        org.joda.time.DateMidnight.Property property37 = dateMidnight6.weekyear();
        int int38 = property37.getLeapAmount();
        org.joda.time.DateMidnight dateMidnight40 = property37.addToCopy((long) 25790484);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.withMonthOfYear(186);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 186 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1972 + "'", int22 == 1972);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 689 + "'", int35 == 689);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateMidnight40);
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.roundFloor();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology14);
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay15.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime10, (org.joda.time.ReadableInstant) dateMidnight16, periodType20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        int int25 = dateMidnight24.getEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateMidnight24.toDateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusDays(9);
        int int30 = dateTime27.getEra();
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime31.getZone();
        long long35 = dateTimeZone32.adjustOffset((long) 5, true);
        boolean boolean37 = dateTimeZone32.isStandardOffset((long) 3);
        mutableDateTime10.setZoneRetainFields(dateTimeZone32);
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime4.setSecondOfDay(119);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setDayOfWeek(26040035);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26040035 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 5L + "'", long35 == 5L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.centuryOfEra();
        org.joda.time.Period period5 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.hours();
        java.lang.String str7 = durationFieldType6.toString();
        org.joda.time.Period period9 = period5.withField(durationFieldType6, 2);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(25766043, 19, (int) (short) 1, 52, (int) (byte) 1, 21, 348, 35);
        org.joda.time.Period period19 = period9.withFields((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime1.plus((org.joda.time.ReadablePeriod) period9);
        int int21 = localDateTime1.getYearOfCentury();
        int int22 = localDateTime1.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime1.withYearOfCentury(26041116);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26041116 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hours" + "'", str7, "hours");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateMidnight13.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(0);
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime22 = dateTime18.withFieldAdded(durationFieldType20, 5);
        int int23 = dateMidnight8.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        int int25 = dateTime24.getDayOfMonth();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.hourOfDay();
        org.joda.time.DateTime dateTime29 = dateTime24.withFields((org.joda.time.ReadablePartial) localDateTime27);
        int int30 = dateTime29.getYear();
        org.joda.time.DateTime dateTime32 = dateTime29.plusSeconds(1977);
        java.util.GregorianCalendar gregorianCalendar33 = dateTime32.toGregorianCalendar();
        java.time.Instant instant34 = gregorianCalendar33.toInstant();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(gregorianCalendar33);
        org.junit.Assert.assertNotNull(instant34);
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateMidnight8.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusDays(9);
        int int14 = dateTime11.getEra();
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((int) (byte) -1, 1, (int) (short) 1, (int) (short) 10, (int) (short) 0, 8, dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.millisOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.withYear(18);
        int int23 = dateTime22.getSecondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime22.withYearOfCentury(345);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 345 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        java.lang.String str24 = chronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfDay();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(0L, (long) 1, chronology23);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(10L);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) yearMonthDay28, (long) 8);
        org.joda.time.DateTimeField dateTimeField31 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField32 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField33 = chronology23.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        java.lang.Object obj42 = mutablePeriod41.clone();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, 100L, periodType45, chronology46);
        mutablePeriod41.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone50);
        org.joda.time.Duration duration52 = mutablePeriod41.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight36.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.LocalDate localDate54 = dateMidnight53.toLocalDate();
        org.joda.time.LocalDate.Property property55 = localDate54.dayOfYear();
        org.joda.time.LocalDate localDate56 = property55.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate58 = localDate56.withWeekyear(11);
        long long60 = chronology23.set((org.joda.time.ReadablePartial) localDate56, (-604800001L));
        int int61 = localDate56.getCenturyOfEra();
        int int62 = localDate56.getDayOfMonth();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "PT0.100S");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 86399999L + "'", long60 == 86399999L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 19 + "'", int61 == 19);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        int int3 = date1.getDay();
        int int4 = date1.getDay();
        int int5 = date1.getDate();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        java.util.Date date10 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromDateFields(date10);
        int int12 = timeOfDay11.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.add((long) 3);
        mutableDateTime22.setDayOfMonth((int) (byte) 10);
        mutableDateTime22.add((long) 6);
        mutableDateTime22.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.monthOfYear();
        mutableDateTime22.setTime((org.joda.time.ReadableInstant) dateMidnight29);
        int int32 = property17.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.TimeOfDay timeOfDay34 = property17.addNoWrapToCopy(5);
        int int35 = property8.compareTo((org.joda.time.ReadablePartial) timeOfDay34);
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        int int37 = property8.getMaximumShortTextLength(locale36);
        java.util.Set<java.lang.Character> charSet38 = locale36.getExtensionKeys();
        boolean boolean39 = locale36.hasExtensions();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("894");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.Period period5 = new org.joda.time.Period((-61038230400000L), (-59930L));
        org.joda.time.Period period7 = period5.minusYears(25836213);
        org.joda.time.Period period9 = period5.withMonths(40);
        org.joda.time.Period period11 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Period period15 = period11.withField(durationFieldType12, 2);
        org.joda.time.Period period20 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period22 = period20.plusDays(1970);
        org.joda.time.Period period23 = period15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period25 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.hours();
        java.lang.String str27 = durationFieldType26.toString();
        org.joda.time.Period period29 = period25.withField(durationFieldType26, 2);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.LocalDate localDate50 = dateMidnight49.toLocalDate();
        org.joda.time.Chronology chronology51 = localDate50.getChronology();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0L, 100L, periodType54, chronology55);
        java.lang.Object obj57 = mutablePeriod56.clone();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(0L, 100L, periodType60, chronology61);
        mutablePeriod56.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod62);
        int int64 = mutablePeriod62.getMinutes();
        org.joda.time.Period period66 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.hours();
        java.lang.String str68 = durationFieldType67.toString();
        org.joda.time.Period period70 = period66.withField(durationFieldType67, 2);
        boolean boolean71 = mutablePeriod62.isSupported(durationFieldType67);
        long long74 = chronology51.add((org.joda.time.ReadablePeriod) mutablePeriod62, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.Chronology chronology76 = chronology51.withZone(dateTimeZone75);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate(chronology76);
        org.joda.time.DurationField durationField78 = chronology76.halfdays();
        org.joda.time.DurationField durationField79 = durationFieldType26.getField(chronology76);
        org.joda.time.Period period81 = period23.withField(durationFieldType26, 15);
        int int82 = period5.get(durationFieldType26);
        org.joda.time.Period period85 = new org.joda.time.Period((-61038230400000L), (-59930L));
        org.joda.time.Period period87 = period85.minusYears(25836213);
        org.joda.time.Period period89 = period85.withMonths(40);
        org.joda.time.Period period90 = period5.plus((org.joda.time.ReadablePeriod) period89);
        boolean boolean91 = calendar2.after((java.lang.Object) period5);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645514179953,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=19,MILLISECOND=953,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hours" + "'", str13, "hours");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hours" + "'", str27, "hours");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hours" + "'", str68, "hours");
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 25755235L + "'", long74 == 25755235L);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 23 + "'", int82 == 23);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateMidnight dateMidnight8 = dateTime6.toDateMidnight();
        org.joda.time.DateTime.Property property9 = dateTime6.millisOfDay();
        java.lang.String str11 = dateTime6.toString("2022-5-11 7:14:47");
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-5-11 7:14:47" + "'", str11, "2022-5-11 7:14:47");
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        org.joda.time.LocalDate localDate11 = property9.addWrapFieldToCopy(12);
        org.joda.time.LocalDate localDate12 = property9.roundHalfFloorCopy();
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDate12.getFieldType(25919020);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 25919020");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (byte) 1);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plusWeeks(25790484);
        org.joda.time.Period period5 = org.joda.time.Period.seconds(25827445);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.withPeriodAdded((org.joda.time.ReadablePeriod) period5, 0);
        org.joda.time.YearMonthDay yearMonthDay8 = dateMidnight7.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int10 = property8.getMaximumTextLength(locale9);
        org.joda.time.DateTime dateTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate12 = dateTime11.toLocalDate();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.Duration duration28 = mutablePeriod17.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(0L, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        int int35 = dateMidnight34.getEra();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, (org.joda.time.ReadableDuration) duration51, periodType53);
        boolean boolean55 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateTime dateTime57 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration51, 32769);
        int int58 = dateTime57.getEra();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(0L, 100L, periodType61, chronology62);
        java.lang.Object obj64 = mutablePeriod63.clone();
        org.joda.time.DateTime dateTime65 = dateTime57.minus((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMinutes(142);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT0.100S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "PT0.100S");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.DateMidnight dateMidnight8 = property4.roundCeilingCopy();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setWeekDate(16, (int) (byte) 0, 7);
        calendar11.set((int) (byte) 10, 8, (int) (short) 0);
        java.util.Date date20 = calendar11.getTime();
        java.lang.String str21 = calendar11.getCalendarType();
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Locale.setDefault(category24, locale26);
        java.util.Map<java.lang.String, java.lang.Integer> strMap29 = calendar11.getDisplayNames(3, (int) (short) 1, locale26);
        java.lang.String str30 = locale26.getVariant();
        java.lang.String str31 = locale9.getDisplayLanguage(locale26);
        java.lang.String str32 = locale9.getLanguage();
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str37 = nameProvider33.getName(locale34, "", "0035-10-10");
        java.lang.String str38 = locale9.getDisplayVariant(locale34);
        int int39 = property4.getMaximumTextLength(locale34);
        org.joda.time.DateMidnight dateMidnight40 = property4.roundCeilingCopy();
        int int41 = property4.getLeapAmount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514180231,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=20,MILLISECOND=231,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-61830837819769,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=7,WEEK_OF_YEAR=36,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=243,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=20,MILLISECOND=231,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 31 07:16:20 UTC 10");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gregory" + "'", str21, "gregory");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Chinese (China)" + "'", str27, "Chinese (China)");
        org.junit.Assert.assertNull(strMap29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(nameProvider33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology6);
        org.joda.time.Interval interval8 = yearMonthDay7.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        org.joda.time.Period period11 = period9.withSeconds((int) '#');
        org.joda.time.Period period13 = period11.minusHours(6);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateMidnight2);
        int int16 = dateTime15.getMonthOfYear();
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        int int11 = dateMidnight10.getEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateMidnight10.toDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays(9);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight6.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight6.withWeekOfWeekyear(2);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight6.minusMonths(21);
        org.joda.time.DateMidnight.Property property25 = dateMidnight6.dayOfYear();
        org.joda.time.DateMidnight dateMidnight27 = property25.addWrapFieldToCopy(25788046);
        int int28 = dateMidnight27.getYearOfCentury();
        org.joda.time.DateMidnight.Property property29 = dateMidnight27.weekyear();
        org.joda.time.DateMidnight dateMidnight30 = property29.roundHalfCeilingCopy();
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 72 + "'", int28 == 72);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology26);
        org.joda.time.Interval interval28 = yearMonthDay27.toInterval();
        org.joda.time.Interval interval30 = interval28.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.DateTime.Property property32 = dateTime31.secondOfDay();
        boolean boolean33 = localDate20.equals((java.lang.Object) property32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property32.getFieldType();
        org.joda.time.DateTime dateTime35 = property32.roundFloorCopy();
        java.lang.String str36 = property32.getAsString();
        org.joda.time.DateTime dateTime38 = property32.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = property32.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = dateTime39.withDayOfYear(25940734);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25940734 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.LocalTime localTime4 = timeOfDay2.toLocalTime();
        org.joda.time.Period period6 = org.joda.time.Period.hours((int) (byte) -1);
        org.joda.time.LocalTime localTime7 = localTime4.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalTime.Property property8 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime9 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime10 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime11 = property8.withMaximumValue();
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        int int25 = dateMidnight23.getMillisOfSecond();
        org.joda.time.Period period27 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.hours();
        java.lang.String str29 = durationFieldType28.toString();
        org.joda.time.Period period31 = period27.withField(durationFieldType28, 2);
        org.joda.time.Period period33 = period31.minusMinutes(21);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight23, (org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight19.plus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period37 = period33.minusSeconds(11);
        int int38 = period33.getDays();
        org.joda.time.format.PeriodFormatter periodFormatter39 = null;
        java.lang.String str40 = period33.toString(periodFormatter39);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hours" + "'", str29, "hours");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT2H-21M0.100S" + "'", str40, "PT2H-21M0.100S");
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        int int6 = dateMidnight5.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateMidnight5.toDateTime(chronology7);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.Period period11 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Period period15 = period11.withField(durationFieldType12, 2);
        org.joda.time.Period period17 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.hours();
        java.lang.String str19 = durationFieldType18.toString();
        org.joda.time.Period period21 = period17.withField(durationFieldType18, 2);
        org.joda.time.Period period22 = period15.minus((org.joda.time.ReadablePeriod) period21);
        int int23 = period22.getYears();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period26 = period22.withFieldAdded(durationFieldType24, 25787857);
        int[] intArray28 = chronology9.get((org.joda.time.ReadablePeriod) period26, (long) 25805812);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 111, chronology9);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(191266444800000L, (long) 25755126, chronology9);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hours" + "'", str13, "hours");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hours" + "'", str19, "hours");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 7, 10, 5, 812]");
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod();
        mutablePeriod6.setYears(11);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.plus((org.joda.time.ReadablePeriod) mutablePeriod6);
        mutablePeriod6.setYears(93);
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod6.copy();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(mutablePeriod12);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight5 = property4.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight7 = property4.setCopy(2);
        org.joda.time.DateMidnight dateMidnight8 = property4.withMinimumValue();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.weekyear();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        org.joda.time.Chronology chronology4 = yearMonthDay2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.centuryOfEra();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(341L, chronology4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(7);
        org.joda.time.tz.NameProvider nameProvider7 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.property(dateTimeFieldType15);
        org.joda.time.DateTime dateTime17 = property16.getDateTime();
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale19 = locale18.stripExtensions();
        int int20 = property16.getMaximumShortTextLength(locale18);
        java.lang.String str23 = nameProvider7.getName(locale18, "", "ISOChronology[UTC]");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter4.withLocale(locale18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = dateTimeFormatter24.parseLocalDateTime("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(nameProvider7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(70);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMinutes(6);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property16 = dateTime15.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime15);
        int int18 = dateTime15.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property8.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withChronology(chronology18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        boolean boolean26 = dateMidnight17.equals((java.lang.Object) mutablePeriod24);
        boolean boolean27 = property8.equals((java.lang.Object) dateMidnight17);
        org.joda.time.DateTimeField dateTimeField28 = property8.getField();
        int int29 = property8.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay30 = property8.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.plusSeconds(25814300);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        java.lang.String str23 = interval22.toString();
        long long24 = interval22.toDurationMillis();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.Period period31 = interval30.toPeriod();
        long long32 = interval30.getStartMillis();
        boolean boolean33 = interval22.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime34 = interval30.getStart();
        org.joda.time.Period period44 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.hours();
        java.lang.String str46 = durationFieldType45.toString();
        org.joda.time.Period period48 = period44.withField(durationFieldType45, 2);
        org.joda.time.PeriodType periodType49 = period48.getPeriodType();
        org.joda.time.Period period50 = new org.joda.time.Period(32772, 25773844, 0, 25817560, 5, 52, 0, 25804551, periodType49);
        org.joda.time.Period period51 = interval30.toPeriod(periodType49);
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime56 = property54.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime57 = property54.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone59);
        int int61 = dateMidnight60.getEra();
        org.joda.time.DateMidnight.Property property62 = dateMidnight60.monthOfYear();
        org.joda.time.DateMidnight dateMidnight64 = property62.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property62.getFieldType();
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime57.property(dateTimeFieldType65);
        java.lang.String str67 = mutableDateTime57.toString();
        org.joda.time.MutableDateTime mutableDateTime68 = mutableDateTime57.copy();
        org.joda.time.Duration duration69 = period51.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime68);
        org.joda.time.Period period70 = duration69.toPeriod();
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime72.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime75 = property73.addWrapField((int) (short) 0);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime75.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime75.minuteOfDay();
        boolean boolean78 = period70.equals((java.lang.Object) property77);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str23, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 86400000L + "'", long24 == 86400000L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-61038316800000L) + "'", long32 == (-61038316800000L));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hours" + "'", str46, "hours");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str67, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        int int37 = mutablePeriod35.getMinutes();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType40);
        long long47 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology24.withZone(dateTimeZone48);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 11, chronology49);
        org.joda.time.DurationField durationField51 = chronology49.days();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology49);
        org.joda.time.DateTimeField dateTimeField53 = chronology49.millisOfDay();
        long long57 = chronology49.add((long) (-1970), (long) (short) 1, 25804968);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay58 = new org.joda.time.TimeOfDay(26102037, 4, chronology49);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26102037 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 25755235L + "'", long47 == 25755235L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 25802998L + "'", long57 == 25802998L);
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays(25755035);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime dateTime16 = dateTime9.withField(dateTimeFieldType14, 8);
        org.joda.time.DateTime dateTime18 = dateTime9.minusMillis((-5087));
        org.joda.time.DateTime.Property property19 = dateTime18.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = dateTime18.plusMinutes(25774925);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime27 = property24.roundHalfEven();
        int int28 = mutableDateTime27.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime32 = property31.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime33 = property31.roundFloor();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime38 = property37.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime39 = property37.roundFloor();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology43);
        org.joda.time.DateMidnight dateMidnight45 = yearMonthDay44.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime39, (org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        int int54 = dateMidnight53.getEra();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = dateMidnight53.toDateTime(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusDays(9);
        int int59 = dateTime56.getEra();
        org.joda.time.DateTime dateTime60 = dateTime56.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime60.getZone();
        long long64 = dateTimeZone61.adjustOffset((long) 5, true);
        boolean boolean66 = dateTimeZone61.isStandardOffset((long) 3);
        mutableDateTime39.setZoneRetainFields(dateTimeZone61);
        mutableDateTime33.setDate((org.joda.time.ReadableInstant) mutableDateTime39);
        mutableDateTime27.setDate((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime33.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone72);
        int int74 = dateMidnight73.getEra();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = dateMidnight73.toDateTime(chronology75);
        org.joda.time.DateTime dateTime78 = dateTime76.plusDays(9);
        org.joda.time.DateTime dateTime80 = dateTime76.plusMillis(6);
        int int81 = dateTime76.getDayOfYear();
        mutableDateTime33.setMillis((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.LocalDate localDate84 = dateTime76.toLocalDate();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 5L + "'", long64 == 5L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(localDate84);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        org.joda.time.Period period4 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period6 = period4.plusDays(1970);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        int int10 = dateMidnight9.getEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateMidnight9.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks(0);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear((int) (short) 10);
        org.joda.time.Duration duration17 = period4.toDurationTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.year();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        int int22 = dateMidnight21.getEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateMidnight21.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(9);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime16.getEra();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        int int4 = dateMidnight3.getEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateMidnight3.toDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(9);
        int int9 = dateTime6.getEra();
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.adjustOffset((long) 5, true);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology22);
        org.joda.time.Interval interval24 = yearMonthDay23.toInterval();
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology29);
        org.joda.time.Interval interval31 = yearMonthDay30.toInterval();
        org.joda.time.Period period32 = interval31.toPeriod();
        long long33 = interval31.getStartMillis();
        org.joda.time.Interval interval34 = interval24.overlap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        org.joda.time.Duration duration53 = mutablePeriod42.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight37.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.LocalDate localDate55 = dateMidnight54.toLocalDate();
        org.joda.time.Chronology chronology56 = localDate55.getChronology();
        java.lang.String str57 = chronology56.toString();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.secondOfDay();
        org.joda.time.Interval interval59 = interval24.withChronology(chronology56);
        org.joda.time.DateTimeField dateTimeField60 = chronology56.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField61 = chronology56.millisOfSecond();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) mutableDateTime18, chronology56);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) 27, chronology56);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 5L + "'", long14 == 5L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-61038316800000L) + "'", long33 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ISOChronology[UTC]" + "'", str57, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        boolean boolean8 = interval5.isAfter(100L);
        org.joda.time.DateTime dateTime9 = interval5.getEnd();
        int int10 = dateTime9.getYearOfEra();
        org.joda.time.DateTime.Property property11 = dateTime9.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateMidnight23.toDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusDays(9);
        int int29 = dateTime26.getEra();
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = org.joda.time.DateMidnight.now(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime20.withZoneRetainFields(dateTimeZone31);
        int int36 = dateTime20.getYearOfCentury();
        org.joda.time.DateTime dateTime37 = dateTime20.toDateTimeISO();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology42);
        org.joda.time.Interval interval44 = yearMonthDay43.toInterval();
        org.joda.time.Period period45 = interval44.toPeriod();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology49);
        org.joda.time.Interval interval51 = yearMonthDay50.toInterval();
        org.joda.time.Period period52 = interval51.toPeriod();
        long long53 = interval51.getStartMillis();
        org.joda.time.Interval interval54 = interval44.overlap((org.joda.time.ReadableInterval) interval51);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType56 = periodType55.withMillisRemoved();
        org.joda.time.Period period57 = interval54.toPeriod(periodType56);
        org.joda.time.PeriodType periodType58 = periodType56.withSecondsRemoved();
        org.joda.time.Period period59 = interval38.toPeriod(periodType56);
        org.joda.time.DateTime dateTime60 = interval38.getEnd();
        long long61 = dateTime60.getMillis();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 70 + "'", int36 == 70);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-61038316800000L) + "'", long53 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L + "'", long61 == 100L);
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime15 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime17 = property13.addCopy((-61662790239443L));
        org.joda.time.LocalTime localTime19 = property13.setCopy(8);
        org.joda.time.LocalTime localTime20 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime21 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime22 = property13.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        java.lang.Object obj0 = null;
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((int) (byte) 10);
        boolean boolean6 = dateTimeFormatter5.isParser();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.000Z");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withLocale(locale8);
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter9.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter9.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatter9.getPrinter();
        java.util.Date date14 = new java.util.Date((long) 0);
        int int15 = date14.getDay();
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromDateFields(date14);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.LocalDate localDate38 = dateMidnight37.toLocalDate();
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        java.lang.Object obj45 = mutablePeriod44.clone();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, 100L, periodType48, chronology49);
        mutablePeriod44.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        int int52 = mutablePeriod50.getMinutes();
        org.joda.time.Period period54 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.hours();
        java.lang.String str56 = durationFieldType55.toString();
        org.joda.time.Period period58 = period54.withField(durationFieldType55, 2);
        boolean boolean59 = mutablePeriod50.isSupported(durationFieldType55);
        long long62 = chronology39.add((org.joda.time.ReadablePeriod) mutablePeriod50, (long) 25755035, 2);
        boolean boolean63 = durationFieldType17.isSupported(chronology39);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay64.minusYears(25756429);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHours(11);
        org.joda.time.DateTime dateTime69 = yearMonthDay66.toDateTimeAtCurrentTime(dateTimeZone68);
        org.joda.time.LocalDate localDate70 = org.joda.time.LocalDate.now(dateTimeZone68);
        java.lang.String str72 = dateTimeZone68.getNameKey((long) 25839);
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime(dateTimeZone68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter9.withZone(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime(obj0, dateTimeZone68);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeParser10);
        org.junit.Assert.assertNull(dateTimeParser11);
        org.junit.Assert.assertNull(dateTimePrinter12);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hours" + "'", str56, "hours");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 25755235L + "'", long62 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime5.plusHours(32);
        org.joda.time.DateTime dateTime12 = dateTime5.withDurationAdded((-14515200001L), 740);
        int int13 = dateTime5.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Interval interval23 = interval21.withPeriodBeforeEnd(readablePeriod22);
        boolean boolean24 = interval5.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.Period period31 = interval30.toPeriod();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology35);
        org.joda.time.Interval interval37 = yearMonthDay36.toInterval();
        org.joda.time.Period period38 = interval37.toPeriod();
        long long39 = interval37.getStartMillis();
        org.joda.time.Interval interval40 = interval30.overlap((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology44);
        org.joda.time.Interval interval46 = yearMonthDay45.toInterval();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Interval interval48 = interval46.withPeriodBeforeEnd(readablePeriod47);
        boolean boolean49 = interval30.overlaps((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology53);
        org.joda.time.Interval interval55 = yearMonthDay54.toInterval();
        org.joda.time.Period period56 = interval55.toPeriod();
        boolean boolean58 = interval55.isAfter(100L);
        boolean boolean59 = interval48.isAfter((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration60 = interval55.toDuration();
        boolean boolean61 = interval23.abuts((org.joda.time.ReadableInterval) interval55);
        boolean boolean62 = interval23.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone64);
        int int66 = dateMidnight65.getEra();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = dateMidnight65.toDateTime(chronology67);
        org.joda.time.DateTime dateTime70 = dateTime68.plusDays(9);
        org.joda.time.DateTime dateTime71 = dateTime68.toDateTimeISO();
        org.joda.time.DateTime.Property property72 = dateTime68.yearOfCentury();
        boolean boolean73 = interval23.contains((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone75);
        int int77 = dateMidnight76.getEra();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = dateMidnight76.toDateTime(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime79.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight82 = dateTime81.toDateMidnight();
        org.joda.time.DateMidnight.Property property83 = dateMidnight82.era();
        int int84 = dateMidnight82.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight82.plusWeeks(70);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight82.minusWeeks((int) ' ');
        java.util.GregorianCalendar gregorianCalendar89 = dateMidnight88.toGregorianCalendar();
        org.joda.time.DateMidnight.Property property90 = dateMidnight88.dayOfMonth();
        org.joda.time.Interval interval91 = interval23.withEnd((org.joda.time.ReadableInstant) dateMidnight88);
        org.joda.time.PeriodType periodType92 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period93 = interval23.toPeriod(periodType92);
        org.joda.time.ReadableInterval readableInterval94 = null;
        boolean boolean95 = interval23.isBefore(readableInterval94);
        org.joda.time.DateTime dateTime96 = interval23.getEnd();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-61038316800000L) + "'", long39 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(gregorianCalendar89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology23.withZone(dateTimeZone47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 11, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = dateTimeField50.getType();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = dateTimeField50.getAsText(894, locale53);
        java.util.Calendar.Builder builder55 = builder0.setLocale(locale53);
        java.util.Date date61 = new java.util.Date(0, 292269054, 5, 10, 894);
        org.joda.time.LocalDate localDate62 = org.joda.time.LocalDate.fromDateFields(date61);
        java.util.Calendar.Builder builder63 = builder0.setInstant(date61);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance();
        calendar64.setWeekDate(16, (int) (byte) 0, 7);
        calendar64.set((int) (byte) 10, 8, (int) (short) 0);
        java.util.Date date73 = calendar64.getTime();
        java.lang.String str74 = calendar64.getCalendarType();
        java.time.Instant instant75 = calendar64.toInstant();
        java.util.Date date76 = java.util.Date.from(instant75);
        boolean boolean77 = date61.after(date76);
        java.time.Instant instant78 = date61.toInstant();
        long long79 = date61.getTime();
        date61.setSeconds(60610707);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25755235L + "'", long46 == 25755235L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "894" + "'", str54, "894");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jun 06 13:12:27 UTC 24357656");
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=-61830837818862,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=7,WEEK_OF_YEAR=36,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=243,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=21,MILLISECOND=138,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date73);
// flaky:         org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 31 07:16:21 UTC 10");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "gregory" + "'", str74, "gregory");
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(date76);
// flaky:         org.junit.Assert.assertEquals(date76.toString(), "Sun Aug 31 07:16:21 UTC 10");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 768591167043240000L + "'", long79 == 768591167043240000L);
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale11 = locale10.stripExtensions();
        int int12 = property8.getMaximumShortTextLength(locale10);
        org.joda.time.DateTime dateTime13 = property8.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField14 = property8.getField();
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = new java.util.Locale("", "ISOChronology[UTC]");
        java.util.Locale.setDefault(category15, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category15);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setWeekDate(16, (int) (byte) 0, 7);
        calendar21.set((int) (byte) 10, 8, (int) (short) 0);
        java.util.Date date30 = calendar21.getTime();
        java.lang.String str31 = calendar21.getCalendarType();
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale36 = locale35.stripExtensions();
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale.setDefault(category34, locale36);
        java.util.Map<java.lang.String, java.lang.Integer> strMap39 = calendar21.getDisplayNames(3, (int) (short) 1, locale36);
        java.lang.String str40 = locale36.getVariant();
        java.util.Locale.setDefault(category15, locale36);
        int int42 = dateTimeField14.getMaximumTextLength(locale36);
        boolean boolean43 = dateTimeField14.isSupported();
        long long45 = dateTimeField14.roundFloor(0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale18.toString(), "_ISOCHRONOLOGY[UTC]");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "_ISOCHRONOLOGY[UTC]");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61830837818827,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=7,WEEK_OF_YEAR=36,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=243,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=21,MILLISECOND=173,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 31 07:16:21 UTC 10");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "gregory" + "'", str31, "gregory");
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.FORMAT + "'", category34.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
        org.junit.Assert.assertNull(strMap39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime localTime13 = localTime9.minusMillis((-1));
        org.joda.time.DateTime dateTime14 = localTime13.toDateTimeToday();
        org.joda.time.LocalTime localTime16 = localTime13.plusSeconds(111);
        org.joda.time.DateTime dateTime17 = localTime13.toDateTimeToday();
        int int18 = localTime13.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        int int22 = dateMidnight21.getEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateMidnight21.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(0);
        org.joda.time.DateTime dateTime28 = dateTime24.withYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime31 = dateTime24.withField(dateTimeFieldType29, 15);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType29.getDurationType();
        org.joda.time.LocalTime localTime34 = localTime13.withFieldAdded(durationFieldType32, 25804551);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(localTime34);
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMaximumValue();
        org.joda.time.DurationField durationField12 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay13 = property8.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property8.getFieldType();
        org.joda.time.TimeOfDay timeOfDay16 = property8.setCopy((int) (byte) 0);
        org.joda.time.DurationField durationField17 = property8.getDurationField();
        org.joda.time.DateTimeField dateTimeField18 = property8.getField();
        int int19 = property8.get();
        org.joda.time.TimeOfDay timeOfDay21 = property8.setCopy(55);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.plusMinutes((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        int int27 = dateMidnight26.getEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = dateMidnight26.toDateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks(0);
        org.joda.time.DateTime dateTime32 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime33 = dateTime31.toLocalTime();
        org.joda.time.LocalTime localTime35 = localTime33.minusMinutes(3);
        org.joda.time.LocalTime localTime37 = localTime33.minusMillis((-1));
        org.joda.time.DateTime dateTime38 = localTime37.toDateTimeToday();
        org.joda.time.LocalTime localTime40 = localTime37.plusSeconds(111);
        org.joda.time.LocalTime.Property property41 = localTime40.minuteOfHour();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        mutablePeriod52.setHours(2);
        org.joda.time.LocalTime localTime57 = localTime40.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod52, 25896112);
        mutablePeriod52.addMillis(25870924);
        org.joda.time.Period period61 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.hours();
        java.lang.String str63 = durationFieldType62.toString();
        org.joda.time.Period period65 = period61.withField(durationFieldType62, 2);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.millis();
        int int67 = period61.get(durationFieldType66);
        int int68 = mutablePeriod52.get(durationFieldType66);
        java.lang.String str69 = durationFieldType66.toString();
        org.joda.time.TimeOfDay timeOfDay71 = timeOfDay21.withFieldAdded(durationFieldType66, 0);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hours" + "'", str63, "hours");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 25871024 + "'", int68 == 25871024);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "millis" + "'", str69, "millis");
        org.junit.Assert.assertNotNull(timeOfDay71);
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("seconds");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"seconds\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        int int2 = timeZone1.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology18);
        org.joda.time.Interval interval20 = yearMonthDay19.toInterval();
        org.joda.time.Period period21 = interval20.toPeriod();
        long long22 = interval20.getStartMillis();
        org.joda.time.Interval interval23 = interval13.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.Duration duration42 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight26.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.LocalDate localDate44 = dateMidnight43.toLocalDate();
        org.joda.time.Chronology chronology45 = localDate44.getChronology();
        java.lang.String str46 = chronology45.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.secondOfDay();
        org.joda.time.Interval interval48 = interval13.withChronology(chronology45);
        org.joda.time.DurationField durationField49 = chronology45.minutes();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) 14, chronology45);
        org.joda.time.DateTimeField dateTimeField51 = chronology45.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField52 = chronology45.weekOfWeekyear();
        java.util.Calendar.Builder builder54 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder58 = builder54.setDate(25762033, 21, 32769);
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar.Builder builder60 = builder58.setLocale(locale59);
        boolean boolean61 = locale59.hasExtensions();
        java.lang.String str62 = dateTimeField52.getAsText(25946143, locale59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = timeZone1.getDisplayName(true, 1645488029, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 1645488029");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514181291,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=21,MILLISECOND=291,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61038316800000L) + "'", long22 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "25946143" + "'", str62, "25946143");
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        org.joda.time.YearMonthDay yearMonthDay57 = property54.withMinimumValue();
        int int58 = property54.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay60 = property54.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy((long) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = property4.addToCopy(72000001);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale11 = locale10.stripExtensions();
        int int12 = property8.getMaximumShortTextLength(locale10);
        org.joda.time.DateTime dateTime13 = property8.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField14 = property8.getField();
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = new java.util.Locale("", "ISOChronology[UTC]");
        java.util.Locale.setDefault(category15, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category15);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setWeekDate(16, (int) (byte) 0, 7);
        calendar21.set((int) (byte) 10, 8, (int) (short) 0);
        java.util.Date date30 = calendar21.getTime();
        java.lang.String str31 = calendar21.getCalendarType();
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale36 = locale35.stripExtensions();
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale.setDefault(category34, locale36);
        java.util.Map<java.lang.String, java.lang.Integer> strMap39 = calendar21.getDisplayNames(3, (int) (short) 1, locale36);
        java.lang.String str40 = locale36.getVariant();
        java.util.Locale.setDefault(category15, locale36);
        int int42 = dateTimeField14.getMaximumTextLength(locale36);
        boolean boolean43 = dateTimeField14.isSupported();
        java.lang.String str44 = dateTimeField14.toString();
        long long46 = dateTimeField14.roundCeiling((long) 25886);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale18.toString(), "_ISOCHRONOLOGY[UTC]");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "_ISOCHRONOLOGY[UTC]");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61830837818567,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=7,WEEK_OF_YEAR=36,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=243,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=21,MILLISECOND=433,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 31 07:16:21 UTC 10");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "gregory" + "'", str31, "gregory");
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.FORMAT + "'", category34.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
        org.junit.Assert.assertNull(strMap39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DateTimeField[secondOfDay]" + "'", str44, "DateTimeField[secondOfDay]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 26000L + "'", long46 == 26000L);
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        java.lang.String str5 = yearMonthDay4.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay4.toDateMidnight(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        java.lang.String str30 = chronology29.toString();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        java.lang.Object obj40 = mutablePeriod39.clone();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone48);
        org.joda.time.Duration duration50 = mutablePeriod39.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight34.plus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.LocalDate localDate52 = dateMidnight51.toLocalDate();
        org.joda.time.Period period54 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.hours();
        java.lang.String str56 = durationFieldType55.toString();
        org.joda.time.Period period58 = period54.withField(durationFieldType55, 2);
        org.joda.time.Period period60 = period58.withMillis((int) '#');
        org.joda.time.LocalDate localDate61 = localDate52.minus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.LocalDate localDate63 = localDate61.minusYears(11);
        int int64 = localDate61.getYearOfEra();
        int int65 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDate61);
        long long68 = dateTimeField31.set((-1L), 22);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology73);
        org.joda.time.Interval interval75 = yearMonthDay74.toInterval();
        org.joda.time.DateTime dateTime76 = yearMonthDay74.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property78 = dateTime76.property(dateTimeFieldType77);
        org.joda.time.DateTime dateTime79 = property78.getDateTime();
        java.util.Locale locale80 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale81 = locale80.stripExtensions();
        int int82 = property78.getMaximumShortTextLength(locale80);
        java.lang.String str83 = dateTimeField31.getAsShortText((long) 32772, locale80);
        java.lang.String str84 = locale80.getLanguage();
        java.util.Calendar calendar85 = dateMidnight7.toCalendar(locale80);
        calendar85.set(245, 0, 204357, 80, (-968), 25903201);
        org.joda.time.LocalDate localDate93 = org.joda.time.LocalDate.fromCalendarFields(calendar85);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0035-10-10" + "'", str5, "0035-10-10");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[UTC]" + "'", str30, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "PT0.100S");
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hours" + "'", str56, "hours");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-86377001L) + "'", long68 == (-86377001L));
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "32" + "'", str83, "32");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "zh" + "'", str84, "zh");
        org.junit.Assert.assertNotNull(calendar85);
// flaky:         org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-36753223679000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=805,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=119,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=12,SECOND=1,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate93);
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        java.util.Date date1 = new java.util.Date(3600041L);
        int int2 = date1.getSeconds();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 01:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("1AM19700");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        calendar5.setMinimalDaysInFirstWeek(25839);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.property(dateTimeFieldType15);
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int18 = property16.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime20 = property16.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra(25816024);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        boolean boolean24 = calendar5.after((java.lang.Object) dateTime22);
        java.time.Instant instant25 = calendar5.toInstant();
        java.util.Date date26 = java.util.Date.from(instant25);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645514181511,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=25839,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=21,MILLISECOND=511,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Feb 22 07:16:21 UTC 2022");
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        mutableDateTime4.add((long) 6);
        java.lang.Object obj9 = mutableDateTime4.clone();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.Duration duration28 = mutablePeriod17.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight12.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.LocalDate localDate30 = dateMidnight29.toLocalDate();
        org.joda.time.Chronology chronology31 = localDate30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.months();
        mutableDateTime4.setChronology(chronology31);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime4.secondOfMinute();
        int int35 = mutableDateTime4.getYearOfCentury();
        mutableDateTime4.addHours(1972);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology41);
        int int43 = yearMonthDay42.getDayOfMonth();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(periodType44);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay42.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod45, 25755035);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.withYear(18);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime51.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime54 = property52.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime55 = property52.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        int int59 = dateMidnight58.getEra();
        org.joda.time.DateMidnight.Property property60 = dateMidnight58.monthOfYear();
        org.joda.time.DateMidnight dateMidnight62 = property60.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property60.getFieldType();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime55.property(dateTimeFieldType63);
        java.lang.String str65 = mutableDateTime55.toString();
        mutableDateTime55.setMillisOfDay((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime55.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        mutableDateTime55.setZone(dateTimeZone69);
        org.joda.time.Interval interval71 = yearMonthDay47.toInterval(dateTimeZone69);
        mutableDateTime4.setZone(dateTimeZone69);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "2022-01-10T00:00:00.009Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "2022-01-10T00:00:00.009Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "2022-01-10T00:00:00.009Z");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT0.100S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str65, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(interval71);
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronology();
        boolean boolean8 = dateTimeFormatter6.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = dateTimeFormatter6.parseLocalTime("PeriodType[Seconds]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.addToCopy(32769);
        org.joda.time.DateTimeField dateTimeField57 = property54.getField();
        org.joda.time.DateTimeField dateTimeField58 = property54.getField();
        int int59 = dateTimeField58.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial60 = null;
        int int61 = dateTimeField58.getMinimumValue(readablePartial60);
        int int62 = dateTimeField58.getMaximumValue();
        long long65 = dateTimeField58.addWrapField((long) 26116603, 26067327);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 292278993 + "'", int59 == 292278993);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-292275054) + "'", int61 == (-292275054));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 292278993 + "'", int62 == 292278993);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 822605387037316603L + "'", long65 == 822605387037316603L);
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology23.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.dayOfYear();
        org.joda.time.Period period50 = new org.joda.time.Period((-17128546L), (long) (short) 0, chronology48);
        org.joda.time.Period period52 = period50.plusMinutes(202);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25755235L + "'", long46 == 25755235L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(period52);
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        int int40 = dateMidnight19.compareTo((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight19.plus((long) 8);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.withWeekOfWeekyear(22);
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight42.toMutableDateTime();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, 100L, periodType48, chronology49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        int int54 = dateMidnight53.getEra();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        java.lang.Object obj60 = mutablePeriod59.clone();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(0L, 100L, periodType63, chronology64);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone68);
        org.joda.time.Duration duration70 = mutablePeriod59.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight53, (org.joda.time.ReadableDuration) duration70);
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime73.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime75 = property74.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime76 = property74.roundFloor();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.YearMonthDay yearMonthDay81 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology80);
        org.joda.time.DateMidnight dateMidnight82 = yearMonthDay81.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight82.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType86 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime76, (org.joda.time.ReadableInstant) dateMidnight82, periodType86);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight82.withCenturyOfEra((int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateMidnight82);
        org.joda.time.Period period91 = duration70.toPeriod();
        mutablePeriod50.setPeriod((org.joda.time.ReadableDuration) duration70);
        long long93 = duration70.getMillis();
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration70);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "PT0.100S");
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 100L + "'", long93 == 100L);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.Duration duration15 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight14);
        int int16 = mutablePeriod4.getYears();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology20);
        org.joda.time.Interval interval22 = yearMonthDay21.toInterval();
        org.joda.time.Period period23 = interval22.toPeriod();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType25 = periodType24.withMillisRemoved();
        int int26 = periodType25.size();
        org.joda.time.Period period28 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        java.lang.String str30 = durationFieldType29.toString();
        org.joda.time.Period period32 = period28.withField(durationFieldType29, 2);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight35.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDate localDate53 = dateMidnight52.toLocalDate();
        org.joda.time.Chronology chronology54 = localDate53.getChronology();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        java.lang.Object obj60 = mutablePeriod59.clone();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(0L, 100L, periodType63, chronology64);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        int int67 = mutablePeriod65.getMinutes();
        org.joda.time.Period period69 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.hours();
        java.lang.String str71 = durationFieldType70.toString();
        org.joda.time.Period period73 = period69.withField(durationFieldType70, 2);
        boolean boolean74 = mutablePeriod65.isSupported(durationFieldType70);
        long long77 = chronology54.add((org.joda.time.ReadablePeriod) mutablePeriod65, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.Chronology chronology79 = chronology54.withZone(dateTimeZone78);
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate(chronology79);
        org.joda.time.DurationField durationField81 = chronology79.halfdays();
        org.joda.time.DurationField durationField82 = durationFieldType29.getField(chronology79);
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((java.lang.Object) interval22, periodType25, chronology79);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval22);
        boolean boolean85 = interval22.isBeforeNow();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P1D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P1D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P1D");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hours" + "'", str30, "hours");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hours" + "'", str71, "hours");
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 25755235L + "'", long77 == 25755235L);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        java.lang.String str22 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyear();
        long long25 = dateTimeField23.roundHalfFloor((long) 7);
        java.util.Date date27 = new java.util.Date((long) 0);
        int int28 = date27.getDay();
        org.joda.time.YearMonthDay yearMonthDay29 = org.joda.time.YearMonthDay.fromDateFields(date27);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        java.lang.Object obj39 = mutablePeriod38.clone();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        org.joda.time.Duration duration49 = mutablePeriod38.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight33.plus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.LocalDate localDate51 = dateMidnight50.toLocalDate();
        org.joda.time.Chronology chronology52 = localDate51.getChronology();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, 100L, periodType55, chronology56);
        java.lang.Object obj58 = mutablePeriod57.clone();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(0L, 100L, periodType61, chronology62);
        mutablePeriod57.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        int int65 = mutablePeriod63.getMinutes();
        org.joda.time.Period period67 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.hours();
        java.lang.String str69 = durationFieldType68.toString();
        org.joda.time.Period period71 = period67.withField(durationFieldType68, 2);
        boolean boolean72 = mutablePeriod63.isSupported(durationFieldType68);
        long long75 = chronology52.add((org.joda.time.ReadablePeriod) mutablePeriod63, (long) 25755035, 2);
        boolean boolean76 = durationFieldType30.isSupported(chronology52);
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay29.withChronologyRetainFields(chronology52);
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay77.minusYears(25756429);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHours(11);
        org.joda.time.DateTime dateTime82 = yearMonthDay79.toDateTimeAtCurrentTime(dateTimeZone81);
        int int83 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay79);
        org.joda.time.YearMonthDay.Property property84 = yearMonthDay79.year();
        int int85 = property84.get();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-259200000L) + "'", long25 == (-259200000L));
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "PT0.100S");
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hours" + "'", str69, "hours");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 25755235L + "'", long75 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-292275054) + "'", int83 == (-292275054));
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-25754459) + "'", int85 == (-25754459));
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((-59930L));
        org.joda.time.LocalDate.Property property2 = localDate1.monthOfYear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology6);
        int int8 = yearMonthDay7.size();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType17 = periodType16.withMillisRemoved();
        int int18 = periodType17.size();
        org.joda.time.Period period20 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.hours();
        java.lang.String str22 = durationFieldType21.toString();
        org.joda.time.Period period24 = period20.withField(durationFieldType21, 2);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.Duration duration43 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 100L, periodType49, chronology50);
        java.lang.Object obj52 = mutablePeriod51.clone();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, 100L, periodType55, chronology56);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod57);
        int int59 = mutablePeriod57.getMinutes();
        org.joda.time.Period period61 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.hours();
        java.lang.String str63 = durationFieldType62.toString();
        org.joda.time.Period period65 = period61.withField(durationFieldType62, 2);
        boolean boolean66 = mutablePeriod57.isSupported(durationFieldType62);
        long long69 = chronology46.add((org.joda.time.ReadablePeriod) mutablePeriod57, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.Chronology chronology71 = chronology46.withZone(dateTimeZone70);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(chronology71);
        org.joda.time.DurationField durationField73 = chronology71.halfdays();
        org.joda.time.DurationField durationField74 = durationFieldType21.getField(chronology71);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((java.lang.Object) interval14, periodType17, chronology71);
        mutablePeriod75.addYears(7);
        mutablePeriod75.setMonths(0);
        org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod75);
        org.joda.time.LocalDate localDate81 = localDate1.minus((org.joda.time.ReadablePeriod) mutablePeriod75);
        org.joda.time.LocalDate.Property property82 = localDate81.weekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hours" + "'", str22, "hours");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hours" + "'", str63, "hours");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 25755235L + "'", long69 == 25755235L);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        java.lang.String str6 = mutablePeriod4.toString();
        mutablePeriod4.addSeconds((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        java.lang.Object obj17 = mutablePeriod16.clone();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, 100L, periodType20, chronology21);
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.Duration duration27 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight11.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.Period period31 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.hours();
        java.lang.String str33 = durationFieldType32.toString();
        org.joda.time.Period period35 = period31.withField(durationFieldType32, 2);
        org.joda.time.Period period37 = period35.withMillis((int) '#');
        org.joda.time.LocalDate localDate38 = localDate29.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period40 = period37.minusYears(21);
        org.joda.time.Period period42 = period37.minusSeconds((int) (byte) 10);
        org.joda.time.PeriodType periodType43 = period37.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.days();
        int int45 = periodType43.indexOf(durationFieldType44);
        mutablePeriod4.add(durationFieldType44, (int) (short) -1);
        mutablePeriod4.addYears(517);
        mutablePeriod4.clear();
        mutablePeriod4.addSeconds(25824);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "PT25824S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "PT25824S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "PT25824S");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.100S" + "'", str6, "PT0.100S");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "PT0.100S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hours" + "'", str33, "hours");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.year();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.set(2740);
        mutableDateTime9.setDayOfYear((int) 'a');
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime14 = property12.add(82859000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -304031852 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        java.lang.String str25 = chronology24.toString();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfDay();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(0L, (long) 1, chronology24);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(10L);
        long long31 = chronology24.set((org.joda.time.ReadablePartial) yearMonthDay29, (long) 8);
        java.lang.String str32 = chronology24.toString();
        org.joda.time.DurationField durationField33 = chronology24.years();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(chronology24);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 25824226, chronology24);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 8L + "'", long31 == 8L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[UTC]" + "'", str32, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.LocalDate localDate8 = dateTime5.toLocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate8.withEra(26106474);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26106474 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        int int10 = dateTime5.getWeekOfWeekyear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology14);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateMidnight23.toDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusDays(9);
        int int29 = dateTime26.getEra();
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter18.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = yearMonthDay15.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime5.toMutableDateTime(dateTimeZone31);
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone55);
        org.joda.time.Duration duration57 = mutablePeriod46.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight41.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.LocalDate localDate59 = dateMidnight58.toLocalDate();
        org.joda.time.Chronology chronology60 = localDate59.getChronology();
        java.lang.String str61 = chronology60.toString();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.secondOfDay();
        long long64 = dateTimeField62.roundHalfFloor(100L);
        java.util.Locale locale68 = new java.util.Locale("hi!", "");
        java.lang.String str69 = locale68.getDisplayVariant();
        java.lang.String str70 = locale68.getCountry();
        java.lang.String str71 = dateTimeField62.getAsShortText((long) 16, locale68);
        java.lang.String str72 = locale38.getDisplayLanguage(locale68);
        java.lang.String str73 = dateTimeZone31.getName((long) 25791265, locale38);
        long long75 = dateTimeZone31.convertUTCToLocal((long) 25767397);
        java.util.Locale locale78 = new java.util.Locale("");
        java.util.Locale locale79 = java.util.Locale.ITALY;
        java.lang.String str80 = locale78.getDisplayCountry(locale79);
        java.lang.String str81 = dateTimeZone31.getName(0L, locale78);
        long long83 = dateTimeZone31.nextTransition((long) 25924452);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[UTC]" + "'", str61, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertEquals(locale68.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Japanese" + "'", str72, "Japanese");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 25767397L + "'", long75 == 25767397L);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 25924452L + "'", long83 == 25924452L);
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        int int8 = dateTime5.getYearOfCentury();
        int int9 = dateTime5.getMillisOfDay();
        org.joda.time.DateTime dateTime11 = dateTime5.withSecondOfMinute(16);
        org.joda.time.DateTime dateTime13 = dateTime11.withSecondOfMinute(59);
        org.joda.time.Period period15 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.hours();
        java.lang.String str17 = durationFieldType16.toString();
        org.joda.time.Period period19 = period15.withField(durationFieldType16, 2);
        org.joda.time.Period period21 = period15.minusSeconds(2);
        int int22 = period21.getWeeks();
        int[] intArray23 = period21.getValues();
        int int24 = period21.getMinutes();
        org.joda.time.Period period26 = period21.minusYears((int) (short) 0);
        org.joda.time.Period period28 = period26.minusYears(604);
        org.joda.time.DateTime dateTime30 = dateTime11.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 86403);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        java.lang.String str39 = mutablePeriod37.toString();
        mutableDateTime32.add((org.joda.time.ReadablePeriod) mutablePeriod37, 2022);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime32.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        int int46 = dateMidnight45.getEra();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateMidnight45.toDateTime(chronology47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusDays(9);
        int int51 = dateTime48.getEra();
        org.joda.time.DateTime dateTime52 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime52.getZone();
        long long56 = dateTimeZone53.adjustOffset((long) 5, true);
        mutableDateTime32.setZoneRetainFields(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.minusMonths((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight60.withDayOfMonth((int) (byte) 1);
        org.joda.time.Interval interval65 = dateMidnight60.toInterval();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(0L, dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone70);
        int int72 = dateMidnight71.getEra();
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(0L, 100L, periodType75, chronology76);
        java.lang.Object obj78 = mutablePeriod77.clone();
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod(0L, 100L, periodType81, chronology82);
        mutablePeriod77.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod83);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateMidnight dateMidnight87 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone86);
        org.joda.time.Duration duration88 = mutablePeriod77.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight87);
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight71, (org.joda.time.ReadableDuration) duration88);
        org.joda.time.PeriodType periodType90 = null;
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight68, (org.joda.time.ReadableDuration) duration88, periodType90);
        org.joda.time.Interval interval92 = interval65.withDurationAfterStart((org.joda.time.ReadableDuration) duration88);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration88, (int) (byte) 1);
        org.joda.time.DateTime dateTime95 = dateTime11.minus((org.joda.time.ReadableDuration) duration88);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hours" + "'", str17, "hours");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, -2, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0.100S" + "'", str39, "PT0.100S");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 5L + "'", long56 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "PT0.100S");
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays(25755035);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime dateTime16 = dateTime9.withField(dateTimeFieldType14, 8);
        org.joda.time.DateTime dateTime18 = dateTime9.minusMillis((-5087));
        org.joda.time.DateTime.Property property19 = dateTime18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        int int25 = dateMidnight24.getEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateMidnight24.toDateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks(0);
        int int30 = dateTime27.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime27.getZone();
        org.joda.time.DateTime dateTime33 = dateTime27.withMillisOfDay(0);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.lang.String str36 = dateTime27.toString("days", locale35);
        java.lang.String str37 = locale35.getScript();
        java.lang.String str38 = dateTimeField20.getAsText((long) 25816024, locale35);
        java.lang.String str39 = locale35.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1AM19700" + "'", str36, "1AM19700");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight12 = property10.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property10.getFieldType();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime5.property(dateTimeFieldType13);
        java.lang.String str15 = mutableDateTime5.toString();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.roundFloor();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology24);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay25.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime20, (org.joda.time.ReadableInstant) dateMidnight26, periodType30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        java.lang.Object obj37 = mutablePeriod36.clone();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        org.joda.time.Duration duration47 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(0L, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        int int54 = dateMidnight53.getEra();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        java.lang.Object obj60 = mutablePeriod59.clone();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(0L, 100L, periodType63, chronology64);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone68);
        org.joda.time.Duration duration70 = mutablePeriod59.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight53, (org.joda.time.ReadableDuration) duration70);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight50, (org.joda.time.ReadableDuration) duration70, periodType72);
        boolean boolean74 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime20, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadableDuration) duration47);
        java.lang.String str77 = duration47.toString();
        org.joda.time.Period period78 = duration47.toPeriod();
        org.joda.time.Hours hours79 = period78.toStandardHours();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str15, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT0.100S");
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "PT0.100S");
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "PT0.100S" + "'", str77, "PT0.100S");
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(hours79);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusYears(6);
        int int3 = yearMonthDay0.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone5);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, 100L, periodType9, chronology10);
        java.lang.Object obj12 = mutablePeriod11.clone();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.Duration duration22 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight6.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDate localDate24 = dateMidnight23.toLocalDate();
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        int int38 = mutablePeriod36.getMinutes();
        org.joda.time.Period period40 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.hours();
        java.lang.String str42 = durationFieldType41.toString();
        org.joda.time.Period period44 = period40.withField(durationFieldType41, 2);
        boolean boolean45 = mutablePeriod36.isSupported(durationFieldType41);
        long long48 = chronology25.add((org.joda.time.ReadablePeriod) mutablePeriod36, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Chronology chronology50 = chronology25.withZone(dateTimeZone49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.LocalDate localDate53 = localDate51.withDayOfMonth(3);
        org.joda.time.LocalDate localDate55 = localDate51.withDayOfYear(31);
        int int56 = yearMonthDay0.compareTo((org.joda.time.ReadablePartial) localDate55);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "PT0.100S");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hours" + "'", str42, "hours");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 25755235L + "'", long48 == 25755235L);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime25 = property22.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        int int29 = dateMidnight28.getEra();
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.monthOfYear();
        org.joda.time.DateMidnight dateMidnight32 = property30.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property30.getFieldType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.property(dateTimeFieldType33);
        boolean boolean35 = dateMidnight2.isSupported(dateTimeFieldType33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight2.minusWeeks(16);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight2.minusMonths(56);
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        org.joda.time.Period period50 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period52 = period50.plusDays(1970);
        org.joda.time.Period period53 = period45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period55 = period45.minusYears(25768718);
        org.joda.time.Period period57 = period45.plusHours(25814298);
        org.joda.time.Period period59 = period57.withSeconds(25790484);
        int int60 = period59.getHours();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight39.withPeriodAdded((org.joda.time.ReadablePeriod) period59, 86403);
        org.joda.time.DateMidnight.Property property63 = dateMidnight39.monthOfYear();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 25814300 + "'", int60 == 25814300);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(25923675);
        org.joda.time.DurationFieldType[] durationFieldTypeArray2 = period1.getFieldTypes();
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear(7);
        org.joda.time.tz.NameProvider nameProvider10 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology14);
        org.joda.time.Interval interval16 = yearMonthDay15.toInterval();
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = property19.getDateTime();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale22 = locale21.stripExtensions();
        int int23 = property19.getMaximumShortTextLength(locale21);
        java.lang.String str26 = nameProvider10.getName(locale21, "", "ISOChronology[UTC]");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter7.withLocale(locale21);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology31);
        org.joda.time.Interval interval33 = yearMonthDay32.toInterval();
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology38);
        org.joda.time.Interval interval40 = yearMonthDay39.toInterval();
        org.joda.time.Period period41 = interval40.toPeriod();
        long long42 = interval40.getStartMillis();
        org.joda.time.Interval interval43 = interval33.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 100L, periodType49, chronology50);
        java.lang.Object obj52 = mutablePeriod51.clone();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, 100L, periodType55, chronology56);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone60);
        org.joda.time.Duration duration62 = mutablePeriod51.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight46.plus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.LocalDate localDate64 = dateMidnight63.toLocalDate();
        org.joda.time.Chronology chronology65 = localDate64.getChronology();
        java.lang.String str66 = chronology65.toString();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.secondOfDay();
        org.joda.time.Interval interval68 = interval33.withChronology(chronology65);
        org.joda.time.DateTimeField dateTimeField69 = chronology65.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField70 = chronology65.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField71 = chronology65.minuteOfHour();
        org.joda.time.DurationField durationField72 = chronology65.halfdays();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter7.withChronology(chronology65);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((java.lang.Object) period1, chronology65);
        org.joda.time.Period period76 = period1.withDays(53327);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldTypeArray2);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(nameProvider10);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-61038316800000L) + "'", long42 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "PT0.100S");
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[UTC]" + "'", str66, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 53);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime3.add(durationFieldType4, 24);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFieldAdded(durationFieldType4, 111);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withYear((int) '#');
        java.util.GregorianCalendar gregorianCalendar11 = dateMidnight8.toGregorianCalendar();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology15);
        org.joda.time.Interval interval17 = yearMonthDay16.toInterval();
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology22);
        org.joda.time.Interval interval24 = yearMonthDay23.toInterval();
        org.joda.time.Period period25 = interval24.toPeriod();
        long long26 = interval24.getStartMillis();
        org.joda.time.Interval interval27 = interval17.overlap((org.joda.time.ReadableInterval) interval24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        org.joda.time.Duration duration46 = mutablePeriod35.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight30.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.LocalDate localDate48 = dateMidnight47.toLocalDate();
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        java.lang.String str50 = chronology49.toString();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.secondOfDay();
        org.joda.time.Interval interval52 = interval17.withChronology(chronology49);
        org.joda.time.DurationField durationField53 = chronology49.minutes();
        org.joda.time.DateTimeField dateTimeField54 = chronology49.halfdayOfDay();
        int int55 = dateTimeField54.getMinimumValue();
        long long58 = dateTimeField54.getDifferenceAsLong((-2208988800000L), (long) 40);
        int int59 = dateMidnight8.get(dateTimeField54);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-61038316800000L) + "'", long26 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[UTC]" + "'", str50, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-51134L) + "'", long58 == (-51134L));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        int int4 = dateMidnight2.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withField(dateTimeFieldType5, 3);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.minusDays((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableInstant10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight2.yearOfEra();
        org.joda.time.DateMidnight dateMidnight13 = property12.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minus(21494L);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean17 = dateMidnight13.isSupported(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.minutes();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(chronology37);
        org.joda.time.DateTime dateTime43 = yearMonthDay42.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.year();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withYear(11);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.yearOfEra();
        org.joda.time.LocalDateTime localDateTime52 = property51.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay42, (org.joda.time.ReadablePartial) localDateTime52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property8.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withChronology(chronology18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        boolean boolean26 = dateMidnight17.equals((java.lang.Object) mutablePeriod24);
        boolean boolean27 = property8.equals((java.lang.Object) dateMidnight17);
        org.joda.time.TimeOfDay timeOfDay28 = property8.withMinimumValue();
        java.util.Date date30 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay31 = org.joda.time.TimeOfDay.fromDateFields(date30);
        int int32 = timeOfDay31.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay31.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.secondOfMinute();
        java.util.Locale locale40 = new java.util.Locale("hi!", "");
        java.lang.String str41 = property37.getAsShortText(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale42.getDisplayScript();
        java.lang.String str44 = locale40.getDisplayName(locale42);
        java.lang.String str45 = property8.getAsShortText(locale42);
        java.lang.String str46 = locale42.getCountry();
        java.lang.Object obj47 = locale42.clone();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(obj47, dateTimeZone48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "de");
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.LocalDate localDate40 = dateMidnight39.toLocalDate();
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        int int54 = mutablePeriod52.getMinutes();
        org.joda.time.Period period56 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        java.lang.String str58 = durationFieldType57.toString();
        org.joda.time.Period period60 = period56.withField(durationFieldType57, 2);
        boolean boolean61 = mutablePeriod52.isSupported(durationFieldType57);
        long long64 = chronology41.add((org.joda.time.ReadablePeriod) mutablePeriod52, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Chronology chronology66 = chronology41.withZone(dateTimeZone65);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 11, chronology66);
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay18.plus((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        mutablePeriod77.addMinutes(6);
        org.joda.time.MutablePeriod mutablePeriod80 = mutablePeriod77.copy();
        org.joda.time.YearMonthDay yearMonthDay82 = yearMonthDay18.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod77, 0);
        mutablePeriod77.add((long) 1980);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hours" + "'", str58, "hours");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 25755235L + "'", long64 == 25755235L);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(mutablePeriod80);
        org.junit.Assert.assertNotNull(yearMonthDay82);
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateMidnight13.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(0);
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime22 = dateTime18.withFieldAdded(durationFieldType20, 5);
        int int23 = dateMidnight8.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        int int25 = dateTime24.getDayOfMonth();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.hourOfDay();
        org.joda.time.DateTime dateTime29 = dateTime24.withFields((org.joda.time.ReadablePartial) localDateTime27);
        int int30 = dateTime29.getYear();
        org.joda.time.DateTime dateTime31 = dateTime29.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime33 = dateTime29.minusDays(457);
        org.joda.time.DateTime.Property property34 = dateTime29.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        java.lang.String str3 = durationFieldType2.toString();
        org.joda.time.Period period5 = period1.withField(durationFieldType2, 2);
        org.joda.time.PeriodType periodType6 = period5.getPeriodType();
        org.joda.time.Period period8 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        java.lang.String str10 = durationFieldType9.toString();
        org.joda.time.Period period12 = period8.withField(durationFieldType9, 2);
        int int13 = period8.size();
        org.joda.time.MutablePeriod mutablePeriod14 = period8.toMutablePeriod();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(periodType15);
        org.joda.time.Period period17 = period8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Period period19 = period17.minusMillis(3);
        org.joda.time.Period period20 = period5.plus((org.joda.time.ReadablePeriod) period19);
        int int21 = period5.getWeeks();
        org.joda.time.Period period23 = period5.plusYears(457);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1970);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(0L, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        int int32 = dateMidnight31.getEra();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadableDuration) duration48, periodType50);
        org.joda.time.Period period53 = period51.withMillis(21);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(10, 100, 10, (int) (short) 100, 4, 25755035, (int) ' ', (int) (short) 10);
        org.joda.time.Period period64 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.hours();
        java.lang.String str66 = durationFieldType65.toString();
        org.joda.time.Period period68 = period64.withField(durationFieldType65, 2);
        mutablePeriod62.add(durationFieldType65, 32769);
        boolean boolean71 = period53.isSupported(durationFieldType65);
        boolean boolean72 = mutablePeriod25.isSupported(durationFieldType65);
        org.joda.time.Period period74 = period23.withFieldAdded(durationFieldType65, 0);
        int int75 = period74.getDays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType77 = period74.getFieldType((-14));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hours" + "'", str3, "hours");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hours" + "'", str10, "hours");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hours" + "'", str66, "hours");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.Interval interval23 = interval21.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        boolean boolean25 = interval12.contains((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology29);
        org.joda.time.Interval interval31 = yearMonthDay30.toInterval();
        org.joda.time.DateTime dateTime32 = yearMonthDay30.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property34 = dateTime32.property(dateTimeFieldType33);
        org.joda.time.DateTime.Property property35 = dateTime32.minuteOfDay();
        org.joda.time.DateTime.Property property36 = dateTime32.monthOfYear();
        org.joda.time.DateTime.Property property37 = dateTime32.centuryOfEra();
        org.joda.time.LocalDate localDate38 = dateTime32.toLocalDate();
        boolean boolean39 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        java.lang.Object obj49 = mutablePeriod48.clone();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        org.joda.time.Duration duration59 = mutablePeriod48.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight43.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.LocalDate localDate61 = dateMidnight60.toLocalDate();
        org.joda.time.Chronology chronology62 = localDate61.getChronology();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(0L, 100L, periodType65, chronology66);
        java.lang.Object obj68 = mutablePeriod67.clone();
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(0L, 100L, periodType71, chronology72);
        mutablePeriod67.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod73);
        int int75 = mutablePeriod73.getMinutes();
        org.joda.time.Period period77 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType78 = org.joda.time.DurationFieldType.hours();
        java.lang.String str79 = durationFieldType78.toString();
        org.joda.time.Period period81 = period77.withField(durationFieldType78, 2);
        boolean boolean82 = mutablePeriod73.isSupported(durationFieldType78);
        long long85 = chronology62.add((org.joda.time.ReadablePeriod) mutablePeriod73, (long) 25755035, 2);
        boolean boolean86 = durationFieldType40.isSupported(chronology62);
        org.joda.time.DateTimeField dateTimeField87 = chronology62.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime88 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime32, chronology62);
        mutableDateTime88.setTime((long) 25927635);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0.100S");
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hours" + "'", str79, "hours");
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 25755235L + "'", long85 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTimeField87);
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfCentury(4);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        int int12 = dateMidnight11.getEra();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.Duration duration28 = mutablePeriod17.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        int int33 = dateMidnight32.getEra();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        java.lang.Object obj39 = mutablePeriod38.clone();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        org.joda.time.Duration duration49 = mutablePeriod38.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight32, (org.joda.time.ReadableDuration) duration49);
        boolean boolean51 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime8.plus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime8.withYearOfCentury(6);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusMinutes(25756429);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withYearOfCentury(58);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT0.100S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "PT0.100S");
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withCenturyOfEra(8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        int int18 = dateMidnight17.getEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateMidnight17.toDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusDays(9);
        int int23 = dateTime20.getEra();
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime();
        int int25 = dateTime20.getWeekOfWeekyear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology29);
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = null;
        org.joda.time.format.DateTimeParser dateTimeParser32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter31, dateTimeParser32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter33.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        int int39 = dateMidnight38.getEra();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = dateMidnight38.toDateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusDays(9);
        int int44 = dateTime41.getEra();
        org.joda.time.DateTime dateTime45 = dateTime41.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime45.getZone();
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter33.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime50 = yearMonthDay30.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime20.toMutableDateTime(dateTimeZone46);
        int int52 = dateMidnight10.compareTo((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology56);
        org.joda.time.Interval interval58 = yearMonthDay57.toInterval();
        org.joda.time.Interval interval60 = interval58.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime61 = interval60.getEnd();
        org.joda.time.Duration duration62 = interval60.toDuration();
        mutableDateTime51.add((org.joda.time.ReadableDuration) duration62);
        org.joda.time.MutableDateTime mutableDateTime64 = mutableDateTime51.toMutableDateTime();
        org.joda.time.ReadableInstant readableInstant65 = null;
        mutableDateTime51.setMillis(readableInstant65);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone15);
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withPivotYear(38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = dateTimeFormatter21.parseLocalTime("2022-02-15T07:13:03.477Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        int int57 = property54.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay58 = property54.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay59 = property54.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay61 = property54.addToCopy(455308);
        int int62 = yearMonthDay61.getMonthOfYear();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-292275054) + "'", int57 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 111);
        org.joda.time.DateMidnight dateMidnight2 = localDate1.toDateMidnight();
        org.joda.time.DateTime dateTime3 = dateMidnight2.toDateTime();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        boolean boolean8 = interval5.isAfter(100L);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        java.lang.String str11 = durationFieldType10.toString();
        mutablePeriod9.set(durationFieldType10, 9);
        org.joda.time.Interval interval14 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology18);
        org.joda.time.Interval interval20 = yearMonthDay19.toInterval();
        org.joda.time.Period period21 = interval20.toPeriod();
        boolean boolean23 = interval20.isAfter(100L);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.hours();
        java.lang.String str26 = durationFieldType25.toString();
        mutablePeriod24.set(durationFieldType25, 9);
        org.joda.time.Interval interval29 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology33);
        org.joda.time.Interval interval35 = yearMonthDay34.toInterval();
        org.joda.time.Interval interval37 = interval35.withEndMillis((long) 2);
        boolean boolean38 = interval35.isBeforeNow();
        mutablePeriod24.setPeriod((org.joda.time.ReadableInterval) interval35);
        long long40 = interval35.getEndMillis();
        org.joda.time.Interval interval41 = interval35.toInterval();
        boolean boolean42 = interval14.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration43 = interval35.toDuration();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hours" + "'", str11, "hours");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hours" + "'", str26, "hours");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-61038230400000L) + "'", long40 == (-61038230400000L));
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("1AM19700");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("hours");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Builder builder7 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setExtension('#', "580");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Interval interval23 = interval21.withPeriodBeforeEnd(readablePeriod22);
        boolean boolean24 = interval5.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Interval interval25 = interval5.toInterval();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(10L);
        org.joda.time.Interval interval28 = yearMonthDay27.toInterval();
        boolean boolean29 = interval5.equals((java.lang.Object) yearMonthDay27);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minusYears(25866711);
        int int32 = yearMonthDay31.size();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int10 = property8.getMaximumTextLength(locale9);
        org.joda.time.DateTime dateTime12 = property8.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTime dateTime13 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime14 = property8.roundFloorCopy();
        org.joda.time.DurationField durationField15 = property8.getDurationField();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology21.withZone(dateTimeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.DurationField durationField48 = chronology46.halfdays();
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(chronology46);
        mutableDateTime49.setMillisOfSecond(70);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime49.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime53 = property52.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime53.setDayOfMonth(25836213);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25836213 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25755235L + "'", long44 == 25755235L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minusMillis(713);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withField(dateTimeFieldType14, 506);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        boolean boolean10 = property8.equals((java.lang.Object) (-361032644L));
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (byte) 10, 5, 25762216, (int) (short) 1);
        mutablePeriod4.addSeconds(25788046);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType8 = mutablePeriod4.getFieldType(33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.hourOfDay();
        int int13 = property12.get();
        org.joda.time.TimeOfDay timeOfDay15 = property12.addToCopy(25839);
        org.joda.time.TimeOfDay timeOfDay16 = property12.withMaximumValue();
        java.lang.String str17 = timeOfDay16.toString();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "T23:00:00.000" + "'", str17, "T23:00:00.000");
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        java.lang.String str24 = chronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfDay();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(0L, (long) 1, chronology23);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(10L);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) yearMonthDay28, (long) 8);
        java.lang.String str31 = chronology23.toString();
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(chronology23);
        org.joda.time.DateTimeField dateTimeField33 = chronology23.dayOfYear();
        int int34 = dateTimeField33.getMinimumValue();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.Period period11 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Period period15 = period11.withField(durationFieldType12, 2);
        org.joda.time.Period period17 = period15.withWeeks((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = dateTime5.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((int) ' ', (int) (short) 100, 7, 1970, 7, 21, 3, 100);
        int[] intArray28 = mutablePeriod27.getValues();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType34 = periodType33.withMillisRemoved();
        org.joda.time.Period period35 = new org.joda.time.Period((long) 10, (long) '#', periodType34);
        org.joda.time.Period period36 = new org.joda.time.Period((long) (short) 10, (long) 25756429, periodType34);
        mutablePeriod27.add((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period38 = period15.minus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Period period40 = period38.minusMillis(25814298);
        int int41 = period40.getHours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType43 = period40.getFieldType(593);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hours" + "'", str13, "hours");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, 100, 7, 1970, 7, 21, 3, 100]");
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-5) + "'", int41 == (-5));
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear(1);
        boolean boolean21 = dateTimeFormatter18.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime23 = dateTimeFormatter18.parseMutableDateTime("java.io.IOException: java.util.GregorianCalendar[time=1645513757582,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=9,SECOND=17,MILLISECOND=582,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight12 = property10.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property10.getFieldType();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime5.property(dateTimeFieldType13);
        mutableDateTime5.setMinuteOfHour(46);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology20);
        org.joda.time.Interval interval22 = yearMonthDay21.toInterval();
        org.joda.time.Period period23 = interval22.toPeriod();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology27);
        org.joda.time.Interval interval29 = yearMonthDay28.toInterval();
        org.joda.time.Period period30 = interval29.toPeriod();
        long long31 = interval29.getStartMillis();
        org.joda.time.Interval interval32 = interval22.overlap((org.joda.time.ReadableInterval) interval29);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight35.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDate localDate53 = dateMidnight52.toLocalDate();
        org.joda.time.Chronology chronology54 = localDate53.getChronology();
        java.lang.String str55 = chronology54.toString();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.secondOfDay();
        org.joda.time.Interval interval57 = interval22.withChronology(chronology54);
        org.joda.time.DurationField durationField58 = chronology54.minutes();
        org.joda.time.DateTimeField dateTimeField59 = chronology54.secondOfMinute();
        long long63 = chronology54.add(31556952000L, (-61662790239443L), 0);
        mutableDateTime5.setChronology(chronology54);
        org.joda.time.LocalDate localDate65 = org.joda.time.LocalDate.now(chronology54);
        org.joda.time.DurationField durationField66 = chronology54.millis();
        org.joda.time.DurationField durationField67 = chronology54.years();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-61038316800000L) + "'", long31 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 31556952000L + "'", long63 == 31556952000L);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        long long15 = interval13.getStartMillis();
        org.joda.time.Interval interval16 = interval6.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfDay();
        org.joda.time.Interval interval41 = interval6.withChronology(chronology38);
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) 25790484, chronology38);
        org.joda.time.LocalDate localDate44 = yearMonthDay43.toLocalDate();
        int int45 = localDate44.getCenturyOfEra();
        org.joda.time.LocalDate localDate47 = localDate44.minusYears(693);
        org.joda.time.Period period49 = new org.joda.time.Period((long) 'x');
        org.joda.time.Period period51 = period49.withWeeks(25762033);
        org.joda.time.MutablePeriod mutablePeriod52 = period49.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate54 = localDate44.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod52, 25922976);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 120 * 25922976");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-61038316800000L) + "'", long15 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 19 + "'", int45 == 19);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(mutablePeriod52);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfYear();
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight();
        int int23 = dateTime22.getYear();
        org.joda.time.DateTime.Property property24 = dateTime22.monthOfYear();
        org.joda.time.DateTime.Property property25 = dateTime22.secondOfMinute();
        org.joda.time.DateTime dateTime26 = property25.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime27 = property25.roundCeilingCopy();
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.DateTime dateTime30 = dateTime27.plusSeconds(25910291);
        int int31 = dateTime27.getMillisOfDay();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.Period period11 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Period period15 = period11.withField(durationFieldType12, 2);
        org.joda.time.Period period17 = period15.withWeeks((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = dateTime5.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((int) ' ', (int) (short) 100, 7, 1970, 7, 21, 3, 100);
        int[] intArray28 = mutablePeriod27.getValues();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType34 = periodType33.withMillisRemoved();
        org.joda.time.Period period35 = new org.joda.time.Period((long) 10, (long) '#', periodType34);
        org.joda.time.Period period36 = new org.joda.time.Period((long) (short) 10, (long) 25756429, periodType34);
        mutablePeriod27.add((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period38 = period15.minus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone55);
        org.joda.time.Duration duration57 = mutablePeriod46.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight41.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.LocalDate localDate59 = dateMidnight58.toLocalDate();
        org.joda.time.Period period61 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.hours();
        java.lang.String str63 = durationFieldType62.toString();
        org.joda.time.Period period65 = period61.withField(durationFieldType62, 2);
        org.joda.time.Period period67 = period65.withMillis((int) '#');
        org.joda.time.LocalDate localDate68 = localDate59.minus((org.joda.time.ReadablePeriod) period67);
        int int69 = period67.getMonths();
        org.joda.time.Period period71 = period67.multipliedBy(1);
        org.joda.time.Period period73 = period67.minusSeconds(25824083);
        org.joda.time.Seconds seconds74 = period73.toStandardSeconds();
        org.joda.time.Period period75 = period38.minus((org.joda.time.ReadablePeriod) seconds74);
        org.joda.time.Period period77 = period75.minusSeconds(25968911);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hours" + "'", str13, "hours");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, 100, 7, 1970, 7, 21, 3, 100]");
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hours" + "'", str63, "hours");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(seconds74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period77);
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        java.lang.String str41 = interval5.toString();
        org.joda.time.MutableInterval mutableInterval42 = interval5.toMutableInterval();
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType45 = periodType44.withSecondsRemoved();
        org.joda.time.Period period46 = interval43.toPeriod(periodType44);
        java.lang.Object obj47 = null;
        boolean boolean48 = interval43.equals(obj47);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology53);
        org.joda.time.Interval interval55 = yearMonthDay54.toInterval();
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology60);
        org.joda.time.Interval interval62 = yearMonthDay61.toInterval();
        org.joda.time.Period period63 = interval62.toPeriod();
        long long64 = interval62.getStartMillis();
        org.joda.time.Interval interval65 = interval55.overlap((org.joda.time.ReadableInterval) interval62);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone67);
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(0L, 100L, periodType71, chronology72);
        java.lang.Object obj74 = mutablePeriod73.clone();
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(0L, 100L, periodType77, chronology78);
        mutablePeriod73.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod79);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone82);
        org.joda.time.Duration duration84 = mutablePeriod73.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight83);
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight68.plus((org.joda.time.ReadableDuration) duration84);
        org.joda.time.LocalDate localDate86 = dateMidnight85.toLocalDate();
        org.joda.time.Chronology chronology87 = localDate86.getChronology();
        java.lang.String str88 = chronology87.toString();
        org.joda.time.DateTimeField dateTimeField89 = chronology87.secondOfDay();
        org.joda.time.Interval interval90 = interval55.withChronology(chronology87);
        org.joda.time.DurationField durationField91 = chronology87.minutes();
        org.joda.time.MutableDateTime mutableDateTime92 = new org.joda.time.MutableDateTime((long) 14, chronology87);
        org.joda.time.DateMidnight dateMidnight93 = new org.joda.time.DateMidnight(chronology87);
        org.joda.time.Interval interval94 = interval43.withChronology(chronology87);
        org.joda.time.DateTimeField dateTimeField95 = chronology87.era();
        org.joda.time.DurationField durationField96 = dateTimeField95.getDurationField();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z" + "'", str41, "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-61038316800000L) + "'", long64 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "PT0.100S");
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ISOChronology[UTC]" + "'", str88, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(durationField96);
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        org.joda.time.LocalDate localDate11 = property9.addWrapFieldToCopy(12);
        int int12 = localDate11.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType13.getRangeDurationType();
        boolean boolean16 = localDate11.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDate.Property property17 = localDate11.monthOfYear();
        org.joda.time.LocalDate localDate19 = property17.addWrapFieldToCopy(25845824);
        org.joda.time.LocalDate localDate20 = property17.withMaximumValue();
        org.joda.time.LocalDate.Property property21 = localDate20.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1982 + "'", int12 == 1982);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "secondOfDay" + "'", str14, "secondOfDay");
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology21.withZone(dateTimeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.DurationField durationField48 = chronology46.halfdays();
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(chronology46);
        mutableDateTime49.addDays((int) (byte) 0);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology55);
        org.joda.time.format.DateTimePrinter dateTimePrinter57 = null;
        org.joda.time.format.DateTimeParser dateTimeParser58 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter57, dateTimeParser58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone63);
        int int65 = dateMidnight64.getEra();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = dateMidnight64.toDateTime(chronology66);
        org.joda.time.DateTime dateTime69 = dateTime67.plusDays(9);
        int int70 = dateTime67.getEra();
        org.joda.time.DateTime dateTime71 = dateTime67.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime71.getZone();
        java.lang.String str73 = dateTimeZone72.toString();
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay(dateTimeZone72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter59.withZone(dateTimeZone72);
        org.joda.time.DateTime dateTime76 = yearMonthDay56.toDateTimeAtMidnight(dateTimeZone72);
        int int78 = dateTimeZone72.getOffset((long) 21);
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight(dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight79.withMillis((long) 1982);
        boolean boolean82 = mutableDateTime49.isBefore((org.joda.time.ReadableInstant) dateMidnight79);
        org.joda.time.DurationFieldType durationFieldType83 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime49.add(durationFieldType83, 25957658);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25755235L + "'", long44 == 25755235L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "UTC" + "'", str73, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        int int35 = mutablePeriod33.getMinutes();
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        boolean boolean42 = mutablePeriod33.isSupported(durationFieldType38);
        long long45 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology22.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology22);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (-2), chronology22);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology22);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology54);
        org.joda.time.Interval interval56 = yearMonthDay55.toInterval();
        org.joda.time.Period period57 = interval56.toPeriod();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology61);
        org.joda.time.Interval interval63 = yearMonthDay62.toInterval();
        org.joda.time.Period period64 = interval63.toPeriod();
        long long65 = interval63.getStartMillis();
        org.joda.time.Interval interval66 = interval56.overlap((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology70);
        org.joda.time.Interval interval72 = yearMonthDay71.toInterval();
        org.joda.time.Interval interval74 = interval72.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime75 = interval74.getEnd();
        boolean boolean76 = interval63.contains((org.joda.time.ReadableInterval) interval74);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone78);
        int int80 = dateMidnight79.getEra();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = dateMidnight79.toDateTime(chronology81);
        org.joda.time.DateTime dateTime84 = dateTime82.minusWeeks(0);
        org.joda.time.LocalDate localDate85 = dateTime82.toLocalDate();
        boolean boolean86 = interval74.isAfter((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Duration duration87 = interval74.toDuration();
        org.joda.time.Period period88 = duration87.toPeriod();
        org.joda.time.DateTime dateTime89 = dateTime50.minus((org.joda.time.ReadableDuration) duration87);
        boolean boolean91 = dateTime89.isEqual(25875461L);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 25755235L + "'", long45 == 25755235L);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-61038316800000L) + "'", long65 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateMidnight8.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusDays(9);
        int int14 = dateTime11.getEra();
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone16);
        boolean boolean18 = calendar0.before((java.lang.Object) dateTimeZone16);
        calendar0.setLenient(true);
        java.lang.String str21 = calendar0.getCalendarType();
        int int23 = calendar0.getMaximum(6);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.roll(102165896, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61662789816359,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=15,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=362,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=23,MILLISECOND=641,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gregory" + "'", str21, "gregory");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 366 + "'", int23 == 366);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMaximumValue();
        org.joda.time.DurationField durationField12 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay13 = property8.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property8.getFieldType();
        boolean boolean16 = property8.equals((java.lang.Object) "coreano (Corea del Sud)");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = property8.setCopy("2022-02-15T07:11:07.393");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-15T07:11:07.393\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime localTime13 = localTime11.minusMinutes(2022);
        org.joda.time.LocalTime localTime15 = localTime13.plusMillis(32770);
        org.joda.time.LocalTime localTime17 = localTime13.minusMinutes(32);
        org.joda.time.LocalTime localTime19 = localTime17.minusMinutes(25758818);
        int int20 = localTime17.getSecondOfMinute();
        java.util.Date date22 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.fromDateFields(date22);
        int int24 = timeOfDay23.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay23.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property29 = timeOfDay28.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay30 = property29.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay32 = property29.addNoWrapToCopy(3);
        int int33 = localTime17.compareTo((org.joda.time.ReadablePartial) timeOfDay32);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay32.plusHours(36);
        org.joda.time.TimeOfDay.Property property36 = timeOfDay35.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay38 = property36.setCopy(713);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 713 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.TimeOfDay timeOfDay25 = property8.addNoWrapToCopy(5);
        org.joda.time.TimeOfDay timeOfDay26 = property8.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.plusMillis(12);
        int int29 = timeOfDay28.getHourOfDay();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        int int6 = calendar0.getGreatestMinimum(0);
        calendar0.setMinimalDaysInFirstWeek(8);
        java.util.Date date9 = calendar0.getTime();
        java.util.Date date16 = new java.util.Date((int) (short) 10, 32769, 9, 9, 22, 21);
        date16.setYear(4);
        java.util.Date date20 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromDateFields(date20);
        int int22 = date20.getHours();
        boolean boolean23 = date16.before(date20);
        calendar0.setTime(date20);
        java.lang.String str25 = date20.toLocaleString();
        java.lang.Object obj26 = date20.clone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=8,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Dec 28 07:16:23 UTC 15");
        org.junit.Assert.assertEquals(date16.toString(), "Sun Oct 09 09:22:21 UTC 1904");
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str25, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime6.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime6.minusMinutes(25829182);
        org.joda.time.DateTime dateTime13 = dateTime6.minusHours(29);
        org.joda.time.DateTime.Property property14 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfCentury(4);
        org.joda.time.Period period10 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        java.lang.String str12 = durationFieldType11.toString();
        org.joda.time.Period period14 = period10.withField(durationFieldType11, 2);
        org.joda.time.Period period16 = period10.minusSeconds(2);
        int int17 = period16.getWeeks();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime4.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology19 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hours" + "'", str12, "hours");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        org.joda.time.Duration duration40 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, (org.joda.time.ReadableDuration) duration40);
        boolean boolean42 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, 100L, periodType45, chronology46);
        java.lang.Object obj48 = mutablePeriod47.clone();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        mutablePeriod47.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone56);
        org.joda.time.Duration duration58 = mutablePeriod47.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight57);
        mutablePeriod47.addMillis(0);
        mutablePeriod47.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone64);
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(0L, 100L, periodType68, chronology69);
        java.lang.Object obj71 = mutablePeriod70.clone();
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(0L, 100L, periodType74, chronology75);
        mutablePeriod70.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod76);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone79);
        org.joda.time.Duration duration81 = mutablePeriod70.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight80);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight65.plus((org.joda.time.ReadableDuration) duration81);
        org.joda.time.MutableDateTime mutableDateTime84 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType87 = null;
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(0L, 100L, periodType87, chronology88);
        java.lang.Object obj90 = mutablePeriod89.clone();
        java.lang.String str91 = mutablePeriod89.toString();
        mutableDateTime84.add((org.joda.time.ReadablePeriod) mutablePeriod89, 2022);
        mutablePeriod47.setPeriod((org.joda.time.ReadableInstant) dateMidnight82, (org.joda.time.ReadableInstant) mutableDateTime84);
        org.joda.time.MutableDateTime mutableDateTime95 = mutableDateTime84.toMutableDateTime();
        org.joda.time.Interval interval96 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) mutableDateTime84);
        org.joda.time.DateTime dateTime97 = interval96.getStart();
        long long98 = interval96.getStartMillis();
        org.joda.time.Period period99 = interval96.toPeriod();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "PT0.100S");
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "PT0.100S" + "'", str91, "PT0.100S");
        org.junit.Assert.assertNotNull(mutableDateTime95);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1640995402100L + "'", long98 == 1640995402100L);
        org.junit.Assert.assertNotNull(period99);
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.hourOfDay();
        int int13 = property12.get();
        org.joda.time.TimeOfDay timeOfDay14 = property12.withMinimumValue();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay17 = property15.addWrapFieldToCopy(324);
        org.joda.time.Chronology chronology18 = timeOfDay17.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.withHourOfDay(72000003);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 72000003 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime15 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime17 = property13.addCopy((-61662790239443L));
        org.joda.time.LocalTime localTime18 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime19 = property13.withMaximumValue();
        int int20 = localTime19.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Interval interval19 = yearMonthDay4.toInterval();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(interval19);
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime localTime13 = localTime9.minusMillis((-1));
        org.joda.time.DateTime dateTime14 = localTime13.toDateTimeToday();
        org.joda.time.LocalTime localTime16 = localTime13.minusMinutes(2022);
        org.joda.time.LocalTime localTime18 = localTime16.withMillisOfSecond(4);
        org.joda.time.LocalTime localTime20 = localTime18.plusMinutes(111);
        org.joda.time.LocalTime localTime22 = localTime20.plusHours(25824443);
        int int23 = localTime20.getSecondOfMinute();
        org.joda.time.LocalTime localTime25 = localTime20.plusSeconds(26111228);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, 100L, periodType4, chronology5);
        java.lang.Object obj7 = mutablePeriod6.clone();
        java.lang.String str8 = mutablePeriod6.toString();
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6, 2022);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("years");
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        int int17 = property13.getMaximumTextLength(locale15);
        java.lang.Object obj18 = locale15.clone();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.100S" + "'", str8, "PT0.100S");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "years");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645514184175,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=24,MILLISECOND=175,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "years");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "years");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "years");
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Property[year]");
        java.util.TimeZone.setDefault(timeZone1);
        timeZone1.setRawOffset(674);
        java.lang.String str5 = timeZone1.getID();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setWeekDate(16, (int) (byte) 0, 7);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(9);
        int int20 = dateTime17.getEra();
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone22);
        boolean boolean24 = calendar6.before((java.lang.Object) dateTimeZone22);
        calendar6.clear((int) (byte) 0);
        calendar6.set(16, (int) (byte) 100, 22);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        int int34 = dateMidnight33.getEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateMidnight33.toDateTime(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight39 = dateTime38.toDateMidnight();
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.era();
        int int41 = dateMidnight39.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone43);
        int int45 = dateMidnight44.getEra();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = dateMidnight44.toDateTime(chronology46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusWeeks(0);
        org.joda.time.DateTime dateTime50 = dateTime49.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime53 = dateTime49.withFieldAdded(durationFieldType51, 5);
        int int54 = dateMidnight39.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime55 = dateTime53.toDateTime();
        int int56 = dateTime55.getDayOfMonth();
        org.joda.time.DateTime dateTime58 = dateTime55.minus((long) (short) 0);
        boolean boolean59 = calendar6.before((java.lang.Object) dateTime58);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getTimeZone("PT2H0.035S");
        timeZone61.setID("2022-01-21T07:09:28.859");
        java.util.TimeZone.setDefault(timeZone61);
        calendar6.setTimeZone(timeZone61);
        timeZone61.setID("2022-02-15T07:10:20.456");
        java.util.TimeZone.setDefault(timeZone61);
        boolean boolean69 = timeZone1.hasSameRules(timeZone61);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT" + "'", str5, "GMT");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-15T07:10:20.456\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=16,MONTH=100,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=362,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=24,MILLISECOND=910,ZONE_OFFSET=674,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateMidnight dateMidnight12 = property9.addWrapFieldToCopy(121);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType16 = periodType15.withMillisRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 10, (long) '#', periodType16);
        org.joda.time.PeriodType periodType18 = periodType16.withSecondsRemoved();
        org.joda.time.Period period20 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.hours();
        java.lang.String str22 = durationFieldType21.toString();
        org.joda.time.Period period24 = period20.withField(durationFieldType21, 2);
        boolean boolean25 = periodType16.isSupported(durationFieldType21);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight12.withFieldAdded(durationFieldType21, 103);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plusYears(9);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.yearOfEra();
        int int31 = dateMidnight29.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hours" + "'", str22, "hours");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 61 + "'", int31 == 61);
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 25824443);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology6);
        org.joda.time.Interval interval8 = yearMonthDay7.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology13);
        org.joda.time.Interval interval15 = yearMonthDay14.toInterval();
        org.joda.time.Period period16 = interval15.toPeriod();
        long long17 = interval15.getStartMillis();
        org.joda.time.Interval interval18 = interval8.overlap((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.Duration duration37 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight21.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDate localDate39 = dateMidnight38.toLocalDate();
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        java.lang.String str41 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfDay();
        org.joda.time.Interval interval43 = interval8.withChronology(chronology40);
        java.lang.String str44 = interval8.toString();
        org.joda.time.MutableInterval mutableInterval45 = interval8.toMutableInterval();
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType48 = periodType47.withSecondsRemoved();
        org.joda.time.Period period49 = interval46.toPeriod(periodType47);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 14, periodType47);
        int[] intArray51 = mutablePeriod50.getValues();
        int int52 = mutablePeriod50.getHours();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight1.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod50, 348);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61038316800000L) + "'", long17 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z" + "'", str44, "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateMidnight54);
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        org.joda.time.Period period1 = org.joda.time.Period.millis(7);
        org.joda.time.Period period3 = period1.minusDays(35);
        org.joda.time.Period period5 = period3.withYears(1982);
        org.joda.time.Period period7 = period3.withHours(693);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration30, periodType32);
        org.joda.time.Period period38 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period40 = period38.plusDays(1970);
        org.joda.time.Period period41 = period40.normalizedStandard();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight10.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period43 = period3.withFields((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period44 = period3.toPeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        int int12 = yearMonthDay11.size();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay11.plus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        int int31 = dateMidnight30.getEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        mutablePeriod23.setPeriod((long) (byte) 100, (long) (byte) -1, chronology32);
        org.joda.time.Period period34 = new org.joda.time.Period(1645513759767L, periodType6, chronology32);
        long long39 = chronology32.getDateTimeMillis((-292275054), 5, 14, 11);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight2.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField41 = chronology32.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology32.secondOfDay();
        org.joda.time.DurationField durationField43 = chronology32.months();
        org.joda.time.DateTimeField dateTimeField44 = chronology32.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField44.getType();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-9223372005551999989L) + "'", long39 == (-9223372005551999989L));
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        int int35 = mutablePeriod33.getMinutes();
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        boolean boolean42 = mutablePeriod33.isSupported(durationFieldType38);
        long long45 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology22.withZone(dateTimeZone46);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 11, chronology47);
        org.joda.time.DurationField durationField49 = chronology47.hours();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.DateTime dateTime52 = dateTime50.withMillisOfDay(26156634);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 25755235L + "'", long45 == 25755235L);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        boolean boolean8 = interval5.isAfter(100L);
        org.joda.time.DateTime dateTime9 = interval5.getEnd();
        int int10 = dateTime9.getYearOfEra();
        org.joda.time.DateTime.Property property11 = dateTime9.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateMidnight23.toDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusDays(9);
        int int29 = dateTime26.getEra();
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = org.joda.time.DateMidnight.now(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime20.withZoneRetainFields(dateTimeZone31);
        int int36 = dateTime20.getYearOfCentury();
        org.joda.time.DateTime dateTime37 = dateTime20.toDateTimeISO();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration39 = interval38.toDuration();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusMonths((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight42.withDayOfMonth((int) (byte) 1);
        org.joda.time.Interval interval47 = dateMidnight42.toInterval();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(0L, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        int int54 = dateMidnight53.getEra();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        java.lang.Object obj60 = mutablePeriod59.clone();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(0L, 100L, periodType63, chronology64);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone68);
        org.joda.time.Duration duration70 = mutablePeriod59.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight53, (org.joda.time.ReadableDuration) duration70);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight50, (org.joda.time.ReadableDuration) duration70, periodType72);
        org.joda.time.Interval interval74 = interval47.withDurationAfterStart((org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone76);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight77.minusMonths((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateMidnight77);
        boolean boolean81 = duration39.isEqual((org.joda.time.ReadableDuration) duration70);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 70 + "'", int36 == 70);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "PT0.100S");
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        int int35 = mutablePeriod33.getMinutes();
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        boolean boolean42 = mutablePeriod33.isSupported(durationFieldType38);
        long long45 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 25755035, 2);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 11, chronology22);
        int int47 = localDate46.getDayOfWeek();
        org.joda.time.Chronology chronology48 = localDate46.getChronology();
        org.joda.time.LocalDate localDate50 = localDate46.plusDays(26050222);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 25755235L + "'", long45 == 25755235L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(localDate50);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime15 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime17 = property13.addCopy((long) 10);
        org.joda.time.LocalTime localTime18 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime20 = localTime18.minusSeconds(25887018);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime22 = localTime20.withMinuteOfHour(25955584);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25955584 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime6.minuteOfDay();
        org.joda.time.DateTime.Property property10 = dateTime6.monthOfYear();
        org.joda.time.DateTime.Property property11 = dateTime6.centuryOfEra();
        org.joda.time.LocalDate localDate12 = dateTime6.toLocalDate();
        org.joda.time.DateTime.Property property13 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime15 = property13.setCopy(1969);
        int int16 = dateTime15.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime15.withMonthOfYear((-35));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -35 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        java.lang.String str41 = interval5.toString();
        org.joda.time.MutableInterval mutableInterval42 = interval5.toMutableInterval();
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType45 = periodType44.withSecondsRemoved();
        org.joda.time.Period period46 = interval43.toPeriod(periodType44);
        org.joda.time.Chronology chronology47 = interval43.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.dayOfMonth();
        long long51 = dateTimeField48.add((long) 26, 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z" + "'", str41, "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 26L + "'", long51 == 26L);
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology23.withZone(dateTimeZone47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 11, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = dateTimeField50.getType();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = dateTimeField50.getAsText(894, locale53);
        java.util.Calendar.Builder builder55 = builder0.setLocale(locale53);
        java.util.Date date61 = new java.util.Date(0, 292269054, 5, 10, 894);
        org.joda.time.LocalDate localDate62 = org.joda.time.LocalDate.fromDateFields(date61);
        java.util.Calendar.Builder builder63 = builder0.setInstant(date61);
        java.util.Locale locale64 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale65 = locale64.stripExtensions();
        java.lang.String str66 = locale65.getLanguage();
        java.lang.String str67 = locale65.getISO3Language();
        java.util.Calendar.Builder builder68 = builder63.setLocale(locale65);
        java.lang.String str69 = locale65.toLanguageTag();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25755235L + "'", long46 == 25755235L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "894" + "'", str54, "894");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Jul 06 00:54:00 GMT+00:00 24357654");
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "zh" + "'", str66, "zh");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "zho" + "'", str67, "zho");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "zh-CN" + "'", str69, "zh-CN");
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays(25755035);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears((-17639));
        org.joda.time.DateTime dateTime17 = dateTime13.withSecondOfMinute(22);
        org.joda.time.YearMonthDay yearMonthDay18 = dateTime17.toYearMonthDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay5.minusSeconds(5);
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = property10.getAsText(locale11);
        org.joda.time.TimeOfDay timeOfDay13 = property10.withMinimumValue();
        int int14 = property10.get();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "23" + "'", str12, "23");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        java.io.IOException iOException4 = new java.io.IOException("PT0.100S");
        java.lang.Throwable[] throwableArray5 = iOException4.getSuppressed();
        java.io.IOException iOException7 = new java.io.IOException("PT0.100S");
        java.io.IOException iOException9 = new java.io.IOException();
        java.io.IOException iOException10 = new java.io.IOException("hi!", (java.lang.Throwable) iOException9);
        iOException7.addSuppressed((java.lang.Throwable) iOException9);
        iOException4.addSuppressed((java.lang.Throwable) iOException9);
        java.io.IOException iOException13 = new java.io.IOException("zh", (java.lang.Throwable) iOException9);
        java.io.IOException iOException14 = new java.io.IOException("java.util.GregorianCalendar[time=1645513757582,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=9,SECOND=17,MILLISECOND=582,ZONE_OFFSET=0,DST_OFFSET=0]", (java.lang.Throwable) iOException9);
        java.io.IOException iOException15 = new java.io.IOException("DurationField[weeks]", (java.lang.Throwable) iOException14);
        java.io.IOException iOException17 = new java.io.IOException();
        java.io.IOException iOException18 = new java.io.IOException("hi!", (java.lang.Throwable) iOException17);
        java.lang.Throwable[] throwableArray19 = iOException18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = iOException18.getSuppressed();
        java.io.IOException iOException21 = new java.io.IOException((java.lang.Throwable) iOException18);
        iOException15.addSuppressed((java.lang.Throwable) iOException18);
        java.io.IOException iOException27 = new java.io.IOException("PT0.100S");
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        java.io.IOException iOException30 = new java.io.IOException("PT0.100S");
        java.io.IOException iOException32 = new java.io.IOException();
        java.io.IOException iOException33 = new java.io.IOException("hi!", (java.lang.Throwable) iOException32);
        iOException30.addSuppressed((java.lang.Throwable) iOException32);
        iOException27.addSuppressed((java.lang.Throwable) iOException32);
        java.io.IOException iOException36 = new java.io.IOException("zh", (java.lang.Throwable) iOException32);
        java.io.IOException iOException37 = new java.io.IOException("java.util.GregorianCalendar[time=1645513757582,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=9,SECOND=17,MILLISECOND=582,ZONE_OFFSET=0,DST_OFFSET=0]", (java.lang.Throwable) iOException32);
        java.io.IOException iOException38 = new java.io.IOException("DurationField[weeks]", (java.lang.Throwable) iOException37);
        iOException18.addSuppressed((java.lang.Throwable) iOException38);
        java.io.IOException iOException40 = new java.io.IOException((java.lang.Throwable) iOException18);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withCenturyOfEra(8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        int int18 = dateMidnight17.getEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateMidnight17.toDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusDays(9);
        int int23 = dateTime20.getEra();
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime();
        int int25 = dateTime20.getWeekOfWeekyear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology29);
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = null;
        org.joda.time.format.DateTimeParser dateTimeParser32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter31, dateTimeParser32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter33.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        int int39 = dateMidnight38.getEra();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = dateMidnight38.toDateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusDays(9);
        int int44 = dateTime41.getEra();
        org.joda.time.DateTime dateTime45 = dateTime41.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime45.getZone();
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter33.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime50 = yearMonthDay30.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime20.toMutableDateTime(dateTimeZone46);
        int int52 = dateMidnight10.compareTo((org.joda.time.ReadableInstant) mutableDateTime51);
        java.lang.String str54 = mutableDateTime51.toString("1969-07-16");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology58);
        int int60 = yearMonthDay59.size();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(0L, 100L, periodType63, chronology64);
        java.lang.Object obj66 = mutablePeriod65.clone();
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(0L, 100L, periodType69, chronology70);
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay59.plus((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime75 = yearMonthDay73.toDateTimeAtCurrentTime(dateTimeZone74);
        org.joda.time.DateTime.Property property76 = dateTime75.dayOfWeek();
        boolean boolean77 = mutableDateTime51.isBefore((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime79.millisOfDay();
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime79.secondOfDay();
        java.lang.String str82 = property81.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime83 = property81.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime84 = property81.roundCeiling();
        int int85 = mutableDateTime84.getYearOfCentury();
        int int86 = mutableDateTime51.compareTo((org.joda.time.ReadableInstant) mutableDateTime84);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1969-07-16" + "'", str54, "1969-07-16");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0" + "'", str82, "0");
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 22 + "'", int85 == 22);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(25797938);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        int int12 = dateMidnight11.getEra();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.Duration duration28 = mutablePeriod17.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadableDuration) duration28, periodType30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        int int35 = dateMidnight34.getEra();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        int int56 = dateMidnight55.getEra();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(0L, 100L, periodType59, chronology60);
        java.lang.Object obj62 = mutablePeriod61.clone();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(0L, 100L, periodType65, chronology66);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone70);
        org.joda.time.Duration duration72 = mutablePeriod61.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight55, (org.joda.time.ReadableDuration) duration72);
        boolean boolean74 = duration51.isLongerThan((org.joda.time.ReadableDuration) duration72);
        java.lang.String str75 = duration72.toString();
        boolean boolean76 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Interval interval77 = interval5.withDurationAfterStart((org.joda.time.ReadableDuration) duration72);
        long long78 = interval77.getEndMillis();
        org.joda.time.Interval interval80 = interval77.withEndMillis(0L);
        org.joda.time.DateTime dateTime81 = interval80.getEnd();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT0.100S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "PT0.100S");
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT0.100S" + "'", str75, "PT0.100S");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-61038316799900L) + "'", long78 == (-61038316799900L));
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusDays((int) ' ');
        java.util.Date date5 = localDateTime4.toDate();
        java.lang.String str6 = localDateTime4.toString();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.era();
        java.lang.String str8 = property7.getAsText();
        org.joda.time.LocalDateTime localDateTime9 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 21 07:16:24 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-01-21T07:16:24.864" + "'", str6, "2022-01-21T07:16:24.864");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "AD" + "'", str8, "AD");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime11 = dateTime7.withFieldAdded(durationFieldType9, 5);
        org.joda.time.TimeOfDay timeOfDay12 = dateTime7.toTimeOfDay();
        int int13 = timeOfDay12.getMinuteOfHour();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod18.setMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        org.joda.time.Duration duration40 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, (org.joda.time.ReadableDuration) duration40);
        mutablePeriod18.add((org.joda.time.ReadableDuration) duration40);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay12.minus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.minusMinutes(25928765);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(666600L, periodType2);
        int int5 = mutablePeriod4.getMonths();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Minutes" + "'", str3, "Minutes");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        java.lang.String str24 = chronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfDay();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(0L, (long) 1, chronology23);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(10L);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) yearMonthDay28, (long) 8);
        org.joda.time.DateTimeField dateTimeField31 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField32 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField33 = chronology23.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        java.lang.Object obj42 = mutablePeriod41.clone();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, 100L, periodType45, chronology46);
        mutablePeriod41.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone50);
        org.joda.time.Duration duration52 = mutablePeriod41.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight36.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.LocalDate localDate54 = dateMidnight53.toLocalDate();
        org.joda.time.LocalDate.Property property55 = localDate54.dayOfYear();
        org.joda.time.LocalDate localDate56 = property55.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate58 = localDate56.withWeekyear(11);
        long long60 = chronology23.set((org.joda.time.ReadablePartial) localDate56, (-604800001L));
        org.joda.time.LocalDate localDate62 = localDate56.plusDays(713);
        org.joda.time.LocalDate.Property property63 = localDate62.yearOfCentury();
        org.joda.time.LocalDate.Property property64 = localDate62.dayOfWeek();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "PT0.100S");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 86399999L + "'", long60 == 86399999L);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 53);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime3.add(durationFieldType4, 24);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFieldAdded(durationFieldType4, 111);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withYear((int) '#');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.withChronology(chronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.withMonthOfYear(137);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 137 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((java.lang.Integer) 56);
        java.util.Locale locale21 = dateTimeFormatter18.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = dateTimeFormatter18.parseLocalDateTime("P25787857D");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(locale21);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.clockhourOfHalfday();
        org.joda.time.DurationField durationField43 = chronology37.seconds();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DateTime.Property property46 = dateTime45.dayOfMonth();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.hourOfDay();
        java.lang.String str14 = timeOfDay11.toString("2022");
        int int15 = timeOfDay11.getSecondOfMinute();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks(70);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.year();
        org.joda.time.Interval interval14 = property13.toInterval();
        boolean boolean15 = interval14.isBeforeNow();
        org.joda.time.DateTime dateTime16 = interval14.getEnd();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = localDate37.toInterval(dateTimeZone38);
        java.lang.String str40 = interval39.toString();
        long long41 = interval39.toDurationMillis();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology45);
        org.joda.time.Interval interval47 = yearMonthDay46.toInterval();
        org.joda.time.Period period48 = interval47.toPeriod();
        long long49 = interval47.getStartMillis();
        boolean boolean50 = interval39.isBefore((org.joda.time.ReadableInterval) interval47);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology54);
        org.joda.time.Interval interval56 = yearMonthDay55.toInterval();
        org.joda.time.Period period57 = interval56.toPeriod();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology61);
        org.joda.time.Interval interval63 = yearMonthDay62.toInterval();
        org.joda.time.Period period64 = interval63.toPeriod();
        long long65 = interval63.getStartMillis();
        org.joda.time.Interval interval66 = interval56.overlap((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology70);
        org.joda.time.Interval interval72 = yearMonthDay71.toInterval();
        org.joda.time.Interval interval74 = interval72.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime75 = interval74.getEnd();
        boolean boolean76 = interval63.contains((org.joda.time.ReadableInterval) interval74);
        boolean boolean77 = interval47.abuts((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Interval interval78 = interval14.overlap((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(chronology79);
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.year();
        org.joda.time.LocalDateTime localDateTime82 = property81.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.dayOfYear();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime82.withYear(11);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.plusSeconds(25762033);
        int int88 = localDateTime87.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = interval78.equals((java.lang.Object) localDateTime87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str40, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 86400000L + "'", long41 == 86400000L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-61038316800000L) + "'", long49 == (-61038316800000L));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-61038316800000L) + "'", long65 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(interval78);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 11 + "'", int88 == 11);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withDayOfMonth((int) (byte) 1);
        org.joda.time.Interval interval7 = dateMidnight2.toInterval();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration30, periodType32);
        org.joda.time.Interval interval34 = interval7.withDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.Period period37 = interval7.toPeriod(periodType35);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology41);
        org.joda.time.Interval interval43 = yearMonthDay42.toInterval();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.millisOfDay();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime45.secondOfDay();
        java.lang.String str48 = property47.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime49 = property47.getMutableDateTime();
        boolean boolean50 = interval43.isBefore((org.joda.time.ReadableInstant) mutableDateTime49);
        boolean boolean51 = interval43.containsNow();
        boolean boolean52 = interval7.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Interval interval54 = interval7.withStartMillis((long) 26102037);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval54);
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(292269054);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        date1.setHours(6);
        java.util.Date date11 = new java.util.Date(0, 52, 25762216, 2, 2022, 32772);
        boolean boolean12 = date1.after(date11);
        date1.setMonth(25773844);
        date1.setDate(429);
        org.junit.Assert.assertEquals(date1.toString(), "Sun Jul 03 06:00:00 GMT+00:00 2149791");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Nov 18 20:48:12 GMT+00:00 72438");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfDay();
        int int10 = dateTimeField8.getLeapAmount((long) 25806823);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(25888624);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withDayOfMonth((int) (byte) 1);
        org.joda.time.Interval interval7 = dateMidnight2.toInterval();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration30, periodType32);
        org.joda.time.Interval interval34 = interval7.withDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.Period period37 = interval7.toPeriod(periodType35);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology41);
        org.joda.time.Interval interval43 = yearMonthDay42.toInterval();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.millisOfDay();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime45.secondOfDay();
        java.lang.String str48 = property47.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime49 = property47.getMutableDateTime();
        boolean boolean50 = interval43.isBefore((org.joda.time.ReadableInstant) mutableDateTime49);
        boolean boolean51 = interval43.containsNow();
        boolean boolean52 = interval7.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Period period53 = interval7.toPeriod();
        org.joda.time.Days days54 = period53.toStandardDays();
        org.joda.time.Period period56 = period53.minusWeeks(25888624);
        org.joda.time.Period period58 = period53.minusMillis(25945297);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 25755035, 2);
        org.joda.time.Period period46 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.hours();
        java.lang.String str48 = durationFieldType47.toString();
        org.joda.time.Period period50 = period46.withField(durationFieldType47, 2);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.hours();
        java.lang.String str52 = durationFieldType51.toString();
        boolean boolean53 = period46.isSupported(durationFieldType51);
        java.lang.String str54 = durationFieldType51.getName();
        int int55 = mutablePeriod32.indexOf(durationFieldType51);
        mutablePeriod32.addDays(2021);
        mutablePeriod32.addHours(292278993);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology63);
        org.joda.time.Interval interval65 = yearMonthDay64.toInterval();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Interval interval67 = interval65.withPeriodBeforeEnd(readablePeriod66);
        mutablePeriod32.setPeriod((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Chronology chronology69 = interval67.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.era();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.clockhourOfDay();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25755235L + "'", long44 == 25755235L);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hours" + "'", str48, "hours");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hours" + "'", str52, "hours");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateMidnight8.toDateTime(chronology10);
        java.util.Date date12 = dateTime11.toDate();
        org.joda.time.YearMonthDay yearMonthDay13 = org.joda.time.YearMonthDay.fromDateFields(date12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.plusYears(25758818);
        java.lang.String str16 = yearMonthDay13.toString();
        java.util.Date date18 = new java.util.Date((long) 0);
        int int19 = date18.getDay();
        org.joda.time.YearMonthDay yearMonthDay20 = org.joda.time.YearMonthDay.fromDateFields(date18);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        org.joda.time.Duration duration40 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight24.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDate localDate42 = dateMidnight41.toLocalDate();
        org.joda.time.Chronology chronology43 = localDate42.getChronology();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        java.lang.Object obj49 = mutablePeriod48.clone();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        int int56 = mutablePeriod54.getMinutes();
        org.joda.time.Period period58 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.hours();
        java.lang.String str60 = durationFieldType59.toString();
        org.joda.time.Period period62 = period58.withField(durationFieldType59, 2);
        boolean boolean63 = mutablePeriod54.isSupported(durationFieldType59);
        long long66 = chronology43.add((org.joda.time.ReadablePeriod) mutablePeriod54, (long) 25755035, 2);
        boolean boolean67 = durationFieldType21.isSupported(chronology43);
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay20.withChronologyRetainFields(chronology43);
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay68.minusYears(25756429);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHours(11);
        org.joda.time.DateTime dateTime73 = yearMonthDay70.toDateTimeAtCurrentTime(dateTimeZone72);
        java.lang.String str75 = dateTimeZone72.getNameKey((long) 21);
        org.joda.time.DateMidnight dateMidnight76 = yearMonthDay13.toDateMidnight(dateTimeZone72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter2.withZone(dateTimeZone72);
        java.lang.String str78 = dateTimeZone72.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hours" + "'", str60, "hours");
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 25755235L + "'", long66 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+11:00" + "'", str78, "+11:00");
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.LocalTime localTime4 = timeOfDay2.toLocalTime();
        org.joda.time.Period period6 = org.joda.time.Period.hours((int) (byte) -1);
        org.joda.time.LocalTime localTime7 = localTime4.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalTime.Property property8 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime10 = localTime4.withMillisOfDay(32769);
        org.joda.time.LocalTime.Property property11 = localTime10.minuteOfHour();
        org.joda.time.LocalTime.Property property12 = localTime10.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property14 = localTime13.minuteOfHour();
        org.joda.time.LocalTime.Property property15 = localTime13.hourOfDay();
        int int16 = localTime13.getMinuteOfHour();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.addWrapField((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfWeek();
        int int13 = mutableDateTime4.get(dateTimeField12);
        mutableDateTime4.setMillisOfDay(26);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.addWrapField((int) (short) 0);
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone43);
        org.joda.time.Duration duration45 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight29.plus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.LocalDate localDate47 = dateMidnight46.toLocalDate();
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        java.lang.Object obj54 = mutablePeriod53.clone();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        mutablePeriod53.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        int int61 = mutablePeriod59.getMinutes();
        org.joda.time.Period period63 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.hours();
        java.lang.String str65 = durationFieldType64.toString();
        org.joda.time.Period period67 = period63.withField(durationFieldType64, 2);
        boolean boolean68 = mutablePeriod59.isSupported(durationFieldType64);
        long long71 = chronology48.add((org.joda.time.ReadablePeriod) mutablePeriod59, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.Chronology chronology73 = chronology48.withZone(dateTimeZone72);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate(chronology73);
        org.joda.time.DurationField durationField75 = chronology73.halfdays();
        org.joda.time.DurationField durationField76 = durationFieldType23.getField(chronology73);
        mutableDateTime20.setChronology(chronology73);
        org.joda.time.DateTimeField dateTimeField78 = chronology73.dayOfYear();
        org.joda.time.DateTimeField dateTimeField79 = chronology73.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField80 = chronology73.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime81 = mutableDateTime4.toMutableDateTime(chronology73);
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime81.yearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0.100S");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hours" + "'", str65, "hours");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 25755235L + "'", long71 == 25755235L);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusHours(25793899);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.plusMillis(86399);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusHours((int) (byte) 1);
        org.joda.time.Chronology chronology11 = timeOfDay10.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(86400000, 111, 25918840, 36, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86400000 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        int int9 = property8.get();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        java.lang.Object obj15 = mutablePeriod14.clone();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        org.joda.time.Duration duration25 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        mutablePeriod14.addMillis(0);
        mutablePeriod14.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0L, 100L, periodType54, chronology55);
        java.lang.Object obj57 = mutablePeriod56.clone();
        java.lang.String str58 = mutablePeriod56.toString();
        mutableDateTime51.add((org.joda.time.ReadablePeriod) mutablePeriod56, 2022);
        mutablePeriod14.setPeriod((org.joda.time.ReadableInstant) dateMidnight49, (org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime51.addWeekyears((int) (byte) 0);
        mutableDateTime51.setSecondOfMinute(8);
        int int66 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.DateTimeField dateTimeField67 = property8.getField();
        org.joda.time.DateTimeField dateTimeField68 = property8.getField();
        org.joda.time.TimeOfDay timeOfDay70 = property8.addToCopy(25888490);
        int int71 = property8.get();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PT0.100S" + "'", str58, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 25886);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.lang.String str15 = dateTimeZone10.getShortName((long) 348, locale13);
        java.util.TimeZone timeZone16 = dateTimeZone10.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.yearOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645514185604,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-15T07:10:20.456\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=25,MILLISECOND=604,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology23.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.year();
        org.joda.time.DurationField durationField50 = chronology48.minutes();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(15);
        org.joda.time.Chronology chronology53 = chronology48.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = chronology48.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((-967894379785000L), dateTimeZone57);
        org.joda.time.LocalDate localDate60 = localDate58.plusWeeks(6);
        org.joda.time.LocalDate.Property property61 = localDate58.dayOfWeek();
        int[] intArray63 = chronology48.get((org.joda.time.ReadablePartial) localDate58, 845337621494L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay64 = new org.joda.time.TimeOfDay(17017375, 976, chronology48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17017375 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25755235L + "'", long46 == 25755235L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1996, 10, 15]");
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType6 = periodType5.withMillisRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 10, (long) '#', periodType6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        int int11 = dateMidnight10.getEra();
        org.joda.time.DateMidnight.Property property12 = dateMidnight10.monthOfYear();
        org.joda.time.DateMidnight dateMidnight14 = property12.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property12.getFieldType();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.year();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        boolean boolean24 = dateTimeFieldType15.isSupported(chronology23);
        org.joda.time.DurationField durationField25 = chronology23.hours();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 9, (long) (byte) -1, periodType6, chronology23);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.clockhourOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 25861, chronology23);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int10 = property8.getMaximumTextLength(locale9);
        org.joda.time.DateTime dateTime12 = property8.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTime dateTime13 = property8.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField14 = property8.getField();
        java.util.Locale locale16 = java.util.Locale.US;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        java.lang.String str18 = dateTimeField14.getAsShortText(26073509, locale16);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645514185724,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-15T07:10:20.456\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=25,MILLISECOND=724,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "26073509" + "'", str18, "26073509");
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        int int4 = localDate3.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateMidnight13.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusDays(9);
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((int) (byte) -1, 1, (int) (short) 1, (int) (short) 10, (int) (short) 0, 8, dateTimeZone21);
        org.joda.time.Interval interval25 = localDate3.toInterval(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths((-6));
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate11 = property7.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.LocalDate.Property property13 = localDate11.property(dateTimeFieldType12);
        org.joda.time.LocalDate localDate14 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight(dateTimeZone15);
        org.joda.time.LocalDate.Property property17 = localDate14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval20 = localDate14.toInterval(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDate14.toDateTimeAtCurrentTime();
        int int22 = localDate14.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19 + "'", int22 == 19);
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getHours();
        date0.setTime(0L);
        int int4 = date0.getMinutes();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks(100);
        org.joda.time.Chronology chronology11 = localDate8.getChronology();
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate14 = localDate8.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property15 = localDate8.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.roundFloor();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology24);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay25.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime20, (org.joda.time.ReadableInstant) dateMidnight26, periodType30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        int int35 = dateMidnight34.getEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateMidnight34.toDateTime(chronology36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusDays(9);
        int int40 = dateTime37.getEra();
        org.joda.time.DateTime dateTime41 = dateTime37.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime41.getZone();
        long long45 = dateTimeZone42.adjustOffset((long) 5, true);
        boolean boolean47 = dateTimeZone42.isStandardOffset((long) 3);
        mutableDateTime20.setZoneRetainFields(dateTimeZone42);
        java.lang.String str50 = dateTimeZone42.getShortName((long) (-292275054));
        org.joda.time.DateMidnight dateMidnight51 = localDate8.toDateMidnight(dateTimeZone42);
        java.util.Date date52 = localDate8.toDate();
        int int53 = date52.getYear();
        int int54 = date52.getSeconds();
        boolean boolean55 = date0.before(date52);
        org.junit.Assert.assertEquals(date0.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 7 + "'", int1 == 7);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 5L + "'", long45 == 5L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 70 + "'", int53 == 70);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.clockhourOfHalfday();
        org.joda.time.DurationField durationField43 = chronology37.seconds();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate.Property property45 = localDate44.yearOfEra();
        org.joda.time.LocalDate localDate46 = property45.roundCeilingCopy();
        org.joda.time.LocalDate localDate47 = property45.roundCeilingCopy();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        long long7 = interval5.getStartMillis();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType13 = periodType12.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(4000L, (long) (byte) 100, periodType12);
        org.joda.time.PeriodType periodType15 = periodType12.withSecondsRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withYearsRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 25810113, periodType16);
        org.joda.time.Period period18 = new org.joda.time.Period((long) 33, periodType16);
        org.joda.time.Interval interval19 = interval5.withPeriodAfterStart((org.joda.time.ReadablePeriod) period18);
        int int20 = period18.size();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-61038316800000L) + "'", long7 == (-61038316800000L));
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay5.minusSeconds(5);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay5.plusMillis(28);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.Duration duration31 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight15.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.LocalDate localDate33 = dateMidnight32.toLocalDate();
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        java.lang.Object obj40 = mutablePeriod39.clone();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
        int int47 = mutablePeriod45.getMinutes();
        org.joda.time.Period period49 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.hours();
        java.lang.String str51 = durationFieldType50.toString();
        org.joda.time.Period period53 = period49.withField(durationFieldType50, 2);
        boolean boolean54 = mutablePeriod45.isSupported(durationFieldType50);
        long long57 = chronology34.add((org.joda.time.ReadablePeriod) mutablePeriod45, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.Chronology chronology59 = chronology34.withZone(dateTimeZone58);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 11, chronology59);
        org.joda.time.DurationField durationField61 = chronology59.hours();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((java.lang.Object) timeOfDay5, chronology59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.100S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hours" + "'", str51, "hours");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 25755235L + "'", long57 == 25755235L);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateMidnight dateMidnight8 = dateTime6.toDateMidnight();
        org.joda.time.DateTime.Property property9 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime11 = dateTime6.plusMinutes(25871143);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = property12.setCopy("2022-02-15T07:11:35.623");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-15T07:11:35.623\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = org.joda.time.DateMidnight.now(dateTimeZone10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone10);
        int int15 = localDate14.size();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        org.joda.time.Period period44 = period42.withMillis((int) '#');
        org.joda.time.LocalDate localDate45 = localDate36.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.LocalDate localDate47 = localDate45.minusYears(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.era();
        boolean boolean49 = localDate47.isSupported(dateTimeFieldType48);
        int int50 = localDate14.get(dateTimeFieldType48);
        org.joda.time.LocalDate.Property property51 = localDate14.dayOfYear();
        org.joda.time.LocalDate localDate52 = property51.getLocalDate();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate52);
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        mutableDateTime5.setTime((int) (byte) 1, 14, (int) (short) 10, (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime5.setZoneRetainFields(dateTimeZone11);
        int int13 = mutableDateTime5.getYearOfCentury();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        long long6 = java.util.Date.UTC(25809785, 593, 25917940, 421, 25887, 25805812);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 816716835549832000L + "'", long6 == 816716835549832000L);
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology6);
        org.joda.time.Interval interval8 = yearMonthDay7.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology13);
        org.joda.time.Interval interval15 = yearMonthDay14.toInterval();
        org.joda.time.Period period16 = interval15.toPeriod();
        long long17 = interval15.getStartMillis();
        org.joda.time.Interval interval18 = interval8.overlap((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.Duration duration37 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight21.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDate localDate39 = dateMidnight38.toLocalDate();
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        java.lang.String str41 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfDay();
        org.joda.time.Interval interval43 = interval8.withChronology(chronology40);
        org.joda.time.DurationField durationField44 = chronology40.seconds();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.centuryOfEra();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 1, periodType1, chronology40);
        int int47 = period46.size();
        org.joda.time.Period period49 = period46.minusMillis((int) (byte) 0);
        int int50 = period49.getMinutes();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61038316800000L) + "'", long17 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.monthOfYear();
        org.joda.time.DateMidnight dateMidnight2 = property1.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = property1.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight5 = property1.addToCopy(31556952);
        org.joda.time.DateMidnight dateMidnight7 = property1.addWrapFieldToCopy(25871024);
        org.joda.time.DateTimeField dateTimeField8 = property1.getField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        java.lang.Object obj15 = mutablePeriod14.clone();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        org.joda.time.Duration duration25 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight9.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.LocalDate localDate27 = dateMidnight26.toLocalDate();
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        java.lang.String str29 = chronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.minuteOfHour();
        java.lang.String str31 = chronology28.toString();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(176, 25902750, 146, 740, (-23), 1973, 19, chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 740 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "PT0.100S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withDayOfMonth((int) (byte) 1);
        org.joda.time.Interval interval7 = dateMidnight2.toInterval();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration30, periodType32);
        org.joda.time.Interval interval34 = interval7.withDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.Period period37 = interval7.toPeriod(periodType35);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology41);
        org.joda.time.Interval interval43 = yearMonthDay42.toInterval();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.millisOfDay();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime45.secondOfDay();
        java.lang.String str48 = property47.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime49 = property47.getMutableDateTime();
        boolean boolean50 = interval43.isBefore((org.joda.time.ReadableInstant) mutableDateTime49);
        boolean boolean51 = interval43.containsNow();
        boolean boolean52 = interval7.overlaps((org.joda.time.ReadableInterval) interval43);
        java.util.Calendar.Builder builder53 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder55 = builder53.setInstant((long) 894);
        java.util.Calendar.Builder builder57 = builder55.setLenient(false);
        boolean boolean58 = interval7.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology62);
        org.joda.time.DateTime dateTime64 = yearMonthDay63.toDateTimeAtCurrentTime();
        java.util.GregorianCalendar gregorianCalendar65 = dateTime64.toGregorianCalendar();
        org.joda.time.DateTime dateTime67 = dateTime64.minusMinutes(25785);
        boolean boolean68 = interval7.isAfter((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(0L, dateTimeZone70);
        org.joda.time.LocalDate localDate72 = dateMidnight71.toLocalDate();
        org.joda.time.LocalDate localDate74 = localDate72.minusWeeks(100);
        org.joda.time.Chronology chronology75 = localDate72.getChronology();
        org.joda.time.LocalDate.Property property76 = localDate72.yearOfCentury();
        org.joda.time.LocalDate localDate77 = property76.roundCeilingCopy();
        org.joda.time.LocalDate localDate78 = property76.roundFloorCopy();
        org.joda.time.LocalDate localDate80 = property76.addToCopy(7);
        org.joda.time.DateMidnight dateMidnight81 = localDate80.toDateMidnight();
        org.joda.time.LocalDate.Property property82 = localDate80.dayOfWeek();
        boolean boolean83 = property82.isLeap();
        org.joda.time.LocalDate localDate84 = property82.roundCeilingCopy();
        org.joda.time.LocalDate localDate86 = localDate84.plusYears((int) '#');
        boolean boolean87 = dateTime64.equals((java.lang.Object) '#');
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(gregorianCalendar65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.roundFloor();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.weekOfWeekyear();
        int int9 = dateMidnight2.compareTo((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime7.addMinutes(840);
        org.joda.time.Instant instant12 = mutableDateTime7.toInstant();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.dayOfWeek();
        java.util.Date date15 = new java.util.Date((long) 0);
        int int16 = date15.getDay();
        org.joda.time.YearMonthDay yearMonthDay17 = org.joda.time.YearMonthDay.fromDateFields(date15);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.Duration duration37 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight21.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDate localDate39 = dateMidnight38.toLocalDate();
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        java.lang.Object obj46 = mutablePeriod45.clone();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 100L, periodType49, chronology50);
        mutablePeriod45.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod51);
        int int53 = mutablePeriod51.getMinutes();
        org.joda.time.Period period55 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.hours();
        java.lang.String str57 = durationFieldType56.toString();
        org.joda.time.Period period59 = period55.withField(durationFieldType56, 2);
        boolean boolean60 = mutablePeriod51.isSupported(durationFieldType56);
        long long63 = chronology40.add((org.joda.time.ReadablePeriod) mutablePeriod51, (long) 25755035, 2);
        boolean boolean64 = durationFieldType18.isSupported(chronology40);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay17.withChronologyRetainFields(chronology40);
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay65.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property68 = yearMonthDay65.year();
        org.joda.time.YearMonthDay yearMonthDay70 = property68.addToCopy(32769);
        org.joda.time.DateTimeField dateTimeField71 = property68.getField();
        org.joda.time.DateTimeField dateTimeField72 = property68.getField();
        org.joda.time.DateTimeField dateTimeField73 = property68.getField();
        org.joda.time.YearMonthDay yearMonthDay74 = property68.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField75 = property68.getField();
        mutableDateTime7.setRounding(dateTimeField75);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hours" + "'", str57, "hours");
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 25755235L + "'", long63 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.addToCopy(32769);
        org.joda.time.DateTimeField dateTimeField57 = property54.getField();
        java.lang.String str58 = property54.getName();
        org.joda.time.YearMonthDay yearMonthDay60 = property54.setCopy(1970);
        org.joda.time.DateMidnight dateMidnight61 = yearMonthDay60.toDateMidnight();
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(0L, 100L, periodType64, chronology65);
        java.lang.Object obj67 = mutablePeriod66.clone();
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(0L, 100L, periodType70, chronology71);
        mutablePeriod66.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone75);
        org.joda.time.Duration duration77 = mutablePeriod66.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight76);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = null;
        java.lang.String str79 = dateMidnight76.toString(dateTimeFormatter78);
        int int80 = dateMidnight76.getSecondOfDay();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((long) 6);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight76.minus((org.joda.time.ReadablePeriod) mutablePeriod82);
        mutablePeriod82.addSeconds(25787857);
        org.joda.time.DurationFieldType[] durationFieldTypeArray86 = mutablePeriod82.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay87 = yearMonthDay60.minus((org.joda.time.ReadablePeriod) mutablePeriod82);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.YearMonthDay yearMonthDay89 = yearMonthDay60.withChronologyRetainFields(chronology88);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "year" + "'", str58, "year");
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "PT0.100S");
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str79, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(durationFieldTypeArray86);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(yearMonthDay89);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        int int5 = dateMidnight4.getEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = dateMidnight4.toDateTime(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight10 = dateTime9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withDayOfYear(52);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.plusYears(25824226);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder15.setVariant("1AM19700");
        java.util.Locale.Builder builder18 = builder15.clear();
        java.util.Locale.Builder builder20 = builder15.setLanguage("YearDay");
        java.util.Locale locale21 = builder15.build();
        java.lang.String str23 = locale21.getExtension('a');
        java.util.Calendar calendar24 = dateMidnight10.toCalendar(locale21);
        java.lang.String str25 = timeZone1.getDisplayName(locale21);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "yearday");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Greenwich Mean Time" + "'", str25, "Greenwich Mean Time");
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Interval interval23 = interval21.withPeriodBeforeEnd(readablePeriod22);
        boolean boolean24 = interval5.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        int int28 = dateMidnight27.getEra();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        org.joda.time.Duration duration44 = mutablePeriod33.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, (org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        int int49 = dateMidnight48.getEra();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        java.lang.Object obj55 = mutablePeriod54.clone();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(0L, 100L, periodType58, chronology59);
        mutablePeriod54.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone63);
        org.joda.time.Duration duration65 = mutablePeriod54.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight48, (org.joda.time.ReadableDuration) duration65);
        boolean boolean67 = duration44.isLongerThan((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Interval interval68 = interval5.withDurationAfterStart((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Interval interval69 = interval5.toInterval();
        org.joda.time.MutableInterval mutableInterval70 = interval5.toMutableInterval();
        org.joda.time.Period period71 = interval5.toPeriod();
        org.joda.time.Period period73 = period71.minusWeeks(25787857);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0.100S");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "PT0.100S");
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(25885, (-46800000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25885 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.Duration duration15 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight14);
        mutablePeriod4.addMillis(0);
        mutablePeriod4.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        java.lang.String str48 = mutablePeriod46.toString();
        mutableDateTime41.add((org.joda.time.ReadablePeriod) mutablePeriod46, 2022);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) dateMidnight39, (org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.MutablePeriod mutablePeriod52 = mutablePeriod4.copy();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(0L, dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        int int59 = dateMidnight58.getEra();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        java.lang.Object obj65 = mutablePeriod64.clone();
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(0L, 100L, periodType68, chronology69);
        mutablePeriod64.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone73);
        org.joda.time.Duration duration75 = mutablePeriod64.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight58, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight55, (org.joda.time.ReadableDuration) duration75, periodType77);
        org.joda.time.Period period80 = period78.withMillis(21);
        org.joda.time.Period period82 = period80.minusSeconds((-2));
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) period80);
        mutablePeriod52.setDays(26005889);
        mutablePeriod52.addWeeks(25857530);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P25857530W26005889DT0.021S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P25857530W26005889DT0.021S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P25857530W26005889DT0.021S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0.100S" + "'", str48, "PT0.100S");
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT0.100S");
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period82);
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = property8.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.plusMinutes(59);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.secondOfMinute();
        int int13 = property12.get();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis((int) (short) 10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.centuryOfEra();
        int int8 = localDateTime6.getHourOfDay();
        int int9 = localDateTime6.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusMillis(22);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withPeriodAdded(readablePeriod12, 19);
        int int15 = localDateTime11.getYearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate9 = localDate3.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property10 = localDate3.weekOfWeekyear();
        java.util.Locale locale14 = new java.util.Locale("P", "PT0.100S", "Property[hourOfDay]");
        java.lang.String str15 = property10.getAsShortText(locale14);
        org.joda.time.LocalDate localDate16 = property10.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals(locale14.toString(), "p_PT0.100S_Property[hourOfDay]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("Hours");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        date1.setHours(6);
        java.util.Date date11 = new java.util.Date(0, 52, 25762216, 2, 2022, 32772);
        boolean boolean12 = date1.after(date11);
        date1.setMonth(25773844);
        int int15 = date1.getHours();
        date1.setMonth((-292275054));
        date1.setMonth(816);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 06:00:00 GMT+00:00 22206398");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Nov 18 20:48:12 GMT+00:00 72438");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology21.withZone(dateTimeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        int int51 = dateMidnight50.getEra();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = dateMidnight50.toDateTime(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusDays(9);
        int int56 = dateTime53.getEra();
        org.joda.time.DateTime dateTime57 = dateTime53.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime57.getZone();
        long long61 = dateTimeZone58.adjustOffset((long) 5, true);
        org.joda.time.Chronology chronology62 = chronology46.withZone(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField63 = chronology46.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField64 = chronology46.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = dateTimeField64.getType();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25755235L + "'", long44 == 25755235L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 5L + "'", long61 == 5L);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.addToCopy(32769);
        org.joda.time.DateTimeField dateTimeField57 = property54.getField();
        java.lang.String str58 = property54.getName();
        org.joda.time.YearMonthDay yearMonthDay60 = property54.setCopy(1970);
        org.joda.time.DateMidnight dateMidnight61 = yearMonthDay60.toDateMidnight();
        int int62 = yearMonthDay60.getMonthOfYear();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "year" + "'", str58, "year");
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        int int6 = dateMidnight5.getEra();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, 100L, periodType9, chronology10);
        java.lang.Object obj12 = mutablePeriod11.clone();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.Duration duration22 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableDuration) duration22, periodType24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType30 = periodType29.withMonthsRemoved();
        org.joda.time.PeriodType periodType31 = periodType30.withYearsRemoved();
        org.joda.time.PeriodType periodType32 = periodType30.withDaysRemoved();
        org.joda.time.PeriodType periodType33 = periodType30.withDaysRemoved();
        org.joda.time.Period period34 = new org.joda.time.Period(904608000000L, (long) 25762216, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration22, readableInstant26, periodType33);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "PT0.100S");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime11 = property9.setCopy(15);
        java.util.Locale locale12 = java.util.Locale.UK;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        calendar13.setMinimalDaysInFirstWeek(25762033);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=15002,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=25762033,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=15,MILLISECOND=2,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(25790400000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = localTime1.withHourOfDay(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        int int19 = dateMidnight18.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateMidnight18.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays(9);
        int int24 = dateTime21.getEra();
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        long long29 = dateTimeZone26.adjustOffset((long) 5, true);
        boolean boolean31 = dateTimeZone26.isStandardOffset((long) 3);
        mutableDateTime4.setZoneRetainFields(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.dayOfWeek();
        int int35 = mutableDateTime33.getWeekyear();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = null;
        org.joda.time.format.DateTimeParser dateTimeParser53 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter52, dateTimeParser53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter54.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter56.withPivotYear(7);
        org.joda.time.tz.NameProvider nameProvider59 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology63);
        org.joda.time.Interval interval65 = yearMonthDay64.toInterval();
        org.joda.time.DateTime dateTime66 = yearMonthDay64.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property68 = dateTime66.property(dateTimeFieldType67);
        org.joda.time.DateTime dateTime69 = property68.getDateTime();
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale71 = locale70.stripExtensions();
        int int72 = property68.getMaximumShortTextLength(locale70);
        java.lang.String str75 = nameProvider59.getName(locale70, "", "ISOChronology[UTC]");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter56.withLocale(locale70);
        boolean boolean77 = duration51.equals((java.lang.Object) locale70);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration51, 26);
        int int80 = mutableDateTime33.getWeekOfWeekyear();
        int int81 = mutableDateTime33.getEra();
        int int82 = mutableDateTime33.getRoundingMode();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 5L + "'", long29 == 5L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(nameProvider59);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 8 + "'", int80 == 8);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfCentury(4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfDay(100);
        int int15 = localDateTime14.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = localDateTime14.getFieldType((int) (byte) 1);
        java.util.Date date18 = localDateTime14.toDate();
        int int19 = localDateTime14.getDayOfYear();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType23 = periodType22.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(4000L, (long) (byte) 100, periodType22);
        org.joda.time.PeriodType periodType25 = periodType22.withSecondsRemoved();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime8, (org.joda.time.ReadablePartial) localDateTime14, periodType22);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYear(10);
        int int35 = localDateTime34.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withHourOfDay(22);
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        int int44 = period39.size();
        org.joda.time.MutablePeriod mutablePeriod45 = period39.toMutablePeriod();
        org.joda.time.PeriodType periodType46 = mutablePeriod45.getPeriodType();
        boolean boolean47 = localDateTime34.equals((java.lang.Object) mutablePeriod45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime34.minusMinutes(26);
        int int50 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology55);
        org.joda.time.Interval interval57 = yearMonthDay56.toInterval();
        org.joda.time.DateTime dateTime58 = yearMonthDay56.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property60 = dateTime58.property(dateTimeFieldType59);
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int62 = property60.getMaximumTextLength(locale61);
        org.joda.time.DateTime dateTime63 = property60.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate64 = dateTime63.toLocalDate();
        org.joda.time.DateTime dateTime66 = dateTime63.minusMonths(32);
        org.joda.time.DateTime dateTime68 = dateTime66.plusMillis((int) (short) 0);
        boolean boolean70 = dateTime66.isBefore(14400000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime.Property property72 = dateTime66.property(dateTimeFieldType71);
        org.joda.time.DateTime dateTime74 = property72.addWrapFieldToCopy(1977);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone76);
        int int78 = dateMidnight77.getEra();
        org.joda.time.DateMidnight.Property property79 = dateMidnight77.monthOfYear();
        org.joda.time.DateMidnight dateMidnight81 = property79.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property79.getFieldType();
        org.joda.time.DateMidnight dateMidnight83 = property79.roundHalfCeilingCopy();
        java.lang.String str84 = property79.getName();
        org.joda.time.DateMidnight dateMidnight85 = property79.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight86 = property79.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight88 = property79.addWrapFieldToCopy(25758818);
        int int89 = property72.getDifference((org.joda.time.ReadableInstant) dateMidnight88);
        java.util.Locale locale90 = java.util.Locale.TAIWAN;
        java.util.Locale locale92 = java.util.Locale.forLanguageTag("1900-01-01");
        java.lang.String str93 = locale90.getDisplayScript(locale92);
        int int94 = property72.getMaximumShortTextLength(locale90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = localDateTime34.toString("dayOfMonth", locale90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14 + "'", int15 == 14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Dec 14 00:00:00 GMT+00:00 2021");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 348 + "'", int19 == 348);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "monthOfYear" + "'", str84, "monthOfYear");
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1937) + "'", int89 == (-1937));
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("1AM19700");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = builder4.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withEra((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.toDateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime8.millisOfDay();
        org.joda.time.DateTime dateTime16 = dateTime8.withMillisOfSecond(99);
        int int17 = dateTime16.getDayOfWeek();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        int int12 = dateMidnight11.getEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateMidnight11.toDateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(9);
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime5.withZoneRetainFields(dateTimeZone19);
        boolean boolean21 = dateTime5.isBeforeNow();
        int int22 = dateTime5.getDayOfWeek();
        org.joda.time.DateTime dateTime24 = dateTime5.plusWeeks(25831693);
        org.joda.time.DateTime dateTime25 = dateTime5.toDateTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        java.util.Date date6 = dateTime5.toDate();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromDateFields(date6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.plusYears(25758818);
        int int10 = yearMonthDay7.getYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay7.minusDays((-730));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks(70);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.year();
        org.joda.time.Interval interval14 = property13.toInterval();
        boolean boolean15 = interval14.isBeforeNow();
        org.joda.time.DateTime dateTime16 = interval14.getEnd();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = localDate37.toInterval(dateTimeZone38);
        java.lang.String str40 = interval39.toString();
        long long41 = interval39.toDurationMillis();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology45);
        org.joda.time.Interval interval47 = yearMonthDay46.toInterval();
        org.joda.time.Period period48 = interval47.toPeriod();
        long long49 = interval47.getStartMillis();
        boolean boolean50 = interval39.isBefore((org.joda.time.ReadableInterval) interval47);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology54);
        org.joda.time.Interval interval56 = yearMonthDay55.toInterval();
        org.joda.time.Period period57 = interval56.toPeriod();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology61);
        org.joda.time.Interval interval63 = yearMonthDay62.toInterval();
        org.joda.time.Period period64 = interval63.toPeriod();
        long long65 = interval63.getStartMillis();
        org.joda.time.Interval interval66 = interval56.overlap((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology70);
        org.joda.time.Interval interval72 = yearMonthDay71.toInterval();
        org.joda.time.Interval interval74 = interval72.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime75 = interval74.getEnd();
        boolean boolean76 = interval63.contains((org.joda.time.ReadableInterval) interval74);
        boolean boolean77 = interval47.abuts((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Interval interval78 = interval14.overlap((org.joda.time.ReadableInterval) interval74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Chronology chronology79 = interval78.getChronology();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str40, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 86400000L + "'", long41 == 86400000L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-61038316800000L) + "'", long49 == (-61038316800000L));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-61038316800000L) + "'", long65 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(interval78);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        int int12 = yearMonthDay11.size();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay11.plus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        int int31 = dateMidnight30.getEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        mutablePeriod23.setPeriod((long) (byte) 100, (long) (byte) -1, chronology32);
        org.joda.time.Period period34 = new org.joda.time.Period(1645513759767L, periodType6, chronology32);
        long long39 = chronology32.getDateTimeMillis((-292275054), 5, 14, 11);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight2.withChronology(chronology32);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight2.toMutableDateTime(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-9223372005551999989L) + "'", long39 == (-9223372005551999989L));
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        long long15 = interval13.getStartMillis();
        org.joda.time.Interval interval16 = interval6.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfDay();
        org.joda.time.Interval interval41 = interval6.withChronology(chronology38);
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.yearOfCentury();
        org.joda.time.DurationField durationField44 = chronology38.minutes();
        org.joda.time.Chronology chronology45 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.millisOfDay();
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(1439L, chronology45);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology45);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-61038316800000L) + "'", long15 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime11 = dateTime7.withFieldAdded(durationFieldType9, 5);
        org.joda.time.TimeOfDay timeOfDay12 = dateTime7.toTimeOfDay();
        int int13 = timeOfDay12.getMinuteOfHour();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod18.setMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        org.joda.time.Duration duration40 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, (org.joda.time.ReadableDuration) duration40);
        mutablePeriod18.add((org.joda.time.ReadableDuration) duration40);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay12.minus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay12.withMillisOfSecond(894);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay45.minusSeconds(53);
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay45.plusMinutes(25809785);
        org.joda.time.TimeOfDay.Property property50 = timeOfDay45.millisOfSecond();
        org.joda.time.Period period52 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        java.lang.String str54 = durationFieldType53.toString();
        org.joda.time.Period period56 = period52.withField(durationFieldType53, 2);
        org.joda.time.Period period58 = period52.minusSeconds(2);
        java.lang.String str59 = period52.toString();
        org.joda.time.Period period60 = period52.toPeriod();
        org.joda.time.Weeks weeks61 = period52.toStandardWeeks();
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay45.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.TimeOfDay.Property property63 = timeOfDay45.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay64 = property63.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "PT0.100S" + "'", str59, "PT0.100S");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(weeks61);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(timeOfDay64);
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        java.util.Date date5 = new java.util.Date(26074158, (int) (byte) 100, 434, 25888, 26011336);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        java.util.Date date8 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromDateFields(date8);
        int int10 = timeOfDay9.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay9.minusMinutes(6);
        int int13 = timeOfDay9.size();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay9.withSecondOfMinute((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period16 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) timeOfDay9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Tue Dec 05 02:16:00 GMT+00:00 26076119");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(283, 17, 25806);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfDay(0);
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.property(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy(46);
        org.joda.time.LocalDateTime localDateTime11 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(25866219);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T00:00:00.000" + "'", str6, "2022-02-22T00:00:00.000");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        int int10 = dateTime5.getWeekOfWeekyear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology14);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateMidnight23.toDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusDays(9);
        int int29 = dateTime26.getEra();
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter18.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = yearMonthDay15.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime5.toMutableDateTime(dateTimeZone31);
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone55);
        org.joda.time.Duration duration57 = mutablePeriod46.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight41.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.LocalDate localDate59 = dateMidnight58.toLocalDate();
        org.joda.time.Chronology chronology60 = localDate59.getChronology();
        java.lang.String str61 = chronology60.toString();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.secondOfDay();
        long long64 = dateTimeField62.roundHalfFloor(100L);
        java.util.Locale locale68 = new java.util.Locale("hi!", "");
        java.lang.String str69 = locale68.getDisplayVariant();
        java.lang.String str70 = locale68.getCountry();
        java.lang.String str71 = dateTimeField62.getAsShortText((long) 16, locale68);
        java.lang.String str72 = locale38.getDisplayLanguage(locale68);
        java.lang.String str73 = dateTimeZone31.getName((long) 25791265, locale38);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.LocalDate.Property property75 = localDate74.era();
        org.joda.time.LocalDate localDate76 = property75.getLocalDate();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[UTC]" + "'", str61, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertEquals(locale68.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Japanese" + "'", str72, "Japanese");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDate76);
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.Chronology chronology13 = null;
        mutablePeriod9.setPeriod((long) 0, (long) 12, chronology13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.LocalDateTime.Property property16 = localDateTime3.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime3.minus(readableDuration17);
        int int19 = localDateTime18.getWeekyear();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 81, (long) 25790484, chronology20);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        boolean boolean24 = interval21.contains((long) 25827480);
        boolean boolean26 = interval21.isBefore((long) 26183686);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.012S");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        long long15 = interval13.getStartMillis();
        org.joda.time.Interval interval16 = interval6.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfDay();
        org.joda.time.Interval interval41 = interval6.withChronology(chronology38);
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.clockhourOfHalfday();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(32769L, chronology38);
        org.joda.time.DateMidnight dateMidnight46 = org.joda.time.DateMidnight.now(chronology38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.withDayOfMonth(26043334);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26043334 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-61038316800000L) + "'", long15 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight46);
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        java.util.Date date5 = calendar0.getTime();
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        calendar0.set(25762216, (int) '#', 32772, 0, (int) ' ', 25756429);
        calendar0.setMinimalDaysInFirstWeek(0);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.monthOfYear();
        org.joda.time.DateMidnight dateMidnight18 = property17.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight19 = property17.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight21 = property17.addToCopy((long) 6);
        org.joda.time.DateTimeZone dateTimeZone22 = dateMidnight21.getZone();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        calendar0.setTimeZone(timeZone23);
        int int25 = timeZone23.getRawOffset();
        java.lang.String str26 = timeZone23.getID();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=1,YEAR=25762216,MONTH=35,WEEK_OF_YEAR=25,WEEK_OF_MONTH=3,DAY_OF_MONTH=32772,DAY_OF_YEAR=362,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=0,MINUTE=32,SECOND=25756429,MILLISECOND=464,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Dec 28 07:16:27 GMT+00:00 15");
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        org.joda.time.Period period8 = new org.joda.time.Period(1972, 16, 100, 18, 25827445, 25773761, 121, 25825329);
        org.joda.time.Period period10 = period8.withWeeks(959);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = interval5.withPeriodBeforeEnd(readablePeriod6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = localDate28.toInterval(dateTimeZone29);
        java.lang.String str31 = interval30.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology35);
        org.joda.time.Interval interval37 = yearMonthDay36.toInterval();
        org.joda.time.Period period38 = interval37.toPeriod();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology42);
        org.joda.time.Interval interval44 = yearMonthDay43.toInterval();
        org.joda.time.Period period45 = interval44.toPeriod();
        long long46 = interval44.getStartMillis();
        org.joda.time.Interval interval47 = interval37.overlap((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology51);
        org.joda.time.Interval interval53 = yearMonthDay52.toInterval();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Interval interval55 = interval53.withPeriodBeforeEnd(readablePeriod54);
        boolean boolean56 = interval37.overlaps((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology60);
        org.joda.time.Interval interval62 = yearMonthDay61.toInterval();
        org.joda.time.Period period63 = interval62.toPeriod();
        boolean boolean65 = interval62.isAfter(100L);
        boolean boolean66 = interval55.isAfter((org.joda.time.ReadableInterval) interval62);
        boolean boolean67 = interval30.isBefore((org.joda.time.ReadableInterval) interval62);
        boolean boolean68 = interval7.contains((org.joda.time.ReadableInterval) interval62);
        org.joda.time.Period period70 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.hours();
        java.lang.String str72 = durationFieldType71.toString();
        org.joda.time.Period period74 = period70.withField(durationFieldType71, 2);
        int int75 = period70.size();
        org.joda.time.MutablePeriod mutablePeriod76 = period70.toMutablePeriod();
        mutablePeriod76.setDays(32);
        org.joda.time.Interval interval79 = interval62.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod76);
        org.joda.time.DateTime dateTime80 = interval62.getEnd();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str31, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-61038316800000L) + "'", long46 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hours" + "'", str72, "hours");
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 8 + "'", int75 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType8 = periodType7.withMillisRemoved();
        int int9 = periodType8.size();
        org.joda.time.Period period11 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Period period15 = period11.withField(durationFieldType12, 2);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        int int50 = mutablePeriod48.getMinutes();
        org.joda.time.Period period52 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        java.lang.String str54 = durationFieldType53.toString();
        org.joda.time.Period period56 = period52.withField(durationFieldType53, 2);
        boolean boolean57 = mutablePeriod48.isSupported(durationFieldType53);
        long long60 = chronology37.add((org.joda.time.ReadablePeriod) mutablePeriod48, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology37.withZone(dateTimeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.DurationField durationField64 = chronology62.halfdays();
        org.joda.time.DurationField durationField65 = durationFieldType12.getField(chronology62);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) interval5, periodType8, chronology62);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(0L, 100L, periodType69, chronology70);
        java.lang.Object obj72 = mutablePeriod71.clone();
        org.joda.time.Interval interval73 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology77);
        int int79 = yearMonthDay78.size();
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay78.plusDays((int) ' ');
        org.joda.time.Interval interval82 = yearMonthDay81.toInterval();
        org.joda.time.DateTime dateTime83 = interval82.getStart();
        org.joda.time.Interval interval84 = interval5.gap((org.joda.time.ReadableInterval) interval82);
        org.joda.time.ReadableInterval readableInterval85 = null;
        boolean boolean86 = interval5.contains(readableInterval85);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hours" + "'", str13, "hours");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 25755235L + "'", long60 == 25755235L);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "PT0.100S");
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Interval interval23 = interval21.withPeriodBeforeEnd(readablePeriod22);
        boolean boolean24 = interval5.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.Period period31 = interval30.toPeriod();
        boolean boolean33 = interval30.isAfter(100L);
        boolean boolean34 = interval23.isAfter((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Interval interval35 = interval23.toInterval();
        long long36 = interval23.toDurationMillis();
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime41 = property39.add((long) 3);
        mutableDateTime41.setDayOfMonth((int) (byte) 10);
        mutableDateTime41.add((long) 6);
        mutableDateTime41.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.monthOfYear();
        mutableDateTime41.setTime((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, 100L, periodType56, chronology57);
        java.lang.Object obj59 = mutablePeriod58.clone();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone67);
        org.joda.time.Duration duration69 = mutablePeriod58.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight53.plus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.LocalDate localDate71 = dateMidnight70.toLocalDate();
        org.joda.time.Period period73 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.hours();
        java.lang.String str75 = durationFieldType74.toString();
        org.joda.time.Period period77 = period73.withField(durationFieldType74, 2);
        org.joda.time.Period period79 = period77.withMillis((int) '#');
        org.joda.time.LocalDate localDate80 = localDate71.minus((org.joda.time.ReadablePeriod) period79);
        int int81 = period79.getMonths();
        org.joda.time.Period period83 = period79.minusMinutes(8);
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime41, (org.joda.time.ReadablePeriod) period79);
        org.joda.time.Interval interval85 = interval84.toInterval();
        boolean boolean86 = interval23.contains((org.joda.time.ReadableInterval) interval85);
        org.joda.time.ReadableInstant readableInstant87 = null;
        boolean boolean88 = interval85.isAfter(readableInstant87);
        org.joda.time.ReadableInstant readableInstant89 = null;
        boolean boolean90 = interval85.isAfter(readableInstant89);
        org.joda.time.DateTime dateTime91 = interval85.getEnd();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "PT0.100S");
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hours" + "'", str75, "hours");
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        java.lang.String str22 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfDay();
        long long25 = dateTimeField23.roundHalfFloor(100L);
        java.lang.String str27 = dateTimeField23.getAsText(14010L);
        int int30 = dateTimeField23.getDifference((long) 0, (long) 25762147);
        java.lang.String str31 = dateTimeField23.getName();
        java.util.Locale locale35 = new java.util.Locale("PT0.006S", "2022-5-11 7:10:01");
        java.lang.String str36 = dateTimeField23.getAsShortText(1673229600035L, locale35);
        long long38 = dateTimeField23.remainder(70358125281190000L);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "14" + "'", str27, "14");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-25762) + "'", int30 == (-25762));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "secondOfDay" + "'", str31, "secondOfDay");
        org.junit.Assert.assertEquals(locale35.toString(), "pt0.006s_2022-5-11 7:10:01");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "7200" + "'", str36, "7200");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        int int57 = property54.get();
        org.joda.time.YearMonthDay yearMonthDay59 = property54.setCopy(25797938);
        org.joda.time.YearMonthDay yearMonthDay60 = property54.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay61 = property54.getYearMonthDay();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 25935133);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        int int4 = dateTimeFormatter2.getDefaultYear();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        int int10 = dateMidnight9.getEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateMidnight9.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusDays(9);
        int int15 = dateTime12.getEra();
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        java.lang.String str18 = dateTimeZone17.toString();
        long long22 = dateTimeZone17.convertLocalToUTC((-61057903814155L), false, (long) 348);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 1972, dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZone(dateTimeZone17);
        java.util.Calendar.Builder builder25 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder29 = builder25.setDate(25762033, 21, 32769);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology33);
        org.joda.time.Interval interval35 = yearMonthDay34.toInterval();
        org.joda.time.DateTime dateTime36 = yearMonthDay34.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int40 = property38.getMaximumTextLength(locale39);
        java.util.Calendar.Builder builder41 = builder25.setLocale(locale39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter24.withLocale(locale39);
        org.joda.time.Chronology chronology43 = dateTimeFormatter24.getChronology();
        java.lang.StringBuffer stringBuffer44 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter24.printTo(stringBuffer44, 25262192768644000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61057903814155L) + "'", long22 == (-61057903814155L));
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNull(chronology43);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int10 = property8.getMaximumTextLength(locale9);
        org.joda.time.DateTime dateTime12 = property8.addWrapFieldToCopy((int) '4');
        java.util.Locale locale13 = java.util.Locale.KOREA;
        int int14 = property8.getMaximumShortTextLength(locale13);
        java.util.Locale locale18 = new java.util.Locale("0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z", "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z", "days");
        java.lang.String str19 = locale13.getDisplayName(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale18);
        // The following exception was thrown during execution in test generation
        try {
            calendar20.roll(336, 26176662);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertEquals(locale18.toString(), "0035-10-10t00:00:00.000z/0035-10-11t00:00:00.000z_1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z_days");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Korean (South Korea)" + "'", str19, "Korean (South Korea)");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645514187791,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-01-21T07:09:28.859\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=27,MILLISECOND=791,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType3 = periodType2.withMillisRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withMillisRemoved();
        org.joda.time.PeriodType periodType5 = periodType3.withMillisRemoved();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType15 = periodType14.withMillisRemoved();
        int int16 = periodType15.size();
        org.joda.time.Period period18 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.hours();
        java.lang.String str20 = durationFieldType19.toString();
        org.joda.time.Period period22 = period18.withField(durationFieldType19, 2);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        org.joda.time.Duration duration41 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight25.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.LocalDate localDate43 = dateMidnight42.toLocalDate();
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        java.lang.Object obj50 = mutablePeriod49.clone();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, 100L, periodType53, chronology54);
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        int int57 = mutablePeriod55.getMinutes();
        org.joda.time.Period period59 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.hours();
        java.lang.String str61 = durationFieldType60.toString();
        org.joda.time.Period period63 = period59.withField(durationFieldType60, 2);
        boolean boolean64 = mutablePeriod55.isSupported(durationFieldType60);
        long long67 = chronology44.add((org.joda.time.ReadablePeriod) mutablePeriod55, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Chronology chronology69 = chronology44.withZone(dateTimeZone68);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(chronology69);
        org.joda.time.DurationField durationField71 = chronology69.halfdays();
        org.joda.time.DurationField durationField72 = durationFieldType19.getField(chronology69);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((java.lang.Object) interval12, periodType15, chronology69);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((long) '#', chronology69);
        org.joda.time.DateTimeField dateTimeField75 = chronology69.monthOfYear();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(chronology69);
        org.joda.time.Period period77 = new org.joda.time.Period(121260993L, 25862000L, periodType3, chronology69);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hours" + "'", str20, "hours");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hours" + "'", str61, "hours");
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 25755235L + "'", long67 == 25755235L);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        long long15 = interval13.getStartMillis();
        org.joda.time.Interval interval16 = interval6.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfDay();
        org.joda.time.Interval interval41 = interval6.withChronology(chronology38);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (-292278), chronology42);
        org.joda.time.Chronology chronology44 = yearMonthDay43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.centuryOfEra();
        long long47 = dateTimeField45.remainder((long) 86399);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-61038316800000L) + "'", long15 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 86399L + "'", long47 == 86399L);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        java.util.Date date5 = calendar0.getTime();
        java.util.Date date6 = calendar0.getTime();
        calendar0.set(257892, 118, 49, 72, 25873332);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        java.lang.Object obj14 = calendar0.clone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=8077985331147940,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-01-21T07:09:28.859\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=257951,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=61,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=12,SECOND=27,MILLISECOND=940,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Dec 28 07:16:27 GMT+00:00 15");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Dec 28 07:16:27 GMT+00:00 15");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(obj14);
// flaky:         org.junit.Assert.assertEquals(obj14.toString(), "java.util.GregorianCalendar[time=8077985331147940,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-01-21T07:09:28.859\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=257951,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=61,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=12,SECOND=27,MILLISECOND=940,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "java.util.GregorianCalendar[time=8077985331147940,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-01-21T07:09:28.859\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=257951,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=61,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=12,SECOND=27,MILLISECOND=940,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "java.util.GregorianCalendar[time=8077985331147940,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-01-21T07:09:28.859\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=257951,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=61,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=12,SECOND=27,MILLISECOND=940,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        int int8 = localDateTime7.getEra();
        int int9 = localDateTime7.getEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.year();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime();
        int int12 = localDateTime7.getEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusYears(25809785);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minusSeconds(25864250);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra(1971);
        org.joda.time.DateTimeField dateTimeField20 = localDateTime18.getField(3);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withFields(readablePartial21);
        int int23 = localDateTime22.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 18 + "'", int23 == 18);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMaximumValue();
        org.joda.time.DurationField durationField12 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay13 = property8.withMaximumValue();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        java.lang.Object obj19 = mutablePeriod18.clone();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        int int26 = mutablePeriod24.getMinutes();
        org.joda.time.Period period28 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        java.lang.String str30 = durationFieldType29.toString();
        org.joda.time.Period period32 = period28.withField(durationFieldType29, 2);
        boolean boolean33 = mutablePeriod24.isSupported(durationFieldType29);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay13.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay13.plusHours(59);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = timeOfDay13.getValue(59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 59");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hours" + "'", str30, "hours");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType15 = periodType14.withMillisRemoved();
        int int16 = periodType15.size();
        org.joda.time.Period period18 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.hours();
        java.lang.String str20 = durationFieldType19.toString();
        org.joda.time.Period period22 = period18.withField(durationFieldType19, 2);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        org.joda.time.Duration duration41 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight25.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.LocalDate localDate43 = dateMidnight42.toLocalDate();
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        java.lang.Object obj50 = mutablePeriod49.clone();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, 100L, periodType53, chronology54);
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        int int57 = mutablePeriod55.getMinutes();
        org.joda.time.Period period59 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.hours();
        java.lang.String str61 = durationFieldType60.toString();
        org.joda.time.Period period63 = period59.withField(durationFieldType60, 2);
        boolean boolean64 = mutablePeriod55.isSupported(durationFieldType60);
        long long67 = chronology44.add((org.joda.time.ReadablePeriod) mutablePeriod55, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Chronology chronology69 = chronology44.withZone(dateTimeZone68);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(chronology69);
        org.joda.time.DurationField durationField71 = chronology69.halfdays();
        org.joda.time.DurationField durationField72 = durationFieldType19.getField(chronology69);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((java.lang.Object) interval12, periodType15, chronology69);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((long) '#', chronology69);
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime(chronology69);
        org.joda.time.DateTime dateTime76 = dateTime5.withChronology(chronology69);
        boolean boolean77 = dateTime5.isAfterNow();
        int int78 = dateTime5.getEra();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hours" + "'", str20, "hours");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hours" + "'", str61, "hours");
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 25755235L + "'", long67 == 25755235L);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(25848136, 25839, 26183686, 82859000, 620);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82859000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        org.joda.time.DateTime dateTime3 = timeOfDay2.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusHours(348);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusMillis(25806820);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        int[] intArray9 = timeOfDay7.getValues();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[4, 49, 53, 180]");
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        int int9 = localDateTime7.getValue(3);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusDays(7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis(25762147);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.dayOfMonth();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withPivotYear((int) (byte) 10);
        boolean boolean20 = dateTimeFormatter19.isParser();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.000Z");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter19.withLocale(locale22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter23.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = localDateTime11.toString(dateTimeFormatter23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26188099 + "'", int9 == 26188099);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay(3);
        java.util.Date date10 = localDateTime7.toDate();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYearOfEra(25774925);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withCenturyOfEra(6025633);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 6025633 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Jan 01 00:00:00 GMT+00:00 2023");
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        java.lang.String str5 = yearMonthDay4.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay4.toDateMidnight(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        java.lang.String str30 = chronology29.toString();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        java.lang.Object obj40 = mutablePeriod39.clone();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone48);
        org.joda.time.Duration duration50 = mutablePeriod39.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight34.plus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.LocalDate localDate52 = dateMidnight51.toLocalDate();
        org.joda.time.Period period54 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.hours();
        java.lang.String str56 = durationFieldType55.toString();
        org.joda.time.Period period58 = period54.withField(durationFieldType55, 2);
        org.joda.time.Period period60 = period58.withMillis((int) '#');
        org.joda.time.LocalDate localDate61 = localDate52.minus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.LocalDate localDate63 = localDate61.minusYears(11);
        int int64 = localDate61.getYearOfEra();
        int int65 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDate61);
        long long68 = dateTimeField31.set((-1L), 22);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology73);
        org.joda.time.Interval interval75 = yearMonthDay74.toInterval();
        org.joda.time.DateTime dateTime76 = yearMonthDay74.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property78 = dateTime76.property(dateTimeFieldType77);
        org.joda.time.DateTime dateTime79 = property78.getDateTime();
        java.util.Locale locale80 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale81 = locale80.stripExtensions();
        int int82 = property78.getMaximumShortTextLength(locale80);
        java.lang.String str83 = dateTimeField31.getAsShortText((long) 32772, locale80);
        java.lang.String str84 = locale80.getLanguage();
        java.util.Calendar calendar85 = dateMidnight7.toCalendar(locale80);
        calendar85.set(25774925, 2000, 32769);
        java.lang.String str90 = calendar85.getCalendarType();
        java.lang.String str91 = calendar85.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0035-10-10" + "'", str5, "0035-10-10");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[UTC]" + "'", str30, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "PT0.100S");
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hours" + "'", str56, "hours");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-86377001L) + "'", long68 == (-86377001L));
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "32" + "'", str83, "32");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "zh" + "'", str84, "zh");
        org.junit.Assert.assertNotNull(calendar85);
// flaky:         org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=25774925,MONTH=2000,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=32769,DAY_OF_YEAR=285,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "gregory" + "'", str90, "gregory");
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=25774925,MONTH=2000,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=32769,DAY_OF_YEAR=285,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str91, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=25774925,MONTH=2000,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=32769,DAY_OF_YEAR=285,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusHours(2022);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusSeconds((int) (short) 1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy(47);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        java.lang.Object obj15 = mutablePeriod14.clone();
        org.joda.time.Chronology chronology18 = null;
        mutablePeriod14.setPeriod((long) 0, (long) 12, chronology18);
        mutablePeriod14.addDays(5);
        mutablePeriod14.addYears(8);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "P8Y5DT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "P8Y5DT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "P8Y5DT0.012S");
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        java.lang.String str11 = property8.getName();
        org.joda.time.TimeOfDay timeOfDay12 = property8.getTimeOfDay();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        int int14 = property8.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property8.getField();
        java.lang.String str16 = property8.getAsShortText();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondOfMinute" + "'", str11, "secondOfMinute");
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        java.lang.Object obj2 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        int int37 = mutablePeriod35.getMinutes();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType40);
        long long47 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology24.withZone(dateTimeZone48);
        org.joda.time.DurationField durationField50 = chronology49.years();
        org.joda.time.DurationField durationField51 = chronology49.millis();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(obj2, chronology49);
        org.joda.time.DurationField durationField53 = chronology49.halfdays();
        org.joda.time.DateTimeField dateTimeField54 = chronology49.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField55 = chronology49.era();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 40, (long) 25942889, chronology49);
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime58.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime61 = property59.add((long) 3);
        mutableDateTime61.setDayOfMonth((int) (byte) 10);
        mutableDateTime61.add((long) 6);
        java.lang.Object obj66 = mutableDateTime61.clone();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime61.hourOfDay();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime61.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime69 = property68.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime70 = property68.roundFloor();
        mutableDateTime70.add((long) 348);
        org.joda.time.Duration duration73 = mutablePeriod56.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime70);
        org.joda.time.Period period75 = org.joda.time.Period.millis(25799369);
        mutableDateTime70.add((org.joda.time.ReadablePeriod) period75);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 25755235L + "'", long47 == 25755235L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "2022-01-10T00:00:00.009Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "2022-01-10T00:00:00.009Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "2022-01-10T00:00:00.009Z");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(period75);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        java.lang.String str5 = yearMonthDay4.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear(10);
        org.joda.time.DateTime dateTime8 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonthDay4.getFieldTypes();
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay4.monthOfYear();
        org.joda.time.DurationField durationField11 = property10.getRangeDurationField();
        org.joda.time.tz.NameProvider nameProvider13 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str17 = nameProvider13.getName(locale14, "", "0035-10-10");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay18 = property10.setCopy("Thu Jan 01 00:00:00 UTC 1970", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Thu Jan 01 00:00:00 UTC 1970\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0035-10-10" + "'", str5, "0035-10-10");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(nameProvider13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology6);
        org.joda.time.Interval interval8 = yearMonthDay7.toInterval();
        org.joda.time.DateTime dateTime9 = yearMonthDay7.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay7.withFieldAdded(durationFieldType11, 12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.year();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.joda.time.YearMonthDay yearMonthDay16 = property14.withMaximumValue();
        org.joda.time.Period period18 = org.joda.time.Period.weeks(25794115);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay16.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(0L, dateTimeZone21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusWeeks(100);
        org.joda.time.Chronology chronology26 = localDate23.getChronology();
        org.joda.time.LocalDate.Property property27 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.roundCeilingCopy();
        org.joda.time.LocalDate.Property property29 = localDate28.weekyear();
        org.joda.time.LocalDate localDate31 = property29.addWrapFieldToCopy(12);
        org.joda.time.Period period33 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        java.lang.String str35 = durationFieldType34.toString();
        org.joda.time.Period period37 = period33.withField(durationFieldType34, 2);
        int int38 = period33.size();
        org.joda.time.MutablePeriod mutablePeriod39 = period33.toMutablePeriod();
        org.joda.time.LocalDate localDate41 = localDate31.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod39, 2740);
        org.joda.time.Interval interval42 = localDate31.toInterval();
        java.util.Date date43 = localDate31.toDate();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology49);
        org.joda.time.Interval interval51 = yearMonthDay50.toInterval();
        org.joda.time.Period period52 = interval51.toPeriod();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology56);
        org.joda.time.Interval interval58 = yearMonthDay57.toInterval();
        org.joda.time.Period period59 = interval58.toPeriod();
        long long60 = interval58.getStartMillis();
        org.joda.time.Interval interval61 = interval51.overlap((org.joda.time.ReadableInterval) interval58);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone63);
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(0L, 100L, periodType67, chronology68);
        java.lang.Object obj70 = mutablePeriod69.clone();
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(0L, 100L, periodType73, chronology74);
        mutablePeriod69.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod75);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone78);
        org.joda.time.Duration duration80 = mutablePeriod69.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight79);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight64.plus((org.joda.time.ReadableDuration) duration80);
        org.joda.time.LocalDate localDate82 = dateMidnight81.toLocalDate();
        org.joda.time.Chronology chronology83 = localDate82.getChronology();
        java.lang.String str84 = chronology83.toString();
        org.joda.time.DateTimeField dateTimeField85 = chronology83.secondOfDay();
        org.joda.time.Interval interval86 = interval51.withChronology(chronology83);
        org.joda.time.DurationField durationField87 = chronology83.minutes();
        org.joda.time.MutableDateTime mutableDateTime88 = new org.joda.time.MutableDateTime((long) 14, chronology83);
        org.joda.time.DateMidnight dateMidnight89 = new org.joda.time.DateMidnight(chronology83);
        org.joda.time.Period period90 = new org.joda.time.Period((-22404962L), chronology83);
        org.joda.time.DateTime dateTime91 = new org.joda.time.DateTime((java.lang.Object) date43, chronology83);
        org.joda.time.YearMonthDay yearMonthDay92 = yearMonthDay16.withChronologyRetainFields(chronology83);
        org.joda.time.Period period93 = new org.joda.time.Period((long) 25811620, (long) 455308, chronology83);
        org.joda.time.MutableDateTime mutableDateTime94 = new org.joda.time.MutableDateTime(1645574400000L, chronology83);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hours" + "'", str35, "hours");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 07 00:00:00 GMT+00:00 1982");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-61038316800000L) + "'", long60 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "PT0.100S");
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ISOChronology[UTC]" + "'", str84, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(yearMonthDay92);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        boolean boolean5 = dateTimeFormatter4.isParser();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.000Z");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter8.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withPivotYear(119);
        boolean boolean13 = dateTimeFormatter12.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimePrinter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate9 = localDate3.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property10 = localDate3.weekOfWeekyear();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateMidnight23.toDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusDays(9);
        int int29 = dateTime26.getEra();
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        org.joda.time.DateTime dateTime32 = dateTime17.withZoneRetainFields(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime37 = property35.roundFloor();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology41);
        org.joda.time.DateMidnight dateMidnight43 = yearMonthDay42.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, (org.joda.time.ReadableInstant) dateMidnight43, periodType47);
        org.joda.time.Period period50 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.hours();
        java.lang.String str52 = durationFieldType51.toString();
        org.joda.time.Period period54 = period50.withField(durationFieldType51, 2);
        int int55 = period50.size();
        org.joda.time.MutablePeriod mutablePeriod56 = period50.toMutablePeriod();
        mutablePeriod56.setDays(32);
        mutablePeriod56.setHours(22);
        mutableDateTime37.add((org.joda.time.ReadablePeriod) mutablePeriod56, (int) (short) 10);
        int int63 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.DateTime dateTime64 = localDate11.toDateTimeAtStartOfDay(dateTimeZone31);
        java.util.Locale locale68 = new java.util.Locale("Japanese", "years");
        java.lang.String str69 = locale68.getCountry();
        java.util.Locale locale71 = java.util.Locale.forLanguageTag("894");
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(locale71);
        java.lang.String str73 = locale68.getDisplayName(locale71);
        java.lang.String str74 = dateTimeZone31.getShortName(0L, locale68);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hours" + "'", str52, "hours");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod56);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertEquals(locale68.toString(), "japanese_YEARS");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "YEARS" + "'", str69, "YEARS");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1645514188518,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-01-21T07:09:28.859\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=28,MILLISECOND=518,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "japanese (YEARS)" + "'", str73, "japanese (YEARS)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay4.withFieldAdded(durationFieldType8, 12);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        org.joda.time.Period period15 = org.joda.time.Period.weeks(25794115);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay13.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Interval interval17 = yearMonthDay16.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval19 = interval17.withEndMillis((long) 25767397);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(interval17);
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withMillisRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withMillisRemoved();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        java.lang.Object obj15 = mutablePeriod14.clone();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        org.joda.time.Duration duration25 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight9.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.LocalDate localDate27 = dateMidnight26.toLocalDate();
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        java.lang.String str29 = chronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.secondOfDay();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(0L, (long) 1, chronology28);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(10L);
        long long35 = chronology28.set((org.joda.time.ReadablePartial) yearMonthDay33, (long) 8);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 26003451, periodType4, chronology28);
        org.joda.time.DateTimeField dateTimeField37 = chronology28.secondOfDay();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "PT0.100S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 8L + "'", long35 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plusMonths(0);
        org.joda.time.DateMidnight.Property property9 = dateMidnight6.era();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology14);
        org.joda.time.Interval interval16 = yearMonthDay15.toInterval();
        org.joda.time.Period period17 = interval16.toPeriod();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology21);
        org.joda.time.Interval interval23 = yearMonthDay22.toInterval();
        org.joda.time.Period period24 = interval23.toPeriod();
        long long25 = interval23.getStartMillis();
        org.joda.time.Interval interval26 = interval16.overlap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone43);
        org.joda.time.Duration duration45 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight29.plus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.LocalDate localDate47 = dateMidnight46.toLocalDate();
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        java.lang.String str49 = chronology48.toString();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfDay();
        org.joda.time.Interval interval51 = interval16.withChronology(chronology48);
        java.lang.String str52 = interval16.toString();
        org.joda.time.MutableInterval mutableInterval53 = interval16.toMutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType56 = periodType55.withSecondsRemoved();
        org.joda.time.Period period57 = interval54.toPeriod(periodType55);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 14, periodType55);
        int[] intArray59 = mutablePeriod58.getValues();
        boolean boolean60 = dateMidnight6.equals((java.lang.Object) mutablePeriod58);
        int int61 = dateMidnight6.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-61038316800000L) + "'", long25 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0.100S");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[UTC]" + "'", str49, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z" + "'", str52, "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(26120134);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setYears(11);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Period period25 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.hours();
        java.lang.String str27 = durationFieldType26.toString();
        org.joda.time.Period period29 = period25.withField(durationFieldType26, 2);
        org.joda.time.Period period31 = period29.withMillis((int) '#');
        org.joda.time.LocalDate localDate32 = localDate23.minus((org.joda.time.ReadablePeriod) period31);
        java.lang.String str33 = period31.toString();
        org.joda.time.Duration duration34 = period31.toStandardDuration();
        long long35 = duration34.getMillis();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundHalfFloor();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) mutableDateTime39);
        long long41 = duration34.getMillis();
        long long42 = duration34.getMillis();
        mutablePeriod0.add((org.joda.time.ReadableDuration) duration34);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hours" + "'", str27, "hours");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT2H0.035S" + "'", str33, "PT2H0.035S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 7200035L + "'", long35 == 7200035L);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 7200035L + "'", long41 == 7200035L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 7200035L + "'", long42 == 7200035L);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        java.lang.Object obj17 = mutablePeriod16.clone();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, 100L, periodType20, chronology21);
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.Duration duration27 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight11.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        int int43 = mutablePeriod41.getMinutes();
        org.joda.time.Period period45 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.hours();
        java.lang.String str47 = durationFieldType46.toString();
        org.joda.time.Period period49 = period45.withField(durationFieldType46, 2);
        boolean boolean50 = mutablePeriod41.isSupported(durationFieldType46);
        long long53 = chronology30.add((org.joda.time.ReadablePeriod) mutablePeriod41, (long) 25755035, 2);
        org.joda.time.LocalDate localDate54 = localDate8.minus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.LocalDate.Property property55 = localDate8.dayOfWeek();
        int int56 = localDate8.getDayOfMonth();
        org.joda.time.LocalDate.Property property57 = localDate8.yearOfCentury();
        org.joda.time.LocalDate.Property property58 = localDate8.weekyear();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology64);
        org.joda.time.Interval interval66 = yearMonthDay65.toInterval();
        org.joda.time.Interval interval68 = interval66.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime69 = interval68.getEnd();
        org.joda.time.DateTime.Property property70 = dateTime69.secondOfDay();
        org.joda.time.DateTime dateTime72 = dateTime69.withEra((int) (short) 0);
        org.joda.time.Chronology chronology73 = dateTime72.getChronology();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(0L, periodType60, chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.dayOfWeek();
        org.joda.time.DurationField durationField76 = chronology73.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((java.lang.Object) property58, chronology73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "PT0.100S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hours" + "'", str47, "hours");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 25755235L + "'", long53 == 25755235L);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property8.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withChronology(chronology18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        boolean boolean26 = dateMidnight17.equals((java.lang.Object) mutablePeriod24);
        boolean boolean27 = property8.equals((java.lang.Object) dateMidnight17);
        org.joda.time.TimeOfDay timeOfDay28 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField29 = property8.getField();
        int int30 = property8.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        int int34 = dateMidnight33.getEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateMidnight33.toDateTime(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks(0);
        org.joda.time.DateTime dateTime39 = dateTime38.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime40 = dateTime38.toLocalTime();
        org.joda.time.LocalTime localTime42 = localTime40.minusMinutes(3);
        org.joda.time.LocalTime localTime44 = localTime40.minusMillis((-1));
        org.joda.time.DateTime dateTime45 = localTime44.toDateTimeToday();
        org.joda.time.LocalTime localTime47 = localTime44.minusMinutes(2022);
        org.joda.time.Chronology chronology48 = localTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.dayOfYear();
        java.util.Locale.Category category50 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.lang.String str53 = locale52.getDisplayName();
        java.util.Locale.setDefault(category50, locale52);
        int int55 = dateTimeField49.getMaximumTextLength(locale52);
        java.lang.String str56 = property8.getAsText(locale52);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 59 + "'", int30 == 59);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + category50 + "' != '" + java.util.Locale.Category.FORMAT + "'", category50.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Chinese (China)" + "'", str53, "Chinese (China)");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(25762033, 21, 32769);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar.Builder builder6 = builder4.setLocale(locale5);
        java.util.Locale locale7 = locale5.stripExtensions();
        java.lang.String str8 = locale5.getDisplayCountry();
        java.util.Locale locale9 = java.util.Locale.US;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.lang.String str12 = locale9.getDisplayLanguage();
        java.lang.String str13 = locale5.getDisplayVariant(locale9);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Canada" + "'", str8, "Canada");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514188847,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-01-21T07:09:28.859\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=28,MILLISECOND=847,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en-US" + "'", str11, "en-US");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English" + "'", str12, "English");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) ' ', (int) (short) 100, 7, 1970, 7, 21, 3, 100);
        java.lang.Object obj9 = mutablePeriod8.clone();
        mutablePeriod8.setWeeks(7);
        mutablePeriod8.setPeriod((long) '4', (-61662790213317L));
        int[] intArray15 = mutablePeriod8.getValues();
        org.joda.time.PeriodType periodType16 = mutablePeriod8.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        int int20 = dateMidnight19.getEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateMidnight19.toDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks(0);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime26 = dateTime24.toLocalTime();
        org.joda.time.LocalTime localTime28 = localTime26.minusMinutes(3);
        org.joda.time.LocalTime.Property property29 = localTime26.minuteOfHour();
        org.joda.time.LocalTime.Property property30 = localTime26.millisOfDay();
        org.joda.time.LocalTime localTime31 = property30.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime33 = localTime31.plusHours(525);
        org.joda.time.LocalTime localTime35 = localTime33.withMillisOfDay(20);
        org.joda.time.LocalTime localTime37 = localTime33.withHourOfDay(19);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        boolean boolean40 = localTime37.isSupported(durationFieldType38);
        int int41 = mutablePeriod8.get(durationFieldType38);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "P-1954Y-5DT-16H-50M-13.369S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "P-1954Y-5DT-16H-50M-13.369S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "P-1954Y-5DT-16H-50M-13.369S");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1954, 0, 0, -5, -16, -50, -13, -369]");
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-16) + "'", int41 == (-16));
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Period period8 = period6.withSeconds((int) '#');
        org.joda.time.Period period10 = period6.minusHours(25758818);
        org.joda.time.Period period12 = period10.withWeeks((-5087));
        org.joda.time.Days days13 = period12.toStandardDays();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        int int4 = localDate3.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateMidnight13.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusDays(9);
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((int) (byte) -1, 1, (int) (short) 1, (int) (short) 10, (int) (short) 0, 8, dateTimeZone21);
        org.joda.time.Interval interval25 = localDate3.toInterval(dateTimeZone21);
        org.joda.time.Period period26 = interval25.toPeriod();
        java.lang.String str27 = period26.toString();
        org.joda.time.Period period29 = period26.plusMillis(25918840);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology33);
        org.joda.time.DateMidnight dateMidnight35 = yearMonthDay34.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plus((long) (byte) -1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight40, chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight40.withCenturyOfEra(8);
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight44.toMutableDateTimeISO();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period29, (org.joda.time.ReadableInstant) mutableDateTime45);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "P1D" + "'", str27, "P1D");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withDayOfMonth((int) (byte) 1);
        org.joda.time.Interval interval7 = dateMidnight2.toInterval();
        org.joda.time.Interval interval9 = interval7.withStartMillis(7200035L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(0L, dateTimeZone11);
        org.joda.time.LocalDate localDate13 = dateMidnight12.toLocalDate();
        int int14 = localDate13.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateMidnight23.toDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusDays(9);
        int int29 = dateTime26.getEra();
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((int) (byte) -1, 1, (int) (short) 1, (int) (short) 10, (int) (short) 0, 8, dateTimeZone31);
        org.joda.time.Interval interval35 = localDate13.toInterval(dateTimeZone31);
        org.joda.time.Interval interval36 = interval7.gap((org.joda.time.ReadableInterval) interval35);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.setVariant("1AM19700");
        java.util.Locale.Builder builder40 = builder37.clearExtensions();
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale41);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance();
        calendar43.setWeekDate(16, (int) (byte) 0, 7);
        calendar43.set((int) (byte) 10, 8, (int) (short) 0);
        java.util.Date date52 = calendar43.getTime();
        java.lang.String str53 = calendar43.getCalendarType();
        java.util.Locale.Category category56 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale58 = locale57.stripExtensions();
        java.lang.String str59 = locale58.getDisplayName();
        java.util.Locale.setDefault(category56, locale58);
        java.util.Map<java.lang.String, java.lang.Integer> strMap61 = calendar43.getDisplayNames(3, (int) (short) 1, locale58);
        java.lang.String str62 = locale58.getVariant();
        java.lang.String str63 = locale41.getDisplayLanguage(locale58);
        java.lang.String str64 = locale41.getLanguage();
        org.joda.time.tz.NameProvider nameProvider65 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale66 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str69 = nameProvider65.getName(locale66, "", "0035-10-10");
        java.lang.String str70 = locale41.getDisplayVariant(locale66);
        java.util.Locale.Builder builder71 = builder40.setLocale(locale66);
        java.util.Locale.Builder builder72 = builder71.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = interval36.equals((java.lang.Object) builder72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNull(interval36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645514188972,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-01-21T07:09:28.859\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=28,MILLISECOND=972,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-61830837811028,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-01-21T07:09:28.859\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=7,WEEK_OF_YEAR=36,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=243,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=28,MILLISECOND=972,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date52);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Sun Aug 31 07:16:28 GMT+00:00 10");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "gregory" + "'", str53, "gregory");
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.FORMAT + "'", category56.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese (China)" + "'", str59, "Chinese (China)");
        org.junit.Assert.assertNull(strMap61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(nameProvider65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_CA");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(292269054);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology18);
        org.joda.time.Interval interval20 = yearMonthDay19.toInterval();
        org.joda.time.Period period21 = interval20.toPeriod();
        long long22 = interval20.getStartMillis();
        org.joda.time.Interval interval23 = interval13.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.Duration duration42 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight26.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.LocalDate localDate44 = dateMidnight43.toLocalDate();
        org.joda.time.Chronology chronology45 = localDate44.getChronology();
        java.lang.String str46 = chronology45.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.secondOfDay();
        org.joda.time.Interval interval48 = interval13.withChronology(chronology45);
        org.joda.time.DurationField durationField49 = chronology45.seconds();
        long long53 = chronology45.add(30412L, (long) 14, 25793899);
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(chronology45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter6.withChronology(chronology45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter55.withPivotYear((java.lang.Integer) 120);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61038316800000L) + "'", long22 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 361144998L + "'", long53 == 361144998L);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        org.joda.time.DateMidnight dateMidnight10 = property9.roundCeilingCopy();
        java.util.GregorianCalendar gregorianCalendar11 = dateMidnight10.toGregorianCalendar();
        int int13 = gregorianCalendar11.getGreatestMinimum((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        java.util.Date date6 = new java.util.Date((int) (short) 10, 32769, 9, 9, 22, 21);
        date6.setYear(4);
        java.lang.String str9 = date6.toGMTString();
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromDateFields(date6);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.plusMinutes(4);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withSecondOfMinute(0);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay12.minusMillis(32770);
        org.joda.time.Chronology chronology17 = timeOfDay12.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology17);
        java.lang.String str19 = mutableDateTime18.toString();
        org.junit.Assert.assertEquals(date6.toString(), "Sun Oct 09 09:22:21 GMT+00:00 1904");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9 Oct 1904 09:22:21 GMT" + "'", str9, "9 Oct 1904 09:22:21 GMT");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:16:29.069Z" + "'", str19, "2022-02-22T07:16:29.069Z");
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight5 = org.joda.time.DateMidnight.parse("java.io.IOException: zh_CN", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser4);
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate9 = localDate3.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property10 = localDate3.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.Duration duration31 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight15.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = property35.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime38 = property35.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        int int42 = dateMidnight41.getEra();
        org.joda.time.DateMidnight.Property property43 = dateMidnight41.monthOfYear();
        org.joda.time.DateMidnight dateMidnight45 = property43.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property43.getFieldType();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime38.property(dateTimeFieldType46);
        boolean boolean48 = dateMidnight15.isSupported(dateTimeFieldType46);
        java.lang.String str49 = dateTimeFieldType46.getName();
        org.joda.time.YearMonthDay.Property property50 = yearMonthDay12.property(dateTimeFieldType46);
        java.lang.String str51 = dateTimeFieldType46.toString();
        org.joda.time.LocalDate.Property property52 = localDate3.property(dateTimeFieldType46);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        int int56 = dateMidnight55.getEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = dateMidnight55.toDateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks(0);
        int int61 = dateTime58.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime58.getZone();
        java.util.Locale locale64 = null;
        java.lang.String str65 = dateTimeZone62.getName(1L, locale64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((java.lang.Object) localDate3, dateTimeZone62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.100S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "monthOfYear" + "'", str49, "monthOfYear");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "monthOfYear" + "'", str51, "monthOfYear");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology5);
        org.joda.time.Interval interval7 = yearMonthDay6.toInterval();
        org.joda.time.Period period8 = interval7.toPeriod();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        long long16 = interval14.getStartMillis();
        org.joda.time.Interval interval17 = interval7.overlap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.LocalDate localDate38 = dateMidnight37.toLocalDate();
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        java.lang.String str40 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfDay();
        org.joda.time.Interval interval42 = interval7.withChronology(chronology39);
        org.joda.time.DateTimeField dateTimeField43 = chronology39.dayOfMonth();
        org.joda.time.Period period44 = new org.joda.time.Period((long) (-292275054), periodType1, chronology39);
        org.joda.time.DateTimeField dateTimeField45 = chronology39.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone48);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        java.lang.Object obj55 = mutablePeriod54.clone();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(0L, 100L, periodType58, chronology59);
        mutablePeriod54.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone63);
        org.joda.time.Duration duration65 = mutablePeriod54.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight49.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.LocalDate localDate67 = dateMidnight66.toLocalDate();
        org.joda.time.Chronology chronology68 = localDate67.getChronology();
        java.lang.String str69 = chronology68.toString();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.secondOfDay();
        long long72 = dateTimeField70.roundHalfFloor(100L);
        java.util.Locale locale76 = new java.util.Locale("hi!", "");
        java.lang.String str77 = locale76.getDisplayVariant();
        java.lang.String str78 = locale76.getCountry();
        java.lang.String str79 = dateTimeField70.getAsShortText((long) 16, locale76);
        int int81 = dateTimeField70.getMaximumValue((long) 15);
        java.util.Locale locale84 = java.util.Locale.forLanguageTag("days");
        java.lang.String str85 = dateTimeField70.getAsShortText(1, locale84);
        java.lang.String str86 = dateTimeField45.getAsShortText((long) 24, locale84);
        java.lang.Object obj87 = locale84.clone();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-61038316800000L) + "'", long16 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "PT0.100S");
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ISOChronology[UTC]" + "'", str69, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertEquals(locale76.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0" + "'", str79, "0");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 86399 + "'", int81 == 86399);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "days");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1" + "'", str85, "1");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0" + "'", str86, "0");
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "days");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "days");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "days");
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfYear();
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight();
        int int23 = dateTime22.getYear();
        org.joda.time.DateTime.Property property24 = dateTime22.monthOfYear();
        org.joda.time.DateTime dateTime25 = property24.withMinimumValue();
        java.lang.String str26 = property24.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = property24.addToCopy(1645488000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 1645488000000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "January" + "'", str26, "January");
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime6.minuteOfDay();
        org.joda.time.DateTime.Property property10 = dateTime6.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((long) 3);
        mutableDateTime15.setDayOfMonth((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        int int21 = dateMidnight20.getEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateMidnight20.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusDays(9);
        int int26 = dateTime23.getEra();
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        org.joda.time.Duration duration46 = mutablePeriod35.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight30.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.LocalDate localDate48 = dateMidnight47.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = localDate48.toInterval(dateTimeZone49);
        boolean boolean51 = dateTime23.equals((java.lang.Object) dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone53);
        int int55 = dateMidnight54.getEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = dateMidnight54.toDateTime(chronology56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusDays(9);
        int int60 = dateTime57.getEra();
        org.joda.time.DateTime dateTime61 = dateTime57.toDateTime();
        org.joda.time.DateTime.Property property62 = dateTime61.secondOfDay();
        boolean boolean63 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime.Property property64 = dateTime61.weekOfWeekyear();
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Instant instant66 = dateTime61.toInstant();
        boolean boolean67 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime69 = dateTime61.plusHours(324);
        org.joda.time.DateTime dateTime71 = dateTime69.withWeekyear(25814300);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone73);
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(0L, 100L, periodType77, chronology78);
        java.lang.Object obj80 = mutablePeriod79.clone();
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(0L, 100L, periodType83, chronology84);
        mutablePeriod79.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod85);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.DateMidnight dateMidnight89 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone88);
        org.joda.time.Duration duration90 = mutablePeriod79.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight89);
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight74.plus((org.joda.time.ReadableDuration) duration90);
        org.joda.time.LocalDate localDate92 = dateMidnight91.toLocalDate();
        org.joda.time.Chronology chronology93 = localDate92.getChronology();
        java.lang.String str94 = chronology93.toString();
        org.joda.time.DateTimeField dateTimeField95 = chronology93.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime96 = dateTime69.toMutableDateTime(chronology93);
        org.joda.time.DateTime.Property property97 = dateTime69.millisOfDay();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "PT0.100S");
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ISOChronology[UTC]" + "'", str94, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(mutableDateTime96);
        org.junit.Assert.assertNotNull(property97);
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology23.withZone(dateTimeZone47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 11, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = dateTimeField50.getType();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = dateTimeField50.getAsText(894, locale53);
        java.util.Locale.Builder builder55 = builder0.setLocale(locale53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder57 = builder0.setScript("de");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: de [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25755235L + "'", long46 == 25755235L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "894" + "'", str54, "894");
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfCeiling();
        java.util.Date date6 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date6);
        int int8 = timeOfDay7.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property13 = timeOfDay12.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay15 = property13.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay16 = property13.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.hourOfDay();
        int int18 = property17.get();
        org.joda.time.TimeOfDay timeOfDay20 = property17.addToCopy(25839);
        int int21 = property17.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property17.withMinimumValue();
        boolean boolean23 = property3.equals((java.lang.Object) property17);
        org.joda.time.DateTimeField dateTimeField24 = property17.getField();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 23 + "'", int18 == 23);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 23 + "'", int21 == 23);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        java.lang.String str8 = property2.toString();
        org.joda.time.DurationField durationField9 = property2.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property2.roundFloorCopy();
        int int11 = localDateTime10.getYearOfEra();
        int int12 = localDateTime10.getYearOfCentury();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[year]" + "'", str8, "Property[year]");
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.util.Locale> localeCollection3 = null;
        java.util.Locale.FilteringMode filteringMode4 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList5 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection3, filteringMode4);
        java.lang.String[] strArray29 = new java.lang.String[] { "2022-01-21T07:09:28.859", "", "DateTimeField[weekOfWeekyear]", "0", "0035-10-10", "Greenwich Mean Time", "DateTimeField[weekOfWeekyear]", "70", "DateTimeField[weekOfWeekyear]", "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z", "70", "java.util.GregorianCalendar[time=1645513757582,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=9,SECOND=17,MILLISECOND=582,ZONE_OFFSET=0,DST_OFFSET=0]", "PT10H1970M9.999S", "T23:54:00.000", "secondOfDay", "hi!", "YearMonthDay", "java.util.GregorianCalendar[time=1645513757582,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=9,SECOND=17,MILLISECOND=582,ZONE_OFFSET=0,DST_OFFSET=0]", "14", "DurationField[days]", "monthOfYear", "7", "2022" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.add((long) 3);
        mutableDateTime36.setDayOfMonth((int) (byte) 10);
        mutableDateTime36.add((long) 6);
        mutableDateTime36.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.monthOfYear();
        mutableDateTime36.setTime((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        java.lang.Object obj54 = mutablePeriod53.clone();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        mutablePeriod53.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone62);
        org.joda.time.Duration duration64 = mutablePeriod53.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight48.plus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.LocalDate localDate66 = dateMidnight65.toLocalDate();
        org.joda.time.Period period68 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.hours();
        java.lang.String str70 = durationFieldType69.toString();
        org.joda.time.Period period72 = period68.withField(durationFieldType69, 2);
        org.joda.time.Period period74 = period72.withMillis((int) '#');
        org.joda.time.LocalDate localDate75 = localDate66.minus((org.joda.time.ReadablePeriod) period74);
        int int76 = period74.getMonths();
        org.joda.time.Period period78 = period74.minusMinutes(8);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime36, (org.joda.time.ReadablePeriod) period74);
        long long80 = interval79.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval81 = interval79.toMutableInterval();
        boolean boolean82 = strSet30.equals((java.lang.Object) mutableInterval81);
        java.lang.String str83 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet30);
        java.util.Iterator<java.lang.String> strItor84 = strSet30.iterator();
        java.util.stream.Stream<java.lang.String> strStream85 = strSet30.parallelStream();
        int int86 = strSet30.size();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + filteringMode4 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode4.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "PT0.100S");
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hours" + "'", str70, "hours");
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 7200035L + "'", long80 == 7200035L);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strItor84);
        org.junit.Assert.assertNotNull(strStream85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 19 + "'", int86 == 19);
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        org.joda.time.YearMonthDay yearMonthDay57 = property54.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField58 = property54.getField();
        org.joda.time.DurationField durationField59 = dateTimeField58.getLeapDurationField();
        int int61 = durationField59.getValue((long) 885);
        int int64 = durationField59.getDifference((-86383001L), (long) 25836647);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime.Property property8 = dateTime5.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime5.plusDays(0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(9);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis(6);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime.Property property23 = dateTime11.yearOfEra();
        int int24 = property23.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField25 = property23.getField();
        boolean boolean27 = dateTimeField25.isLeap(0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property8.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withChronology(chronology18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        boolean boolean26 = dateMidnight17.equals((java.lang.Object) mutablePeriod24);
        boolean boolean27 = property8.equals((java.lang.Object) dateMidnight17);
        org.joda.time.TimeOfDay timeOfDay28 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField29 = property8.getField();
        int int30 = property8.getMaximumValue();
        int int31 = property8.getMaximumValue();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 59 + "'", int30 == 59);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 59 + "'", int31 == 59);
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Interval interval23 = interval21.withPeriodBeforeEnd(readablePeriod22);
        boolean boolean24 = interval5.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.Period period31 = interval30.toPeriod();
        boolean boolean33 = interval30.isAfter(100L);
        boolean boolean34 = interval23.isAfter((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Interval interval35 = interval23.toInterval();
        long long36 = interval23.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        int int40 = dateMidnight39.getEra();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = dateMidnight39.toDateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusDays(9);
        int int45 = dateTime42.getEra();
        org.joda.time.DateMidnight dateMidnight46 = dateTime42.toDateMidnight();
        boolean boolean47 = interval23.isAfter((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime25 = property22.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        int int29 = dateMidnight28.getEra();
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.monthOfYear();
        org.joda.time.DateMidnight dateMidnight32 = property30.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property30.getFieldType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.property(dateTimeFieldType33);
        boolean boolean35 = dateMidnight2.isSupported(dateTimeFieldType33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight2.minusWeeks(16);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.millisOfDay();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime39.secondOfDay();
        java.lang.String str42 = property41.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime43 = property41.roundHalfEven();
        int int44 = dateMidnight2.compareTo((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        java.lang.Object obj53 = mutablePeriod52.clone();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, 100L, periodType56, chronology57);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone61);
        org.joda.time.Duration duration63 = mutablePeriod52.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight47.plus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.LocalDate localDate65 = dateMidnight64.toLocalDate();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight64.minusMonths(3);
        int int68 = mutableDateTime43.compareTo((org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight67.plus((long) (-5087));
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight70.withDurationAdded(0L, 20);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.minusMonths(25809785);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "PT0.100S");
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateMidnight75);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int7 = calendar0.getMaximum(1);
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        int int9 = timeOfDay8.size();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61662789810346,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-01-21T07:09:28.859\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=15,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=362,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=29,MILLISECOND=654,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278994 + "'", int7 == 292278994);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("T00:00:00.000");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        int int5 = dateMidnight4.getEra();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        int int26 = dateMidnight25.getEra();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.Duration duration42 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, (org.joda.time.ReadableDuration) duration42);
        boolean boolean44 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration45 = duration42.toDuration();
        java.lang.String str46 = duration45.toString();
        org.joda.time.DateTime dateTime47 = dateTime1.plus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology51);
        org.joda.time.format.DateTimePrinter dateTimePrinter53 = null;
        org.joda.time.format.DateTimeParser dateTimeParser54 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter53, dateTimeParser54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter55.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone59);
        int int61 = dateMidnight60.getEra();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = dateMidnight60.toDateTime(chronology62);
        org.joda.time.DateTime dateTime65 = dateTime63.plusDays(9);
        int int66 = dateTime63.getEra();
        org.joda.time.DateTime dateTime67 = dateTime63.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime67.getZone();
        java.lang.String str69 = dateTimeZone68.toString();
        org.joda.time.YearMonthDay yearMonthDay70 = new org.joda.time.YearMonthDay(dateTimeZone68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter55.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime72 = yearMonthDay52.toDateTimeAtMidnight(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.now(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime47.toMutableDateTime(dateTimeZone68);
        mutableDateTime74.addSeconds(118);
        int int77 = mutableDateTime74.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0.100S" + "'", str46, "PT0.100S");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "UTC" + "'", str69, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 19 + "'", int77 == 19);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        boolean boolean33 = localDate31.isSupported(dateTimeFieldType32);
        org.joda.time.LocalDate localDate35 = localDate31.withMonthOfYear(6);
        org.joda.time.LocalDate localDate37 = localDate35.plusWeeks(25762147);
        org.joda.time.LocalDate.Property property38 = localDate37.yearOfCentury();
        org.joda.time.LocalDate localDate39 = property38.roundFloorCopy();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths(0);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        int int12 = yearMonthDay11.size();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay11.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.minusYears((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay24.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone43);
        org.joda.time.Duration duration45 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight29.plus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.LocalDate localDate47 = dateMidnight46.toLocalDate();
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        java.lang.Object obj54 = mutablePeriod53.clone();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        mutablePeriod53.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        int int61 = mutablePeriod59.getMinutes();
        org.joda.time.Period period63 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.hours();
        java.lang.String str65 = durationFieldType64.toString();
        org.joda.time.Period period67 = period63.withField(durationFieldType64, 2);
        boolean boolean68 = mutablePeriod59.isSupported(durationFieldType64);
        long long71 = chronology48.add((org.joda.time.ReadablePeriod) mutablePeriod59, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.Chronology chronology73 = chronology48.withZone(dateTimeZone72);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) 11, chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.dayOfMonth();
        java.util.Locale locale77 = java.util.Locale.CHINESE;
        java.lang.String str78 = dateTimeField75.getAsShortText(52, locale77);
        int int79 = property25.getMaximumTextLength(locale77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter6.withLocale(locale77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter80.withPivotYear(25795164);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = dateTimeFormatter82.withPivotYear(25797133);
        org.joda.time.Chronology chronology85 = dateTimeFormatter84.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime87 = dateTimeFormatter84.parseDateTime("2022-02-15T07:11:07.393");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0.100S");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hours" + "'", str65, "hours");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 25755235L + "'", long71 == 25755235L);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "52" + "'", str78, "52");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
        org.junit.Assert.assertNotNull(dateTimeFormatter84);
        org.junit.Assert.assertNull(chronology85);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis((int) (short) 10);
        java.lang.String str7 = localDateTime6.toString();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfCeilingCopy();
        java.util.Date date10 = localDateTime9.toDate();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-15T07:16:29.933" + "'", str7, "2022-02-15T07:16:29.933");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Tue Feb 15 07:00:00 GMT+00:00 2022");
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology17);
        org.joda.time.Interval interval19 = yearMonthDay18.toInterval();
        org.joda.time.Period period20 = interval19.toPeriod();
        long long21 = interval19.getStartMillis();
        org.joda.time.Interval interval22 = interval12.overlap((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        org.joda.time.Duration duration41 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight25.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.LocalDate localDate43 = dateMidnight42.toLocalDate();
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        java.lang.String str45 = chronology44.toString();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.secondOfDay();
        org.joda.time.Interval interval47 = interval12.withChronology(chronology44);
        org.joda.time.DurationField durationField48 = chronology44.seconds();
        org.joda.time.DateTimeField dateTimeField49 = chronology44.clockhourOfHalfday();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology44);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateTimeField dateTimeField52 = chronology44.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(436, 0, 26035664, 2, 25919020, 25861, 26063140, chronology44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25919020 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-61038316800000L) + "'", long21 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        org.joda.time.Duration duration41 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight25.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.LocalDate localDate43 = dateMidnight42.toLocalDate();
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        java.lang.String str45 = chronology44.toString();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.secondOfDay();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(0L, (long) 1, chronology44);
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(10L);
        long long51 = chronology44.set((org.joda.time.ReadablePartial) yearMonthDay49, (long) 8);
        org.joda.time.DateTimeField dateTimeField52 = chronology44.secondOfDay();
        boolean boolean53 = localDate20.equals((java.lang.Object) chronology44);
        org.joda.time.LocalDate.Property property54 = localDate20.yearOfEra();
        int int55 = localDate20.getDayOfWeek();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 8L + "'", long51 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        int int11 = property10.getMinimumValue();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(0L, dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        int int26 = dateMidnight25.getEra();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.Duration duration42 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight22, (org.joda.time.ReadableDuration) duration42, periodType44);
        org.joda.time.Period period47 = period45.withMillis(21);
        org.joda.time.Period period49 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.hours();
        java.lang.String str51 = durationFieldType50.toString();
        org.joda.time.Period period53 = period49.withField(durationFieldType50, 2);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.hours();
        java.lang.String str55 = durationFieldType54.toString();
        boolean boolean56 = period49.isSupported(durationFieldType54);
        java.lang.String str57 = durationFieldType54.getName();
        org.joda.time.Period period59 = period45.withField(durationFieldType54, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime17.withPeriodAdded((org.joda.time.ReadablePeriod) period59, 25827445);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime17.minusYears(36);
        org.joda.time.LocalDateTime.Property property64 = localDateTime17.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime65 = property64.roundFloorCopy();
        boolean boolean66 = property10.equals((java.lang.Object) localDateTime65);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hours" + "'", str51, "hours");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hours" + "'", str55, "hours");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hours" + "'", str57, "hours");
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology11);
        org.joda.time.Period period14 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        java.lang.String str16 = durationFieldType15.toString();
        org.joda.time.Period period18 = period14.withField(durationFieldType15, 2);
        org.joda.time.Period period20 = period18.minusMinutes(21);
        org.joda.time.LocalDate localDate22 = localDate12.withPeriodAdded((org.joda.time.ReadablePeriod) period20, 6);
        org.joda.time.LocalDate localDate24 = localDate12.withDayOfMonth((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = localDate24.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate27 = localDate24.withDayOfYear(50);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate24.plus(readablePeriod28);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hours" + "'", str16, "hours");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(740, 26132239, 25803547, 0, 25806820);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25806820 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Property[year]");
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("1900-01-01");
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale2);
        int int8 = timeZone1.getOffset((long) 1971);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514190326,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=30,MILLISECOND=326,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        int int12 = dateMidnight11.getEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateMidnight11.toDateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(9);
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime8.withZoneRetainFields(dateTimeZone19);
        int int24 = dateTime8.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime8.minusHours(12);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology31);
        org.joda.time.DateMidnight dateMidnight33 = yearMonthDay32.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight33.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plus((long) (byte) -1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight38, chronology39);
        org.joda.time.Period period42 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.hours();
        java.lang.String str44 = durationFieldType43.toString();
        org.joda.time.Period period46 = period42.withField(durationFieldType43, 2);
        org.joda.time.Period period48 = period46.minusMinutes(21);
        org.joda.time.LocalDate localDate50 = localDate40.withPeriodAdded((org.joda.time.ReadablePeriod) period48, 6);
        org.joda.time.LocalDate localDate52 = localDate40.withDayOfMonth((int) (byte) 10);
        org.joda.time.DateTime dateTime53 = localDate52.toDateTimeAtStartOfDay();
        boolean boolean54 = dateTime53.isAfterNow();
        org.joda.time.DateTime dateTime56 = dateTime53.minusYears(29);
        int int57 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime56);
        int int58 = dateTime56.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hours" + "'", str44, "hours");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-15T07:09:25.633");
        int int2 = mutableDateTime1.getDayOfYear();
        mutableDateTime1.setMinuteOfDay((int) (byte) 100);
        long long5 = mutableDateTime1.getMillis();
        mutableDateTime1.setTime((long) 25773844);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        int int16 = dateMidnight15.getEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateMidnight15.toDateTime(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusDays(9);
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter10.withZone(dateTimeZone23);
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter26.getParser();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter26.withZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = dateTimeFormatter29.getChronolgy();
        int int31 = dateTimeFormatter29.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        java.lang.Object obj40 = mutablePeriod39.clone();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone48);
        org.joda.time.Duration duration50 = mutablePeriod39.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight34.plus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.LocalDate localDate52 = dateMidnight51.toLocalDate();
        org.joda.time.Chronology chronology53 = localDate52.getChronology();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, 100L, periodType56, chronology57);
        java.lang.Object obj59 = mutablePeriod58.clone();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        int int66 = mutablePeriod64.getMinutes();
        org.joda.time.Period period68 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.hours();
        java.lang.String str70 = durationFieldType69.toString();
        org.joda.time.Period period72 = period68.withField(durationFieldType69, 2);
        boolean boolean73 = mutablePeriod64.isSupported(durationFieldType69);
        long long76 = chronology53.add((org.joda.time.ReadablePeriod) mutablePeriod64, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.Chronology chronology78 = chronology53.withZone(dateTimeZone77);
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate(chronology78);
        org.joda.time.DurationField durationField80 = chronology78.years();
        org.joda.time.DurationField durationField81 = chronology78.hours();
        org.joda.time.DateTimeField dateTimeField82 = chronology78.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.Chronology chronology84 = chronology78.withZone(dateTimeZone83);
        org.joda.time.DateTimeZone dateTimeZone85 = chronology84.getZone();
        int int87 = dateTimeZone85.getOffsetFromLocal((-61262524749600L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = dateTimeFormatter29.withZone(dateTimeZone85);
        mutableDateTime1.setZoneRetainFields(dateTimeZone85);
        mutableDateTime1.addDays(25859060);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 46 + "'", int2 == 46);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644889225633L + "'", long5 == 1644889225633L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(chronology30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2000 + "'", int31 == 2000);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "PT0.100S");
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hours" + "'", str70, "hours");
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 25755235L + "'", long76 == 25755235L);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter88);
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-01-21T07:10:08.490");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-01-21t07:10:08.490");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMaximumValue();
        org.joda.time.DurationField durationField12 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay13 = property8.withMaximumValue();
        org.joda.time.DurationField durationField14 = property8.getDurationField();
        org.joda.time.TimeOfDay timeOfDay16 = property8.setCopy(15);
        org.joda.time.DurationField durationField17 = property8.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay19 = property8.setCopy("P1D");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"P1D\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        java.lang.Object obj17 = mutablePeriod16.clone();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, 100L, periodType20, chronology21);
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.Duration duration27 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight11.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        int int43 = mutablePeriod41.getMinutes();
        org.joda.time.Period period45 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.hours();
        java.lang.String str47 = durationFieldType46.toString();
        org.joda.time.Period period49 = period45.withField(durationFieldType46, 2);
        boolean boolean50 = mutablePeriod41.isSupported(durationFieldType46);
        long long53 = chronology30.add((org.joda.time.ReadablePeriod) mutablePeriod41, (long) 25755035, 2);
        org.joda.time.LocalDate localDate54 = localDate8.minus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.LocalDate.Property property55 = localDate8.dayOfWeek();
        org.joda.time.LocalDate localDate57 = localDate8.withYearOfEra(2022);
        org.joda.time.LocalDate.Property property58 = localDate8.dayOfYear();
        org.joda.time.LocalDate.Property property59 = localDate8.dayOfMonth();
        org.joda.time.LocalDate.Property property60 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate61 = property60.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "PT0.100S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hours" + "'", str47, "hours");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 25755235L + "'", long53 == 25755235L);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDate61);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime dateTime8 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime5.yearOfCentury();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime12 = property9.setCopy(20);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology16);
        org.joda.time.Interval interval18 = yearMonthDay17.toInterval();
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology23);
        org.joda.time.Interval interval25 = yearMonthDay24.toInterval();
        org.joda.time.Period period26 = interval25.toPeriod();
        long long27 = interval25.getStartMillis();
        org.joda.time.Interval interval28 = interval18.overlap((org.joda.time.ReadableInterval) interval25);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        java.lang.Object obj37 = mutablePeriod36.clone();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        org.joda.time.Duration duration47 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight31.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDate localDate49 = dateMidnight48.toLocalDate();
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        java.lang.String str51 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.secondOfDay();
        org.joda.time.Interval interval53 = interval18.withChronology(chronology50);
        org.joda.time.DurationField durationField54 = chronology50.minutes();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.halfdayOfDay();
        org.joda.time.DateTime dateTime56 = dateTime12.toDateTime(chronology50);
        // The following exception was thrown during execution in test generation
        try {
            long long62 = chronology50.getDateTimeMillis((long) 102165896, 25773761, 26180017, 352, 25755000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25773761 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-61038316800000L) + "'", long27 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT0.100S");
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[UTC]" + "'", str51, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType9 = periodType8.withMillisRemoved();
        int int10 = periodType9.size();
        org.joda.time.Period period12 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        java.lang.String str14 = durationFieldType13.toString();
        org.joda.time.Period period16 = period12.withField(durationFieldType13, 2);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        int int51 = mutablePeriod49.getMinutes();
        org.joda.time.Period period53 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.hours();
        java.lang.String str55 = durationFieldType54.toString();
        org.joda.time.Period period57 = period53.withField(durationFieldType54, 2);
        boolean boolean58 = mutablePeriod49.isSupported(durationFieldType54);
        long long61 = chronology38.add((org.joda.time.ReadablePeriod) mutablePeriod49, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology38.withZone(dateTimeZone62);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.DurationField durationField65 = chronology63.halfdays();
        org.joda.time.DurationField durationField66 = durationFieldType13.getField(chronology63);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((java.lang.Object) interval6, periodType9, chronology63);
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) '#', chronology63);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime68.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime70 = property69.roundCeiling();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime70.setTime(840, 25842128, 25902750, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 840 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hours" + "'", str14, "hours");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hours" + "'", str55, "hours");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 25755235L + "'", long61 == 25755235L);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        java.lang.String str8 = timeOfDay5.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay10 = timeOfDay5.withSecondOfMinute(26027589);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26027589 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T23:54:00.000" + "'", str8, "T23:54:00.000");
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        int int4 = dateMidnight2.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withField(dateTimeFieldType5, 3);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.minusDays((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableInstant10);
        org.joda.time.Period period13 = period11.minusWeeks(348);
        org.joda.time.MutablePeriod mutablePeriod14 = period11.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.Duration duration37 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight21.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDate localDate39 = dateMidnight38.toLocalDate();
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        java.lang.String str41 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfDay();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(0L, (long) 1, chronology40);
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(10L);
        long long47 = chronology40.set((org.joda.time.ReadablePartial) yearMonthDay45, (long) 8);
        org.joda.time.DateTimeField dateTimeField48 = chronology40.secondOfDay();
        org.joda.time.DurationField durationField49 = chronology40.minutes();
        org.joda.time.DateTimeField dateTimeField50 = chronology40.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, 100L, periodType56, chronology57);
        java.lang.Object obj59 = mutablePeriod58.clone();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone67);
        org.joda.time.Duration duration69 = mutablePeriod58.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight53.plus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.LocalDate localDate71 = dateMidnight70.toLocalDate();
        org.joda.time.LocalDate.Property property72 = localDate71.dayOfYear();
        org.joda.time.LocalDate localDate73 = property72.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate75 = localDate73.withWeekyear(11);
        long long77 = chronology40.set((org.joda.time.ReadablePartial) localDate73, (-604800001L));
        mutablePeriod14.setPeriod(0L, (long) 25795116, chronology40);
        mutablePeriod14.setPeriod(1639854000000L, (long) 46);
        mutablePeriod14.setMinutes(620);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 8L + "'", long47 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "PT0.100S");
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 86399999L + "'", long77 == 86399999L);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withWeekyear(25762216);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusSeconds(604);
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.dayOfMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(0L, dateTimeZone5);
        org.joda.time.LocalDate localDate7 = dateMidnight6.toLocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusWeeks(100);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.year();
        org.joda.time.Period period13 = new org.joda.time.Period(25829182L, chronology10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(53327, 25873332, 26142790, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53327 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 25888);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.addWrapField((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.weekOfWeekyear();
        mutableDateTime7.setMillis(86182012800035L);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime7.hourOfDay();
        org.joda.time.Period period13 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        java.lang.String str15 = durationFieldType14.toString();
        org.joda.time.Period period17 = period13.withField(durationFieldType14, 2);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        int int19 = period13.get(durationFieldType18);
        mutableDateTime7.add(durationFieldType18, 25795164);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology25);
        org.joda.time.Interval interval27 = yearMonthDay26.toInterval();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Interval interval29 = interval27.withPeriodBeforeEnd(readablePeriod28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, 100L, periodType55, chronology56);
        java.lang.Object obj58 = mutablePeriod57.clone();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(0L, 100L, periodType61, chronology62);
        mutablePeriod57.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone66);
        org.joda.time.Duration duration68 = mutablePeriod57.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight52.plus((org.joda.time.ReadableDuration) duration68);
        int int70 = dateMidnight49.compareTo((org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, readableInstant71);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight49.minusYears(22);
        int int75 = dateMidnight74.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight74.plusMonths(25852727);
        boolean boolean78 = interval27.isBefore((org.joda.time.ReadableInstant) dateMidnight77);
        org.joda.time.DateMidnight.Property property79 = dateMidnight77.era();
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableInstant) dateMidnight77);
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hours" + "'", str15, "hours");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "PT0.100S");
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(property79);
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        boolean boolean8 = interval5.contains((long) 4);
        long long9 = interval5.getEndMillis();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-61038230400000L) + "'", long9 == (-61038230400000L));
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology23.withZone(dateTimeZone47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 11, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = dateTimeField50.getType();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = dateTimeField50.getAsText(894, locale53);
        java.util.Calendar.Builder builder55 = builder0.setLocale(locale53);
        java.util.Calendar.Builder builder59 = builder55.setDate(46, 25756429, (int) (short) 1);
        java.util.Calendar.Builder builder61 = builder55.setLenient(false);
        java.util.Calendar.Builder builder65 = builder61.setWeekDate(25968911, 292278993, 137);
        java.util.Calendar.Builder builder69 = builder65.setTimeOfDay(137, 26012800, 48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar70 = builder69.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 137");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25755235L + "'", long46 == 25755235L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "894" + "'", str54, "894");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.LocalTime localTime4 = timeOfDay2.toLocalTime();
        org.joda.time.Period period6 = org.joda.time.Period.hours((int) (byte) -1);
        org.joda.time.LocalTime localTime7 = localTime4.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        int int11 = dateMidnight10.getEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateMidnight10.toDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks(0);
        int int16 = dateTime13.getYearOfCentury();
        org.joda.time.Duration duration17 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        int int23 = dateMidnight22.getEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateMidnight22.toDateTime(chronology24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillis(100L);
        int int29 = dateTime25.getCenturyOfEra();
        org.joda.time.DateTime dateTime31 = dateTime25.withMonthOfYear(8);
        org.joda.time.DateTime dateTime33 = dateTime31.minusYears(2022);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        int int37 = dateMidnight36.getEra();
        org.joda.time.DateMidnight.Property property38 = dateMidnight36.monthOfYear();
        org.joda.time.DateMidnight dateMidnight40 = property38.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property38.getFieldType();
        org.joda.time.DateTimeField dateTimeField42 = property38.getField();
        int int45 = dateTimeField42.getDifference((long) (short) 0, 5L);
        long long47 = dateTimeField42.roundHalfFloor((long) 894);
        int int48 = dateTime31.get(dateTimeField42);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime51 = dateTime31.plus((-141846935616000000L));
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 19 + "'", int29 == 19);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType2 = periodType1.withMonthsRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.year();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withYearOfCentury(4);
        org.joda.time.Period period14 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        java.lang.String str16 = durationFieldType15.toString();
        org.joda.time.Period period18 = period14.withField(durationFieldType15, 2);
        org.joda.time.Period period20 = period14.minusSeconds(2);
        int int21 = period20.getWeeks();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime8.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology23 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.minuteOfDay();
        org.joda.time.Period period25 = new org.joda.time.Period((-229651200000L), periodType3, chronology23);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hours" + "'", str16, "hours");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        date1.setHours(6);
        java.util.Date date11 = new java.util.Date(0, 52, 25762216, 2, 2022, 32772);
        boolean boolean12 = date1.after(date11);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromDateFields(date11);
        date11.setMonth(959);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 06:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Sat Dec 18 20:48:12 GMT 72517");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        org.joda.time.DurationField durationField9 = property7.getDurationField();
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight12 = property10.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property10.getFieldType();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime5.property(dateTimeFieldType13);
        java.lang.String str15 = mutableDateTime5.toString();
        java.lang.String str16 = mutableDateTime5.toString();
        mutableDateTime5.setMillisOfDay(200);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.roundFloor();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay29.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime24, (org.joda.time.ReadableInstant) dateMidnight30, periodType34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        int int39 = dateMidnight38.getEra();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = dateMidnight38.toDateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusDays(9);
        int int44 = dateTime41.getEra();
        org.joda.time.DateTime dateTime45 = dateTime41.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime45.getZone();
        long long49 = dateTimeZone46.adjustOffset((long) 5, true);
        boolean boolean51 = dateTimeZone46.isStandardOffset((long) 3);
        mutableDateTime24.setZoneRetainFields(dateTimeZone46);
        java.lang.String str54 = dateTimeZone46.getShortName((long) (-292275054));
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((-196577279999999990L), dateTimeZone46);
        java.lang.String str57 = dateTimeZone46.getName(1000L);
        mutableDateTime5.setZoneRetainFields(dateTimeZone46);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str15, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str16, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 5L + "'", long49 == 5L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.minusMonths(3);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology26);
        org.joda.time.Interval interval28 = yearMonthDay27.toInterval();
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology33);
        org.joda.time.Interval interval35 = yearMonthDay34.toInterval();
        org.joda.time.Period period36 = interval35.toPeriod();
        long long37 = interval35.getStartMillis();
        org.joda.time.Interval interval38 = interval28.overlap((org.joda.time.ReadableInterval) interval35);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone55);
        org.joda.time.Duration duration57 = mutablePeriod46.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight41.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.LocalDate localDate59 = dateMidnight58.toLocalDate();
        org.joda.time.Chronology chronology60 = localDate59.getChronology();
        java.lang.String str61 = chronology60.toString();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.secondOfDay();
        org.joda.time.Interval interval63 = interval28.withChronology(chronology60);
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.DateTime dateTime65 = dateMidnight19.toDateTime(chronology64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone67);
        int int69 = dateMidnight68.getEra();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = dateMidnight68.toDateTime(chronology70);
        org.joda.time.DateTime dateTime73 = dateTime71.minusWeeks(0);
        int int74 = dateTime73.getYearOfCentury();
        org.joda.time.DateTime dateTime76 = dateTime73.withCenturyOfEra(16);
        boolean boolean77 = dateTime65.isBefore((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime.Property property78 = dateTime73.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime80 = dateTime73.withMillisOfSecond((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-61038316800000L) + "'", long37 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[UTC]" + "'", str61, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 70 + "'", int74 == 70);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(26117225, 26097824, 25774925);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26117225 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        int int5 = dateMidnight4.getEra();
        org.joda.time.DateMidnight.Property property6 = dateMidnight4.monthOfYear();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        int int14 = yearMonthDay13.size();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay13.plus((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        int int33 = dateMidnight32.getEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        mutablePeriod25.setPeriod((long) (byte) 100, (long) (byte) -1, chronology34);
        org.joda.time.Period period36 = new org.joda.time.Period(1645513759767L, periodType8, chronology34);
        long long41 = chronology34.getDateTimeMillis((-292275054), 5, 14, 11);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight4.withChronology(chronology34);
        org.joda.time.DateTimeField dateTimeField43 = chronology34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology34.secondOfDay();
        mutableDateTime1.setRounding(dateTimeField44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone48);
        int int50 = dateMidnight49.getEra();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = dateMidnight49.toDateTime(chronology51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusDays(9);
        org.joda.time.DateTime.Property property55 = dateTime52.monthOfYear();
        org.joda.time.DateTime dateTime57 = dateTime52.plusDays(0);
        org.joda.time.DateTime dateTime58 = dateTime57.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime60 = dateTime58.plusYears(993);
        org.joda.time.DateTime dateTime62 = dateTime58.withMillisOfDay(6);
        org.joda.time.YearMonthDay yearMonthDay63 = dateTime58.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property64 = yearMonthDay63.monthOfYear();
        int int65 = property64.get();
        org.joda.time.DateTimeField dateTimeField66 = property64.getField();
        long long68 = dateTimeField66.remainder(1672531200000L);
        long long70 = dateTimeField66.roundHalfCeiling(25161924L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setRounding(dateTimeField66, (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: -2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-9223372005551999989L) + "'", long41 == (-9223372005551999989L));
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withEra((int) (short) 0);
        org.joda.time.LocalDate localDate12 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime14 = dateTime11.withCenturyOfEra(70);
        org.joda.time.DateTime.Property property15 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime11.withEarlierOffsetAtOverlap();
        int int17 = dateTime11.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean19 = dateTime11.isSupported(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear(11);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(25762033);
        int int9 = localDateTime8.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDurationAdded(readableDuration10, 25934755);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusYears(25940033);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekyear(25888);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        java.lang.Object obj49 = mutablePeriod48.clone();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        org.joda.time.Duration duration59 = mutablePeriod48.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight43.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.LocalDate localDate61 = dateMidnight60.toLocalDate();
        org.joda.time.Period period63 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.hours();
        java.lang.String str65 = durationFieldType64.toString();
        org.joda.time.Period period67 = period63.withField(durationFieldType64, 2);
        org.joda.time.Period period69 = period67.withMillis((int) '#');
        org.joda.time.LocalDate localDate70 = localDate61.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.LocalDate localDate72 = localDate70.minusYears(11);
        int int73 = localDate70.getYearOfEra();
        int int74 = dateTimeField40.getMinimumValue((org.joda.time.ReadablePartial) localDate70);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDate70);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0.100S");
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hours" + "'", str65, "hours");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.minutes();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.dayOfWeek();
        long long46 = dateTimeField43.getDifferenceAsLong((long) 86399, (long) 8);
        java.lang.String str48 = dateTimeField43.getAsShortText(1222905600000L);
        java.util.Locale locale49 = java.util.Locale.CHINA;
        java.util.Locale locale51 = java.util.Locale.forLanguageTag("894");
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(locale51);
        java.lang.String str53 = locale49.getDisplayScript(locale51);
        java.util.Locale.setDefault(locale49);
        int int55 = dateTimeField43.getMaximumShortTextLength(locale49);
        java.lang.Object obj56 = locale49.clone();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Thu" + "'", str48, "Thu");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1645514191390,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=31,MILLISECOND=390,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "zh_CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "zh_CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "zh_CN");
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.addToCopy(32769);
        org.joda.time.DateTimeField dateTimeField57 = property54.getField();
        org.joda.time.DateTimeField dateTimeField58 = property54.getField();
        int int59 = property54.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay61 = property54.addWrapFieldToCopy(25782688);
        org.joda.time.Interval interval62 = yearMonthDay61.toInterval();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-292275054) + "'", int59 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(interval62);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval7.withPeriodBeforeEnd(readablePeriod9);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 4, (long) (-1));
        mutablePeriod13.setPeriod((long) 11, (long) 16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        int int20 = dateMidnight19.getEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateMidnight19.toDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusDays(9);
        int int25 = dateTime22.getEra();
        org.joda.time.DateTime dateTime26 = dateTime22.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        long long30 = dateTimeZone27.adjustOffset((long) 5, true);
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime34 = dateTime32.plusYears((int) (byte) 1);
        org.joda.time.Duration duration35 = mutablePeriod13.toDurationFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundHalfFloor();
        mutableDateTime39.addWeekyears((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        int int46 = dateMidnight45.getEra();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateMidnight45.toDateTime(chronology47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight51 = dateTime50.toDateMidnight();
        boolean boolean52 = mutableDateTime39.isAfter((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = dateTime50.toDateTimeISO();
        org.joda.time.DateTime dateTime55 = dateTime53.withWeekyear(25755035);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType60 = periodType59.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(4000L, (long) (byte) 100, periodType59);
        org.joda.time.PeriodType periodType62 = periodType59.withSecondsRemoved();
        org.joda.time.PeriodType periodType63 = periodType62.withYearsRemoved();
        org.joda.time.Period period64 = new org.joda.time.Period((long) 25810113, periodType63);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime55, periodType63);
        org.joda.time.Period period66 = interval7.toPeriod(periodType63);
        org.joda.time.MutableInterval mutableInterval67 = interval7.toMutableInterval();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 5L + "'", long30 == 5L);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(mutableInterval67);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        java.lang.String str8 = property2.toString();
        org.joda.time.DateTimeField dateTimeField9 = property2.getField();
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Locale locale13 = locale10.stripExtensions();
        int int14 = dateTimeField9.getMaximumShortTextLength(locale10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        int int18 = dateMidnight17.getEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateMidnight17.toDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusDays(9);
        int int23 = dateTime20.getEra();
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale28);
        java.lang.String str30 = dateTimeZone25.getShortName((long) 348, locale28);
        java.lang.String str31 = locale28.getCountry();
        java.lang.String str32 = locale10.getDisplayScript(locale28);
        java.lang.String str33 = locale28.getDisplayCountry();
        java.lang.String str34 = locale28.getVariant();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[year]" + "'", str8, "Property[year]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645514191494,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=31,MILLISECOND=494,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime6.minuteOfDay();
        org.joda.time.DateTime.Property property10 = dateTime6.monthOfYear();
        int int11 = dateTime6.getDayOfWeek();
        org.joda.time.DateTime.Property property12 = dateTime6.secondOfMinute();
        org.joda.time.DateTime dateTime13 = property12.withMinimumValue();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.clockhourOfHalfday();
        org.joda.time.DurationField durationField43 = chronology37.seconds();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = localDate44.toDateMidnight(dateTimeZone45);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology50);
        org.joda.time.DateTime dateTime52 = yearMonthDay51.toDateTimeAtCurrentTime();
        java.util.GregorianCalendar gregorianCalendar53 = dateTime52.toGregorianCalendar();
        org.joda.time.DateTime dateTime55 = dateTime52.withDayOfYear(40);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology59);
        int int61 = yearMonthDay60.size();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay60.plus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay71.minusYears((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay73.plusMonths(25799369);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone77);
        org.joda.time.MutableDateTime mutableDateTime80 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime80.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime82 = property81.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime83 = property81.roundFloor();
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime83.weekOfWeekyear();
        int int85 = dateMidnight78.compareTo((org.joda.time.ReadableInstant) mutableDateTime83);
        org.joda.time.DateTimeZone dateTimeZone86 = dateMidnight78.getZone();
        org.joda.time.DateMidnight dateMidnight87 = yearMonthDay75.toDateMidnight(dateTimeZone86);
        org.joda.time.DateTime dateTime88 = dateTime55.toDateTime(dateTimeZone86);
        org.joda.time.DateTime dateTime89 = localDate44.toDateTimeAtCurrentTime(dateTimeZone86);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(gregorianCalendar53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        org.joda.time.Period period1 = org.joda.time.Period.millis(259287);
        org.joda.time.Period period3 = period1.plusHours(644);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Period period8 = period6.plusHours(32769);
        org.joda.time.Period period10 = period8.plusHours(25811620);
        int int11 = period10.getMillis();
        org.joda.time.Period period13 = period10.minusMillis(50400000);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology17);
        org.joda.time.Interval interval19 = yearMonthDay18.toInterval();
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType22 = periodType21.withMillisRemoved();
        int int23 = periodType22.size();
        org.joda.time.Period period25 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.hours();
        java.lang.String str27 = durationFieldType26.toString();
        org.joda.time.Period period29 = period25.withField(durationFieldType26, 2);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.LocalDate localDate50 = dateMidnight49.toLocalDate();
        org.joda.time.Chronology chronology51 = localDate50.getChronology();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0L, 100L, periodType54, chronology55);
        java.lang.Object obj57 = mutablePeriod56.clone();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(0L, 100L, periodType60, chronology61);
        mutablePeriod56.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod62);
        int int64 = mutablePeriod62.getMinutes();
        org.joda.time.Period period66 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.hours();
        java.lang.String str68 = durationFieldType67.toString();
        org.joda.time.Period period70 = period66.withField(durationFieldType67, 2);
        boolean boolean71 = mutablePeriod62.isSupported(durationFieldType67);
        long long74 = chronology51.add((org.joda.time.ReadablePeriod) mutablePeriod62, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.Chronology chronology76 = chronology51.withZone(dateTimeZone75);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate(chronology76);
        org.joda.time.DurationField durationField78 = chronology76.halfdays();
        org.joda.time.DurationField durationField79 = durationFieldType26.getField(chronology76);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((java.lang.Object) interval19, periodType22, chronology76);
        org.joda.time.PeriodType periodType81 = periodType22.withSecondsRemoved();
        org.joda.time.PeriodType periodType82 = periodType22.withMonthsRemoved();
        org.joda.time.Period period83 = period10.normalizedStandard(periodType82);
        org.joda.time.Period period85 = period10.withMinutes(25797133);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hours" + "'", str27, "hours");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hours" + "'", str68, "hours");
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 25755235L + "'", long74 == 25755235L);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period85);
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.now(chronology26);
        org.joda.time.DateMidnight dateMidnight53 = localDate52.toDateMidnight();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateMidnight53);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy(259200000L);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.monthOfYear();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u4e03\u6708" + "'", str6, "\u4e03\u6708");
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        boolean boolean8 = interval5.isAfter(100L);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        java.lang.String str11 = durationFieldType10.toString();
        mutablePeriod9.set(durationFieldType10, 9);
        org.joda.time.Interval interval14 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology18);
        org.joda.time.Interval interval20 = yearMonthDay19.toInterval();
        org.joda.time.Interval interval22 = interval20.withEndMillis((long) 2);
        boolean boolean23 = interval20.isBeforeNow();
        mutablePeriod9.setPeriod((org.joda.time.ReadableInterval) interval20);
        long long25 = interval20.getEndMillis();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology29);
        org.joda.time.Interval interval31 = yearMonthDay30.toInterval();
        org.joda.time.Period period32 = interval31.toPeriod();
        boolean boolean34 = interval31.isAfter(100L);
        org.joda.time.DateTime dateTime35 = interval31.getEnd();
        org.joda.time.Duration duration36 = interval31.toDuration();
        boolean boolean38 = interval31.isAfter((-4550400000L));
        org.joda.time.Interval interval39 = interval31.toInterval();
        boolean boolean40 = interval20.contains((org.joda.time.ReadableInterval) interval31);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType44 = periodType43.withMonthsRemoved();
        org.joda.time.PeriodType periodType45 = periodType44.withYearsRemoved();
        org.joda.time.PeriodType periodType46 = periodType44.withDaysRemoved();
        org.joda.time.PeriodType periodType47 = periodType44.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(625L, (long) 999, periodType44);
        org.joda.time.PeriodType periodType49 = periodType44.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(periodType44);
        org.joda.time.Period period51 = interval31.toPeriod(periodType44);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hours" + "'", str11, "hours");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-61038230400000L) + "'", long25 == (-61038230400000L));
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period51);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        int int37 = mutablePeriod35.getMinutes();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType40);
        long long47 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) 25755035, 2);
        boolean boolean48 = durationFieldType2.isSupported(chronology24);
        org.joda.time.DateTimeZone dateTimeZone49 = chronology24.getZone();
        long long51 = dateTimeZone49.convertUTCToLocal(3155760000000L);
        java.lang.String str53 = dateTimeZone49.getName(1645513855208L);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((-361032644L), (long) 25842128, dateTimeZone49);
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.now(dateTimeZone49);
        int int57 = dateTimeZone49.getStandardOffset(8665850432L);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 25755235L + "'", long47 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3155760000000L + "'", long51 == 3155760000000L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int10 = property8.getMaximumTextLength(locale9);
        org.joda.time.DateTime dateTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate12 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime14 = dateTime11.minusMonths(32);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond(19);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime19 = dateTime16.withFieldAdded(durationFieldType17, 25762216);
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTimeISO();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int6 = localTime5.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime9 = localTime5.withField(dateTimeFieldType7, 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(0L, dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        int int16 = dateMidnight15.getEra();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, (org.joda.time.ReadableDuration) duration32, periodType34);
        org.joda.time.Period period37 = period35.withMillis(21);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(10, 100, 10, (int) (short) 100, 4, 25755035, (int) ' ', (int) (short) 10);
        org.joda.time.Period period48 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.hours();
        java.lang.String str50 = durationFieldType49.toString();
        org.joda.time.Period period52 = period48.withField(durationFieldType49, 2);
        mutablePeriod46.add(durationFieldType49, 32769);
        boolean boolean55 = period37.isSupported(durationFieldType49);
        org.joda.time.LocalTime localTime57 = localTime9.withFieldAdded(durationFieldType49, 188);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61662789807965,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=15,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=362,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=32,MILLISECOND=35,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hours" + "'", str50, "hours");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(localTime57);
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Interval interval23 = interval21.withPeriodBeforeEnd(readablePeriod22);
        boolean boolean24 = interval5.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.Period period31 = interval30.toPeriod();
        boolean boolean33 = interval30.isAfter(100L);
        boolean boolean34 = interval23.isAfter((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Interval interval35 = interval23.toInterval();
        long long36 = interval23.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        int int40 = dateMidnight39.getEra();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = dateMidnight39.toDateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusDays(9);
        int int45 = dateTime42.getEra();
        org.joda.time.DateMidnight dateMidnight46 = dateTime42.toDateMidnight();
        boolean boolean47 = interval23.isAfter((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime52 = property50.addWrapField((int) (short) 0);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(0L, dateTimeZone55);
        org.joda.time.LocalDate localDate57 = dateMidnight56.toLocalDate();
        mutableDateTime52.setDate((org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight56.plusYears(25787857);
        boolean boolean61 = dateMidnight46.isAfter((org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.DateMidnight.Property property62 = dateMidnight56.year();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        int int4 = dateMidnight3.getEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateMidnight3.toDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(9);
        int int9 = dateTime6.getEra();
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone11);
        java.lang.String str14 = dateTimeZone11.toString();
        boolean boolean15 = dateTimeZone11.isFixed();
        java.util.TimeZone timeZone16 = dateTimeZone11.toTimeZone();
        java.lang.String str18 = dateTimeZone11.getName((long) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        int int22 = dateMidnight21.getEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateMidnight21.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(9);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime24.yearOfCentury();
        org.joda.time.DateTime dateTime29 = property28.withMaximumValue();
        org.joda.time.DateTime dateTime31 = property28.setCopy(20);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        int int37 = dateMidnight36.getEra();
        org.joda.time.DateMidnight.Property property38 = dateMidnight36.monthOfYear();
        org.joda.time.DateMidnight dateMidnight40 = property38.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property38.getFieldType();
        org.joda.time.DateTimeField dateTimeField42 = property38.getField();
        org.joda.time.DateMidnight dateMidnight44 = property38.addToCopy(1970);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight44.withYear((int) '4');
        int int48 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateMidnight47);
        int int49 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(815496612060577000L, dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.roundHalfEven();
        int int6 = mutableDateTime5.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundFloor();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundFloor();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology21);
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay22.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime17, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        int int32 = dateMidnight31.getEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateMidnight31.toDateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusDays(9);
        int int37 = dateTime34.getEra();
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime38.getZone();
        long long42 = dateTimeZone39.adjustOffset((long) 5, true);
        boolean boolean44 = dateTimeZone39.isStandardOffset((long) 3);
        mutableDateTime17.setZoneRetainFields(dateTimeZone39);
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime5.setDate((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone50);
        int int52 = dateMidnight51.getEra();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateMidnight51.toDateTime(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusDays(9);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis(6);
        int int59 = dateTime54.getDayOfYear();
        mutableDateTime11.setMillis((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime11.minuteOfHour();
        mutableDateTime11.add((-48023395L));
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 5L + "'", long42 == 5L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("P-32Y-100M-7W-1970DT-5H-21M-25817.298S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"P-32Y-100M-7W-1970DT-5H-21M-2581...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.year();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        int int17 = dateMidnight16.getEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateMidnight16.toDateTime(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusDays(9);
        int int22 = dateTime19.getEra();
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        java.lang.String str25 = dateTimeZone24.toString();
        org.joda.time.Chronology chronology26 = chronology13.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = chronology13.getZone();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(dateTimeZone27);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        long long31 = dateTimeZone27.convertUTCToLocal((long) 50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(8722001, 25886961, (-292278), 0, 28, 0, dateTimeZone27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25886961 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 50L + "'", long31 == 50L);
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType7.getDurationType();
        java.lang.String str10 = dateTimeFieldType7.getName();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondOfDay" + "'", str10, "secondOfDay");
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = interval5.withPeriodBeforeEnd(readablePeriod6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        org.joda.time.Duration duration46 = mutablePeriod35.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight30.plus((org.joda.time.ReadableDuration) duration46);
        int int48 = dateMidnight27.compareTo((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, readableInstant49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight27.minusYears(22);
        int int53 = dateMidnight52.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.plusMonths(25852727);
        boolean boolean56 = interval5.isBefore((org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.DateMidnight.Property property57 = dateMidnight55.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight59 = property57.addToCopy((long) 1434);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime9 = property7.addWrapFieldToCopy(0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.roundFloor();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology18);
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay19.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateMidnight20, periodType24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        org.joda.time.Duration duration41 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(0L, dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        int int48 = dateMidnight47.getEra();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        java.lang.Object obj54 = mutablePeriod53.clone();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        mutablePeriod53.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone62);
        org.joda.time.Duration duration64 = mutablePeriod53.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight47, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, (org.joda.time.ReadableDuration) duration64, periodType66);
        boolean boolean68 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone71);
        int int73 = dateMidnight72.getEra();
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(0L, 100L, periodType76, chronology77);
        java.lang.Object obj79 = mutablePeriod78.clone();
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(0L, 100L, periodType82, chronology83);
        mutablePeriod78.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod84);
        org.joda.time.DateTimeZone dateTimeZone87 = null;
        org.joda.time.DateMidnight dateMidnight88 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone87);
        org.joda.time.Duration duration89 = mutablePeriod78.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight88);
        org.joda.time.Period period90 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight72, (org.joda.time.ReadableDuration) duration89);
        org.joda.time.DateTime dateTime91 = dateMidnight72.toDateTime();
        org.joda.time.Interval interval92 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateMidnight72);
        boolean boolean93 = interval92.containsNow();
        org.joda.time.MutableInterval mutableInterval94 = interval92.toMutableInterval();
        long long95 = interval92.getStartMillis();
        boolean boolean96 = property7.equals((java.lang.Object) interval92);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "PT0.100S");
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "PT0.100S");
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(mutableInterval94);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-100L) + "'", long95 == (-100L));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateMidnight8.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusDays(9);
        int int14 = dateTime11.getEra();
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone16);
        boolean boolean18 = calendar0.before((java.lang.Object) dateTimeZone16);
        calendar0.set(32, 52, (int) (byte) -1);
        calendar0.setTimeInMillis(0L);
        boolean boolean25 = calendar0.isWeekDateSupported();
        java.lang.Object obj26 = calendar0.clone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        java.util.Date date5 = calendar0.getTime();
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        calendar0.set(25762216, (int) '#', 32772, 0, (int) ' ', 25756429);
        calendar0.setLenient(false);
        calendar0.setMinimalDaysInFirstWeek(25918840);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=25918840,ERA=1,YEAR=25762216,MONTH=35,WEEK_OF_YEAR=24,WEEK_OF_MONTH=2,DAY_OF_MONTH=32772,DAY_OF_YEAR=362,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=0,MINUTE=32,SECOND=25756429,MILLISECOND=405,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Dec 28 07:16:32 GMT 15");
        org.junit.Assert.assertNotNull(timeOfDay6);
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTime dateTime16 = interval12.getEnd();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        int int20 = dateMidnight19.getEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateMidnight19.toDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks(0);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime28 = dateTime24.withFieldAdded(durationFieldType26, 5);
        org.joda.time.DateTime dateTime30 = dateTime24.withMillisOfDay(2);
        org.joda.time.DateMidnight dateMidnight31 = dateTime24.toDateMidnight();
        boolean boolean32 = interval12.equals((java.lang.Object) dateTime24);
        org.joda.time.DateTime.Property property33 = dateTime24.dayOfWeek();
        org.joda.time.Period period38 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period40 = period38.plusDays(1970);
        org.joda.time.Period period41 = period40.normalizedStandard();
        org.joda.time.DateTime dateTime42 = dateTime24.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.DateTime dateTime44 = dateTime24.minusMillis(119);
        org.joda.time.DateTime dateTime45 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(0L, dateTimeZone47);
        org.joda.time.LocalDate localDate49 = dateMidnight48.toLocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.minusWeeks(100);
        org.joda.time.Chronology chronology52 = localDate49.getChronology();
        org.joda.time.LocalDate.Property property53 = localDate49.yearOfCentury();
        org.joda.time.LocalDate localDate55 = localDate49.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property56 = localDate49.weekOfWeekyear();
        org.joda.time.DateTime dateTime57 = localDate49.toDateTimeAtStartOfDay();
        int int58 = dateTime57.getMinuteOfHour();
        org.joda.time.DateTime dateTime60 = dateTime57.withCenturyOfEra(0);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType65 = periodType64.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(4000L, (long) (byte) 100, periodType64);
        org.joda.time.PeriodType periodType67 = periodType64.withSecondsRemoved();
        org.joda.time.Period period68 = new org.joda.time.Period(0L, periodType67);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime60, periodType67);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType67);
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime15 = property13.addNoWrapToCopy((int) '4');
        org.joda.time.DateTimeField dateTimeField16 = property13.getField();
        org.joda.time.LocalTime localTime18 = property13.addCopy((-59930L));
        org.joda.time.LocalTime localTime20 = localTime18.plusMinutes(5);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay4.withFieldAdded(durationFieldType8, 12);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusMonths((-17639));
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        boolean boolean8 = interval5.isAfter(100L);
        org.joda.time.DateTime dateTime9 = interval5.getEnd();
        org.joda.time.Duration duration10 = interval5.toDuration();
        org.joda.time.Chronology chronology11 = interval5.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.centuries();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(0L, dateTimeZone15);
        org.joda.time.LocalDate localDate17 = dateMidnight16.toLocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks(100);
        org.joda.time.Chronology chronology20 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1000L, chronology20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((java.lang.Object) durationField12, chronology20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.ScaledDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology9);
        org.joda.time.Interval interval11 = yearMonthDay10.toInterval();
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType14 = periodType13.withMillisRemoved();
        int int15 = periodType14.size();
        org.joda.time.Period period17 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.hours();
        java.lang.String str19 = durationFieldType18.toString();
        org.joda.time.Period period21 = period17.withField(durationFieldType18, 2);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        org.joda.time.Duration duration40 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight24.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDate localDate42 = dateMidnight41.toLocalDate();
        org.joda.time.Chronology chronology43 = localDate42.getChronology();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        java.lang.Object obj49 = mutablePeriod48.clone();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        int int56 = mutablePeriod54.getMinutes();
        org.joda.time.Period period58 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.hours();
        java.lang.String str60 = durationFieldType59.toString();
        org.joda.time.Period period62 = period58.withField(durationFieldType59, 2);
        boolean boolean63 = mutablePeriod54.isSupported(durationFieldType59);
        long long66 = chronology43.add((org.joda.time.ReadablePeriod) mutablePeriod54, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Chronology chronology68 = chronology43.withZone(dateTimeZone67);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology68);
        org.joda.time.DurationField durationField70 = chronology68.halfdays();
        org.joda.time.DurationField durationField71 = durationFieldType18.getField(chronology68);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((java.lang.Object) interval11, periodType14, chronology68);
        mutablePeriod72.addYears(7);
        mutablePeriod72.setMonths(0);
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod72);
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay77.withYear(25848136);
        org.joda.time.DateTime dateTime80 = yearMonthDay77.toDateTimeAtMidnight();
        int int81 = yearMonthDay77.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hours" + "'", str19, "hours");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hours" + "'", str60, "hours");
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 25755235L + "'", long66 == 25755235L);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime15 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime17 = property13.addCopy((-61662790239443L));
        org.joda.time.LocalTime localTime19 = property13.setCopy(8);
        org.joda.time.LocalTime localTime20 = property13.withMinimumValue();
        org.joda.time.LocalTime.Property property21 = localTime20.hourOfDay();
        org.joda.time.LocalTime localTime23 = property21.addCopy(25938381);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property8.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withChronology(chronology18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        boolean boolean26 = dateMidnight17.equals((java.lang.Object) mutablePeriod24);
        boolean boolean27 = property8.equals((java.lang.Object) dateMidnight17);
        org.joda.time.DateTimeField dateTimeField28 = property8.getField();
        org.joda.time.TimeOfDay timeOfDay29 = property8.withMinimumValue();
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay29.withMinuteOfHour((int) '4');
        java.util.Date date34 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromDateFields(date34);
        int int36 = timeOfDay35.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay35.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property41 = timeOfDay40.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay43 = property41.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay44 = property41.withMaximumValue();
        org.joda.time.DurationField durationField45 = property41.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay46 = property41.withMaximumValue();
        org.joda.time.DurationField durationField47 = property41.getDurationField();
        java.lang.String str48 = property41.toString();
        org.joda.time.TimeOfDay timeOfDay50 = property41.addWrapFieldToCopy(25845824);
        org.joda.time.TimeOfDay timeOfDay51 = property41.withMinimumValue();
        int int52 = timeOfDay32.compareTo((org.joda.time.ReadablePartial) timeOfDay51);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay51.minusMinutes(25812360);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(timeOfDay32);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[secondOfMinute]" + "'", str48, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(timeOfDay54);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(56);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = property12.getTimeOfDay();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        java.lang.String str22 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfDay();
        org.joda.time.DurationField durationField24 = chronology21.seconds();
        org.joda.time.Chronology chronology25 = chronology21.withUTC();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.addWrapField((int) (short) 0);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        mutableDateTime4.setMillis(86182012800035L);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.hourOfDay();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime4);
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(86400000L);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minusSeconds((-292278));
        org.joda.time.LocalTime localTime14 = localTime9.withFields((org.joda.time.ReadablePartial) timeOfDay11);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property8.getFieldType();
        org.joda.time.TimeOfDay timeOfDay13 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withMillisOfSecond(3);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay17 = property16.getTimeOfDay();
        int int18 = property16.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay20 = property16.addToCopy(25824083);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.minusMillis(25870425);
        org.joda.time.Chronology chronology23 = timeOfDay20.getChronology();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 23 + "'", int18 == 23);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withMillisRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withMillisRemoved();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        java.lang.String str27 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfHour();
        java.lang.String str29 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.hourOfHalfday();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 25861612, periodType4, chronology26);
        org.joda.time.DateTimeField dateTimeField35 = chronology26.year();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusMonths((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight38.withDayOfMonth((int) (byte) 1);
        org.joda.time.Interval interval43 = dateMidnight38.toInterval();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(0L, dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone48);
        int int50 = dateMidnight49.getEra();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, 100L, periodType53, chronology54);
        java.lang.Object obj56 = mutablePeriod55.clone();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(0L, 100L, periodType59, chronology60);
        mutablePeriod55.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone64);
        org.joda.time.Duration duration66 = mutablePeriod55.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, (org.joda.time.ReadableDuration) duration66);
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, (org.joda.time.ReadableDuration) duration66, periodType68);
        org.joda.time.Interval interval70 = interval43.withDurationAfterStart((org.joda.time.ReadableDuration) duration66);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType72 = periodType71.withSecondsRemoved();
        org.joda.time.Period period73 = interval43.toPeriod(periodType71);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology77);
        org.joda.time.Interval interval79 = yearMonthDay78.toInterval();
        org.joda.time.MutableDateTime mutableDateTime81 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime81.millisOfDay();
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime81.secondOfDay();
        java.lang.String str84 = property83.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime85 = property83.getMutableDateTime();
        boolean boolean86 = interval79.isBefore((org.joda.time.ReadableInstant) mutableDateTime85);
        boolean boolean87 = interval79.containsNow();
        boolean boolean88 = interval43.overlaps((org.joda.time.ReadableInterval) interval79);
        org.joda.time.Period period89 = interval43.toPeriod();
        org.joda.time.Days days90 = period89.toStandardDays();
        org.joda.time.Period period92 = period89.minusWeeks(25888624);
        org.joda.time.Period period94 = period89.plusMinutes(53);
        int[] intArray97 = chronology26.get((org.joda.time.ReadablePeriod) period89, (long) 1911, 1645513855208L);
        java.lang.String str98 = chronology26.toString();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[UTC]" + "'", str27, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "PT0.100S");
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0" + "'", str84, "0");
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(days90);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[52, 1, 3, 0, 7, 10, 53, 297]");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "ISOChronology[UTC]" + "'", str98, "ISOChronology[UTC]");
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        java.util.Date date6 = new java.util.Date(50, 26005485, 740, 292269054, 25773844, 25938646);
        int int7 = date6.getDay();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Jun 29 23:14:46 GMT 2202467");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        java.lang.String str5 = yearMonthDay4.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear(10);
        org.joda.time.DateTime dateTime8 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonthDay4.getFieldTypes();
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay4.monthOfYear();
        org.joda.time.Chronology chronology11 = yearMonthDay4.getChronology();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0035-10-10" + "'", str5, "0035-10-10");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.Duration duration15 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight14);
        mutablePeriod4.addMillis(0);
        mutablePeriod4.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        java.lang.String str48 = mutablePeriod46.toString();
        mutableDateTime41.add((org.joda.time.ReadablePeriod) mutablePeriod46, 2022);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) dateMidnight39, (org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withMillisOfDay(100);
        int int58 = localDateTime57.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = localDateTime57.getFieldType((int) (byte) 1);
        boolean boolean61 = dateMidnight39.isSupported(dateTimeFieldType60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight39.withYear(707);
        int int64 = dateMidnight39.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0.100S" + "'", str48, "PT0.100S");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 14 + "'", int58 == 14);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        int int4 = dateMidnight2.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withField(dateTimeFieldType5, 3);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.minusDays((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableInstant10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight2.yearOfEra();
        org.joda.time.DateMidnight dateMidnight13 = property12.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = property12.addToCopy(257892);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        int int5 = dateMidnight4.getEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = dateMidnight4.toDateTime(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks(0);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime14 = dateTime7.withField(dateTimeFieldType12, 15);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        int int18 = dateMidnight17.getEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateMidnight17.toDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(0);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime24 = dateTime22.toLocalTime();
        org.joda.time.LocalTime localTime26 = localTime24.minusMinutes(3);
        org.joda.time.LocalTime localTime28 = localTime24.minusMillis((-1));
        org.joda.time.DateTime dateTime29 = localTime28.toDateTimeToday();
        org.joda.time.LocalTime localTime31 = localTime28.minusMinutes(2022);
        org.joda.time.Chronology chronology32 = localTime28.getChronology();
        boolean boolean33 = dateTimeFieldType12.isSupported(chronology32);
        org.joda.time.TimeOfDay timeOfDay34 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ', chronology32);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) ' ', chronology32);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight36.plusYears(26034893);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateMidnight8.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusDays(9);
        int int14 = dateTime11.getEra();
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone16);
        boolean boolean18 = calendar0.before((java.lang.Object) dateTimeZone16);
        calendar0.clear();
        calendar0.setFirstDayOfWeek(32772);
        int int22 = calendar0.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=32772,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.Interval interval10 = yearMonthDay9.toInterval();
        org.joda.time.Period period11 = interval10.toPeriod();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology15);
        org.joda.time.Interval interval17 = yearMonthDay16.toInterval();
        org.joda.time.Period period18 = interval17.toPeriod();
        long long19 = interval17.getStartMillis();
        org.joda.time.Interval interval20 = interval10.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        org.joda.time.Duration duration39 = mutablePeriod28.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight23.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.LocalDate localDate41 = dateMidnight40.toLocalDate();
        org.joda.time.Chronology chronology42 = localDate41.getChronology();
        java.lang.String str43 = chronology42.toString();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.secondOfDay();
        org.joda.time.Interval interval45 = interval10.withChronology(chronology42);
        java.lang.String str46 = interval10.toString();
        org.joda.time.MutableInterval mutableInterval47 = interval10.toMutableInterval();
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType50 = periodType49.withSecondsRemoved();
        org.joda.time.Period period51 = interval48.toPeriod(periodType49);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 14, periodType49);
        org.joda.time.Period period53 = new org.joda.time.Period(5097600000L, periodType49);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology57);
        int int59 = yearMonthDay58.size();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        java.lang.Object obj65 = mutablePeriod64.clone();
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(0L, 100L, periodType68, chronology69);
        mutablePeriod64.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay58.plus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone76);
        int int78 = dateMidnight77.getEra();
        org.joda.time.Chronology chronology79 = dateMidnight77.getChronology();
        mutablePeriod70.setPeriod((long) (byte) 100, (long) (byte) -1, chronology79);
        long long84 = chronology79.add((long) 25767397, 1645513759767L, (int) 'u');
        org.joda.time.Period period85 = new org.joda.time.Period((long) 283, periodType49, chronology79);
        org.joda.time.PeriodType periodType86 = periodType49.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) 1977, (long) 177, periodType86);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod87.setYears(26150009);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-61038316800000L) + "'", long19 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z" + "'", str46, "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 192525135660136L + "'", long84 == 192525135660136L);
        org.junit.Assert.assertNotNull(periodType86);
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology6);
        org.joda.time.Interval interval8 = yearMonthDay7.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology13);
        org.joda.time.Interval interval15 = yearMonthDay14.toInterval();
        org.joda.time.Period period16 = interval15.toPeriod();
        long long17 = interval15.getStartMillis();
        org.joda.time.Interval interval18 = interval8.overlap((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.Duration duration37 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight21.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDate localDate39 = dateMidnight38.toLocalDate();
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        java.lang.String str41 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfDay();
        org.joda.time.Interval interval43 = interval8.withChronology(chronology40);
        org.joda.time.DurationField durationField44 = chronology40.seconds();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.centuryOfEra();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 1, periodType1, chronology40);
        org.joda.time.DateTimeField dateTimeField47 = chronology40.yearOfEra();
        org.joda.time.DurationField durationField48 = dateTimeField47.getDurationField();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61038316800000L) + "'", long17 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay3 = property1.addNoWrapToCopy(22);
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay6 = property1.setCopy("4640-10-9 9:22:21");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"4640-10-9 9:22:21\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withEra((int) (short) 0);
        org.joda.time.LocalDate localDate12 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime14 = dateTime11.withCenturyOfEra(70);
        org.joda.time.DateTime.Property property15 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime11.withEarlierOffsetAtOverlap();
        int int17 = dateTime11.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime11.withTime(25762216, 25964944, 25970261, 26108641);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25762216 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-22404962L));
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds(25862871);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone5);
        int int7 = dateMidnight6.getEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = dateMidnight6.toDateTime(chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks(0);
        int int12 = dateTime9.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime9.getZone();
        org.joda.time.DateTime dateTime14 = timeOfDay1.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        int int18 = dateMidnight17.getEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateMidnight17.toDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(0);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime26 = dateTime22.withFieldAdded(durationFieldType24, 5);
        org.joda.time.DateTime dateTime28 = dateTime22.withMillisOfDay(2);
        org.joda.time.DateMidnight dateMidnight29 = dateTime22.toDateMidnight();
        org.joda.time.Period period31 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.hours();
        java.lang.String str33 = durationFieldType32.toString();
        org.joda.time.Period period35 = period31.withField(durationFieldType32, 2);
        org.joda.time.Period period37 = period31.minusSeconds(2);
        java.lang.String str38 = period31.toString();
        org.joda.time.Period period39 = period31.toPeriod();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight29.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay1.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 137);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hours" + "'", str33, "hours");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0.100S" + "'", str38, "PT0.100S");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(timeOfDay42);
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology6);
        org.joda.time.Interval interval8 = yearMonthDay7.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        org.joda.time.Period period11 = period9.withSeconds((int) '#');
        org.joda.time.Period period13 = period11.minusHours(6);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadablePeriod) period13);
        boolean boolean16 = interval14.isAfter(1645513791836L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = localDate37.toInterval(dateTimeZone38);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology43);
        org.joda.time.Interval interval45 = yearMonthDay44.toInterval();
        org.joda.time.Interval interval47 = interval45.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.DateTime.Property property49 = dateTime48.secondOfDay();
        boolean boolean50 = localDate37.equals((java.lang.Object) property49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property49.getFieldType();
        org.joda.time.DateTime dateTime52 = property49.roundFloorCopy();
        java.lang.String str53 = property49.getAsString();
        org.joda.time.DurationField durationField54 = property49.getRangeDurationField();
        org.joda.time.DateTime dateTime55 = property49.getDateTime();
        org.joda.time.Interval interval56 = interval14.withEnd((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime.Property property57 = dateTime55.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime59 = property57.setCopy("2022-02-22T07:15:57.603");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:15:57.603\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0" + "'", str53, "0");
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Interval interval23 = interval21.withPeriodBeforeEnd(readablePeriod22);
        boolean boolean24 = interval5.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.Period period31 = interval30.toPeriod();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology35);
        org.joda.time.Interval interval37 = yearMonthDay36.toInterval();
        org.joda.time.Period period38 = interval37.toPeriod();
        long long39 = interval37.getStartMillis();
        org.joda.time.Interval interval40 = interval30.overlap((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology44);
        org.joda.time.Interval interval46 = yearMonthDay45.toInterval();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Interval interval48 = interval46.withPeriodBeforeEnd(readablePeriod47);
        boolean boolean49 = interval30.overlaps((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology53);
        org.joda.time.Interval interval55 = yearMonthDay54.toInterval();
        org.joda.time.Period period56 = interval55.toPeriod();
        boolean boolean58 = interval55.isAfter(100L);
        boolean boolean59 = interval48.isAfter((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration60 = interval55.toDuration();
        boolean boolean61 = interval23.abuts((org.joda.time.ReadableInterval) interval55);
        boolean boolean62 = interval23.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone64);
        int int66 = dateMidnight65.getEra();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = dateMidnight65.toDateTime(chronology67);
        org.joda.time.DateTime dateTime70 = dateTime68.plusDays(9);
        org.joda.time.DateTime dateTime71 = dateTime68.toDateTimeISO();
        org.joda.time.DateTime.Property property72 = dateTime68.yearOfCentury();
        boolean boolean73 = interval23.contains((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone75);
        int int77 = dateMidnight76.getEra();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = dateMidnight76.toDateTime(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime79.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight82 = dateTime81.toDateMidnight();
        org.joda.time.DateMidnight.Property property83 = dateMidnight82.era();
        int int84 = dateMidnight82.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight82.plusWeeks(70);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight82.minusWeeks((int) ' ');
        java.util.GregorianCalendar gregorianCalendar89 = dateMidnight88.toGregorianCalendar();
        org.joda.time.DateMidnight.Property property90 = dateMidnight88.dayOfMonth();
        org.joda.time.Interval interval91 = interval23.withEnd((org.joda.time.ReadableInstant) dateMidnight88);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int93 = dateMidnight88.get(dateTimeFieldType92);
        org.joda.time.DateMidnight.Property property94 = dateMidnight88.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight96 = dateMidnight88.plusMonths(25910161);
        org.joda.time.DateMidnight.Property property97 = dateMidnight88.dayOfWeek();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-61038316800000L) + "'", long39 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(gregorianCalendar89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(dateMidnight96);
        org.junit.Assert.assertNotNull(property97);
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = org.joda.time.DateMidnight.now(dateTimeZone10);
        int int14 = dateMidnight13.getYear();
        int int15 = dateMidnight13.getSecondOfDay();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        org.joda.time.Duration duration39 = mutablePeriod28.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight23.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.LocalDate localDate41 = dateMidnight40.toLocalDate();
        org.joda.time.Chronology chronology42 = localDate41.getChronology();
        java.lang.String str43 = chronology42.toString();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.secondOfDay();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(0L, (long) 1, chronology42);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(10L);
        long long49 = chronology42.set((org.joda.time.ReadablePartial) yearMonthDay47, (long) 8);
        org.joda.time.DateTimeField dateTimeField50 = chronology42.secondOfDay();
        org.joda.time.DurationField durationField51 = chronology42.minutes();
        org.joda.time.Period period52 = new org.joda.time.Period(25812624L, (long) 25791265, chronology42);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight13.withPeriodAdded((org.joda.time.ReadablePeriod) period52, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 8L + "'", long49 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateMidnight54);
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        int int13 = dateMidnight12.getEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateMidnight12.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(9);
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        java.lang.String str21 = dateTimeZone20.toString();
        org.joda.time.Chronology chronology22 = chronology9.withZone(dateTimeZone20);
        long long26 = chronology9.add(5L, 0L, 1);
        org.joda.time.DurationField durationField27 = durationFieldType1.getField(chronology9);
        org.joda.time.DurationField durationField28 = durationFieldType0.getField(chronology9);
        java.lang.String str29 = chronology9.toString();
        org.joda.time.DurationField durationField30 = chronology9.centuries();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 5L + "'", long26 == 5L);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology5);
        org.joda.time.Interval interval7 = yearMonthDay6.toInterval();
        org.joda.time.Period period8 = interval7.toPeriod();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        long long16 = interval14.getStartMillis();
        org.joda.time.Interval interval17 = interval7.overlap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.LocalDate localDate38 = dateMidnight37.toLocalDate();
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        java.lang.String str40 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfDay();
        org.joda.time.Interval interval42 = interval7.withChronology(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.seconds();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(chronology39);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(25829182L, (long) 25806820, chronology39);
        java.lang.String str46 = mutablePeriod45.toString();
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-61038316800000L) + "'", long16 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT-22.362S" + "'", str46, "PT-22.362S");
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        int int20 = dateMidnight19.getEra();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, (org.joda.time.ReadableDuration) duration36);
        boolean boolean38 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateMidnight19);
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Calendar calendar40 = dateMidnight19.toCalendar(locale39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight19.withYearOfEra(42);
        org.joda.time.Interval interval43 = dateMidnight19.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((java.lang.Object) interval43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Interval");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(interval43);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.LocalTime localTime4 = timeOfDay2.toLocalTime();
        org.joda.time.Period period6 = org.joda.time.Period.hours((int) (byte) -1);
        org.joda.time.LocalTime localTime7 = localTime4.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalTime.Property property8 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime10 = localTime4.minusHours((-25762));
        java.util.Date date12 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromDateFields(date12);
        int int14 = timeOfDay13.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.minusMinutes(6);
        int int17 = timeOfDay13.size();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay13.withSecondOfMinute((int) ' ');
        int int20 = localTime10.compareTo((org.joda.time.ReadablePartial) timeOfDay19);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        int int14 = localTime13.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = localTime13.withSecondOfMinute(952);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 952 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        long long13 = dateTimeZone10.adjustOffset((long) 5, true);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(dateTimeZone10);
        int int15 = localDate14.getEra();
        org.joda.time.LocalDate.Property property16 = localDate14.monthOfYear();
        org.joda.time.LocalDate localDate17 = property16.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5L + "'", long13 == 5L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType1 = periodType0.withMonthsRemoved();
        org.joda.time.PeriodType periodType2 = periodType1.withYearsRemoved();
        org.joda.time.PeriodType periodType3 = periodType1.withDaysRemoved();
        org.joda.time.PeriodType periodType4 = periodType1.withDaysRemoved();
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(10L);
        org.joda.time.Interval interval7 = yearMonthDay6.toInterval();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime13 = property10.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime15 = property10.addWrapField(993);
        org.joda.time.DateTime dateTime16 = yearMonthDay6.toDateTime((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.addWrapField((int) (short) 0);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.weekOfWeekyear();
        mutableDateTime21.setMillis(86182012800035L);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.hourOfDay();
        org.joda.time.Period period27 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.hours();
        java.lang.String str29 = durationFieldType28.toString();
        org.joda.time.Period period31 = period27.withField(durationFieldType28, 2);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.millis();
        int int33 = period27.get(durationFieldType32);
        mutableDateTime21.add(durationFieldType32, 25795164);
        mutableDateTime15.add(durationFieldType32, 86040100);
        boolean boolean38 = periodType1.isSupported(durationFieldType32);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hours" + "'", str29, "hours");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfCentury(4);
        org.joda.time.Period period10 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        java.lang.String str12 = durationFieldType11.toString();
        org.joda.time.Period period14 = period10.withField(durationFieldType11, 2);
        org.joda.time.Period period16 = period10.minusSeconds(2);
        int int17 = period16.getWeeks();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime4.plus((org.joda.time.ReadablePeriod) period16);
        int int19 = localDateTime4.getHourOfDay();
        org.joda.time.LocalDateTime.Property property20 = localDateTime4.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hours" + "'", str12, "hours");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property7.addToCopy(7);
        java.util.Locale locale12 = null;
        java.lang.String str13 = property7.getAsShortText(locale12);
        java.util.Date date16 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromDateFields(date16);
        int int18 = timeOfDay17.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property23 = timeOfDay22.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay25 = property23.addNoWrapToCopy(3);
        java.lang.String str26 = property23.getName();
        org.joda.time.TimeOfDay timeOfDay27 = property23.getTimeOfDay();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        int int29 = property23.getMaximumShortTextLength(locale28);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale28);
        java.lang.String str31 = locale28.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = property7.setCopy("dayOfMonth", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfMonth\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "70" + "'", str13, "70");
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "secondOfMinute" + "'", str26, "secondOfMinute");
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645514193860,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=33,MILLISECOND=860,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "KR" + "'", str31, "KR");
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType17 = periodType16.withMillisRemoved();
        org.joda.time.Period period18 = interval15.toPeriod(periodType17);
        org.joda.time.DateTime dateTime19 = interval15.getEnd();
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        org.joda.time.LocalDate localDate21 = dateTime19.toLocalDate();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        org.joda.time.DateTime.Property property11 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundCeilingCopy();
        org.joda.time.DateTime dateTime13 = property11.roundFloorCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks(25790484);
        boolean boolean17 = dateTime15.isEqual((long) 25866219);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int10 = property8.getMaximumTextLength(locale9);
        org.joda.time.DateTime dateTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate12 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime14 = dateTime11.minusMonths(32);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond(19);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime22 = property19.getMutableDateTime();
        java.lang.String str23 = mutableDateTime22.toString();
        mutableDateTime22.addSeconds((int) (short) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) 25755035, dateTimeZone29);
        mutableDateTime22.setZoneRetainFields(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime16.withZone(dateTimeZone29);
        int int33 = dateTime32.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        int int37 = dateMidnight36.getEra();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = dateMidnight36.toDateTime(chronology38);
        int int40 = dateTime39.getDayOfYear();
        org.joda.time.DateTime dateTime42 = dateTime39.minusDays(0);
        boolean boolean43 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str23, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 33 + "'", int33 == 33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear((int) '#');
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime13 = property10.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        int int17 = dateMidnight16.getEra();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property18.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property18.getFieldType();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime13.property(dateTimeFieldType21);
        java.lang.String str23 = mutableDateTime13.toString();
        org.joda.time.DateTime dateTime24 = yearMonthDay7.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Interval interval25 = yearMonthDay7.toInterval();
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.Duration duration42 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight41);
        mutablePeriod31.addMillis(0);
        mutablePeriod31.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone48);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        java.lang.Object obj55 = mutablePeriod54.clone();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(0L, 100L, periodType58, chronology59);
        mutablePeriod54.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone63);
        org.joda.time.Duration duration65 = mutablePeriod54.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight49.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(0L, 100L, periodType71, chronology72);
        java.lang.Object obj74 = mutablePeriod73.clone();
        java.lang.String str75 = mutablePeriod73.toString();
        mutableDateTime68.add((org.joda.time.ReadablePeriod) mutablePeriod73, 2022);
        mutablePeriod31.setPeriod((org.joda.time.ReadableInstant) dateMidnight66, (org.joda.time.ReadableInstant) mutableDateTime68);
        org.joda.time.MutableDateTime mutableDateTime79 = mutableDateTime68.toMutableDateTime();
        boolean boolean80 = interval25.equals((java.lang.Object) mutableDateTime68);
        java.lang.String str81 = mutableDateTime68.toString();
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime68.hourOfDay();
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime68.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str23, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "PT0.100S");
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT0.100S" + "'", str75, "PT0.100S");
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-01-01T00:03:22.200Z" + "'", str81, "2022-01-01T00:03:22.200Z");
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("25774925");
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        calendar0.set((int) (byte) 10, 8, (int) (short) 0);
        java.util.Date date9 = calendar0.getTime();
        java.lang.String str10 = calendar0.getCalendarType();
        java.time.Instant instant11 = calendar0.toInstant();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology17);
        org.joda.time.Interval interval19 = yearMonthDay18.toInterval();
        java.lang.String str20 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay18.monthOfYear();
        java.util.Locale locale24 = new java.util.Locale("hi!", "");
        java.lang.String str25 = locale24.getDisplayVariant();
        java.lang.String str26 = locale24.getCountry();
        java.lang.String str27 = locale24.getISO3Language();
        int int28 = property21.getMaximumShortTextLength(locale24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = calendar0.getDisplayName(25966252, 26144569, locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61830837805951,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=7,WEEK_OF_YEAR=36,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=243,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=34,MILLISECOND=49,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 31 07:16:34 GMT 10");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gregory" + "'", str10, "gregory");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0035-10-10" + "'", str20, "0035-10-10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        java.lang.String str11 = property8.getName();
        java.util.Date date13 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromDateFields(date13);
        int int15 = timeOfDay14.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay14.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay19.secondOfMinute();
        java.util.Locale locale23 = new java.util.Locale("hi!", "");
        java.lang.String str24 = property20.getAsShortText(locale23);
        int int25 = property8.getMaximumShortTextLength(locale23);
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.lang.String str27 = locale26.getDisplayVariant();
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale26.getDisplayLanguage();
        int int30 = property8.getMaximumShortTextLength(locale26);
        org.joda.time.TimeOfDay timeOfDay31 = property8.getTimeOfDay();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay31.withFieldAdded(durationFieldType32, 25797973);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType36 = timeOfDay31.getFieldType(26012200);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26012200");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondOfMinute" + "'", str11, "secondOfMinute");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u4e2d\u6587" + "'", str29, "\u4e2d\u6587");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(timeOfDay34);
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear((int) '#');
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime13 = property10.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        int int17 = dateMidnight16.getEra();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property18.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property18.getFieldType();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime13.property(dateTimeFieldType21);
        java.lang.String str23 = mutableDateTime13.toString();
        org.joda.time.DateTime dateTime24 = yearMonthDay7.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Interval interval25 = yearMonthDay7.toInterval();
        boolean boolean26 = interval25.isAfterNow();
        long long27 = interval25.getStartMillis();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str23, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-61038316800000L) + "'", long27 == (-61038316800000L));
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.DateTime dateTime6 = timeOfDay5.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay5.plusMinutes(7);
        int int9 = timeOfDay5.getMinuteOfHour();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54 + "'", int9 == 54);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        org.joda.time.YearMonthDay yearMonthDay58 = property54.addToCopy(7);
        java.lang.String str59 = property54.toString();
        org.joda.time.YearMonthDay yearMonthDay61 = property54.addWrapFieldToCopy((int) (short) 10);
        java.lang.String str62 = property54.getName();
        java.lang.String str63 = property54.getAsString();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Property[year]" + "'", str59, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "year" + "'", str62, "year");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970" + "'", str63, "1970");
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours(26171417);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks(70);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.minusWeeks((int) ' ');
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology20);
        org.joda.time.Interval interval22 = yearMonthDay21.toInterval();
        org.joda.time.DateTime dateTime23 = yearMonthDay21.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property25 = dateTime23.property(dateTimeFieldType24);
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int27 = property25.getMaximumTextLength(locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale26);
        java.lang.String str29 = dateMidnight14.toString("00:00:00.000", locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.add((long) 3);
        mutableDateTime34.setDayOfMonth((int) (byte) 10);
        mutableDateTime34.add((long) 6);
        org.joda.time.Instant instant39 = mutableDateTime34.toInstant();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology43);
        org.joda.time.Interval interval45 = yearMonthDay44.toInterval();
        org.joda.time.Period period46 = interval45.toPeriod();
        boolean boolean48 = interval45.isAfter(100L);
        org.joda.time.DateTime dateTime49 = interval45.getEnd();
        org.joda.time.Duration duration50 = interval45.toDuration();
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight14, (org.joda.time.ReadableDuration) duration50);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645514194232,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=34,MILLISECOND=232,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "00:00:00.000" + "'", str29, "00:00:00.000");
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(duration50);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        int int13 = dateMidnight12.getEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateMidnight12.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(9);
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        java.lang.String str21 = dateTimeZone20.toString();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter7.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = yearMonthDay4.toDateTimeAtMidnight(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        int int28 = dateMidnight27.getEra();
        int int29 = dateMidnight27.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight27.withField(dateTimeFieldType30, 3);
        boolean boolean33 = yearMonthDay4.isSupported(dateTimeFieldType30);
        java.lang.String str34 = yearMonthDay4.toString();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType38 = periodType37.withMillisRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((long) 10, (long) '#', periodType38);
        org.joda.time.Period period40 = period39.negated();
        org.joda.time.Period period41 = period39.normalizedStandard();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay4.minus((org.joda.time.ReadablePeriod) period41);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0035-10-10" + "'", str34, "0035-10-10");
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-03-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology6);
        org.joda.time.Interval interval8 = yearMonthDay7.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology13);
        org.joda.time.Interval interval15 = yearMonthDay14.toInterval();
        org.joda.time.Period period16 = interval15.toPeriod();
        long long17 = interval15.getStartMillis();
        org.joda.time.Interval interval18 = interval8.overlap((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.Duration duration37 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight21.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDate localDate39 = dateMidnight38.toLocalDate();
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        java.lang.String str41 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfDay();
        org.joda.time.Interval interval43 = interval8.withChronology(chronology40);
        org.joda.time.DurationField durationField44 = chronology40.seconds();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.centuryOfEra();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 1, periodType1, chronology40);
        int int47 = period46.size();
        org.joda.time.Period period49 = period46.minusMillis((int) (byte) 0);
        int int50 = period46.getMonths();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61038316800000L) + "'", long17 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusHours(2022);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusSeconds((int) (short) 1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfMonth();
        int int8 = localDateTime6.getWeekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusWeeks((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withField(dateTimeFieldType14, 0);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime6.withDate(352, 220, 25910291);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 220 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTimeAtCurrentTime(dateTimeZone19);
        int int22 = dateTimeZone19.getOffsetFromLocal(1645513759767L);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        org.joda.time.Duration duration44 = mutablePeriod33.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight28.plus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.LocalDate localDate46 = dateMidnight45.toLocalDate();
        org.joda.time.Chronology chronology47 = localDate46.getChronology();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        java.lang.Object obj53 = mutablePeriod52.clone();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, 100L, periodType56, chronology57);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        int int60 = mutablePeriod58.getMinutes();
        org.joda.time.Period period62 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.hours();
        java.lang.String str64 = durationFieldType63.toString();
        org.joda.time.Period period66 = period62.withField(durationFieldType63, 2);
        boolean boolean67 = mutablePeriod58.isSupported(durationFieldType63);
        long long70 = chronology47.add((org.joda.time.ReadablePeriod) mutablePeriod58, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.Chronology chronology72 = chronology47.withZone(dateTimeZone71);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 11, chronology72);
        org.joda.time.DurationField durationField74 = chronology72.weeks();
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay24.withChronologyRetainFields(chronology72);
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay24.plusMonths(186);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = yearMonthDay24.toString("2022-02-22T07:11:43.491");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0.100S");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hours" + "'", str64, "hours");
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 25755235L + "'", long70 == 25755235L);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(yearMonthDay77);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime15 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime17 = property13.addCopy((-61662790239443L));
        org.joda.time.LocalTime localTime19 = property13.setCopy(8);
        org.joda.time.LocalTime localTime20 = property13.getLocalTime();
        org.joda.time.LocalTime localTime21 = property13.roundFloorCopy();
        org.joda.time.LocalTime localTime23 = property13.addCopy((long) 292278993);
        org.joda.time.LocalTime localTime25 = property13.addCopy(894);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate9 = localDate3.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property10 = localDate3.weekOfWeekyear();
        org.joda.time.LocalDate.Property property11 = localDate3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime.Property property8 = dateTime5.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime5.plusDays(0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears(993);
        org.joda.time.DateTime dateTime15 = dateTime11.withMillisOfDay(6);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime11.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.monthOfYear();
        int int18 = property17.get();
        java.lang.String str19 = property17.getAsText();
        int int20 = property17.getMinimumValueOverall();
        java.lang.String str21 = property17.getAsShortText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u4e00\u6708" + "'", str19, "\u4e00\u6708");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e00\u6708" + "'", str21, "\u4e00\u6708");
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(1987200000L);
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder7 = builder3.setDate(25762033, 21, 32769);
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar.Builder builder9 = builder7.setLocale(locale8);
        java.util.Calendar.Builder builder10 = builder2.setLocale(locale8);
        java.util.Date date17 = new java.util.Date(3540000, 119, (-14), 25778198, 292278993, 4640);
        date17.setMinutes(25790484);
        int int20 = date17.getMinutes();
        java.util.Calendar.Builder builder21 = builder2.setInstant(date17);
        java.lang.String str22 = date17.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Wed May 23 04:24:20 GMT 3545455");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 24 + "'", int20 == 24);
        org.junit.Assert.assertNotNull(builder21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Wed May 23 04:24:20 GMT 3545455" + "'", str22, "Wed May 23 04:24:20 GMT 3545455");
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.DateMidnight dateMidnight8 = property4.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusYears(2922789);
        org.joda.time.Period period12 = org.joda.time.Period.millis(7);
        org.joda.time.Period period14 = period12.minusDays(35);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = period14.withPeriodType(periodType15);
        org.joda.time.Period period18 = period14.minusDays(59);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight8.minus((org.joda.time.ReadablePeriod) period18);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withEra((int) (short) 0);
        org.joda.time.LocalDate localDate12 = dateTime11.toLocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths(25755035);
        java.util.Date date15 = localDate14.toDate();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Sat Feb 01 00:00:00 GMT 2148224");
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        mutablePeriod4.setMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        int int10 = dateMidnight9.getEra();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableDuration) duration26);
        mutablePeriod4.add((org.joda.time.ReadableDuration) duration26);
        mutablePeriod4.clear();
        mutablePeriod4.setWeeks(25827445);
        mutablePeriod4.add(26045302, 25787004, 755, 25870425, 26106474, 26041708, 26069497, 26107191);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        int int4 = dateMidnight3.getEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateMidnight3.toDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(9);
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.DateTime dateTime11 = dateTime6.plusDays(0);
        org.joda.time.DateTime dateTime12 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        int int16 = dateMidnight15.getEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateMidnight15.toDateTime(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusDays(9);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis(6);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime12.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.DateTime dateTime31 = yearMonthDay29.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property33 = dateTime31.property(dateTimeFieldType32);
        org.joda.time.DateTime dateTime34 = property33.getDateTime();
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale36 = locale35.stripExtensions();
        int int37 = property33.getMaximumShortTextLength(locale35);
        org.joda.time.DateTime dateTime38 = property33.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        int int42 = dateMidnight41.getEra();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, 100L, periodType45, chronology46);
        java.lang.Object obj48 = mutablePeriod47.clone();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        mutablePeriod47.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone56);
        org.joda.time.Duration duration58 = mutablePeriod47.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight41, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime61.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime63 = property62.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime64 = property62.roundFloor();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology68);
        org.joda.time.DateMidnight dateMidnight70 = yearMonthDay69.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight70.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime64, (org.joda.time.ReadableInstant) dateMidnight70, periodType74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight70.withCenturyOfEra((int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration58, (org.joda.time.ReadableInstant) dateMidnight70);
        org.joda.time.DurationFieldType[] durationFieldTypeArray79 = mutablePeriod78.getFieldTypes();
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.forFields(durationFieldTypeArray79);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime38, periodType80);
        org.joda.time.PeriodType periodType82 = periodType80.withYearsRemoved();
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight(0L, dateTimeZone84);
        org.joda.time.LocalDate localDate86 = dateMidnight85.toLocalDate();
        org.joda.time.LocalDate localDate88 = localDate86.minusWeeks(100);
        org.joda.time.Chronology chronology89 = localDate86.getChronology();
        org.joda.time.DateTimeField dateTimeField90 = chronology89.monthOfYear();
        org.joda.time.DateTimeField dateTimeField91 = chronology89.year();
        org.joda.time.DurationField durationField92 = chronology89.millis();
        org.joda.time.Period period93 = new org.joda.time.Period(192528748800000L, periodType82, chronology89);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "PT0.100S");
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(durationFieldTypeArray79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(durationField92);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight5 = property4.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight7 = property4.setCopy(2);
        org.joda.time.DateMidnight dateMidnight8 = property4.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField9 = property4.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        mutablePeriod4.addHours(5);
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod4.copy();
        mutablePeriod8.setSeconds(23);
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 53);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime14.add(durationFieldType15, 24);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.withFieldAdded(durationFieldType15, 111);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        int int25 = dateMidnight24.getEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateMidnight24.toDateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks(0);
        org.joda.time.DateTime dateTime31 = dateTime27.withYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime34 = dateTime27.withField(dateTimeFieldType32, 15);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        int int38 = dateMidnight37.getEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = dateMidnight37.toDateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks(0);
        org.joda.time.DateTime dateTime43 = dateTime42.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime44 = dateTime42.toLocalTime();
        org.joda.time.LocalTime localTime46 = localTime44.minusMinutes(3);
        org.joda.time.LocalTime localTime48 = localTime44.minusMillis((-1));
        org.joda.time.DateTime dateTime49 = localTime48.toDateTimeToday();
        org.joda.time.LocalTime localTime51 = localTime48.minusMinutes(2022);
        org.joda.time.Chronology chronology52 = localTime48.getChronology();
        boolean boolean53 = dateTimeFieldType32.isSupported(chronology52);
        org.joda.time.TimeOfDay timeOfDay54 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ', chronology52);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) ' ', chronology52);
        mutablePeriod8.setPeriod((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableInstant) mutableDateTime55);
        int int57 = mutableDateTime55.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField58 = mutableDateTime55.getRoundingField();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P-52Y-1M-2W-6DT-23H-59M-59.968S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P-52Y-1M-2W-6DT-23H-59M-59.968S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P-52Y-1M-2W-6DT-23H-59M-59.968S");
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 19 + "'", int57 == 19);
        org.junit.Assert.assertNull(dateTimeField58);
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusHours(2022);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(25782688);
        int int7 = localDateTime4.getDayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 137 + "'", int7 == 137);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        int int32 = localDate29.getYearOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology36);
        int int38 = yearMonthDay37.size();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay37.plus((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime53 = yearMonthDay51.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = localDate29.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.LocalDate localDate55 = dateTime54.toLocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.withYearOfEra(25793899);
        org.joda.time.LocalDate.Property property58 = localDate55.yearOfCentury();
        org.joda.time.LocalDate localDate59 = property58.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate61 = localDate59.withEra(25998019);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25998019 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate59);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear((int) '#');
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime13 = property10.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        int int17 = dateMidnight16.getEra();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property18.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property18.getFieldType();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime13.property(dateTimeFieldType21);
        java.lang.String str23 = mutableDateTime13.toString();
        org.joda.time.DateTime dateTime24 = yearMonthDay7.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Interval interval25 = yearMonthDay7.toInterval();
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.Interval interval27 = interval26.toInterval();
        long long28 = interval27.toDurationMillis();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str23, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 86400000L + "'", long28 == 86400000L);
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        int int12 = dateMidnight11.getEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateMidnight11.toDateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(9);
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime5.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        java.util.Date date2 = new java.util.Date((long) 0);
        int int3 = date2.getDay();
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromDateFields(date2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        java.lang.Object obj14 = mutablePeriod13.clone();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        mutablePeriod13.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        org.joda.time.Duration duration24 = mutablePeriod13.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight8.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.LocalDate localDate26 = dateMidnight25.toLocalDate();
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        int int40 = mutablePeriod38.getMinutes();
        org.joda.time.Period period42 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.hours();
        java.lang.String str44 = durationFieldType43.toString();
        org.joda.time.Period period46 = period42.withField(durationFieldType43, 2);
        boolean boolean47 = mutablePeriod38.isSupported(durationFieldType43);
        long long50 = chronology27.add((org.joda.time.ReadablePeriod) mutablePeriod38, (long) 25755035, 2);
        boolean boolean51 = durationFieldType5.isSupported(chronology27);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay4.withChronologyRetainFields(chronology27);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay52.minusYears(25756429);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours(11);
        org.joda.time.DateTime dateTime57 = yearMonthDay54.toDateTimeAtCurrentTime(dateTimeZone56);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(812750403254400118L, dateTimeZone56);
        java.lang.String str60 = dateTimeZone56.getName(32L);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "PT0.100S");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hours" + "'", str44, "hours");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 25755235L + "'", long50 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+11:00" + "'", str60, "+11:00");
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(666600L);
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField((int) (short) 0);
        org.joda.time.Period period8 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        java.lang.String str10 = durationFieldType9.toString();
        org.joda.time.Period period12 = period8.withField(durationFieldType9, 2);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.Duration duration31 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight15.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.LocalDate localDate33 = dateMidnight32.toLocalDate();
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        java.lang.Object obj40 = mutablePeriod39.clone();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
        int int47 = mutablePeriod45.getMinutes();
        org.joda.time.Period period49 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.hours();
        java.lang.String str51 = durationFieldType50.toString();
        org.joda.time.Period period53 = period49.withField(durationFieldType50, 2);
        boolean boolean54 = mutablePeriod45.isSupported(durationFieldType50);
        long long57 = chronology34.add((org.joda.time.ReadablePeriod) mutablePeriod45, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.Chronology chronology59 = chronology34.withZone(dateTimeZone58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(chronology59);
        org.joda.time.DurationField durationField61 = chronology59.halfdays();
        org.joda.time.DurationField durationField62 = durationFieldType9.getField(chronology59);
        mutableDateTime6.setChronology(chronology59);
        org.joda.time.DateTimeField dateTimeField64 = chronology59.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology59.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField66 = chronology59.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField67 = chronology59.weekyear();
        org.joda.time.DateTime dateTime68 = dateTime1.withChronology(chronology59);
        org.joda.time.DateTime dateTime70 = dateTime1.plusHours(26178023);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hours" + "'", str10, "hours");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.100S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hours" + "'", str51, "hours");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 25755235L + "'", long57 == 25755235L);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.monthOfYear();
        org.joda.time.DateMidnight dateMidnight2 = property1.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = property1.roundHalfEvenCopy();
        org.joda.time.DurationField durationField4 = property1.getLeapDurationField();
        org.joda.time.DurationFieldType durationFieldType5 = durationField4.getType();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.monthOfYear();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology16);
        int int18 = yearMonthDay17.size();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay17.plus((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        int int37 = dateMidnight36.getEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        mutablePeriod29.setPeriod((long) (byte) 100, (long) (byte) -1, chronology38);
        org.joda.time.Period period40 = new org.joda.time.Period(1645513759767L, periodType12, chronology38);
        long long45 = chronology38.getDateTimeMillis((-292275054), 5, 14, 11);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight8.withChronology(chronology38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval47 = new org.joda.time.Interval((java.lang.Object) durationField4, chronology38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.field.PreciseDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-9223372005551999989L) + "'", long45 == (-9223372005551999989L));
        org.junit.Assert.assertNotNull(dateMidnight46);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusYears(6);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("1900-01-01");
        java.lang.String str9 = locale6.getDisplayScript(locale8);
        java.lang.String str10 = dateTimeField4.getAsShortText(25839000L, locale6);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e00\u6708" + "'", str10, "\u4e00\u6708");
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime localTime13 = localTime11.minusMinutes(2022);
        org.joda.time.LocalTime localTime15 = localTime11.plusSeconds(257892);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.TimeOfDay timeOfDay25 = property8.addNoWrapToCopy(5);
        org.joda.time.DurationField durationField26 = property8.getDurationField();
        int int27 = property8.get();
        org.joda.time.TimeOfDay timeOfDay29 = property8.addWrapFieldToCopy(69);
        org.joda.time.DateTime dateTime30 = timeOfDay29.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay29.minusSeconds(25893152);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(timeOfDay32);
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.Chronology chronology11 = null;
        mutablePeriod7.setPeriod((long) 0, (long) 12, chronology11);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.plus((org.joda.time.ReadablePeriod) mutablePeriod7);
        int int14 = localDateTime13.getYearOfCentury();
        int int15 = localDateTime13.getWeekOfWeekyear();
        int int16 = localDateTime13.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.yearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy(755000L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.012S");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        int int10 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        java.lang.Object obj19 = mutablePeriod18.clone();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        org.joda.time.Duration duration29 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight13.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.LocalDate localDate31 = dateMidnight30.toLocalDate();
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        java.lang.String str33 = chronology32.toString();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.minuteOfHour();
        java.lang.String str35 = chronology32.toString();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.hourOfDay();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime5.toMutableDateTime(chronology32);
        org.joda.time.DateTime dateTime40 = dateTime5.minusSeconds(0);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        int int44 = dateMidnight43.getEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateMidnight43.toDateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusDays(9);
        int int49 = dateTime46.getEra();
        org.joda.time.DateTime dateTime50 = dateTime46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime50.getZone();
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight54 = org.joda.time.DateMidnight.now(dateTimeZone51);
        org.joda.time.DateTime dateTime55 = dateTime5.withZoneRetainFields(dateTimeZone51);
        java.util.TimeZone timeZone56 = dateTimeZone51.toTimeZone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "PT0.100S");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[UTC]" + "'", str33, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("2022-02-15T07:15:36.714", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(10, 100, 10, (int) (short) 100, 4, 25755035, (int) ' ', (int) (short) 10);
        org.joda.time.Period period10 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        java.lang.String str12 = durationFieldType11.toString();
        org.joda.time.Period period14 = period10.withField(durationFieldType11, 2);
        mutablePeriod8.add(durationFieldType11, 32769);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology25);
        org.joda.time.Interval interval27 = yearMonthDay26.toInterval();
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology32);
        org.joda.time.Interval interval34 = yearMonthDay33.toInterval();
        org.joda.time.Period period35 = interval34.toPeriod();
        long long36 = interval34.getStartMillis();
        org.joda.time.Interval interval37 = interval27.overlap((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        java.lang.Object obj46 = mutablePeriod45.clone();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 100L, periodType49, chronology50);
        mutablePeriod45.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        org.joda.time.Duration duration56 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight40.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDate localDate58 = dateMidnight57.toLocalDate();
        org.joda.time.Chronology chronology59 = localDate58.getChronology();
        java.lang.String str60 = chronology59.toString();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.secondOfDay();
        org.joda.time.Interval interval62 = interval27.withChronology(chronology59);
        org.joda.time.DurationField durationField63 = chronology59.seconds();
        org.joda.time.DateTimeField dateTimeField64 = chronology59.centuryOfEra();
        org.joda.time.Period period65 = new org.joda.time.Period((long) 1, periodType20, chronology59);
        mutablePeriod8.setPeriod(1222905600000L, (long) 12, chronology59);
        mutablePeriod8.addHours(525);
        int int69 = mutablePeriod8.getMillis();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hours" + "'", str12, "hours");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-61038316800000L) + "'", long36 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "PT0.100S");
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ISOChronology[UTC]" + "'", str60, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-988) + "'", int69 == (-988));
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(70, 85500000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        org.joda.time.YearMonthDay yearMonthDay58 = property54.addToCopy(7);
        java.lang.String str59 = property54.toString();
        org.joda.time.YearMonthDay yearMonthDay61 = property54.addWrapFieldToCopy((int) (short) 10);
        int int62 = property54.getMaximumValueOverall();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Property[year]" + "'", str59, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 292278993 + "'", int62 == 292278993);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        mutablePeriod25.addMillis(0);
        mutablePeriod25.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        java.lang.Object obj49 = mutablePeriod48.clone();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        org.joda.time.Duration duration59 = mutablePeriod48.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight43.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(0L, 100L, periodType65, chronology66);
        java.lang.Object obj68 = mutablePeriod67.clone();
        java.lang.String str69 = mutablePeriod67.toString();
        mutableDateTime62.add((org.joda.time.ReadablePeriod) mutablePeriod67, 2022);
        mutablePeriod25.setPeriod((org.joda.time.ReadableInstant) dateMidnight60, (org.joda.time.ReadableInstant) mutableDateTime62);
        org.joda.time.MutableDateTime mutableDateTime73 = mutableDateTime62.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime73.millisOfDay();
        org.joda.time.DateTime dateTime75 = localDate20.toDateTime((org.joda.time.ReadableInstant) mutableDateTime73);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone77);
        int int79 = dateMidnight78.getEra();
        org.joda.time.Chronology chronology80 = dateMidnight78.getChronology();
        mutableDateTime73.setChronology(chronology80);
        org.joda.time.DateTimeField dateTimeField82 = chronology80.secondOfMinute();
        boolean boolean83 = dateTimeField82.isSupported();
        boolean boolean84 = dateTimeField82.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = dateTimeField82.getType();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0.100S");
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT0.100S" + "'", str69, "PT0.100S");
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.Chronology chronology25 = dateMidnight23.getChronology();
        mutablePeriod16.setPeriod((long) (byte) 100, (long) (byte) -1, chronology25);
        org.joda.time.DurationField durationField27 = chronology25.seconds();
        org.joda.time.DurationField durationField28 = chronology25.minutes();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime localTime13 = localTime11.minusMinutes(2022);
        org.joda.time.LocalTime localTime15 = localTime13.plusMillis(32770);
        org.joda.time.LocalTime localTime17 = localTime13.withMillisOfSecond(51);
        org.joda.time.LocalTime localTime19 = localTime17.plusSeconds(2740);
        java.util.Date date21 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromDateFields(date21);
        int int23 = timeOfDay22.getSecondOfMinute();
        org.joda.time.LocalTime localTime24 = timeOfDay22.toLocalTime();
        org.joda.time.Period period26 = org.joda.time.Period.hours((int) (byte) -1);
        org.joda.time.LocalTime localTime27 = localTime24.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.LocalTime.Property property28 = localTime24.minuteOfHour();
        org.joda.time.LocalTime localTime30 = property28.setCopy((int) (byte) 0);
        boolean boolean31 = localTime19.isAfter((org.joda.time.ReadablePartial) localTime30);
        org.joda.time.LocalTime localTime33 = localTime19.minusHours(16);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        calendar34.setWeekDate(16, (int) (byte) 0, 7);
        int int40 = calendar34.getGreatestMinimum(0);
        calendar34.setMinimalDaysInFirstWeek(8);
        java.time.Instant instant43 = calendar34.toInstant();
        java.time.Instant instant44 = calendar34.toInstant();
        calendar34.roll(8, false);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        java.lang.Object obj55 = mutablePeriod54.clone();
        java.lang.String str56 = mutablePeriod54.toString();
        mutableDateTime49.add((org.joda.time.ReadablePeriod) mutablePeriod54, 2022);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime49.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone61);
        int int63 = dateMidnight62.getEra();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = dateMidnight62.toDateTime(chronology64);
        org.joda.time.DateTime dateTime67 = dateTime65.plusDays(9);
        int int68 = dateTime65.getEra();
        org.joda.time.DateTime dateTime69 = dateTime65.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime69.getZone();
        long long73 = dateTimeZone70.adjustOffset((long) 5, true);
        mutableDateTime49.setZoneRetainFields(dateTimeZone70);
        java.util.TimeZone timeZone75 = dateTimeZone70.toTimeZone();
        java.util.TimeZone.setDefault(timeZone75);
        calendar34.setTimeZone(timeZone75);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        org.joda.time.tz.NameProvider nameProvider80 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider80);
        java.util.Locale locale83 = java.util.Locale.forLanguageTag("1900-01-01");
        java.lang.String str86 = nameProvider80.getName(locale83, "DurationField[seconds]", "May 11, 2022 7:09:54 AM");
        java.util.Set<java.lang.String> strSet87 = locale83.getUnicodeLocaleAttributes();
        java.lang.String str88 = dateTimeZone78.getName((-61038316799900L), locale83);
        org.joda.time.DateTime dateTime89 = localTime33.toDateTimeToday(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=8,ERA=1,YEAR=15,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=362,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=35,MILLISECOND=581,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0.100S" + "'", str56, "PT0.100S");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 5L + "'", long73 == 5L);
        org.junit.Assert.assertNotNull(timeZone75);
        org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(nameProvider80);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00" + "'", str88, "+00:00");
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        org.joda.time.Period period1 = org.joda.time.Period.years(26106474);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Interval interval23 = interval21.withPeriodBeforeEnd(readablePeriod22);
        boolean boolean24 = interval5.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.Period period31 = interval30.toPeriod();
        boolean boolean33 = interval30.isAfter(100L);
        boolean boolean34 = interval23.isAfter((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Interval interval35 = interval23.toInterval();
        long long36 = interval23.toDurationMillis();
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime41 = property39.add((long) 3);
        mutableDateTime41.setDayOfMonth((int) (byte) 10);
        mutableDateTime41.add((long) 6);
        mutableDateTime41.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.monthOfYear();
        mutableDateTime41.setTime((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, 100L, periodType56, chronology57);
        java.lang.Object obj59 = mutablePeriod58.clone();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone67);
        org.joda.time.Duration duration69 = mutablePeriod58.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight53.plus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.LocalDate localDate71 = dateMidnight70.toLocalDate();
        org.joda.time.Period period73 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.hours();
        java.lang.String str75 = durationFieldType74.toString();
        org.joda.time.Period period77 = period73.withField(durationFieldType74, 2);
        org.joda.time.Period period79 = period77.withMillis((int) '#');
        org.joda.time.LocalDate localDate80 = localDate71.minus((org.joda.time.ReadablePeriod) period79);
        int int81 = period79.getMonths();
        org.joda.time.Period period83 = period79.minusMinutes(8);
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime41, (org.joda.time.ReadablePeriod) period79);
        org.joda.time.Interval interval85 = interval84.toInterval();
        boolean boolean86 = interval23.contains((org.joda.time.ReadableInterval) interval85);
        org.joda.time.MutableInterval mutableInterval87 = interval85.toMutableInterval();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "PT0.100S");
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hours" + "'", str75, "hours");
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(mutableInterval87);
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateMidnight8.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusDays(9);
        int int14 = dateTime11.getEra();
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter3.withZone(dateTimeZone16);
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        int int25 = dateMidnight24.getEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateMidnight24.toDateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusDays(9);
        int int30 = dateTime27.getEra();
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime31.getZone();
        long long35 = dateTimeZone32.adjustOffset((long) 5, true);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        org.joda.time.Duration duration54 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight38.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.LocalDate localDate56 = dateMidnight55.toLocalDate();
        org.joda.time.Chronology chronology57 = localDate56.getChronology();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(0L, 100L, periodType60, chronology61);
        java.lang.Object obj63 = mutablePeriod62.clone();
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(0L, 100L, periodType66, chronology67);
        mutablePeriod62.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod68);
        int int70 = mutablePeriod68.getMinutes();
        org.joda.time.Period period72 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.hours();
        java.lang.String str74 = durationFieldType73.toString();
        org.joda.time.Period period76 = period72.withField(durationFieldType73, 2);
        boolean boolean77 = mutablePeriod68.isSupported(durationFieldType73);
        long long80 = chronology57.add((org.joda.time.ReadablePeriod) mutablePeriod68, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.Chronology chronology82 = chronology57.withZone(dateTimeZone81);
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(chronology82);
        boolean boolean84 = dateTimeZone32.equals((java.lang.Object) localDate83);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = dateTimeFormatter3.withZone(dateTimeZone32);
        org.joda.time.format.DateTimePrinter dateTimePrinter86 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = dateTimeFormatter3.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate88 = org.joda.time.LocalDate.parse("571", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(dateTimeParser20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 5L + "'", long35 == 5L);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.100S");
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hours" + "'", str74, "hours");
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 25755235L + "'", long80 == 25755235L);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter85);
        org.junit.Assert.assertNull(dateTimePrinter86);
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property8.getFieldType();
        org.joda.time.DateTime dateTime11 = property8.getDateTime();
        org.joda.time.DateTime dateTime13 = property8.addWrapFieldToCopy(25889819);
        org.joda.time.DurationField durationField14 = property8.getDurationField();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        int int11 = dateMidnight10.getEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateMidnight10.toDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays(9);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight6.withZoneRetainFields(dateTimeZone18);
        boolean boolean21 = dateMidnight6.isEqualNow();
        int int22 = dateMidnight6.getYearOfEra();
        org.joda.time.DateMidnight.Property property23 = dateMidnight6.year();
        org.joda.time.DateMidnight dateMidnight25 = property23.addToCopy(580);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1972 + "'", int22 == 1972);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) '#', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        int int6 = dateMidnight5.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateMidnight5.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusDays(9);
        int int11 = dateTime8.getEra();
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundCeilingCopy();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.Chronology chronology24 = null;
        mutablePeriod20.setPeriod((long) 0, (long) 12, chronology24);
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        int int27 = mutableDateTime2.getHourOfDay();
        int int28 = mutableDateTime2.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime2.toMutableDateTimeISO();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology33);
        org.joda.time.Interval interval35 = yearMonthDay34.toInterval();
        org.joda.time.Period period36 = interval35.toPeriod();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology40);
        org.joda.time.Interval interval42 = yearMonthDay41.toInterval();
        org.joda.time.Period period43 = interval42.toPeriod();
        long long44 = interval42.getStartMillis();
        org.joda.time.Interval interval45 = interval35.overlap((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        java.lang.Object obj54 = mutablePeriod53.clone();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        mutablePeriod53.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone62);
        org.joda.time.Duration duration64 = mutablePeriod53.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight48.plus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.LocalDate localDate66 = dateMidnight65.toLocalDate();
        org.joda.time.Chronology chronology67 = localDate66.getChronology();
        java.lang.String str68 = chronology67.toString();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.secondOfDay();
        org.joda.time.Interval interval70 = interval35.withChronology(chronology67);
        org.joda.time.DurationField durationField71 = chronology67.seconds();
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now(chronology67);
        mutableDateTime29.setChronology(chronology67);
        org.joda.time.DurationField durationField74 = chronology67.millis();
        boolean boolean75 = durationField74.isPrecise();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.012S");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-61038316800000L) + "'", long44 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "PT0.100S");
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[UTC]" + "'", str68, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.roll((int) (byte) 0, false);
        calendar0.set(25809785, 483, 103);
        int int8 = calendar0.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.roll(308, 26119027);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=25809785,MONTH=483,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=103,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=35,MILLISECOND=867,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.LocalDate localDate55 = yearMonthDay51.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay51.minusMonths(93);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology23.withZone(dateTimeZone47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 11, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = dateTimeField50.getType();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = dateTimeField50.getAsText(894, locale53);
        java.util.Locale.Builder builder55 = builder0.setLocale(locale53);
        java.util.Locale.Builder builder57 = builder55.setLanguage("");
        java.util.Locale.Builder builder59 = builder55.setVariant("1AM19700");
        java.util.Locale.Builder builder61 = builder59.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder64 = builder61.setExtension('x', "DurationField[months]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: DurationField[months] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25755235L + "'", long46 == 25755235L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "894" + "'", str54, "894");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        java.lang.String str23 = chronology22.toString();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 16, chronology22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime31 = property29.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime32 = property29.roundHalfEven();
        int int33 = mutableDateTime32.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime38 = property36.roundFloor();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime44 = property42.roundFloor();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology48);
        org.joda.time.DateMidnight dateMidnight50 = yearMonthDay49.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime44, (org.joda.time.ReadableInstant) dateMidnight50, periodType54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        int int59 = dateMidnight58.getEra();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = dateMidnight58.toDateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime61.plusDays(9);
        int int64 = dateTime61.getEra();
        org.joda.time.DateTime dateTime65 = dateTime61.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime65.getZone();
        long long69 = dateTimeZone66.adjustOffset((long) 5, true);
        boolean boolean71 = dateTimeZone66.isStandardOffset((long) 3);
        mutableDateTime44.setZoneRetainFields(dateTimeZone66);
        mutableDateTime38.setDate((org.joda.time.ReadableInstant) mutableDateTime44);
        mutableDateTime32.setDate((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime38.secondOfMinute();
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(0L, 100L, periodType78, chronology79);
        java.lang.Object obj81 = mutablePeriod80.clone();
        java.lang.String str82 = mutablePeriod80.toString();
        mutablePeriod80.addSeconds((int) 'a');
        mutableDateTime38.add((org.joda.time.ReadablePeriod) mutablePeriod80, 2);
        long long89 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod80, 840977L, 25852727);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 5L + "'", long69 == 5L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "PT97.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "PT97.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "PT97.100S");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "PT0.100S" + "'", str82, "PT0.100S");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 2510300632677L + "'", long89 == 2510300632677L);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.year();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMillis((int) (short) 10);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundCeilingCopy();
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) "2022-02-15T07:12:30.044", chronology12);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-15T07:16:36.066" + "'", str8, "2022-02-15T07:16:36.066");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.minutes();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.dayOfWeek();
        org.joda.time.DurationField durationField44 = dateTimeField43.getLeapDurationField();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNull(durationField44);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        int int4 = dateMidnight2.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withField(dateTimeFieldType5, 3);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.Period period22 = interval21.toPeriod();
        long long23 = interval21.getStartMillis();
        org.joda.time.Interval interval24 = interval14.overlap((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.Duration duration43 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        java.lang.String str47 = chronology46.toString();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.secondOfDay();
        org.joda.time.Interval interval49 = interval14.withChronology(chronology46);
        org.joda.time.DurationField durationField50 = chronology46.minutes();
        org.joda.time.DateTimeField dateTimeField51 = chronology46.secondOfMinute();
        long long55 = chronology46.add(31556952000L, (-61662790239443L), 0);
        org.joda.time.DateTimeField dateTimeField56 = chronology46.millisOfDay();
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay(2232981216000000L, chronology46);
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType5.getField(chronology46);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-61038316800000L) + "'", long23 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 31556952000L + "'", long55 == 31556952000L);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.standard();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.PeriodType periodType3 = periodType1.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(0L, dateTimeZone5);
        org.joda.time.LocalDate localDate7 = dateMidnight6.toLocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusWeeks(100);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.year();
        java.lang.String str13 = chronology10.toString();
        org.joda.time.Period period14 = new org.joda.time.Period(1648108183808L, periodType1, chronology10);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Standard" + "'", str2, "Standard");
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.Interval interval10 = yearMonthDay9.toInterval();
        org.joda.time.Period period11 = interval10.toPeriod();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology15);
        org.joda.time.Interval interval17 = yearMonthDay16.toInterval();
        org.joda.time.Period period18 = interval17.toPeriod();
        long long19 = interval17.getStartMillis();
        org.joda.time.Interval interval20 = interval10.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        org.joda.time.Duration duration39 = mutablePeriod28.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight23.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.LocalDate localDate41 = dateMidnight40.toLocalDate();
        org.joda.time.Chronology chronology42 = localDate41.getChronology();
        java.lang.String str43 = chronology42.toString();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.secondOfDay();
        org.joda.time.Interval interval45 = interval10.withChronology(chronology42);
        org.joda.time.DurationField durationField46 = chronology42.minutes();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) 14, chronology42);
        org.joda.time.Period period48 = new org.joda.time.Period((-61038316800000L), (-61038316800000L), periodType3, chronology42);
        org.joda.time.Period period50 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.hours();
        java.lang.String str52 = durationFieldType51.toString();
        org.joda.time.Period period54 = period50.withField(durationFieldType51, 2);
        org.joda.time.PeriodType periodType55 = period54.getPeriodType();
        org.joda.time.Period period57 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.hours();
        java.lang.String str59 = durationFieldType58.toString();
        org.joda.time.Period period61 = period57.withField(durationFieldType58, 2);
        int int62 = period57.size();
        org.joda.time.MutablePeriod mutablePeriod63 = period57.toMutablePeriod();
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(periodType64);
        org.joda.time.Period period66 = period57.plus((org.joda.time.ReadablePeriod) mutablePeriod65);
        org.joda.time.Period period68 = period66.minusMillis(3);
        org.joda.time.Period period69 = period54.plus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.Period period71 = period54.minusSeconds(25804551);
        int[] intArray73 = chronology42.get((org.joda.time.ReadablePeriod) period54, (long) 25762147);
        org.joda.time.DateTimeField dateTimeField74 = chronology42.millisOfDay();
        int int75 = dateTimeField74.getMinimumValue();
        java.lang.String str77 = dateTimeField74.getAsShortText((long) 457);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-61038316800000L) + "'", long19 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hours" + "'", str52, "hours");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hours" + "'", str59, "hours");
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 0, 0, 7, 9, 22, 147]");
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "457" + "'", str77, "457");
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) '#', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        int int6 = dateMidnight5.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateMidnight5.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusDays(9);
        int int11 = dateTime8.getEra();
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundCeilingCopy();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.Chronology chronology24 = null;
        mutablePeriod20.setPeriod((long) 0, (long) 12, chronology24);
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime2.secondOfMinute();
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("days");
        java.util.Calendar calendar30 = mutableDateTime2.toCalendar(locale29);
        mutableDateTime2.addMonths(26107191);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.012S");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "days");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=47,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=47,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology5);
        org.joda.time.Interval interval7 = yearMonthDay6.toInterval();
        org.joda.time.Period period8 = interval7.toPeriod();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        long long16 = interval14.getStartMillis();
        org.joda.time.Interval interval17 = interval7.overlap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.LocalDate localDate38 = dateMidnight37.toLocalDate();
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        java.lang.String str40 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfDay();
        org.joda.time.Interval interval42 = interval7.withChronology(chronology39);
        org.joda.time.DateTimeField dateTimeField43 = chronology39.dayOfMonth();
        org.joda.time.Period period44 = new org.joda.time.Period((long) (-292275054), periodType1, chronology39);
        org.joda.time.DateTimeField dateTimeField45 = chronology39.hourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology39.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology39.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        int int53 = dateMidnight52.getEra();
        org.joda.time.DateMidnight.Property property54 = dateMidnight52.monthOfYear();
        org.joda.time.DateMidnight dateMidnight56 = property54.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property54.getFieldType();
        org.joda.time.DateMidnight dateMidnight58 = property54.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight59 = property54.roundHalfFloorCopy();
        int int60 = property49.getDifference((org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.DateMidnight.Property property61 = dateMidnight59.yearOfEra();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-61038316800000L) + "'", long16 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 19045 + "'", int60 == 19045);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        java.util.Locale locale11 = new java.util.Locale("hi!", "");
        java.lang.String str12 = property8.getAsShortText(locale11);
        org.joda.time.TimeOfDay timeOfDay14 = property8.addNoWrapToCopy(0);
        org.joda.time.TimeOfDay timeOfDay15 = property8.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((java.lang.Object) property8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.TimeOfDay$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime dateTime8 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra(2022);
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded((long) 25762033, 0);
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfMonth();
        org.joda.time.LocalDate localDate15 = dateTime10.toLocalDate();
        org.joda.time.DateTime.Property property16 = dateTime10.weekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfDay();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundCeiling();
        int int7 = mutableDateTime6.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime6.getZone();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.millisOfSecond();
        int int10 = mutableDateTime6.getMonthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis((int) (short) 10);
        java.lang.String str7 = localDateTime6.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.year();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withYearOfCentury(4);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        int int20 = dateMidnight19.getEra();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        int int41 = dateMidnight40.getEra();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone55);
        org.joda.time.Duration duration57 = mutablePeriod46.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight40, (org.joda.time.ReadableDuration) duration57);
        boolean boolean59 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime16.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime6.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusDays(1970);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusHours(342);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusMinutes(25767397);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-15T07:16:36.732" + "'", str7, "2022-02-15T07:16:36.732");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        int int32 = localDate29.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight35.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDate localDate53 = dateMidnight52.toLocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.dayOfYear();
        org.joda.time.LocalDate localDate55 = property54.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate57 = localDate55.withWeekyear(11);
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime59.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime61 = property60.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime62 = property60.roundFloor();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology66);
        org.joda.time.DateMidnight dateMidnight68 = yearMonthDay67.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight68.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime62, (org.joda.time.ReadableInstant) dateMidnight68, periodType72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone75);
        int int77 = dateMidnight76.getEra();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = dateMidnight76.toDateTime(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime79.plusDays(9);
        int int82 = dateTime79.getEra();
        org.joda.time.DateTime dateTime83 = dateTime79.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone84 = dateTime83.getZone();
        long long87 = dateTimeZone84.adjustOffset((long) 5, true);
        boolean boolean89 = dateTimeZone84.isStandardOffset((long) 3);
        mutableDateTime62.setZoneRetainFields(dateTimeZone84);
        org.joda.time.DateTime dateTime91 = localDate57.toDateTimeAtCurrentTime(dateTimeZone84);
        org.joda.time.Interval interval92 = localDate29.toInterval(dateTimeZone84);
        java.util.Locale locale94 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale95 = locale94.stripExtensions();
        java.util.Set<java.lang.String> strSet96 = locale95.getUnicodeLocaleAttributes();
        java.lang.String str97 = dateTimeZone84.getShortName((long) 25799369, locale95);
        long long99 = dateTimeZone84.nextTransition((long) 25919020);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 5L + "'", long87 == 5L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "+00:00" + "'", str97, "+00:00");
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 25919020L + "'", long99 == 25919020L);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = date1.getHours();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.LocalTime localTime6 = localTime4.minusSeconds(2022);
        org.joda.time.LocalTime localTime8 = localTime6.plusSeconds(34841);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) '#', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        int int6 = dateMidnight5.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateMidnight5.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusDays(9);
        int int11 = dateTime8.getEra();
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundCeilingCopy();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.Chronology chronology24 = null;
        mutablePeriod20.setPeriod((long) 0, (long) 12, chronology24);
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime2.secondOfMinute();
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("days");
        java.util.Calendar calendar30 = mutableDateTime2.toCalendar(locale29);
        mutableDateTime2.setWeekOfWeekyear(53);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime2.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) 7);
        int int36 = dateMidnight35.getCenturyOfEra();
        mutableDateTime33.setMillis((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight35.minusYears(604);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.012S");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "days");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=47,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=47,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.LocalTime localTime4 = timeOfDay2.toLocalTime();
        org.joda.time.Period period6 = org.joda.time.Period.hours((int) (byte) -1);
        org.joda.time.LocalTime localTime7 = localTime4.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalTime.Property property8 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime9 = property8.withMinimumValue();
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfDay();
        int int11 = localTime9.getHourOfDay();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        int int37 = mutablePeriod35.getMinutes();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType40);
        long long47 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology24.withZone(dateTimeZone48);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 11, chronology49);
        org.joda.time.DurationField durationField51 = chronology49.days();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (-1), (long) (short) 0, chronology49);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        int int56 = dateMidnight55.getEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = dateMidnight55.toDateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks(0);
        org.joda.time.Interval interval61 = interval52.withStart((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology65);
        org.joda.time.Interval interval67 = yearMonthDay66.toInterval();
        org.joda.time.Period period68 = interval67.toPeriod();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonthDay yearMonthDay73 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology72);
        org.joda.time.Interval interval74 = yearMonthDay73.toInterval();
        org.joda.time.Period period75 = interval74.toPeriod();
        long long76 = interval74.getStartMillis();
        org.joda.time.Interval interval77 = interval67.overlap((org.joda.time.ReadableInterval) interval74);
        boolean boolean78 = interval52.overlaps((org.joda.time.ReadableInterval) interval74);
        long long79 = interval52.getEndMillis();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.YearMonthDay yearMonthDay84 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology83);
        org.joda.time.Interval interval85 = yearMonthDay84.toInterval();
        org.joda.time.Period period86 = interval85.toPeriod();
        boolean boolean88 = interval85.contains((long) 4);
        boolean boolean89 = interval52.overlaps((org.joda.time.ReadableInterval) interval85);
        org.joda.time.Interval interval90 = interval85.toInterval();
        java.lang.String str91 = interval85.toString();
        org.joda.time.DateTime dateTime92 = interval85.getEnd();
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 25755235L + "'", long47 == 25755235L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-61038316800000L) + "'", long76 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z" + "'", str91, "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.DateTimeField dateTimeField8 = property4.getField();
        org.joda.time.DateMidnight dateMidnight10 = property4.addToCopy(1970);
        org.joda.time.DateMidnight dateMidnight11 = property4.roundCeilingCopy();
        int int12 = dateMidnight11.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }
}
